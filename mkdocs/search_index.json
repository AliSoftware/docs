{
    "docs": [
        {
            "location": "/",
            "text": "fastlane\n\n\n\n\n\n\n\n\n\n\nfastlane\n is the easiest way to automate beta deployments and releases for your iOS and Android apps. \ud83d\ude80 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.\n\n\nYou can start by creating a \nFastfile\n file in your repository, here\u2019s one that defines your beta or App Store release process:\n\n\nlane :beta do\n  increment_build_number\n  build_app\n  upload_to_testflight\nend\n\nlane :release do\n  capture_screenshots\n  build_app\n  upload_to_app_store       # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend\n\n\n\n\nYou just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is\n\n\nfastlane release\n\n\n\n\nWhy fastlane?\n\n\n\n\n\n\n\n\n\n\nfastlane\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\nSave \nhours\n every time you push a new release to the store or beta testing service\n\n\n\n\n\n\n\u2728\n\n\nIntegrates with all your existing tools and services (more than 400 integrations)\n\n\n\n\n\n\n\ud83d\udcd6\n\n\n100% open source under the MIT license\n\n\n\n\n\n\n\ud83c\udfa9\n\n\nEasy setup assistant to get started in a few minutes\n\n\n\n\n\n\n\u2692\n\n\nRuns on \nyour\n machine, it's your app and your data\n\n\n\n\n\n\n\ud83d\udc7b\n\n\nIntegrates with all major CI systems\n\n\n\n\n\n\n\ud83d\udda5\n\n\nSupports iOS, Mac, and Android apps\n\n\n\n\n\n\n\ud83d\udd27\n\n\nExtend and customise \nfastlane\n to fit your needs, you're not dependent on anyone\n\n\n\n\n\n\n\ud83d\udcad\n\n\nNever remember any commands any more, just \nfastlane\n\n\n\n\n\n\n\ud83d\udea2\n\n\nDeploy from any computer, including a CI server\n\n\n\n\n\n\n\n\nGetting Started\n\n\nInstalling \nfastlane\n\n\nfastlane\n can be installed multiple ways. The preferred method is with a \nGemfile\n. \nfastlane\n can also get installed directly through RubyGems or with Homebrew (if on macOS).\n\n\nA Gemfile (macOS/Linux/Windows)\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update fastlane\n\n\n\n\nRubyGems (macOS/Linux/Windows)\n\n\nsudo gem install fastlane -NV\n\n\n\n\nHomebrew (macOS)\n\n\nbrew install fastlane\n\n\n\n\nSetting up \nfastlane\n\n\nNavigate to your iOS or Android app and run\n\n\nfastlane init\n\n\n\n\nfastlane\n will automatically detect your project, and ask for any missing information.\n\n\nFor more details about how to get up and running, check out the getting started guides:\n\n\n\n\nfastlane Getting Started guide for iOS\n\n\nfastlane Getting Started guide for Android\n\n\n\n\nQuestions and support\n\n\nBefore submitting a new GitHub issue, please make sure to search for \nexisting GitHub issues\n.\n\n\nIf that doesn't help, please \nsubmit an issue\n on GitHub and provide information about your setup, in particular the output of the \nfastlane env\n command.\n\n\nSystem requirements\n\n\nCurrently, \nfastlane\n is officially supported to run on macOS. \n\n\nBut we are working on \ud83d\udc27 Linux and \ud83d\udda5\ufe0f Windows support for parts of \nfastlane\n. Some underlying software like Xcode or iTunes Transporter is only available for macOS, but many other tools and actions can theoretically also work on other platforms. Please see \nthis Github issue for further information\n.\n\n\nfastlane\n team\n\n\n\n\n\n\n\n\n\n\nHelmut Januschka\n\n\n\n\n\n\n\n\nFelix Krause\n\n\n\n\n\n\n\n\nJ\u00e9r\u00f4me Lacoste\n\n\n\n\n\n\n\n\nJan Piotrowski\n\n\n\n\n\n\n\n\nLuka Mirosevic\n\n\n\n\n\n\n\n\n\n\n\n\nOlivier Halligon\n\n\n\n\n\n\n\n\nJimmy Dee\n\n\n\n\n\n\n\n\nIulian Onofrei\n\n\n\n\n\n\n\n\nDanielle Tomlinson\n\n\n\n\n\n\n\n\nAaron Brager\n\n\n\n\n\n\n\n\n\n\n\n\nKohki Miki\n\n\n\n\n\n\n\n\nStefan Natchev\n\n\n\n\n\n\n\n\nMaksym Grebenets\n\n\n\n\n\n\n\n\nJoshua Liebowitz\n\n\n\n\n\n\n\n\nManu Wallner\n\n\n\n\n\n\n\n\n\n\n\n\nFumiya Nakamura\n\n\n\n\n\n\n\n\nMatthew Ellis\n\n\n\n\n\n\n\n\nJosh Holtz\n\n\n\n\n\n\n\nSpecial thanks to all \ncontributors\n for extending and improving \nfastlane\n.\n\n\nMetrics\n\n\nfastlane\n tracks a few key metrics to understand how developers are using the tool and to help us know what areas need improvement. No personal/sensitive information is ever collected. Metrics that are collected include: \n\n\n\n\nThe number of \nfastlane\n runs\n\n\nA salted hash of the app identifier or package name, which helps us anonymously identify unique usage of \nfastlane\n\n\n\n\nYou can easily opt-out of metrics collection by adding \nopt_out_usage\n at the top of your \nFastfile\n or by setting the environment variable \nFASTLANE_OPT_OUT_USAGE\n. \nCheck out the metrics code on GitHub\n\n\nLicense\n\n\nThis project is licensed under the terms of the MIT license. See the \nLICENSE\n file.\n\n\n\n\nThis project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.\n\n\n\n\n\n\nWhere to go from here?\n\n\n\n\nfastlane Getting Started guide for iOS\n\n\nfastlane Getting Started guide for Android",
            "title": "Home"
        },
        {
            "location": "/#fastlane",
            "text": "fastlane  is the easiest way to automate beta deployments and releases for your iOS and Android apps. \ud83d\ude80 It handles all tedious tasks, like generating screenshots, dealing with code signing, and releasing your application.  You can start by creating a  Fastfile  file in your repository, here\u2019s one that defines your beta or App Store release process:  lane :beta do\n  increment_build_number\n  build_app\n  upload_to_testflight\nend\n\nlane :release do\n  capture_screenshots\n  build_app\n  upload_to_app_store       # Upload the screenshots and the binary to iTunes\n  slack                     # Let your team-mates know the new version is live\nend  You just defined 2 different lanes, one for beta deployment, one for App Store. To release your app in the App Store, all you have to do is  fastlane release",
            "title": "fastlane"
        },
        {
            "location": "/#why-fastlane",
            "text": "fastlane      \ud83d\ude80  Save  hours  every time you push a new release to the store or beta testing service    \u2728  Integrates with all your existing tools and services (more than 400 integrations)    \ud83d\udcd6  100% open source under the MIT license    \ud83c\udfa9  Easy setup assistant to get started in a few minutes    \u2692  Runs on  your  machine, it's your app and your data    \ud83d\udc7b  Integrates with all major CI systems    \ud83d\udda5  Supports iOS, Mac, and Android apps    \ud83d\udd27  Extend and customise  fastlane  to fit your needs, you're not dependent on anyone    \ud83d\udcad  Never remember any commands any more, just  fastlane    \ud83d\udea2  Deploy from any computer, including a CI server",
            "title": "Why fastlane?"
        },
        {
            "location": "/#getting-started",
            "text": "",
            "title": "Getting Started"
        },
        {
            "location": "/#installing-fastlane",
            "text": "fastlane  can be installed multiple ways. The preferred method is with a  Gemfile .  fastlane  can also get installed directly through RubyGems or with Homebrew (if on macOS).",
            "title": "Installing fastlane"
        },
        {
            "location": "/#a-gemfile-macoslinuxwindows",
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Create a  ./Gemfile  in the root directory of your project with the content   source \"https://rubygems.org\"\n\ngem \"fastlane\"   Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update fastlane",
            "title": "A Gemfile (macOS/Linux/Windows)"
        },
        {
            "location": "/#rubygems-macoslinuxwindows",
            "text": "sudo gem install fastlane -NV",
            "title": "RubyGems (macOS/Linux/Windows)"
        },
        {
            "location": "/#homebrew-macos",
            "text": "brew install fastlane",
            "title": "Homebrew (macOS)"
        },
        {
            "location": "/#setting-up-fastlane",
            "text": "Navigate to your iOS or Android app and run  fastlane init  fastlane  will automatically detect your project, and ask for any missing information.  For more details about how to get up and running, check out the getting started guides:   fastlane Getting Started guide for iOS  fastlane Getting Started guide for Android",
            "title": "Setting up fastlane"
        },
        {
            "location": "/#questions-and-support",
            "text": "Before submitting a new GitHub issue, please make sure to search for  existing GitHub issues .  If that doesn't help, please  submit an issue  on GitHub and provide information about your setup, in particular the output of the  fastlane env  command.",
            "title": "Questions and support"
        },
        {
            "location": "/#system-requirements",
            "text": "Currently,  fastlane  is officially supported to run on macOS.   But we are working on \ud83d\udc27 Linux and \ud83d\udda5\ufe0f Windows support for parts of  fastlane . Some underlying software like Xcode or iTunes Transporter is only available for macOS, but many other tools and actions can theoretically also work on other platforms. Please see  this Github issue for further information .",
            "title": "System requirements"
        },
        {
            "location": "/#fastlane-team",
            "text": "",
            "title": "fastlane team"
        },
        {
            "location": "/#metrics",
            "text": "fastlane  tracks a few key metrics to understand how developers are using the tool and to help us know what areas need improvement. No personal/sensitive information is ever collected. Metrics that are collected include:    The number of  fastlane  runs  A salted hash of the app identifier or package name, which helps us anonymously identify unique usage of  fastlane   You can easily opt-out of metrics collection by adding  opt_out_usage  at the top of your  Fastfile  or by setting the environment variable  FASTLANE_OPT_OUT_USAGE .  Check out the metrics code on GitHub",
            "title": "Metrics"
        },
        {
            "location": "/#license",
            "text": "This project is licensed under the terms of the MIT license. See the  LICENSE  file.   This project and all fastlane tools are in no way affiliated with Apple Inc. This project is open source under the MIT license, which means you have full access to the source code and can modify it to fit your own needs. All fastlane tools run on your own computer or server, so your credentials or other sensitive information will never leave your own computer. You are responsible for how you use fastlane tools.",
            "title": "License"
        },
        {
            "location": "/#where-to-go-from-here",
            "text": "fastlane Getting Started guide for iOS  fastlane Getting Started guide for Android",
            "title": "Where to go from here?"
        },
        {
            "location": "/getting-started/ios/setup/",
            "text": "Getting started with \nfastlane\n for iOS\n\n\nSetup Xcode for \nfastlane\n\n\nXcode command line tools (macOS)\n\n\nxcode-select --install\n\n\n\n\nInstalling \nfastlane\n\n\nfastlane\n can be installed multiple ways. The preferred method is with a \nGemfile\n. \nfastlane\n can also get installed directly through RubyGems or with Homebrew (if on macOS).\n\n\nA Gemfile (macOS/Linux/Windows)\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update fastlane\n\n\n\n\nRubyGems (macOS/Linux/Windows)\n\n\nsudo gem install fastlane -NV\n\n\n\n\nHomebrew (macOS)\n\n\nbrew install fastlane\n\n\n\n\nSetting up \nfastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nTo have your \nFastfile\n configuration written in Swift (Beta)\n\n\nfastlane init swift\n\n\n\n\nSwift setup is still in beta. See \nFastlane.swift docs\n for more information.\n\n\nDepending on what kind of setup you choose, different files will be set up for you. If you chose to download the existing app metadata, you'll end up with new folders that look like this:\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nWhat's next?\n\n\nfastlane\n created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds\n\n\n\n\nGenerate localized iOS screenshots for the App Store\n\n\nAutomatic iOS Beta deployment\n\n\nAutomatic iOS App Store deployment\n\n\n\n\nSet up environment variables\n\n\nfastlane\n requires some environment variables set up to run correctly. In particular, having your locale not set to a UTF-8 locale will cause issues with building and uploading your build. In your shell profile add the following lines:\n\n\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nYou can find your shell profile at \n~/.bashrc\n, \n~/.bash_profile\n, \n~/.profile\n or \n~/.zshrc\n depending on your system.\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update fastlane",
            "title": "Setup"
        },
        {
            "location": "/getting-started/ios/setup/#getting-started-with-fastlane-for-ios",
            "text": "",
            "title": "Getting started with fastlane for iOS"
        },
        {
            "location": "/getting-started/ios/setup/#setup-xcode-for-fastlane",
            "text": "",
            "title": "Setup Xcode for fastlane"
        },
        {
            "location": "/getting-started/ios/setup/#xcode-command-line-tools-macos",
            "text": "xcode-select --install",
            "title": "Xcode command line tools (macOS)"
        },
        {
            "location": "/getting-started/ios/setup/#installing-fastlane",
            "text": "fastlane  can be installed multiple ways. The preferred method is with a  Gemfile .  fastlane  can also get installed directly through RubyGems or with Homebrew (if on macOS).",
            "title": "Installing fastlane"
        },
        {
            "location": "/getting-started/ios/setup/#a-gemfile-macoslinuxwindows",
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Create a  ./Gemfile  in the root directory of your project with the content   source \"https://rubygems.org\"\n\ngem \"fastlane\"   Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update fastlane",
            "title": "A Gemfile (macOS/Linux/Windows)"
        },
        {
            "location": "/getting-started/ios/setup/#rubygems-macoslinuxwindows",
            "text": "sudo gem install fastlane -NV",
            "title": "RubyGems (macOS/Linux/Windows)"
        },
        {
            "location": "/getting-started/ios/setup/#homebrew-macos",
            "text": "brew install fastlane",
            "title": "Homebrew (macOS)"
        },
        {
            "location": "/getting-started/ios/setup/#setting-up-fastlane",
            "text": "Navigate your terminal to your project's directory and run  fastlane init  To have your  Fastfile  configuration written in Swift (Beta)  fastlane init swift  Swift setup is still in beta. See  Fastlane.swift docs  for more information.  Depending on what kind of setup you choose, different files will be set up for you. If you chose to download the existing app metadata, you'll end up with new folders that look like this:   The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.",
            "title": "Setting up fastlane"
        },
        {
            "location": "/getting-started/ios/setup/#whats-next",
            "text": "fastlane  created all the required files for you, now you can go ahead and customise it to generate screenshots or to automatically distribute new builds   Generate localized iOS screenshots for the App Store  Automatic iOS Beta deployment  Automatic iOS App Store deployment",
            "title": "What's next?"
        },
        {
            "location": "/getting-started/ios/setup/#set-up-environment-variables",
            "text": "fastlane  requires some environment variables set up to run correctly. In particular, having your locale not set to a UTF-8 locale will cause issues with building and uploading your build. In your shell profile add the following lines:  export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8  You can find your shell profile at  ~/.bashrc ,  ~/.bash_profile ,  ~/.profile  or  ~/.zshrc  depending on your system.",
            "title": "Set up environment variables"
        },
        {
            "location": "/getting-started/ios/setup/#use-a-gemfile",
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Create a  ./Gemfile  in the root directory of your project with the content   source \"https://rubygems.org\"\n\ngem \"fastlane\"   Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update fastlane",
            "title": "Use a Gemfile"
        },
        {
            "location": "/getting-started/ios/running-tests/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nRunning iOS tests using \nfastlane\n\n\nTo run your unit tests or UI tests using fastlane, add the following to your \nFastfile\n\n\nlane :tests do\n  run_tests(scheme: \"MyAppTests\")\nend\n\n\n\n\nAdditionally you can specify more options for building and testing your app, for example\n\n\nlane :tests do\n  run_tests(workspace: \"Example.xcworkspace\",\n            devices: [\"iPhone 6s\", \"iPad Air\"],\n            scheme: \"MyAppTests\")\nend\n\n\n\n\nCheck out the \nlist of all available parameters\n\n\nTo use the newly created lane, just run\n\n\nfastlane tests\n\n\n\n\nSetting up \nfastlane\n to run on CI\n\n\nTo run iOS tests using \nfastlane\n on a Continuous Integration service, check out \nthe Continuous Integration docs\n.\n\n\nSince \nfastlane\n stores all configuration in simple configuration files, and runs via the command line, it supports every kind of CI system.\n\n\nWe also prepared some docs to help you get started with some of the popular CI systems.\n\n\nSelf-Hosted CIs\n\n\n\n\nJenkins\n\n\nBamboo\n\n\nGitLab\n\n\n\n\nHosted CIs\n\n\n\n\nCircle\n\n\nTravis\n\n\nVisual Studio\n\n\n\n\nIf your CI system isn't listed here, no problem, \nfastlane\n runs on any CI. To trigger \nfastlane\n, just add the command you would usually run from your terminal:\n\n\nfastlane tests\n\n\n\n\nSetting up the environment\n\n\n\n\nSupport for Two-step or Two-factor auth\n\n\nEnvironment variables to set\n\n\n\n\nPosting build results\n\n\nIf you want to post test results on Slack, Hipchat or other team chat client, check out the available \nfastlane actions\n.\n\n\nBuild failures\n\n\nSlack\n\n\nIf you're using Slack, this is already built-into the default \nrun_tests\n action, just provide your Slack URL:\n\n\nlane :tests do\n  run_tests(scheme: \"MyAppTests\",\n            slack_url: \"https://hooks.slack.com/services/T03N...\",\n            slack_channel: \"#channel\")\nend\n\n\n\n\nTo get the \nslack_url\n, create an \nIncoming WebHook\n for your Slack group.\n\n\nOther services\n\n\nTo post a message when \nfastlane\n encounters a test or build failure, add the following to your \nFastfile\n:\n\n\nerror do |ex|\n  hipchat(message: \"Tests have failed!\",\n          channel: \"Room or @username\",\n          success: false)\nend\n\n\n\n\nThe above example uses Hipchat, but \nfastlane\n supports \nmany other services out there\n.",
            "title": "Running Tests"
        },
        {
            "location": "/getting-started/ios/running-tests/#running-ios-tests-using-fastlane",
            "text": "To run your unit tests or UI tests using fastlane, add the following to your  Fastfile  lane :tests do\n  run_tests(scheme: \"MyAppTests\")\nend  Additionally you can specify more options for building and testing your app, for example  lane :tests do\n  run_tests(workspace: \"Example.xcworkspace\",\n            devices: [\"iPhone 6s\", \"iPad Air\"],\n            scheme: \"MyAppTests\")\nend  Check out the  list of all available parameters  To use the newly created lane, just run  fastlane tests",
            "title": "Running iOS tests using fastlane"
        },
        {
            "location": "/getting-started/ios/running-tests/#setting-up-fastlane-to-run-on-ci",
            "text": "To run iOS tests using  fastlane  on a Continuous Integration service, check out  the Continuous Integration docs .  Since  fastlane  stores all configuration in simple configuration files, and runs via the command line, it supports every kind of CI system.  We also prepared some docs to help you get started with some of the popular CI systems.  Self-Hosted CIs   Jenkins  Bamboo  GitLab   Hosted CIs   Circle  Travis  Visual Studio   If your CI system isn't listed here, no problem,  fastlane  runs on any CI. To trigger  fastlane , just add the command you would usually run from your terminal:  fastlane tests",
            "title": "Setting up fastlane to run on CI"
        },
        {
            "location": "/getting-started/ios/running-tests/#setting-up-the-environment",
            "text": "Support for Two-step or Two-factor auth  Environment variables to set",
            "title": "Setting up the environment"
        },
        {
            "location": "/getting-started/ios/running-tests/#posting-build-results",
            "text": "If you want to post test results on Slack, Hipchat or other team chat client, check out the available  fastlane actions .",
            "title": "Posting build results"
        },
        {
            "location": "/getting-started/ios/running-tests/#build-failures",
            "text": "",
            "title": "Build failures"
        },
        {
            "location": "/getting-started/ios/running-tests/#slack",
            "text": "If you're using Slack, this is already built-into the default  run_tests  action, just provide your Slack URL:  lane :tests do\n  run_tests(scheme: \"MyAppTests\",\n            slack_url: \"https://hooks.slack.com/services/T03N...\",\n            slack_channel: \"#channel\")\nend  To get the  slack_url , create an  Incoming WebHook  for your Slack group.",
            "title": "Slack"
        },
        {
            "location": "/getting-started/ios/running-tests/#other-services",
            "text": "To post a message when  fastlane  encounters a test or build failure, add the following to your  Fastfile :  error do |ex|\n  hipchat(message: \"Tests have failed!\",\n          channel: \"Room or @username\",\n          success: false)\nend  The above example uses Hipchat, but  fastlane  supports  many other services out there .",
            "title": "Other services"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/",
            "text": "Getting Started with Fastlane.swift (beta)\n\n\nWelcome to Fastlane.swift. Fastlane.swift allows you to write your \nfastlane\n configuration using Xcode, in Swift - the language you have come to know and love from the world of iOS development.\n\n\nFastlane.swift is currently in beta. Please provide feedback by opening an issue in the \nfastlane\n repo\n.\n\n\nCurrently Supported\n\n\nFastlane.swift currently supports all built-in \nfastlane actions\n. Make sure to update to the most recent \nfastlane\n release to try this feature.\n\n\nGet Started\n\n\nStep 1\n\n\nRun the following command in your terminal:\n\n\nfastlane init swift\n\n\n\n\nStep 2\n\n\nOpen the file located at \n[project]/fastlane/swift/FastlaneRunner/FastlaneRunner.xcodeproj\n to configure your lanes in \nFastfile.swift\n.\n\n\nfunc betaLane() {\n    desc(\"Submit a new Beta Build to Apple TestFlight. This will also make sure the profile is up to date\")\n\n    syncCodeSigning(gitUrl: \"URL/for/your/git/repo\", appIdentifier: [appIdentifier], username: appleID)\n    // Build your app - more options available\n    buildIosApp(scheme: \"SchemeName\")\n    uploadToTestflight(username: appleID)\n    // You can also use other beta testing services here (run `fastlane actions`)\n}\n\n\n\n\nStep 3\n\n\nRun \nfastlane <laneName>\n in your terminal to execute \nfastlane\n.\n\n\nStep 4\n\n\n\ud83c\udf89\n\n\nDefining Lanes\n\n\nLanes are defined with functions that end with \nLane\n within the \nclass Fastfile: LaneFile\n.\n\n\nclass Fastfile: LaneFile {\n    func testLane() {\n        desc(\"This is a lane\")\n    }\n\n    func helper() {\n        // This is not a lane but can be called from a lane\n    }\n}\n\n\n\n\nPassing Parameters\n\n\nTo pass parameters from the command line to your lane, use the following syntax:\n\n\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n\n\n\n\nTo access those values, change your lane declaration to also include \nwithOptions options:[String: String]?\n\n\nclass Fastfile: LaneFile {\n    func deployLane(withOptions options:[String: String]?) {\n        // ...\n        if let submit = options?[\"submit\"], submit == \"true\" {\n            // Only when submit is true\n        }\n        // ...\n        incrementBuildNumber(buildNumber: options?[\"build_number\"])\n        // ...\n    }\n}\n\n\n\n\nRun Parallel\n\n\nFastlane Swift\n uses socket internally. Therefore, for several \nLane\ns to run in parallel at the same time, each \nLane\n must be specified different \nsocket port\n (lane's default \nsocket port\n is \n2000\n)\n\n\nTo specify \nsocket port\n from the command line to your lane, use the following syntax:\n\n\nfastlane [lane] --swift_server_port [socket port]\n\n\n\n\nKnown Limitations\n\n\nCurrently, Fastlane.swift does not have support for plugins. This is a work in progress and we will continue to update this doc with the current working condition of each feature as we move from beta to general availability.\n\n\nWe Would Love Your Feedback\n\n\nPlease feel free to \nopen an issue on GitHub\n to report any problems you are having with Fastlane.swift and we will respond as quickly as possible.",
            "title": "_Swift"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#getting-started-with-fastlaneswift-beta",
            "text": "Welcome to Fastlane.swift. Fastlane.swift allows you to write your  fastlane  configuration using Xcode, in Swift - the language you have come to know and love from the world of iOS development.  Fastlane.swift is currently in beta. Please provide feedback by opening an issue in the  fastlane  repo .",
            "title": "Getting Started with Fastlane.swift (beta)"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#currently-supported",
            "text": "Fastlane.swift currently supports all built-in  fastlane actions . Make sure to update to the most recent  fastlane  release to try this feature.",
            "title": "Currently Supported"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#get-started",
            "text": "",
            "title": "Get Started"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#step-1",
            "text": "Run the following command in your terminal:  fastlane init swift",
            "title": "Step 1"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#step-2",
            "text": "Open the file located at  [project]/fastlane/swift/FastlaneRunner/FastlaneRunner.xcodeproj  to configure your lanes in  Fastfile.swift .  func betaLane() {\n    desc(\"Submit a new Beta Build to Apple TestFlight. This will also make sure the profile is up to date\")\n\n    syncCodeSigning(gitUrl: \"URL/for/your/git/repo\", appIdentifier: [appIdentifier], username: appleID)\n    // Build your app - more options available\n    buildIosApp(scheme: \"SchemeName\")\n    uploadToTestflight(username: appleID)\n    // You can also use other beta testing services here (run `fastlane actions`)\n}",
            "title": "Step 2"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#step-3",
            "text": "Run  fastlane <laneName>  in your terminal to execute  fastlane .",
            "title": "Step 3"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#step-4",
            "text": "\ud83c\udf89",
            "title": "Step 4"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#defining-lanes",
            "text": "Lanes are defined with functions that end with  Lane  within the  class Fastfile: LaneFile .  class Fastfile: LaneFile {\n    func testLane() {\n        desc(\"This is a lane\")\n    }\n\n    func helper() {\n        // This is not a lane but can be called from a lane\n    }\n}",
            "title": "Defining Lanes"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#passing-parameters",
            "text": "To pass parameters from the command line to your lane, use the following syntax:  fastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24  To access those values, change your lane declaration to also include  withOptions options:[String: String]?  class Fastfile: LaneFile {\n    func deployLane(withOptions options:[String: String]?) {\n        // ...\n        if let submit = options?[\"submit\"], submit == \"true\" {\n            // Only when submit is true\n        }\n        // ...\n        incrementBuildNumber(buildNumber: options?[\"build_number\"])\n        // ...\n    }\n}",
            "title": "Passing Parameters"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#run-parallel",
            "text": "Fastlane Swift  uses socket internally. Therefore, for several  Lane s to run in parallel at the same time, each  Lane  must be specified different  socket port  (lane's default  socket port  is  2000 )  To specify  socket port  from the command line to your lane, use the following syntax:  fastlane [lane] --swift_server_port [socket port]",
            "title": "Run Parallel"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#known-limitations",
            "text": "Currently, Fastlane.swift does not have support for plugins. This is a work in progress and we will continue to update this doc with the current working condition of each feature as we move from beta to general availability.",
            "title": "Known Limitations"
        },
        {
            "location": "/getting-started/ios/fastlane-swift/#we-would-love-your-feedback",
            "text": "Please feel free to  open an issue on GitHub  to report any problems you are having with Fastlane.swift and we will respond as quickly as possible.",
            "title": "We Would Love Your Feedback"
        },
        {
            "location": "/getting-started/ios/screenshots/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nfastlane\n screenshots for iOS and tvOS\n\n\nYour App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in the App Store inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nHave you made sure that no loading indicators are showing?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process making it fast, and consistent while giving you beautiful results!\n\n\nAlternatives\n\n\nFor the full story about the many ways that developers can capture and beautify screenshots check out \nthis article\n.\n\n\nManually Capturing Screenshots\n\n\nManually taking screenshots takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshot with content in a language you don't know? It won't convince you to download the app.\n\n\nHowever, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.\n\n\nThe positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.\n\n\nScaled Screenshots via App Store Connect\n\n\nApp Store Connect allows you to use one set of screenshots per device type, which will then be scaled to the appropriate size when viewed in the App Store on a user's device.\n\n\nWhile this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.\n\n\nCapture Screenshots Automatically\n\n\nsnapshot\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on all simulators\n\n\nTake screenshots in multiple device simulators concurrently to cut down execution time\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGenerate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q&A, marketing, or translators for verification\n\n\nAvoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nsnapshot\n successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:\n\n\n\n  \n\n\n\n\nGetting Started Using UI Tests\n\n\nsnapshot\n uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nTo jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this \nthis blog post\n!\n\n\nSetting Up \nsnapshot\n\n\n\n\nCreate a new UI Test target in your Xcode project (See the top part of \nthis article\n)\n\n\nRun \nfastlane snapshot init\n in your project folder\n\n\nAdd the \n./SnapshotHelper.swift\n file to your UI Test target (You can move the file anywhere you want)\n\n\nAdd a new Xcode scheme for the newly created UI Test target\n\n\nEdit the scheme\n\n\nIn the list on the left click \"Build\", and enable the checkbox under the \"Run\" column for your target. \n\n\nEnable the \nShared\n box of the newly created scheme\n\n\n(Objective C only) Add the bridging header to your test class.\n\n\n#import \"MYUITests-Swift.h\"\n\n\nThe bridging header is named after your test target with -Swift.h appended.\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a screenshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nSwift:\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C:\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];\n\n\n\n\n12.\n In the terminal run \nfastlane snapshot\n.\n\nWARNING: Running the test in Xcode does not create the snapshots and will not generate the correct results - although no tests will fail.  The command line program creates the necessary subdirectories, renames the files as appropriate, and generates the overview html page.\n\n\nThe setup process will also generate a \nSnapfile\n, looking similar to\n\n\n# A list of devices you want to take the screenshots from\n# devices([\n#  \"iPad (7th generation)\",\n#  \"iPad Air (3rd generation)\",\n#  \"iPad Pro (11-inch)\",\n#  \"iPad Pro (12.9-inch) (3rd generation)\",\n#  \"iPad Pro (9.7-inch)\",\n#  \"iPhone 11\",\n#  \"iPhone 11 Pro\",\n#  \"iPhone 11 Pro Max\",\n#  \"iPhone 8\",\n#  \"iPhone 8 Plus\"\n# ])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\"\n])\n\n# The name of the scheme which contains the UI Tests\n# scheme \"SchemeName\"\n\n# Where should the resulting screenshots be stored?\n# output_directory \"./screenshots\"\n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project \"./Project.xcodeproj\"\n# workspace \"./Project.xcworkspace\"\n\n# For more information about all available options run\n# fastlane action snapshot\n\n\n\n\nYou can adapt this file to fit your project. Every time you run \nfastlane snapshot\n the file will be loaded automatically.\n\n\nFor a list of all available parameters that can be used in the \nSnapfile\n run \nfastlane action snapshot\n.\n\n\nIf you have \nfastlane\n installed, it's easy to give \nsnapshot\n a try. First clone the \nfastlane\n repo, head over to the \nsnapshot\n example project, and then run \nfastlane snapshot\n\n\ngit clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app\n\n\n\n\n\n\nUpload Screenshots to the App Store\n\n\nAfter generating your screenshots using \nfastlane snapshot\n, you usually want to upload them to App Store Connect.\n\n\nIf you followed the setup guide, you already ran \nfastlane init\n before, so you should have your existing screenshots and metadata inside the \nfastlane/screenshots\n and \nfastlane/metadata\n directory. Running \nfastlane snapshot\n will store the screenshots in the \nfastlane/screenshots\n directory by default. \n\n\nTo upload the screenshots stored in \nfastlane/screenshots\n, just run\n\n\nfastlane deliver\n\n\n\n\nThis will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on App Store Connect. \n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nsnapshot\n to automatically capture your screenshots\n\n\nHaving \ndeliver\n send your final screenshots to App Store Connect for use in the App Store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  capture_screenshots\n  upload_to_app_store\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action capture_screenshots\nfastlane action upload_to_app_store\n\n\n\n\nPut Your Screenshots Into Device Frames\n\n\nframeit\n helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:\n\n\n\n\nMultiple device types\n\n\nPortrait and landscape orientations\n\n\nBlack and silver devices\n\n\nSetting a background color and decorating the image with text\n\n\n\n\n\n  \n\n\n\n\nUsage\n\n\nAutomatically add device frames around all screenshots in the current directory and its subdirectories, just run\n\n\nfastlane frameit\n\n\n\n\nThis will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.\n\n\nIf you want to implement the custom titles and background, you'll have to setup a \nFramefile.json\n, more information can be found \nhere\n.\n\n\nIf you want to upload the screenshots to the App Store, you \nhave\n to provide a \nFramefile.json\n, with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of App Store Connect.\n\n\nDependencies\n\n\n\n\nInstalling ImageMagick\n\n\nframeit\n depends on a tool called \nimagemagick\n to do image manipulation. The easiest way to install it is through \nhomebrew\n:\n\n\nbrew install libpng jpeg imagemagick\n\n\n\n\n\n\n\n\nTroubleshooting ImageMagick\n\n\nIf you have installed \nimagemagick\n but are seeing error messages like:\n\n\nmogrify: no decode delegate for this image format `PNG'\n\n\n\n\nYou may need to reinstall and build from source. Run:\n\n\nbrew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source\n\n\n\n\n\n\n\n\nSetting Up Device Frames\n\n\nTo download the latest device frames, you can run\n\n\nfastlane frameit setup\n\n\n\n\nThis usually happens automatically when you use \nframeit\n for the first time on a new machine\n\n\n\n\nTo add the framing to your deployment process, use the following code in your \nFastfile\n:\n\n\nlane :screenshots do\n  capture_screenshots\n  frame_screenshots(white: true)\n  upload_to_app_store\nend\n\n\n\n\nTo get a list of all available options for \nframe_screenshots\n (which calls into \nframeit\n)\n\n\nfastlane action frame_screenshots\n\n\n\n\nAdvanced \nsnapshot\n\n\n \n\nSample uses\n\n\nlane :screenshots do\n  capture_screenshots\nend\n\n\n\n\nYour screenshots will be stored in the \n./screenshots/\n folder by default (or \n./fastlane/screenshots\n if you're using \nfastlane\n)\n\n\nIf any error occurs while running the snapshot script on a device, that device will not have any screenshots, and \nsnapshot\n will continue with the next device or language. To stop the flow after the first error, run\n\n\ncapture_screenshots(stop_after_first_error: true)\n\n\n\n\nAlso by default, \nsnapshot\n will open the HTML after all is done. This can be skipped with the following command\n\n\ncapture_screenshots(skip_open_summary: true)\n\n\n\n\nThere are a lot of options available that define how to build your app, for example\n\n\ncapture_screenshots(scheme: \"UITests\", configuration: \"Release\", sdk: \"iphonesimulator\")\n\n\n\n\nReinstall the app before running \nsnapshot\n\n\ncapture_screenshots(reinstall_app: true, app_identifier: \"tools.fastlane.app\")\n\n\n\n\nBy default \nsnapshot\n automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g. \n#372\n). You can adapt this number using\n\n\ncapture_screenshots(number_of_retries: 3)\n\n\n\n\nAdd photos and/or videos to the simulator before running \nsnapshot\n\n\ncapture_screenshots(add_photos: \"MyTestApp/demo.jpg\", add_videos: \"MyTestApp/demo.mp4\")\n\n\n\n\nFor a list for all available options run\n\n\nfastlane action capture_screenshots\n\n\n\n\n\n\n\n\nReset Xcode simulators\n\n\nYou can run this command in the terminal to delete and re-create all iOS simulators. This is useful when Xcode duplicated your local simulators.\n\n\nfastlane snapshot reset_simulators\n\n\n\n\n\n\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your app on launch. These strings will be available in your app (eg. not in the testing target) through \nNSProcessInfo.processInfo().arguments\n. Alternatively, use user-default syntax (\n-key value\n) and they will be available as key-value pairs in \nNSUserDefaults.standardUserDefaults()\n.\n\n\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n\n\n\n\nname.text = NSUserDefaults.standardUserDefaults().stringForKey(\"firstName\")\n// name.text = \"Felix\"\n\n\n\n\nsnapshot\n includes \n-FASTLANE_SNAPSHOT YES\n, which will set a temporary user default for the key \nFASTLANE_SNAPSHOT\n, you may use this to detect when the app is run by \nsnapshot\n.\n\n\nif NSUserDefaults.standardUserDefaults().boolForKey(\"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n\n\n\n\nSpecify multiple argument strings and \nsnapshot\n will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.\n\n\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n\n\n\n\n\n\n\n\nUpdate snapshot helpers\n\n\nSome updates require the helper files to be updated. \nsnapshot\n will automatically warn you and tell you how to update.\n\n\nBasically you can run\n\n\nfastlane snapshot update\n\n\n\n\nto update your \nSnapshotHelper.swift\n files. In case you modified your \nSnapshotHelper.swift\n and want to manually update the file, check out \nSnapshotHelper.swift\n.\n\n\n\n\n\n\nClean status bar\n\n\nTo clean the status bar (9:41, full battery and full signal), use \nSimulatorStatusMagic\n.\n\n\n\n\n\n\nHow does \nsnapshot\n work?\n\n\nThe easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So \nsnapshot\n uses a different approach:\n\n\nWhen you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests (\nMore Information\n). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which \nsnapshot\n stores in a temporary folder.\n\n\nWhen the user calls \nsnapshot(...)\n in the UI Tests (Swift or Objective C) the script actually does a rotation to \n.Unknown\n which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find \nsome\n event that a user would never trigger, so that we know it's from \nsnapshot\n. On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).\n\n\nsnapshot\n then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once \nsnapshot\n has all events triggered by \nsnapshot\n it collects a ordered list of all the file names of the actual screenshots of the application.\n\n\nIn the test output, the Swift \nsnapshot\n function will print out something like this\n\n\n\n\nsnapshot: [some random text here]\n\n\n\n\nsnapshot\n finds all these entries using a regex. The number of \nsnapshot\n outputs in the terminal and the number of \nsnapshot\n events in the plist file should be the same. Knowing that, \nsnapshot\n automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.\n\n\nTwo things have to be passed on from \nsnapshot\n to the \nxcodebuild\n command line tool:\n\n\n\n\nThe device type is passed via the \ndestination\n parameter of the \nxcodebuild\n parameter\n\n\nThe language is passed via a temporary file which is written by \nsnapshot\n before running the tests and read by the UI Tests when launching the application\n\n\n\n\nIf you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:\n\n\nAlso, feel free to duplicate radar \n23062925\n.",
            "title": "Screenshots"
        },
        {
            "location": "/getting-started/ios/screenshots/#fastlane-screenshots-for-ios-and-tvos",
            "text": "Your App Store screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in the App Store inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Have you made sure that no loading indicators are showing?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process making it fast, and consistent while giving you beautiful results!",
            "title": "fastlane screenshots for iOS and tvOS"
        },
        {
            "location": "/getting-started/ios/screenshots/#alternatives",
            "text": "For the full story about the many ways that developers can capture and beautify screenshots check out  this article .",
            "title": "Alternatives"
        },
        {
            "location": "/getting-started/ios/screenshots/#manually-capturing-screenshots",
            "text": "Manually taking screenshots takes too much time, which also decreases the quality of the screenshots. Since it is not automated, the screenshots will show slightly different content on the various devices and languages. Many companies choose to create screenshots in one language and use them for all languages. While this might seem okay to us developers, there are many potential users out there that cannot read the text on your app screenshots if they are not localised. Have you ever looked at a screenshot with content in a language you don't know? It won't convince you to download the app.  However, the biggest disadvantage of this method is what happens when you need to repeat the process. If you notice a spelling mistake in the screenshots, if you release an update with a new design, or if you just want to show more up to date content, you'll have to create new screenshots for all languages and devices... manually.  The positive side of this approach is that your screenshots will all be crisp and correctly sized, with readable text.",
            "title": "Manually Capturing Screenshots"
        },
        {
            "location": "/getting-started/ios/screenshots/#scaled-screenshots-via-app-store-connect",
            "text": "App Store Connect allows you to use one set of screenshots per device type, which will then be scaled to the appropriate size when viewed in the App Store on a user's device.  While this is convenient, this approach has the same problems as the device frame approach: The screenshots don't actually show how the app looks on the user's device. It's a valid way to start though, since you can gradually overwrite screenshots for specific languages and devices.",
            "title": "Scaled Screenshots via App Store Connect"
        },
        {
            "location": "/getting-started/ios/screenshots/#capture-screenshots-automatically",
            "text": "snapshot  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on all simulators  Take screenshots in multiple device simulators concurrently to cut down execution time  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Generate a beautiful web page showing all screenshots on all devices. This is perfect to send to Q&A, marketing, or translators for verification  Avoid having loading indicators in your App Store screenshots by intelligently waiting for network requests to be finished  Get a summary of how your app looks like across all supported devices and languages   After  snapshot  successfully captures all the screenshots, it will show you a beautiful HTML page to summarize all the screens that were captured:",
            "title": "Capture Screenshots Automatically"
        },
        {
            "location": "/getting-started/ios/screenshots/#getting-started-using-ui-tests",
            "text": "snapshot  uses the capabilities of Apple's UI Tests to drive interactions with your app. To get familiar with writing UI Tests, check out the following introductions:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit   To jump-start your UI tests, you can use the UI Test recorder, which you can start by clicking the red record button on the bottom of the window. By interacting with your app through the simulator while using it, Xcode will generate UI Test code for you. To learn more, check out this  this blog post !",
            "title": "Getting Started Using UI Tests"
        },
        {
            "location": "/getting-started/ios/screenshots/#setting-up-snapshot",
            "text": "Create a new UI Test target in your Xcode project (See the top part of  this article )  Run  fastlane snapshot init  in your project folder  Add the  ./SnapshotHelper.swift  file to your UI Test target (You can move the file anywhere you want)  Add a new Xcode scheme for the newly created UI Test target  Edit the scheme  In the list on the left click \"Build\", and enable the checkbox under the \"Run\" column for your target.   Enable the  Shared  box of the newly created scheme  (Objective C only) Add the bridging header to your test class.  #import \"MYUITests-Swift.h\"  The bridging header is named after your test target with -Swift.h appended.    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a screenshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];    Add the following code to your  setUp()  method:   Swift:  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C:  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app];\n[app launch];  12.  In the terminal run  fastlane snapshot . \nWARNING: Running the test in Xcode does not create the snapshots and will not generate the correct results - although no tests will fail.  The command line program creates the necessary subdirectories, renames the files as appropriate, and generates the overview html page.  The setup process will also generate a  Snapfile , looking similar to  # A list of devices you want to take the screenshots from\n# devices([\n#  \"iPad (7th generation)\",\n#  \"iPad Air (3rd generation)\",\n#  \"iPad Pro (11-inch)\",\n#  \"iPad Pro (12.9-inch) (3rd generation)\",\n#  \"iPad Pro (9.7-inch)\",\n#  \"iPhone 11\",\n#  \"iPhone 11 Pro\",\n#  \"iPhone 11 Pro Max\",\n#  \"iPhone 8\",\n#  \"iPhone 8 Plus\"\n# ])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\"\n])\n\n# The name of the scheme which contains the UI Tests\n# scheme \"SchemeName\"\n\n# Where should the resulting screenshots be stored?\n# output_directory \"./screenshots\"\n\n# clear_previous_screenshots true # remove the '#' to clear all previously generated screenshots before creating new ones\n\n# Choose which project/workspace to use\n# project \"./Project.xcodeproj\"\n# workspace \"./Project.xcworkspace\"\n\n# For more information about all available options run\n# fastlane action snapshot  You can adapt this file to fit your project. Every time you run  fastlane snapshot  the file will be loaded automatically.  For a list of all available parameters that can be used in the  Snapfile  run  fastlane action snapshot .  If you have  fastlane  installed, it's easy to give  snapshot  a try. First clone the  fastlane  repo, head over to the  snapshot  example project, and then run  fastlane snapshot  git clone https://github.com/fastlane/fastlane  # Clone the fastlane repo\ncd fastlane/snapshot/example                    # Navigate to the example project\nfastlane snapshot                               # Generate screenshots for the sample app",
            "title": "Setting Up snapshot"
        },
        {
            "location": "/getting-started/ios/screenshots/#upload-screenshots-to-the-app-store",
            "text": "After generating your screenshots using  fastlane snapshot , you usually want to upload them to App Store Connect.  If you followed the setup guide, you already ran  fastlane init  before, so you should have your existing screenshots and metadata inside the  fastlane/screenshots  and  fastlane/metadata  directory. Running  fastlane snapshot  will store the screenshots in the  fastlane/screenshots  directory by default.   To upload the screenshots stored in  fastlane/screenshots , just run  fastlane deliver  This will also show you a metadata summary, before actually uploading the screenshots, as this will overwrite the metadata and screenshots you already have on App Store Connect.",
            "title": "Upload Screenshots to the App Store"
        },
        {
            "location": "/getting-started/ios/screenshots/#use-in-fastfile",
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  snapshot  to automatically capture your screenshots  Having  deliver  send your final screenshots to App Store Connect for use in the App Store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  capture_screenshots\n  upload_to_app_store\nend  To get a list of all available options for each of the steps, run  fastlane action capture_screenshots\nfastlane action upload_to_app_store",
            "title": "Use in Fastfile"
        },
        {
            "location": "/getting-started/ios/screenshots/#put-your-screenshots-into-device-frames",
            "text": "frameit  helps you beautify your screenshots with devices frames and text by running one simple command. It provides support for:   Multiple device types  Portrait and landscape orientations  Black and silver devices  Setting a background color and decorating the image with text",
            "title": "Put Your Screenshots Into Device Frames"
        },
        {
            "location": "/getting-started/ios/screenshots/#usage",
            "text": "Automatically add device frames around all screenshots in the current directory and its subdirectories, just run  fastlane frameit  This will only add a device frame around the screenshots, not the background and title. Those images can be used for your website, email newsletter and similar.  If you want to implement the custom titles and background, you'll have to setup a  Framefile.json , more information can be found  here .  If you want to upload the screenshots to the App Store, you  have  to provide a  Framefile.json , with titles and background, otherwise the resolution of the framed screenshots doesn't match the requirements of App Store Connect.",
            "title": "Usage"
        },
        {
            "location": "/getting-started/ios/screenshots/#dependencies",
            "text": "Installing ImageMagick  frameit  depends on a tool called  imagemagick  to do image manipulation. The easiest way to install it is through  homebrew :  brew install libpng jpeg imagemagick    Troubleshooting ImageMagick  If you have installed  imagemagick  but are seeing error messages like:  mogrify: no decode delegate for this image format `PNG'  You may need to reinstall and build from source. Run:  brew uninstall imagemagick; brew install libpng jpeg; brew install imagemagick --build-from-source    Setting Up Device Frames  To download the latest device frames, you can run  fastlane frameit setup  This usually happens automatically when you use  frameit  for the first time on a new machine   To add the framing to your deployment process, use the following code in your  Fastfile :  lane :screenshots do\n  capture_screenshots\n  frame_screenshots(white: true)\n  upload_to_app_store\nend  To get a list of all available options for  frame_screenshots  (which calls into  frameit )  fastlane action frame_screenshots",
            "title": "Dependencies"
        },
        {
            "location": "/getting-started/ios/screenshots/#advanced-snapshot",
            "text": "Sample uses  lane :screenshots do\n  capture_screenshots\nend  Your screenshots will be stored in the  ./screenshots/  folder by default (or  ./fastlane/screenshots  if you're using  fastlane )  If any error occurs while running the snapshot script on a device, that device will not have any screenshots, and  snapshot  will continue with the next device or language. To stop the flow after the first error, run  capture_screenshots(stop_after_first_error: true)  Also by default,  snapshot  will open the HTML after all is done. This can be skipped with the following command  capture_screenshots(skip_open_summary: true)  There are a lot of options available that define how to build your app, for example  capture_screenshots(scheme: \"UITests\", configuration: \"Release\", sdk: \"iphonesimulator\")  Reinstall the app before running  snapshot  capture_screenshots(reinstall_app: true, app_identifier: \"tools.fastlane.app\")  By default  snapshot  automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g.  #372 ). You can adapt this number using  capture_screenshots(number_of_retries: 3)  Add photos and/or videos to the simulator before running  snapshot  capture_screenshots(add_photos: \"MyTestApp/demo.jpg\", add_videos: \"MyTestApp/demo.mp4\")  For a list for all available options run  fastlane action capture_screenshots    Reset Xcode simulators  You can run this command in the terminal to delete and re-create all iOS simulators. This is useful when Xcode duplicated your local simulators.  fastlane snapshot reset_simulators    Launch Arguments  You can provide additional arguments to your app on launch. These strings will be available in your app (eg. not in the testing target) through  NSProcessInfo.processInfo().arguments . Alternatively, use user-default syntax ( -key value ) and they will be available as key-value pairs in  NSUserDefaults.standardUserDefaults() .  launch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])  name.text = NSUserDefaults.standardUserDefaults().stringForKey(\"firstName\")\n// name.text = \"Felix\"  snapshot  includes  -FASTLANE_SNAPSHOT YES , which will set a temporary user default for the key  FASTLANE_SNAPSHOT , you may use this to detect when the app is run by  snapshot .  if NSUserDefaults.standardUserDefaults().boolForKey(\"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}  Specify multiple argument strings and  snapshot  will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.  # Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])    Update snapshot helpers  Some updates require the helper files to be updated.  snapshot  will automatically warn you and tell you how to update.  Basically you can run  fastlane snapshot update  to update your  SnapshotHelper.swift  files. In case you modified your  SnapshotHelper.swift  and want to manually update the file, check out  SnapshotHelper.swift .    Clean status bar  To clean the status bar (9:41, full battery and full signal), use  SimulatorStatusMagic .    How does  snapshot  work?  The easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So  snapshot  uses a different approach:  When you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests ( More Information ). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which  snapshot  stores in a temporary folder.  When the user calls  snapshot(...)  in the UI Tests (Swift or Objective C) the script actually does a rotation to  .Unknown  which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find  some  event that a user would never trigger, so that we know it's from  snapshot . On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).  snapshot  then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once  snapshot  has all events triggered by  snapshot  it collects a ordered list of all the file names of the actual screenshots of the application.  In the test output, the Swift  snapshot  function will print out something like this   snapshot: [some random text here]   snapshot  finds all these entries using a regex. The number of  snapshot  outputs in the terminal and the number of  snapshot  events in the plist file should be the same. Knowing that,  snapshot  automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.  Two things have to be passed on from  snapshot  to the  xcodebuild  command line tool:   The device type is passed via the  destination  parameter of the  xcodebuild  parameter  The language is passed via a temporary file which is written by  snapshot  before running the tests and read by the UI Tests when launching the application   If you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:  Also, feel free to duplicate radar  23062925 .",
            "title": "Advanced snapshot"
        },
        {
            "location": "/getting-started/ios/beta-deployment/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\niOS Beta deployment using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using an action called \nbuild_app\n, just add the following to your \nFastfile\n:\n\n\nlane :beta do\n  build_app(scheme: \"MyApp\")\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :beta do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane beta\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \nbuild_app\n, run \nfastlane action build_app\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.\n\n\nAll you have to do is to put the name of the beta testing provider of your choice after building the app using \nbuild_app\n:\n\n\nlane :beta do\n  sync_code_signing(type: \"appstore\")    # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_testflight\n  slack(message: \"Successfully distributed a new beta build\")\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated \n.ipa\n file from \nbuild_app\n to the beta testing provider of your choice.\n\n\nTo get a list of all available parameters for a given action, run\n\n\nfastlane action slack\n\n\n\n\nBeta testing services\n\n\n\n\nTestFlight\n\n\nYou can easily upload new builds to TestFlight (which is part of App Store Connect) using \nfastlane\n. To do so, just use the built-in \ntestflight\n action after building your app\n\n\nlane :beta do\n  # ...\n  build_app\n  upload_to_testflight\nend\n\n\n\n\nSome example use cases\n\n\nlane :beta do\n  # ...\n  build_app\n\n  # Variant 1: Provide a changelog to your build\n  upload_to_testflight(changelog: \"Add rocket emoji\")\n\n  # Variant 2: Skip the \"Waiting for processing\" of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  upload_to_testflight(skip_waiting_for_build_processing: true)\nend\n\n\n\n\nIf you used \nfastlane init\n to setup \nfastlane\n, your Apple ID is stored in the \nfastlane/Appfile\n. You can also overwrite the username, using \nupload_to_testflight(username: \"bot@fastlane.tools\")\n.\n\n\nTo get a list of all available options, run\n\n\nfastlane action upload_to_testflight\n\n\n\n\nWith \nfastlane\n, you can also automatically manage your beta testers, check out the other actions available.\n\n\n\n\n\n\n\n\nFirebase App Distribution\n\n\nInstall the Firebase App Distribution plugin:\n\n\nfastlane add_plugin firebase_app_distribution\n\n\n\n\nAuthenticate with Firebase by running the \nfirebase_app_distribution_login\n action (or using one of the other \nauthentication methods\n):\n\n\nfastlane run firebase_app_distribution_login\n\n\n\n\nThen add the \nfirebase_app_distribution\n action to your lane:\n\n\nlane :beta do\n  # ...\n  build_app\n\n  firebase_app_distribution(\n    app: \"1:123456789:ios:abcd1234\",\n    groups: \"qa-team, trusted-testers\"\n  )\n  # ...\nend\n\n\n\n\nFor more information and options (such as adding release notes) see the full \nGetting Started\n guide.\n\n\n\n\n\n\n\n\nHockeyApp\n\n\nlane :beta do\n  # ...\n  build_app\n  hockey(api_token: \"[insert_key_here]\")\nend\n\n\n\n\nTo get your API token, open \nAPI Tokens in Account Settings\n. From there, you can find your existing API token, or create a new one. \n\n\nTo get a list of all available options see the \nhockey\n action docs\n, or run \n\n\nfastlane action hockey\n\n\n\n\n\n\n\n\nTestFairy\n\n\nlane :beta do\n  # ...\n  build_app\n\n  testfairy(api_key: \"[insert_key_here]\")\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key: \"[insert_key_here]\", \n            comment: \"Add rocket emoji\")\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key: \"[insert_key_here]\", testers_groups: [\"group1\"])\nend\n\n\n\n\nTo get a list of all available options, run\n\n\nfastlane action testfairy\n\n\n\n\nMore information about the service on \nTestFairy.com\n.\n\n\n\nMore information about additional supported beta testing services can be found in the \nlist of \"Beta\" actions\n\n\nRelease Notes\n\n\n\n\nAutomatically based on git commits\n\n\nYour changelog changes, so it doesn't make a lot of sense to store a static release note in the \nFastfile\n.\n\n\nlane :beta do\n  sync_code_signing\n  build_app\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  upload_to_testflight\nend\n\n\n\n\nGet a list of all available options using \nfastlane action changelog_from_git_commits\n, here are some examples\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: exclude_merges # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(text: \"Changelog: \")\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \"Changelog: \",\n    multi_line_end_keyword: \"END\"\n  )\n\n  sync_code_signing\n  build_app\n\n  upload_to_testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\n\n\nFetching the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere in your \nFastfile\n, including the file system and remote server\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\"../Changelog.txt\")\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \"https://lookatmycms.com/changelog.txt\")\n\n  sync_code_signing\n  build_app\n\n  upload_to_testflight(changelog: changelog)\nend\n\n\n\n\n\n\n\n\nBest Practices\n\n\n\n\nManage devices and testers using \nfastlane\n\n\n\n\nTestFlight\n\n\nIf you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.\n\n\nfastlane\n supports automatically registering devices using different approaches\n\n\nboarding\n\n\nboarding\n allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.\n\n\n\n\nCheck out the \nboarding GitHub repo\n for more information.\n\n\npilot\n\n\npilot\n is automatically installed with \nfastlane\n, you can use it to register individual testers to TestFlight\n\n\n# Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name\n\n\n\n\n\n\n\n\n\n\nThird party beta testing services\n\n\nIf you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs. \nfastlane\n already supports device registrations and updating provisioning profiles out of the box. \n\n\nlane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file: \"devices.txt\")\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass \"adhoc\" to get and use a provisioning profile for Ad Hoc distribution\n  sync_code_signing(force_for_new_devices: true, type: \"adhoc\")\n  build_app\n  # ...\nend\n\n\n\n\nThe \ndevices.txt\n should look like this:\n\n\nDevice ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2\n\n\n\n\n\n\n\n\n\n\nIncrementing the build number\n\n\nDepending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.\n\n\nTo do so, there are some built-in fastlane actions available, here are some examples\n\n\nFetching the latest build number from TestFlight\n\n\nThe code sample below will use the latest build number from TestFlight and temporarily set it. \n\n\nlane :beta do\n  increment_build_number(\n    build_number: latest_testflight_build_number + 1,\n    xcodeproj: \"Example.xcodeproj\"\n  )\nend\n\n\n\n\nCommitting the build number to version control\n\n\nThe code sample below will increment the build number and commit the project changes to version control.\n\n\nlane :beta do\n  # Ensure that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj: \"Example.xcodeproj\")\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj: \"Example.xcodeproj\")\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend\n\n\n\n\nFor all the steps above, there are more parameters available, run the following to get a full list:\n\n\nfastlane action [action_name]\n\n\n\n\nUse the number of commits\n\n\nThis isn't recommended, however some teams prefer this approach. You can use the number of commits of the current branch (via \nnumber_of_commits\n) as the build number. This will only work if you always run the build on the same branch.\n\n\nlane :beta do\n  increment_build_number(build_number: number_of_commits)\nend",
            "title": "Beta Deployment"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#ios-beta-deployment-using-fastlane",
            "text": "",
            "title": "iOS Beta deployment using fastlane"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#building-your-app",
            "text": "fastlane  takes care of building your app using an action called  build_app , just add the following to your  Fastfile :  lane :beta do\n  build_app(scheme: \"MyApp\")\nend  Additionally you can specify more options for building your app, for example  lane :beta do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend  Try running the lane using  fastlane beta  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  build_app , run  fastlane action build_app .",
            "title": "Building your app"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#codesigning",
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.",
            "title": "Codesigning"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#uploading-your-app",
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta provider, or even upload to multiple at once, without any extra work.  All you have to do is to put the name of the beta testing provider of your choice after building the app using  build_app :  lane :beta do\n  sync_code_signing(type: \"appstore\")    # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_testflight\n  slack(message: \"Successfully distributed a new beta build\")\nend  fastlane  automatically passes on information about the generated  .ipa  file from  build_app  to the beta testing provider of your choice.  To get a list of all available parameters for a given action, run  fastlane action slack",
            "title": "Uploading your app"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#beta-testing-services",
            "text": "TestFlight  You can easily upload new builds to TestFlight (which is part of App Store Connect) using  fastlane . To do so, just use the built-in  testflight  action after building your app  lane :beta do\n  # ...\n  build_app\n  upload_to_testflight\nend  Some example use cases  lane :beta do\n  # ...\n  build_app\n\n  # Variant 1: Provide a changelog to your build\n  upload_to_testflight(changelog: \"Add rocket emoji\")\n\n  # Variant 2: Skip the \"Waiting for processing\" of the binary\n  #   While this will speed up your build, it will not distribute\n  #   the binary to your tests, nor set a changelog\n  upload_to_testflight(skip_waiting_for_build_processing: true)\nend  If you used  fastlane init  to setup  fastlane , your Apple ID is stored in the  fastlane/Appfile . You can also overwrite the username, using  upload_to_testflight(username: \"bot@fastlane.tools\") .  To get a list of all available options, run  fastlane action upload_to_testflight  With  fastlane , you can also automatically manage your beta testers, check out the other actions available.     Firebase App Distribution  Install the Firebase App Distribution plugin:  fastlane add_plugin firebase_app_distribution  Authenticate with Firebase by running the  firebase_app_distribution_login  action (or using one of the other  authentication methods ):  fastlane run firebase_app_distribution_login  Then add the  firebase_app_distribution  action to your lane:  lane :beta do\n  # ...\n  build_app\n\n  firebase_app_distribution(\n    app: \"1:123456789:ios:abcd1234\",\n    groups: \"qa-team, trusted-testers\"\n  )\n  # ...\nend  For more information and options (such as adding release notes) see the full  Getting Started  guide.     HockeyApp  lane :beta do\n  # ...\n  build_app\n  hockey(api_token: \"[insert_key_here]\")\nend  To get your API token, open  API Tokens in Account Settings . From there, you can find your existing API token, or create a new one.   To get a list of all available options see the  hockey  action docs , or run   fastlane action hockey    TestFairy  lane :beta do\n  # ...\n  build_app\n\n  testfairy(api_key: \"[insert_key_here]\")\n\n  # Variant 1: Provide a changelog\n  testfairy(api_key: \"[insert_key_here]\", \n            comment: \"Add rocket emoji\")\n\n  # Variant 2: Specify tester groups\n  testfairy(api_key: \"[insert_key_here]\", testers_groups: [\"group1\"])\nend  To get a list of all available options, run  fastlane action testfairy  More information about the service on  TestFairy.com .  More information about additional supported beta testing services can be found in the  list of \"Beta\" actions",
            "title": "Beta testing services"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#release-notes",
            "text": "Automatically based on git commits  Your changelog changes, so it doesn't make a lot of sense to store a static release note in the  Fastfile .  lane :beta do\n  sync_code_signing\n  build_app\n\n  changelog_from_git_commits # this will generate the changelog based on your last commits\n  upload_to_testflight\nend  Get a list of all available options using  fastlane action changelog_from_git_commits , here are some examples  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: exclude_merges # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(text: \"Changelog: \")\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \"Changelog: \",\n    multi_line_end_keyword: \"END\"\n  )\n\n  sync_code_signing\n  build_app\n\n  upload_to_testflight(changelog: changelog)\nend     Fetching the changelog from the file system or remote server  You can fetch values from anywhere in your  Fastfile , including the file system and remote server  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\"../Changelog.txt\")\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \"https://lookatmycms.com/changelog.txt\")\n\n  sync_code_signing\n  build_app\n\n  upload_to_testflight(changelog: changelog)\nend",
            "title": "Release Notes"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#best-practices",
            "text": "Manage devices and testers using  fastlane   TestFlight  If you're using TestFlight you don't need to worry about UDIDs of your devices. Instead you just maintain a list of testers based on their Apple ID email address.  fastlane  supports automatically registering devices using different approaches",
            "title": "Best Practices"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#boarding",
            "text": "boarding  allows you set up a registration page for your beta testers, so they can enter their email address and start testing your application.   Check out the  boarding GitHub repo  for more information.",
            "title": "boarding"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#pilot",
            "text": "pilot  is automatically installed with  fastlane , you can use it to register individual testers to TestFlight  # Register a new external tester\nfastlane pilot add email@invite.com\n\n# Register a new external tester and add them to your app\nfastlane pilot add email@invite.com -a com.app.name     Third party beta testing services  If you're using a third party beta testing service, you'll need to manage your registered devices and their UDIDs.  fastlane  already supports device registrations and updating provisioning profiles out of the box.   lane :beta do\n  # Before calling match, we make sure all our devices are registered on the Apple Developer Portal\n  register_devices(devices_file: \"devices.txt\")\n\n  # After registering the new devices, we'll make sure to update the provisioning profile if necessary\n  # Note how we make sure to pass \"adhoc\" to get and use a provisioning profile for Ad Hoc distribution\n  sync_code_signing(force_for_new_devices: true, type: \"adhoc\")\n  build_app\n  # ...\nend  The  devices.txt  should look like this:  Device ID Device Name\nA123456789012345678901234567890123456789  DeviceName1\nB123456789012345678901234567890123456789  DeviceName2     Incrementing the build number  Depending on the beta testing service you use, you'll have to increment the build number each time you upload a new build. This is a requirement for TestFlight for example.  To do so, there are some built-in fastlane actions available, here are some examples",
            "title": "pilot"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#fetching-the-latest-build-number-from-testflight",
            "text": "The code sample below will use the latest build number from TestFlight and temporarily set it.   lane :beta do\n  increment_build_number(\n    build_number: latest_testflight_build_number + 1,\n    xcodeproj: \"Example.xcodeproj\"\n  )\nend",
            "title": "Fetching the latest build number from TestFlight"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#committing-the-build-number-to-version-control",
            "text": "The code sample below will increment the build number and commit the project changes to version control.  lane :beta do\n  # Ensure that your git status is not dirty\n  ensure_git_status_clean\n\n  # Increment the build number (not the version number)\n  # Providing the xcodeproj is optional\n  increment_build_number(xcodeproj: \"Example.xcodeproj\")\n\n  # Commit the version bump\n  commit_version_bump(xcodeproj: \"Example.xcodeproj\")\n\n  # Add a git tag for this build. This will automatically\n  # use an appropriate git tag name\n  add_git_tag\n\n  # Push the new commit and tag back to your git remote\n  push_to_git_remote\nend  For all the steps above, there are more parameters available, run the following to get a full list:  fastlane action [action_name]",
            "title": "Committing the build number to version control"
        },
        {
            "location": "/getting-started/ios/beta-deployment/#use-the-number-of-commits",
            "text": "This isn't recommended, however some teams prefer this approach. You can use the number of commits of the current branch (via  number_of_commits ) as the build number. This will only work if you always run the build on the same branch.  lane :beta do\n  increment_build_number(build_number: number_of_commits)\nend",
            "title": "Use the number of commits"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\niOS App Store deployment using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app using an action called \nbuild_app\n, just add the following to your \nFastfile\n:\n\n\nlane :release do\n  build_app(scheme: \"MyApp\")\nend\n\n\n\n\nAdditionally you can specify more options for building your app, for example\n\n\nlane :release do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend\n\n\n\n\nTry running the lane using\n\n\nfastlane release\n\n\n\n\nIf everything works, you should have a \n[ProductName].ipa\n file in the current directory. To get a list of all available parameters for \nbuild_app\n, run \nfastlane action build_app\n.\n\n\nCodesigning\n\n\nChances are that something went wrong because of code signing at the previous step. We prepared our own \nCode Signing Guide\n that helps you setting up the right code signing approach for your project.\n\n\nSubmitting your app\n\n\nGenerating screenshots\n\n\nTo find out more about how to automatically generate screenshots for the App Store, check out \nfastlane\n screenshots for iOS and tvOS\n.\n\n\nUpload the binary and app metadata\n\n\nAfter building your app, it's ready to be uploaded to the App Store. If you've already followed \niOS Beta deployment using \nfastlane\n, the following code might look similar already.\n\n\nlane :release do\n  capture_screenshots                  # generate new screenshots for the App Store\n  sync_code_signing(type: \"appstore\")  # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_app_store                  # upload your app to App Store Connect\n  slack(message: \"Successfully uploaded a new App Store build\")\nend\n\n\n\n\nfastlane\n automatically passes on information about the generated screenshots and the binary to the \nupload_to_app_store\n action of your \nFastfile\n.\n\n\nFor a list of all options for each of the steps run \nfastlane action [action_name]\n.\n\n\nMore details\n\n\nFor more details on how \nupload_to_app_store\n works, how you can define more options, check out \nupload_to_app_store\n.\n\n\nBest Practices\n\n\n\n\nPush Notifications\n\n\nTo make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:\n\n\nlane :release do\n  get_push_certificate\n  # ...\nend\n\n\n\n\nget_push_certificate\n will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.\n\n\nIf you don't have any push certificates already, \nget_push_certificate\n will create one for you and store locally in your project's directory. To get more information about the available options run \nfastlane action get_push_certificate\n.\n\n\n\n\n\n\nIncrementing the build number\n\n\nThe code sample below will use the latest build number from App Store Connect and temporarily set it. \n\n\nlane :beta do\n  increment_build_number(\n    build_number: app_store_build_number + 1,\n    xcodeproj: \"Example.xcodeproj\"\n  )\nend\n\n\n\n\nFor all the steps above, there are more parameters available, run the following to get a full list:\n\n\nfastlane action [action_name]",
            "title": "App Store Deployment"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#ios-app-store-deployment-using-fastlane",
            "text": "",
            "title": "iOS App Store deployment using fastlane"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#building-your-app",
            "text": "fastlane  takes care of building your app using an action called  build_app , just add the following to your  Fastfile :  lane :release do\n  build_app(scheme: \"MyApp\")\nend  Additionally you can specify more options for building your app, for example  lane :release do\n  build_app(scheme: \"MyApp\",\n            workspace: \"Example.xcworkspace\",\n            include_bitcode: true)\nend  Try running the lane using  fastlane release  If everything works, you should have a  [ProductName].ipa  file in the current directory. To get a list of all available parameters for  build_app , run  fastlane action build_app .",
            "title": "Building your app"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#codesigning",
            "text": "Chances are that something went wrong because of code signing at the previous step. We prepared our own  Code Signing Guide  that helps you setting up the right code signing approach for your project.",
            "title": "Codesigning"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#submitting-your-app",
            "text": "",
            "title": "Submitting your app"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#generating-screenshots",
            "text": "To find out more about how to automatically generate screenshots for the App Store, check out  fastlane  screenshots for iOS and tvOS .",
            "title": "Generating screenshots"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#upload-the-binary-and-app-metadata",
            "text": "After building your app, it's ready to be uploaded to the App Store. If you've already followed  iOS Beta deployment using  fastlane , the following code might look similar already.  lane :release do\n  capture_screenshots                  # generate new screenshots for the App Store\n  sync_code_signing(type: \"appstore\")  # see code signing guide for more information\n  build_app(scheme: \"MyApp\")\n  upload_to_app_store                  # upload your app to App Store Connect\n  slack(message: \"Successfully uploaded a new App Store build\")\nend  fastlane  automatically passes on information about the generated screenshots and the binary to the  upload_to_app_store  action of your  Fastfile .  For a list of all options for each of the steps run  fastlane action [action_name] .",
            "title": "Upload the binary and app metadata"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#more-details",
            "text": "For more details on how  upload_to_app_store  works, how you can define more options, check out  upload_to_app_store .",
            "title": "More details"
        },
        {
            "location": "/getting-started/ios/appstore-deployment/#best-practices",
            "text": "Push Notifications  To make sure your latest push notification certificate is still valid during your submission process, add the following at the beginning of your lane:  lane :release do\n  get_push_certificate\n  # ...\nend  get_push_certificate  will ensure your certificate is valid for at least another 2 weeks, and create a new one if it isn't.  If you don't have any push certificates already,  get_push_certificate  will create one for you and store locally in your project's directory. To get more information about the available options run  fastlane action get_push_certificate .    Incrementing the build number  The code sample below will use the latest build number from App Store Connect and temporarily set it.   lane :beta do\n  increment_build_number(\n    build_number: app_store_build_number + 1,\n    xcodeproj: \"Example.xcodeproj\"\n  )\nend  For all the steps above, there are more parameters available, run the following to get a full list:  fastlane action [action_name]",
            "title": "Best Practices"
        },
        {
            "location": "/getting-started/android/setup/",
            "text": "Getting started with \nfastlane\n for Android\n\n\nInstalling \nfastlane\n\n\nfastlane\n can be installed multiple ways. The preferred method is with a \nGemfile\n. \nfastlane\n can also get installed directly through RubyGems or with Homebrew (if on macOS).\n\n\nA Gemfile (macOS/Linux/Windows)\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update fastlane\n\n\n\n\nRubyGems (macOS/Linux/Windows)\n\n\nsudo gem install fastlane -NV\n\n\n\n\nHomebrew (macOS)\n\n\nbrew install fastlane\n\n\n\n\nSetting up \nfastlane\n\n\nNavigate your terminal to your project's directory and run\n\n\nfastlane init\n\n\n\n\nYou'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:\n\n\n\n\nProvide the package name for your application when asked (e.g. io.fabric.yourapp)\n\n\nPress enter when asked for the path to your json secret file\n\n\nAnswer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)\n\n\n\n\nThat's it! \nfastlane\n will automatically generate a configuration for you based on the information provided.\n\n\nYou can see the newly created \n./fastlane\n directory, with the following files:\n\n\n\n\nAppfile\n which defines configuration information that is global to your app\n\n\nFastfile\n which defines the \"lanes\" that drive the behavior of \nfastlane\n\n\n\n\n\n\nThe most interesting file is \nfastlane/Fastfile\n, which contains all the information that is needed to distribute your app.\n\n\nSetting up \nsupply\n\n\nsupply\n is a \nfastlane\n tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!\n\n\nSetting it up requires downloading a credentials file from your Google Developers Service Account.\n\n\nCollect your Google credentials\n\n\nTip: If you see Google Play Console or Google Developer Console in your local language, add \n&hl=en\n at the end of the URL (before any \n#...\n) to switch to English.\n\n\n\n\nOpen the \nGoogle Play Console\n\n\nClick the \nSettings\n menu entry, followed by \nAPI access\n\n\nClick the \nCREATE SERVICE ACCOUNT\n button \n\n\nFollow the \nGoogle Developers Console\n link in the dialog, which opens a new tab/window:\n\n\nClick the \nCREATE SERVICE ACCOUNT\n button at the top of the \nGoogle Developers Console\n\n\nProvide a \nService account name\n\n\nClick \nSelect a role\n and choose \nService Accounts > Service Account User\n\n\nCheck the \nFurnish a new private key\n checkbox\n\n\nMake sure \nJSON\n is selected as the \nKey type\n\n\nClick \nSAVE\n to close the dialog\n\n\nMake a note of the file name of the JSON file downloaded to your computer\n\n\n\n\n\n\nBack on the \nGoogle Play Console\n, click \nDONE\n to close the dialog\n\n\nClick on \nGrant Access\n for the newly added service account\n\n\nChoose \nRelease Manager\n (or alternatively \nProject Lead\n) from the \nRole\n dropdown. (Note that choosing \nRelease Manager\n grants access to the production track and all other tracks. Choosing \nProject Lead\n grants access to update all tracks \nexcept\n the production track.)\n\n\nClick \nADD USER\n to close the dialog\n\n\n\n\nYou can use \nfastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json\n to test the connection to Google Play Store with the downloaded private key.\n\n\nConfigure \nsupply\n\n\nEdit your \nfastlane/Appfile\n and change the \njson_key_file\n line to have the path to your credentials file:\n\n\njson_key_file \"/path/to/your/downloaded/key.json\"\n\n\n\n\nFetch your app metadata\n\n\nIf your app has been created on the Google Play developer console, you're ready to start using \nsupply\n to manage it! Run:\n\n\nfastlane supply init\n\n\n\n\nand all of your current Google Play store metadata will be downloaded to \nfastlane/metadata/android\n.\n\n\n\n\nDue to limitations of the Google Play API, \nsupply\n can't download existing screenshots or videos.\n\n\nWhat's next?\n\n\nfastlane\n is ready to generate screenshots and automatically distribute new builds! To learn more, check out:\n\n\n\n\nfastlane\n screenshots for Android\n\n\nDeploy to Google Play using \nfastlane\n\n\n\n\nSet up environment variables\n\n\nfastlane\n requires some environment variables set up to run correctly. In particular, having your locale not set to a UTF-8 locale will cause issues with building and uploading your build. In your shell profile add the following lines:\n\n\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\n\n\n\n\nYou can find your shell profile at \n~/.bashrc\n, \n~/.bash_profile\n, \n~/.profile\n or \n~/.zshrc\n depending on your system.\n\n\nUse a Gemfile\n\n\nIt is recommended that you use a \nGemfile\n to define your dependency on \nfastlane\n. This will clearly define the used \nfastlane\n version, and its dependencies, and will also speed up using \nfastlane\n.\n\n\n\n\nCreate a \n./Gemfile\n in the root directory of your project with the content\n\n\n\n\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\n\n\nRun \n[sudo] bundle update\n and add both the \n./Gemfile\n and the \n./Gemfile.lock\n to version control\n\n\nEvery time you run \nfastlane\n, use \nbundle exec fastlane [lane]\n\n\nOn your CI, add \n[sudo] bundle install\n as your first build step\n\n\nTo update \nfastlane\n, just run \n[sudo] bundle update fastlane",
            "title": "Setup"
        },
        {
            "location": "/getting-started/android/setup/#getting-started-with-fastlane-for-android",
            "text": "",
            "title": "Getting started with fastlane for Android"
        },
        {
            "location": "/getting-started/android/setup/#installing-fastlane",
            "text": "fastlane  can be installed multiple ways. The preferred method is with a  Gemfile .  fastlane  can also get installed directly through RubyGems or with Homebrew (if on macOS).",
            "title": "Installing fastlane"
        },
        {
            "location": "/getting-started/android/setup/#a-gemfile-macoslinuxwindows",
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Create a  ./Gemfile  in the root directory of your project with the content   source \"https://rubygems.org\"\n\ngem \"fastlane\"   Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update fastlane",
            "title": "A Gemfile (macOS/Linux/Windows)"
        },
        {
            "location": "/getting-started/android/setup/#rubygems-macoslinuxwindows",
            "text": "sudo gem install fastlane -NV",
            "title": "RubyGems (macOS/Linux/Windows)"
        },
        {
            "location": "/getting-started/android/setup/#homebrew-macos",
            "text": "brew install fastlane",
            "title": "Homebrew (macOS)"
        },
        {
            "location": "/getting-started/android/setup/#setting-up-fastlane",
            "text": "Navigate your terminal to your project's directory and run  fastlane init  You'll be asked to confirm that you're ready to begin, and then for a few pieces of information. To get started quickly:   Provide the package name for your application when asked (e.g. io.fabric.yourapp)  Press enter when asked for the path to your json secret file  Answer 'n' when asked if you plan on uploading info to Google Play via fastlane (we can set this up later)   That's it!  fastlane  will automatically generate a configuration for you based on the information provided.  You can see the newly created  ./fastlane  directory, with the following files:   Appfile  which defines configuration information that is global to your app  Fastfile  which defines the \"lanes\" that drive the behavior of  fastlane    The most interesting file is  fastlane/Fastfile , which contains all the information that is needed to distribute your app.",
            "title": "Setting up fastlane"
        },
        {
            "location": "/getting-started/android/setup/#setting-up-supply",
            "text": "supply  is a  fastlane  tool that uploads app metadata, screenshots and binaries to Google Play. You can also select tracks for builds and promote builds to production!  Setting it up requires downloading a credentials file from your Google Developers Service Account.",
            "title": "Setting up supply"
        },
        {
            "location": "/getting-started/android/setup/#collect-your-google-credentials",
            "text": "Tip: If you see Google Play Console or Google Developer Console in your local language, add  &hl=en  at the end of the URL (before any  #... ) to switch to English.   Open the  Google Play Console  Click the  Settings  menu entry, followed by  API access  Click the  CREATE SERVICE ACCOUNT  button   Follow the  Google Developers Console  link in the dialog, which opens a new tab/window:  Click the  CREATE SERVICE ACCOUNT  button at the top of the  Google Developers Console  Provide a  Service account name  Click  Select a role  and choose  Service Accounts > Service Account User  Check the  Furnish a new private key  checkbox  Make sure  JSON  is selected as the  Key type  Click  SAVE  to close the dialog  Make a note of the file name of the JSON file downloaded to your computer    Back on the  Google Play Console , click  DONE  to close the dialog  Click on  Grant Access  for the newly added service account  Choose  Release Manager  (or alternatively  Project Lead ) from the  Role  dropdown. (Note that choosing  Release Manager  grants access to the production track and all other tracks. Choosing  Project Lead  grants access to update all tracks  except  the production track.)  Click  ADD USER  to close the dialog   You can use  fastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json  to test the connection to Google Play Store with the downloaded private key.",
            "title": "Collect your Google credentials"
        },
        {
            "location": "/getting-started/android/setup/#configure-supply",
            "text": "Edit your  fastlane/Appfile  and change the  json_key_file  line to have the path to your credentials file:  json_key_file \"/path/to/your/downloaded/key.json\"",
            "title": "Configure supply"
        },
        {
            "location": "/getting-started/android/setup/#fetch-your-app-metadata",
            "text": "If your app has been created on the Google Play developer console, you're ready to start using  supply  to manage it! Run:  fastlane supply init  and all of your current Google Play store metadata will be downloaded to  fastlane/metadata/android .   Due to limitations of the Google Play API,  supply  can't download existing screenshots or videos.",
            "title": "Fetch your app metadata"
        },
        {
            "location": "/getting-started/android/setup/#whats-next",
            "text": "fastlane  is ready to generate screenshots and automatically distribute new builds! To learn more, check out:   fastlane  screenshots for Android  Deploy to Google Play using  fastlane",
            "title": "What's next?"
        },
        {
            "location": "/getting-started/android/setup/#set-up-environment-variables",
            "text": "fastlane  requires some environment variables set up to run correctly. In particular, having your locale not set to a UTF-8 locale will cause issues with building and uploading your build. In your shell profile add the following lines:  export LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8  You can find your shell profile at  ~/.bashrc ,  ~/.bash_profile ,  ~/.profile  or  ~/.zshrc  depending on your system.",
            "title": "Set up environment variables"
        },
        {
            "location": "/getting-started/android/setup/#use-a-gemfile",
            "text": "It is recommended that you use a  Gemfile  to define your dependency on  fastlane . This will clearly define the used  fastlane  version, and its dependencies, and will also speed up using  fastlane .   Create a  ./Gemfile  in the root directory of your project with the content   source \"https://rubygems.org\"\n\ngem \"fastlane\"   Run  [sudo] bundle update  and add both the  ./Gemfile  and the  ./Gemfile.lock  to version control  Every time you run  fastlane , use  bundle exec fastlane [lane]  On your CI, add  [sudo] bundle install  as your first build step  To update  fastlane , just run  [sudo] bundle update fastlane",
            "title": "Use a Gemfile"
        },
        {
            "location": "/getting-started/android/running-tests/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nRunning Android tests using \nfastlane\n\n\nTo run your unit tests using fastlane, add the following to your \nFastfile\n\n\nlane :tests do\n  gradle(task: \"test\")\nend\n\n\n\n\nReplace \n\"test\"\n with the gradle task name for running unit tests of your app.\n\n\nAdditionally you can specify more options for building and testing your app, check out the \nlist of all available parameters\n\n\nTo use the newly created lane, just run\n\n\nfastlane tests\n\n\n\n\nSetting up \nfastlane\n to run on CI\n\n\nTo run Android tests using \nfastlane\n on a Continuous Integration service, check out \nthe Continuous Integration docs\n.\n\n\nSince \nfastlane\n stores all configuration in simple configuration files, and runs via the command line, it supports every kind of CI system.\n\n\nWe also prepared some docs to help you get started with some of the popular CI systems.\n\n\nSelf-Hosted CIs\n\n\n\n\nJenkins\n\n\nBamboo\n\n\nGitLab\n\n\n\n\nHosted CIs\n\n\n\n\nCircle\n\n\nTravis\n\n\nVisual Studio\n\n\n\n\nIf your CI system isn't listed here, no problem, \nfastlane\n runs on any CI. To trigger \nfastlane\n, just add the command you would usually run from your terminal:\n\n\nfastlane tests\n\n\n\n\nPosting build results\n\n\nIf you want to post test results on Slack, Hipchat or other team chat client, check out the available \nfastlane actions\n.\n\n\nBuild failures\n\n\nHipchat\n\n\nTo post a message when \nfastlane\n encounters a test or build failure, add the following to your \nFastfile\n:\n\n\nerror do |ex|\n  hipchat(message: \"Tests have failed!\",\n          channel: \"Room or @username\",\n          success: false)\nend\n\n\n\n\nOther services\n\n\nThe above example uses Hipchat, but \nfastlane\n supports \nmany other services out there\n.",
            "title": "Running Tests"
        },
        {
            "location": "/getting-started/android/running-tests/#running-android-tests-using-fastlane",
            "text": "To run your unit tests using fastlane, add the following to your  Fastfile  lane :tests do\n  gradle(task: \"test\")\nend  Replace  \"test\"  with the gradle task name for running unit tests of your app.  Additionally you can specify more options for building and testing your app, check out the  list of all available parameters  To use the newly created lane, just run  fastlane tests",
            "title": "Running Android tests using fastlane"
        },
        {
            "location": "/getting-started/android/running-tests/#setting-up-fastlane-to-run-on-ci",
            "text": "To run Android tests using  fastlane  on a Continuous Integration service, check out  the Continuous Integration docs .  Since  fastlane  stores all configuration in simple configuration files, and runs via the command line, it supports every kind of CI system.  We also prepared some docs to help you get started with some of the popular CI systems.  Self-Hosted CIs   Jenkins  Bamboo  GitLab   Hosted CIs   Circle  Travis  Visual Studio   If your CI system isn't listed here, no problem,  fastlane  runs on any CI. To trigger  fastlane , just add the command you would usually run from your terminal:  fastlane tests",
            "title": "Setting up fastlane to run on CI"
        },
        {
            "location": "/getting-started/android/running-tests/#posting-build-results",
            "text": "If you want to post test results on Slack, Hipchat or other team chat client, check out the available  fastlane actions .",
            "title": "Posting build results"
        },
        {
            "location": "/getting-started/android/running-tests/#build-failures",
            "text": "",
            "title": "Build failures"
        },
        {
            "location": "/getting-started/android/running-tests/#hipchat",
            "text": "To post a message when  fastlane  encounters a test or build failure, add the following to your  Fastfile :  error do |ex|\n  hipchat(message: \"Tests have failed!\",\n          channel: \"Room or @username\",\n          success: false)\nend",
            "title": "Hipchat"
        },
        {
            "location": "/getting-started/android/running-tests/#other-services",
            "text": "The above example uses Hipchat, but  fastlane  supports  many other services out there .",
            "title": "Other services"
        },
        {
            "location": "/getting-started/android/screenshots/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nfastlane\n screenshots for Android\n\n\nYour app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:\n\n\n\n\nAre the screenshots in Google Play inconsistent with your latest app design?\n\n\nIs your app localized into many languages that require different screenshots for each?\n\n\nIs the same content displayed for each of your size variations?\n\n\n\n\nfastlane\n tools can automate this process, making it fast and consistent while giving you beautiful results!\n\n\n\n\nCapture Screenshots Automatically\n\n\nscreengrab\n works with \nfastlane\n to automate the process of capturing screenshots of your app. It allows you to:\n\n\n\n\nCapture hundreds of screenshots in multiple languages on any simulator\n\n\nDo something else while the computer takes the screenshots for you\n\n\nConfigure it once, and store the configuration so anyone on the team can run it\n\n\nGet a summary of how your app looks like across all supported devices and languages\n\n\n\n\nAfter \nscreengrab\n completes, it will show you summary of the screenshots you captured:\n\n\n\n\nGetting Started Using Espresso\n\n\nscreengrab\n uses the capabilities of Android's built-in \nInstrumented tests\n combined with \nEspresso\n to drive interactions with your app. \n\n\nTo start writing UI Tests with Espresso, checkout the \nCreate UI tests with Espresso Test Recorder\n video which talks about the Espresso Recording feature for writing UI tests. To learn more about UI testing in Android, refer to the \nTesting UI for a Single App\n guide.\n\n\nInstalling \nscreengrab\n\n\nInstall the gem:\n\n\nsudo gem install screengrab\n\n\n\n\nGradle dependency\n\n\nAdd the test dependency to your Gradle build:\n\n\nandroidTestCompile 'tools.fastlane:screengrab:x.x.x'\n\n\n\n\nThe latest version can be determined by visiting the \nscreengrab\n RubyGems page\n\n\nConfiguring your Manifest Permissions\n\n\nEnsure that the following permissions exist in your \nsrc/debug/AndroidManifest.xml\n\n\n<!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />\n\n\n\n\nConfiguring your UI Tests for \nscreengrab\n\n\n\n\nTo handle automatic switching of locales, add \n@ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n to /app/java/\n(AndroidTest)/ExampleInstrumentedTest.java or to your tests class \n\n\nTo capture screenshots, add the following to your tests \nScreengrab.screenshot(\"name_of_screenshot_here\");\n on the appropriate screens\n\n\n\n\nExample UI Test Class (Using JUnit4)\n\n\n@RunWith(JUnit4.class)\npublic class ExampleInstrumentedTest {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        // Your custom onView...\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}\n\n\n\n\n\nThere is an \nexample project\n showing how to use use JUnit 3 or 4 and Espresso with the screengrab Java library to capture screenshots during a UI test run.\n\n\nUsing JUnit 4 is preferable because of its ability to perform actions before and after the entire test class is run. This means you will change the device's locale far fewer times when compared with JUnit 3 running those commands before and after each test method.\n\n\nWhen using JUnit 3 you'll need to add a bit more code:\n\n\n\n\nUse \nLocaleUtil.changeDeviceLocaleTo(LocaleUtil.getTestLocale());\n in \nsetUp()\n\n\nUse \nLocaleUtil.changeDeviceLocaleTo(LocaleUtil.getEndingLocale());\n in \ntearDown()\n\n\nUse \nScreengrab.screenshot(\"name_of_screenshot_here\");\n to capture screenshots at the appropriate points in your tests\n\n\n\n\nIf you're having trouble getting your device unlocked and the screen activated to run tests, try using \nScreenUtil.activateScreenForTesting(activity);\n in your test setup.\n\n\nImproved screenshot capture with UI Automator\n\n\nAs of \nscreengrab\n 0.5.0, you can specify different strategies to control the way \nscreengrab\n captures screenshots. The newer strategy delegates to \nUI Automator\n which fixes a number of problems compared to the original strategy:\n\n\n\n\nShadows/elevation are correctly captured for Material UI\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nHowever, UI Automator requires a device with \nAPI level >= 18\n, so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:\n\n\nScreengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());\n\n\n\n\nClean Status Bar\n\n\nYou can use \nQuickDemo\n to clean up the status bar for your screenshots.\n\n\nGenerating Screenshots with Screengrab\n\n\n\n\nRun \n./gradlew assembleDebug assembleAndroidTest\n manually to generate debug and test APKs\n\n\nYou can also create a lane and use \nbuild_android_app\n:\n  \nruby\n  desc \"Build debug and test APK for screenshots\"\n  lane :build_for_screengrab do\n    gradle(\n      task: 'clean'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'Debug'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'AndroidTest'\n    )\n  end\n\n\n\n\n\n\nRun \nfastlane screengrab\n in your app project directory to generate screenshots\n\n\nYou will be prompted to provide any required parameters which are not in your \nScreengrabfile\n, or provided as command line arguments\n\n\n\n\n\n\nYour screenshots will be saved to \nfastlane/metadata/android\n in the directory where you ran \nfastlane screengrab\n\n\n\n\nUpload Screenshots to Google Play\n\n\nAfter generating your screenshots using \nfastlane screengrab\n, you'll usually want to upload them to Google Play.\n\n\nTo upload the screenshots stored in \nfastlane/metadata/android\n, just run:\n\n\nfastlane supply\n\n\n\n\nUse in Fastfile\n\n\nTo put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a \nfastlane\n lane called \nscreenshots\n. It would be responsible for:\n\n\n\n\nRunning your app through \nscreengrab\n to automatically capture your screenshots\n\n\nHaving \nsupply\n send your screenshots to Google Play for use in the store\n\n\n\n\nAdd the following code to your \nfastlane/Fastfile\n:\n\n\nlane :screenshots do\n  capture_android_screenshots\n  upload_to_play_store\nend\n\n\n\n\nTo get a list of all available options for each of the steps, run\n\n\nfastlane action capture_android_screenshots\nfastlane action upload_to_play_store\n\n\n\n\nAdvanced \nscreengrab\n\n\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your testcases on launch. These strings will be available in your tests through \nInstrumentationRegistry.getArguments()\n.\n\n\nlaunch_arguments([\n  \"username hjanuschka\",\n  \"build_number 201\"\n])\n\n\n\n\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}",
            "title": "Screenshots"
        },
        {
            "location": "/getting-started/android/screenshots/#fastlane-screenshots-for-android",
            "text": "Your app screenshots are probably the most important thing when it comes to convincing potential users to download or purchase your app. Unfortunately, many apps don't do screenshots well. This is often because taking screenshots of your app and then preparing them for display is time consuming, and it's hard to get everything right and consistent! For example:   Are the screenshots in Google Play inconsistent with your latest app design?  Is your app localized into many languages that require different screenshots for each?  Is the same content displayed for each of your size variations?   fastlane  tools can automate this process, making it fast and consistent while giving you beautiful results!",
            "title": "fastlane screenshots for Android"
        },
        {
            "location": "/getting-started/android/screenshots/#capture-screenshots-automatically",
            "text": "screengrab  works with  fastlane  to automate the process of capturing screenshots of your app. It allows you to:   Capture hundreds of screenshots in multiple languages on any simulator  Do something else while the computer takes the screenshots for you  Configure it once, and store the configuration so anyone on the team can run it  Get a summary of how your app looks like across all supported devices and languages   After  screengrab  completes, it will show you summary of the screenshots you captured:",
            "title": "Capture Screenshots Automatically"
        },
        {
            "location": "/getting-started/android/screenshots/#getting-started-using-espresso",
            "text": "screengrab  uses the capabilities of Android's built-in  Instrumented tests  combined with  Espresso  to drive interactions with your app.   To start writing UI Tests with Espresso, checkout the  Create UI tests with Espresso Test Recorder  video which talks about the Espresso Recording feature for writing UI tests. To learn more about UI testing in Android, refer to the  Testing UI for a Single App  guide.",
            "title": "Getting Started Using Espresso"
        },
        {
            "location": "/getting-started/android/screenshots/#installing-screengrab",
            "text": "Install the gem:  sudo gem install screengrab",
            "title": "Installing screengrab"
        },
        {
            "location": "/getting-started/android/screenshots/#gradle-dependency",
            "text": "Add the test dependency to your Gradle build:  androidTestCompile 'tools.fastlane:screengrab:x.x.x'  The latest version can be determined by visiting the  screengrab  RubyGems page",
            "title": "Gradle dependency"
        },
        {
            "location": "/getting-started/android/screenshots/#configuring-your-manifest-permissions",
            "text": "Ensure that the following permissions exist in your  src/debug/AndroidManifest.xml  <!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />",
            "title": "Configuring your Manifest Permissions"
        },
        {
            "location": "/getting-started/android/screenshots/#configuring-your-ui-tests-for-screengrab",
            "text": "To handle automatic switching of locales, add  @ClassRule public static final LocaleTestRule localeTestRule = new LocaleTestRule();  to /app/java/ (AndroidTest)/ExampleInstrumentedTest.java or to your tests class   To capture screenshots, add the following to your tests  Screengrab.screenshot(\"name_of_screenshot_here\");  on the appropriate screens",
            "title": "Configuring your UI Tests for screengrab"
        },
        {
            "location": "/getting-started/android/screenshots/#example-ui-test-class-using-junit4",
            "text": "@RunWith(JUnit4.class)\npublic class ExampleInstrumentedTest {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        // Your custom onView...\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}  There is an  example project  showing how to use use JUnit 3 or 4 and Espresso with the screengrab Java library to capture screenshots during a UI test run.  Using JUnit 4 is preferable because of its ability to perform actions before and after the entire test class is run. This means you will change the device's locale far fewer times when compared with JUnit 3 running those commands before and after each test method.  When using JUnit 3 you'll need to add a bit more code:   Use  LocaleUtil.changeDeviceLocaleTo(LocaleUtil.getTestLocale());  in  setUp()  Use  LocaleUtil.changeDeviceLocaleTo(LocaleUtil.getEndingLocale());  in  tearDown()  Use  Screengrab.screenshot(\"name_of_screenshot_here\");  to capture screenshots at the appropriate points in your tests   If you're having trouble getting your device unlocked and the screen activated to run tests, try using  ScreenUtil.activateScreenForTesting(activity);  in your test setup.",
            "title": "Example UI Test Class (Using JUnit4)"
        },
        {
            "location": "/getting-started/android/screenshots/#improved-screenshot-capture-with-ui-automator",
            "text": "As of  screengrab  0.5.0, you can specify different strategies to control the way  screengrab  captures screenshots. The newer strategy delegates to  UI Automator  which fixes a number of problems compared to the original strategy:   Shadows/elevation are correctly captured for Material UI  Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   However, UI Automator requires a device with  API level >= 18 , so it is not yet the default strategy. To enable it for all screenshots by default, make the following call before your tests run:  Screengrab.setDefaultScreenshotStrategy(new UiAutomatorScreenshotStrategy());",
            "title": "Improved screenshot capture with UI Automator"
        },
        {
            "location": "/getting-started/android/screenshots/#clean-status-bar",
            "text": "You can use  QuickDemo  to clean up the status bar for your screenshots.",
            "title": "Clean Status Bar"
        },
        {
            "location": "/getting-started/android/screenshots/#generating-screenshots-with-screengrab",
            "text": "Run  ./gradlew assembleDebug assembleAndroidTest  manually to generate debug and test APKs  You can also create a lane and use  build_android_app :\n   ruby\n  desc \"Build debug and test APK for screenshots\"\n  lane :build_for_screengrab do\n    gradle(\n      task: 'clean'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'Debug'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'AndroidTest'\n    )\n  end    Run  fastlane screengrab  in your app project directory to generate screenshots  You will be prompted to provide any required parameters which are not in your  Screengrabfile , or provided as command line arguments    Your screenshots will be saved to  fastlane/metadata/android  in the directory where you ran  fastlane screengrab",
            "title": "Generating Screenshots with Screengrab"
        },
        {
            "location": "/getting-started/android/screenshots/#upload-screenshots-to-google-play",
            "text": "After generating your screenshots using  fastlane screengrab , you'll usually want to upload them to Google Play.  To upload the screenshots stored in  fastlane/metadata/android , just run:  fastlane supply",
            "title": "Upload Screenshots to Google Play"
        },
        {
            "location": "/getting-started/android/screenshots/#use-in-fastfile",
            "text": "To put all of this together so that anyone on your team could trigger generating and uploading new screenshots, you can define a  fastlane  lane called  screenshots . It would be responsible for:   Running your app through  screengrab  to automatically capture your screenshots  Having  supply  send your screenshots to Google Play for use in the store   Add the following code to your  fastlane/Fastfile :  lane :screenshots do\n  capture_android_screenshots\n  upload_to_play_store\nend  To get a list of all available options for each of the steps, run  fastlane action capture_android_screenshots\nfastlane action upload_to_play_store",
            "title": "Use in Fastfile"
        },
        {
            "location": "/getting-started/android/screenshots/#advanced-screengrab",
            "text": "Launch Arguments  You can provide additional arguments to your testcases on launch. These strings will be available in your tests through  InstrumentationRegistry.getArguments() .  launch_arguments([\n  \"username hjanuschka\",\n  \"build_number 201\"\n])  Bundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}",
            "title": "Advanced screengrab"
        },
        {
            "location": "/getting-started/android/beta-deployment/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nDeploy to Beta distribution services using \nfastlane\n\n\nIf you would like to distribute your beta builds to Google Play, please make sure you've done the steps from \nSetting up \nsupply\n before continuing.\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app by delegating to your existing Gradle build. Just add the following to your \nFastfile\n:\n\n\nlane :beta do\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend\n\n\n\n\nTry running the lane with:\n\n\nfastlane beta\n\n\n\n\nWhen that completes you should have the appropriate APK ready to go in the standard output directory.\n\n\nTo get a list of all available parameters for the \ngradle\n action, run:\n\n\nfastlane action gradle\n\n\n\n\nUploading your app\n\n\nAfter building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of \nfastlane\n is that you can easily switch beta providers, or even upload to multiple at once, with a minimum of configuration. Follow that with a notification posted to the group messaging service of your choice to let the team know that you've shipped.\n\n\nlane :beta do\n  gradle(task: 'assemble', build_type: 'Release')\n  upload_to_play_store(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend\n\n\n\n\nSupported beta testing services\n\n\n\n\nGoogle Play\n\n\nIn order to distribute to Google Play with \nupload_to_play_store\n you will need to have your Google credentials set up. Make sure you've gone through \nSetting up \nsupply\n before continuing!\n\n\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  upload_to_play_store(track: 'beta')\n  # ...\nend\n\n\n\n\nTo get a list of all available options, run:\n\n\nfastlane action upload_to_play_store\n\n\n\n\n\n\n\n\n\n\nFirebase App Distribution\n\n\nInstall the Firebase App Distribution plugin:\n\n\nfastlane add_plugin firebase_app_distribution\n\n\n\n\nAuthenticate with Firebase by running the \nfirebase_app_distribution_login\n action (or using one of the other \nauthentication methods\n):\n\n\nfastlane run firebase_app_distribution_login\n\n\n\n\nThen add the \nfirebase_app_distribution\n action to your lane:\n\n\nlane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  firebase_app_distribution(\n    app: \"1:123456789:android:abcd1234\",\n    groups: \"qa-team, trusted-testers\"\n  )\n  # ...\nend\n\n\n\n\nFor more information and options (such as adding release notes) see the full \nGetting Started\n guide.\n\n\n\n\n\n\nMore information about additional supported beta testing services can be found in the \nlist of \"Beta\" actions\n\n\nRelease Notes\n\n\n\n\nGenerate based on Git commits\n\n\nYou take the time to write great Git commit messages, right? Why not take advantage of them to automatically summarize the work done for your latest beta release?\n\n\nlane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend\n\n\n\n\nYou can get a list of all available options by running \nfastlane action changelog_from_git_commits\n, but here are some examples:\n\n\nchangelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)\n\n\n\n\n\n\n\n\n\n\nPrompt for changelog\n\n\nYou can automatically be asked for the changelog in your terminal using the \nprompt\n action:\n\n\nlane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(text: \"Changelog: \")\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \"Changelog: \",\n    multi_line_end_keyword: \"END\"\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend\n\n\n\n\n\n\n\n\n\n\nFetch the changelog from the file system or remote server\n\n\nYou can fetch values from anywhere, including the file system and remote server, by writing code in your \nFastfile\n\n\nlane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\"../Changelog.txt\")\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \"https://lookatmycms.com/changelog.txt\")\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend",
            "title": "Beta Deployment"
        },
        {
            "location": "/getting-started/android/beta-deployment/#deploy-to-beta-distribution-services-using-fastlane",
            "text": "If you would like to distribute your beta builds to Google Play, please make sure you've done the steps from  Setting up  supply  before continuing.",
            "title": "Deploy to Beta distribution services using fastlane"
        },
        {
            "location": "/getting-started/android/beta-deployment/#building-your-app",
            "text": "fastlane  takes care of building your app by delegating to your existing Gradle build. Just add the following to your  Fastfile :  lane :beta do\n  # Adjust the `build_type` and `flavor` params as needed to build the right APK for your setup\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  # ...\nend  Try running the lane with:  fastlane beta  When that completes you should have the appropriate APK ready to go in the standard output directory.  To get a list of all available parameters for the  gradle  action, run:  fastlane action gradle",
            "title": "Building your app"
        },
        {
            "location": "/getting-started/android/beta-deployment/#uploading-your-app",
            "text": "After building your app, it's ready to be uploaded to a beta testing service of your choice. The beauty of  fastlane  is that you can easily switch beta providers, or even upload to multiple at once, with a minimum of configuration. Follow that with a notification posted to the group messaging service of your choice to let the team know that you've shipped.  lane :beta do\n  gradle(task: 'assemble', build_type: 'Release')\n  upload_to_play_store(track: 'beta')\n  slack(message: 'Successfully distributed a new beta build')\nend",
            "title": "Uploading your app"
        },
        {
            "location": "/getting-started/android/beta-deployment/#supported-beta-testing-services",
            "text": "Google Play  In order to distribute to Google Play with  upload_to_play_store  you will need to have your Google credentials set up. Make sure you've gone through  Setting up  supply  before continuing!  lane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  upload_to_play_store(track: 'beta')\n  # ...\nend  To get a list of all available options, run:  fastlane action upload_to_play_store     Firebase App Distribution  Install the Firebase App Distribution plugin:  fastlane add_plugin firebase_app_distribution  Authenticate with Firebase by running the  firebase_app_distribution_login  action (or using one of the other  authentication methods ):  fastlane run firebase_app_distribution_login  Then add the  firebase_app_distribution  action to your lane:  lane :beta do\n  # ...\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n\n  firebase_app_distribution(\n    app: \"1:123456789:android:abcd1234\",\n    groups: \"qa-team, trusted-testers\"\n  )\n  # ...\nend  For more information and options (such as adding release notes) see the full  Getting Started  guide.    More information about additional supported beta testing services can be found in the  list of \"Beta\" actions",
            "title": "Supported beta testing services"
        },
        {
            "location": "/getting-started/android/beta-deployment/#release-notes",
            "text": "Generate based on Git commits  You take the time to write great Git commit messages, right? Why not take advantage of them to automatically summarize the work done for your latest beta release?  lane :beta do\n  # ...\n\n  # Generate the changelog based on commit messages since your last tag\n  changelog_from_git_commits\n\n  # The crashlytics action knows how to use the generated changelog automatically\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]'\n  )\nend  You can get a list of all available options by running  fastlane action changelog_from_git_commits , but here are some examples:  changelog_from_git_commits(\n  between: ['7b092b3', 'HEAD'], # Optional, lets you specify a revision/tag range between which to collect commit info\n  merge_commit_filtering: 'exclude_merges' # Optional, lets you filter out merge commits\n)     Prompt for changelog  You can automatically be asked for the changelog in your terminal using the  prompt  action:  lane :beta do\n  # Variant 1: Ask for a one line input\n  changelog = prompt(text: \"Changelog: \")\n\n  # Variant 2: Ask for a multi-line input\n  #   The user confirms their input by typing `END` and Enter\n  changelog = prompt(\n    text: \"Changelog: \",\n    multi_line_end_keyword: \"END\"\n  )\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend     Fetch the changelog from the file system or remote server  You can fetch values from anywhere, including the file system and remote server, by writing code in your  Fastfile  lane :beta do\n  # Variant 1: Read from file system\n  #   note the `..`, since fastlane runs in the _fastlane_ directory\n  changelog = File.read(\"../Changelog.txt\")\n\n  # Variant 2: Fetch data from a remote web server\n  changelog = download(url: \"https://lookatmycms.com/changelog.txt\")\n\n  crashlytics(\n    api_token: '[insert_key_here]',\n    build_secret: '[insert_secret_here]',\n    notes: changelog\n  )\nend",
            "title": "Release Notes"
        },
        {
            "location": "/getting-started/android/release-deployment/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nDeploy to Google Play using \nfastlane\n\n\nBuilding your app\n\n\nfastlane\n takes care of building your app by delegating to your existing Gradle build. Just add the following to your \nFastfile\n:\n\n\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend\n\n\n\n\nTry running the lane with:\n\n\nfastlane playstore\n\n\n\n\nWhen that completes you should have the appropriate APK ready to go in the standard output directory. To get a list of all available parameters for the \ngradle\n action, run:\n\n\nfastlane action gradle\n\n\n\n\nUploading your APK\n\n\nTo upload your binary to Google Play, \nfastlane\n uses a tool called \nsupply\n. Because \nsupply\n needs authentication information from Google, if you haven't yet done the \nsupply\n setup steps\n, please do those now!\n\n\nWith that done, simply add a call to \nsupply\n to the lane you set up above:\n\n\nlane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  upload_to_play_store # Uploads the APK built in the gradle step above and releases it to all production users\nend\n\n\n\n\nThis will also:\n\n\n\n\nUpload app metadata from \nfastlane/metadata/android\n if you previously ran \nfastlane supply init\n\n\nUpload expansion files (obbs) found under the same directory as your APK as long as:\n\n\nThey are identified by type as \nmain\n or \npatch\n by containing \nmain\n or \npatch\n in their file names\n\n\nThere is at most one of each type\n\n\n\n\n\n\nUpload screenshots from \nfastlane/metadata/android\n if you previously ran \nscreengrab\n\n\nCreate a new production build\n\n\nRelease the production build to all users\n\n\n\n\nIf you would like to capture and upload screenshots automatically as part of your deployment process, check out the \nfastlane screenshots for Android\n guide to get started!\n\n\nTo gradually roll out a new build you can use:\n\n\nlane :playstore do\n  # ...\n  upload_to_play_store(\n    track: 'rollout',\n    rollout: '0.5'\n  )\nend\n\n\n\n\nTo get a list of all available parameters for the \nupload_to_play_store\n action, run:\n\n\nfastlane action upload_to_play_store",
            "title": "Release Deployment"
        },
        {
            "location": "/getting-started/android/release-deployment/#deploy-to-google-play-using-fastlane",
            "text": "",
            "title": "Deploy to Google Play using fastlane"
        },
        {
            "location": "/getting-started/android/release-deployment/#building-your-app",
            "text": "fastlane  takes care of building your app by delegating to your existing Gradle build. Just add the following to your  Fastfile :  lane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\nend  Try running the lane with:  fastlane playstore  When that completes you should have the appropriate APK ready to go in the standard output directory. To get a list of all available parameters for the  gradle  action, run:  fastlane action gradle",
            "title": "Building your app"
        },
        {
            "location": "/getting-started/android/release-deployment/#uploading-your-apk",
            "text": "To upload your binary to Google Play,  fastlane  uses a tool called  supply . Because  supply  needs authentication information from Google, if you haven't yet done the  supply  setup steps , please do those now!  With that done, simply add a call to  supply  to the lane you set up above:  lane :playstore do\n  gradle(\n    task: 'assemble',\n    build_type: 'Release'\n  )\n  upload_to_play_store # Uploads the APK built in the gradle step above and releases it to all production users\nend  This will also:   Upload app metadata from  fastlane/metadata/android  if you previously ran  fastlane supply init  Upload expansion files (obbs) found under the same directory as your APK as long as:  They are identified by type as  main  or  patch  by containing  main  or  patch  in their file names  There is at most one of each type    Upload screenshots from  fastlane/metadata/android  if you previously ran  screengrab  Create a new production build  Release the production build to all users   If you would like to capture and upload screenshots automatically as part of your deployment process, check out the  fastlane screenshots for Android  guide to get started!  To gradually roll out a new build you can use:  lane :playstore do\n  # ...\n  upload_to_play_store(\n    track: 'rollout',\n    rollout: '0.5'\n  )\nend  To get a list of all available parameters for the  upload_to_play_store  action, run:  fastlane action upload_to_play_store",
            "title": "Uploading your APK"
        },
        {
            "location": "/getting-started/cross-platform/react-native/",
            "text": "Getting started with \nfastlane\n for \nReact Native\n\n\nMost of the \nfastlane\n docs on this page apply to React Native projects as well. \n\n\nAs there is no official getting started guide yet, here are some publications by the \nfastlane\n community:\n\n\n\n\nDistributing beta builds with Fastlane on Android and iOS\n\n\nShipping React Native apps with fastlane\n\n\nReact Native, fastlane and Visual Studio App Center\n\n\nConference talk \"Automate your React Native world with fastlane\"\n\n\nTeam Focused Fastlane Tutorials\n\n\nSimple Android Releases in React Native\n\n\nSimple iOS Releases in React Native",
            "title": "React Native"
        },
        {
            "location": "/getting-started/cross-platform/react-native/#getting-started-with-fastlane-for-react-native",
            "text": "Most of the  fastlane  docs on this page apply to React Native projects as well.   As there is no official getting started guide yet, here are some publications by the  fastlane  community:   Distributing beta builds with Fastlane on Android and iOS  Shipping React Native apps with fastlane  React Native, fastlane and Visual Studio App Center  Conference talk \"Automate your React Native world with fastlane\"  Team Focused Fastlane Tutorials  Simple Android Releases in React Native  Simple iOS Releases in React Native",
            "title": "Getting started with fastlane for React Native"
        },
        {
            "location": "/getting-started/cross-platform/flutter/",
            "text": "Getting started with \nfastlane\n for \nFlutter\n\n\nMost of the \nfastlane\n docs on this page apply to Flutter projects as well. \n\n\nTo get started, the Flutter team wrote an excellent official guide on \nContinuous Delivery using fastlane with Flutter\n.",
            "title": "Flutter"
        },
        {
            "location": "/getting-started/cross-platform/flutter/#getting-started-with-fastlane-for-flutter",
            "text": "Most of the  fastlane  docs on this page apply to Flutter projects as well.   To get started, the Flutter team wrote an excellent official guide on  Continuous Delivery using fastlane with Flutter .",
            "title": "Getting started with fastlane for Flutter"
        },
        {
            "location": "/getting-started/cross-platform/nativescript/",
            "text": "Getting started with \nfastlane\n for \nNativeScript\n\n\nMost of the \nfastlane\n docs on this page apply to NativeScript projects as well.\n\n\nTo get started, please follow this tutorial from the official NativeScript Blog: \nAutomatic NativeScript App Deployments with fastlane\n.",
            "title": "NativeScript"
        },
        {
            "location": "/getting-started/cross-platform/nativescript/#getting-started-with-fastlane-for-nativescript",
            "text": "Most of the  fastlane  docs on this page apply to NativeScript projects as well.  To get started, please follow this tutorial from the official NativeScript Blog:  Automatic NativeScript App Deployments with fastlane .",
            "title": "Getting started with fastlane for NativeScript"
        },
        {
            "location": "/actions/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nfastlane actions\n\n\nThis page contains a list of all built-in fastlane actions and their available options.\n\n\nTo get the most up-to-date information from the command line on your current version you can also run\n\n\nfastlane actions # list all available fastlane actions\nfastlane action [action_name] # more information for a specific action\n\n\n\n\nYou can import another \nFastfile\n by using the \nimport\n action. This is useful if you have shared lanes across multiple apps and you want to store a \nFastfile\n in a separate folder. The path must be relative to the \nFastfile\n this is called from.\n\n\nimport './path/to/other/Fastfile'\n\n\n\n\nFor \nfastlane\n plugins, check out the \navailable plugins\n page.\nIf you want to create your own action, check out the \nlocal actions\n page.\n\n\n\n\nTesting\n\n\nBuilding\n\n\nScreenshots\n\n\nProject\n\n\nCode Signing\n\n\nDocumentation\n\n\nBeta\n\n\nPush\n\n\nReleasing your app\n\n\nSource Control\n\n\nNotifications\n\n\nApp Store Connect\n\n\nMisc\n\n\nDeprecated\n\n\nPlugins\n\n\n\n\nTesting\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nscan\n\n\nAlias for the \nrun_tests\n action\n\n\nios, mac\n\n\n\n\n\n\nslather\n\n\nUse slather to generate a code coverage report\n\n\nios, mac\n\n\n\n\n\n\nswiftlint\n\n\nRun swift code validation using SwiftLint\n\n\nios, mac\n\n\n\n\n\n\nxcov\n\n\nNice code coverage reports without hassle\n\n\nios, mac\n\n\n\n\n\n\nsonar\n\n\nInvokes sonar-scanner to programmatically run SonarQube analysis\n\n\nios, android, mac\n\n\n\n\n\n\noclint\n\n\nLints implementation files with OCLint\n\n\nios, android, mac\n\n\n\n\n\n\ngcovr\n\n\nRuns test coverage reports for your Xcode project\n\n\nios\n\n\n\n\n\n\nlcov\n\n\nGenerates coverage data using lcov\n\n\nios, mac\n\n\n\n\n\n\nappium\n\n\nRun UI test by Appium with RSpec\n\n\nios, android\n\n\n\n\n\n\nxctool\n\n\nRun tests using xctool\n\n\nios, mac\n\n\n\n\n\n\nxcode_server_get_assets\n\n\nDownloads Xcode Bot assets like the \n.xcarchive\n and logs\n\n\nios, mac\n\n\n\n\n\n\nrun_tests\n\n\nEasily run tests of your iOS app (via \nscan\n)\n\n\nios, mac\n\n\n\n\n\n\n\n\nBuilding\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\ngym\n\n\nAlias for the \nbuild_app\n action\n\n\nios, mac\n\n\n\n\n\n\ncocoapods\n\n\nRuns \npod install\n for the project\n\n\nios, mac\n\n\n\n\n\n\ngradle\n\n\nAll gradle related actions, including building and testing your Android app\n\n\nios, android\n\n\n\n\n\n\nclear_derived_data\n\n\nDeletes the Xcode Derived Data\n\n\nios, mac\n\n\n\n\n\n\nadb\n\n\nRun ADB Actions\n\n\nandroid\n\n\n\n\n\n\nxcversion\n\n\nSelect an Xcode to use by version specifier\n\n\nios, mac\n\n\n\n\n\n\nxcodebuild\n\n\nUse the \nxcodebuild\n command to build and sign your app\n\n\nios, mac\n\n\n\n\n\n\ncarthage\n\n\nRuns \ncarthage\n for your project\n\n\nios, mac\n\n\n\n\n\n\nxcode_select\n\n\nChange the xcode-path to use. Useful for beta versions of Xcode\n\n\nios, mac\n\n\n\n\n\n\nensure_xcode_version\n\n\nEnsure the right version of Xcode is used\n\n\nios, mac\n\n\n\n\n\n\nclean_cocoapods_cache\n\n\nRemove the cache for pods\n\n\nios, mac\n\n\n\n\n\n\nverify_xcode\n\n\nVerifies that the Xcode installation is properly signed by Apple\n\n\nios, mac\n\n\n\n\n\n\nxcode_install\n\n\nMake sure a certain version of Xcode is installed\n\n\nios, mac\n\n\n\n\n\n\nverify_pod_keys\n\n\nVerifies all keys referenced from the Podfile are non-empty\n\n\nios, mac\n\n\n\n\n\n\nxctest\n\n\nRuns tests on the given simulator\n\n\nios, mac\n\n\n\n\n\n\nxcbuild\n\n\nBuilds the project using \nxcodebuild\n\n\nios, mac\n\n\n\n\n\n\nbuild_ios_app\n\n\nAlias for the \nbuild_app\n action but only for iOS\n\n\nios\n\n\n\n\n\n\ncreate_xcframework\n\n\nPackage multiple build configs of a library/framework into a single xcframework\n\n\nios, mac\n\n\n\n\n\n\nxcarchive\n\n\nArchives the project using \nxcodebuild\n\n\nios, mac\n\n\n\n\n\n\nbuild_app\n\n\nEasily build and sign your app (via \ngym\n)\n\n\nios, mac\n\n\n\n\n\n\nxcexport\n\n\nExports the project using \nxcodebuild\n\n\nios, mac\n\n\n\n\n\n\nbuild_android_app\n\n\nAlias for the \ngradle\n action\n\n\nios, android\n\n\n\n\n\n\nspm\n\n\nRuns Swift Package Manager on your project\n\n\nios, android, mac\n\n\n\n\n\n\nbuild_mac_app\n\n\nAlias for the \nbuild_app\n action but only for macOS\n\n\nmac\n\n\n\n\n\n\nxcclean\n\n\nCleans the project using \nxcodebuild\n\n\nios, mac\n\n\n\n\n\n\n\n\nScreenshots\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nsnapshot\n\n\nAlias for the \ncapture_ios_screenshots\n action\n\n\nios, mac\n\n\n\n\n\n\nscreengrab\n\n\nAlias for the \ncapture_android_screenshots\n action\n\n\nandroid\n\n\n\n\n\n\nframeit\n\n\nAlias for the \nframe_screenshots\n action\n\n\nios, android, mac\n\n\n\n\n\n\ncapture_screenshots\n\n\nAlias for the \ncapture_ios_screenshots\n action\n\n\nios, mac\n\n\n\n\n\n\nframe_screenshots\n\n\nAdds device frames around all screenshots (via \nframeit\n)\n\n\nios, android, mac\n\n\n\n\n\n\ncapture_ios_screenshots\n\n\nGenerate new localized screenshots on multiple devices (via \nsnapshot\n)\n\n\nios, mac\n\n\n\n\n\n\ncapture_android_screenshots\n\n\nAutomated localized screenshots of your Android app (via \nscreengrab\n)\n\n\nandroid\n\n\n\n\n\n\n\n\nProject\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nincrement_build_number\n\n\nIncrement the build number of your project\n\n\nios, mac\n\n\n\n\n\n\nset_info_plist_value\n\n\nSets value to Info.plist of your project as native Ruby data structures\n\n\nios, mac\n\n\n\n\n\n\nget_version_number\n\n\nGet the version number of your project\n\n\nios, mac\n\n\n\n\n\n\nget_info_plist_value\n\n\nReturns value from Info.plist of your project as native Ruby data structures\n\n\nios, mac\n\n\n\n\n\n\nupdate_info_plist\n\n\nUpdate a Info.plist file with bundle identifier and display name\n\n\nios\n\n\n\n\n\n\nupdate_app_identifier\n\n\nUpdate the project's bundle identifier\n\n\nios\n\n\n\n\n\n\nget_build_number\n\n\nGet the build number of your project\n\n\nios, mac\n\n\n\n\n\n\nincrement_version_number\n\n\nIncrement the version number of your project\n\n\nios, mac\n\n\n\n\n\n\nupdate_project_team\n\n\nUpdate Xcode Development Team ID\n\n\nios, mac\n\n\n\n\n\n\nupdate_app_group_identifiers\n\n\nThis action changes the app group identifiers in the entitlements file\n\n\nios\n\n\n\n\n\n\nget_ipa_info_plist_value\n\n\nReturns a value from Info.plist inside a .ipa file\n\n\nios, mac\n\n\n\n\n\n\nrecreate_schemes\n\n\nRecreate not shared Xcode project schemes\n\n\nios, mac\n\n\n\n\n\n\nupdate_url_schemes\n\n\nUpdates the URL schemes in the given Info.plist\n\n\nios, mac\n\n\n\n\n\n\nset_build_number_repository\n\n\nSet the build number from the current repository\n\n\nios, mac\n\n\n\n\n\n\nset_pod_key\n\n\nSets a value for a key with cocoapods-keys\n\n\nios, mac\n\n\n\n\n\n\nupdate_keychain_access_groups\n\n\nThis action changes the keychain access groups in the entitlements file\n\n\nios\n\n\n\n\n\n\nupdate_plist\n\n\nUpdate a plist file\n\n\nios\n\n\n\n\n\n\n\n\nCode Signing\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nsigh\n\n\nAlias for the \nget_provisioning_profile\n action\n\n\nios, mac\n\n\n\n\n\n\nmatch\n\n\nAlias for the \nsync_code_signing\n action\n\n\nios, mac\n\n\n\n\n\n\ncert\n\n\nAlias for the \nget_certificates\n action\n\n\nios\n\n\n\n\n\n\nimport_certificate\n\n\nImport certificate from inputfile into a keychain\n\n\nios, android, mac\n\n\n\n\n\n\nupdate_project_provisioning\n\n\nUpdate projects code signing settings from your provisioning profile\n\n\nios, mac\n\n\n\n\n\n\nresign\n\n\nCodesign an existing ipa file\n\n\nios\n\n\n\n\n\n\nregister_devices\n\n\nRegisters new devices to the Apple Dev Portal\n\n\nios, mac\n\n\n\n\n\n\nregister_device\n\n\nRegisters a new device to the Apple Dev Portal\n\n\nios\n\n\n\n\n\n\nget_provisioning_profile\n\n\nGenerates a provisioning profile, saving it in the current folder (via \nsigh\n)\n\n\nios, mac\n\n\n\n\n\n\nsync_code_signing\n\n\nEasily sync your certificates and profiles across your team (via \nmatch\n)\n\n\nios, mac\n\n\n\n\n\n\nupdate_code_signing_settings\n\n\nConfigures Xcode's Codesigning options\n\n\nios, mac\n\n\n\n\n\n\nnotarize\n\n\nNotarizes a macOS app\n\n\nmac\n\n\n\n\n\n\ninstall_provisioning_profile\n\n\nInstall provisioning profile from path\n\n\nios, mac\n\n\n\n\n\n\nget_certificates\n\n\nCreate new iOS code signing certificates (via \ncert\n)\n\n\nios\n\n\n\n\n\n\n\n\nDocumentation\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\njazzy\n\n\nGenerate docs using Jazzy\n\n\nios, mac\n\n\n\n\n\n\nappledoc\n\n\nGenerate Apple-like source code documentation from the source code\n\n\nios, mac\n\n\n\n\n\n\n\n\nBeta\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\npilot\n\n\nAlias for the \nupload_to_testflight\n action\n\n\nios\n\n\n\n\n\n\ntestflight\n\n\nAlias for the \nupload_to_testflight\n action\n\n\nios\n\n\n\n\n\n\ndeploygate\n\n\nUpload a new build to \nDeployGate\n\n\nios, android\n\n\n\n\n\n\napteligent\n\n\nUpload dSYM file to \nApteligent (Crittercism)\n\n\nios\n\n\n\n\n\n\nappetize\n\n\nUpload your app to \nAppetize.io\n to stream it in browser\n\n\nios, android\n\n\n\n\n\n\ntestfairy\n\n\nUpload a new build to \nTestFairy\n\n\nios, android\n\n\n\n\n\n\nappaloosa\n\n\nUpload your app to \nAppaloosa Store\n\n\nios, android, mac\n\n\n\n\n\n\nnexus_upload\n\n\nUpload a file to \nSonatype Nexus platform\n\n\nios, android, mac\n\n\n\n\n\n\ninstallr\n\n\nUpload a new build to \nInstallr\n\n\nios\n\n\n\n\n\n\nsplunkmint\n\n\nUpload dSYM file to \nSplunk MINT\n\n\nios\n\n\n\n\n\n\ntryouts\n\n\nUpload a new build to \nTryouts\n\n\nios, android\n\n\n\n\n\n\npodio_item\n\n\nCreates or updates an item within your Podio app\n\n\nios, android, mac\n\n\n\n\n\n\nupload_to_testflight\n\n\nUpload new binary to App Store Connect for TestFlight beta testing (via \npilot\n)\n\n\nios\n\n\n\n\n\n\n\n\nPush\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\npem\n\n\nAlias for the \nget_push_certificate\n action\n\n\nios\n\n\n\n\n\n\nupdate_urban_airship_configuration\n\n\nSet \nUrban Airship\n plist configuration values\n\n\nios\n\n\n\n\n\n\nonesignal\n\n\nCreate or update a new \nOneSignal\n application\n\n\nios, android\n\n\n\n\n\n\nget_push_certificate\n\n\nEnsure a valid push profile is active, creating a new one if needed (via \npem\n)\n\n\nios\n\n\n\n\n\n\n\n\nReleasing your app\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\ndeliver\n\n\nAlias for the \nupload_to_app_store\n action\n\n\nios, mac\n\n\n\n\n\n\nsupply\n\n\nAlias for the \nupload_to_play_store\n action\n\n\nandroid\n\n\n\n\n\n\nappstore\n\n\nAlias for the \nupload_to_app_store\n action\n\n\nios, mac\n\n\n\n\n\n\nupload_to_play_store_internal_app_sharing\n\n\nUpload binaries to Google Play Internal App Sharing (via \nsupply\n)\n\n\nandroid\n\n\n\n\n\n\nupload_to_app_store\n\n\nUpload metadata and binary to App Store Connect (via \ndeliver\n)\n\n\nios, mac\n\n\n\n\n\n\ndownload_from_play_store\n\n\nDownload metadata and binaries from Google Play (via \nsupply\n)\n\n\nandroid\n\n\n\n\n\n\nupload_to_play_store\n\n\nUpload metadata, screenshots and binaries to Google Play (via \nsupply\n)\n\n\nandroid\n\n\n\n\n\n\ndownload_app_privacy_details_from_app_store\n\n\nDownload App Privacy Details from an app in App Store Connect\n\n\nios, mac\n\n\n\n\n\n\nupload_app_privacy_details_to_app_store\n\n\nUpload App Privacy Details for an app in App Store Connect\n\n\nios, mac\n\n\n\n\n\n\n\n\nSource Control\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nensure_git_status_clean\n\n\nRaises an exception if there are uncommitted git changes\n\n\nios, android, mac\n\n\n\n\n\n\ngit_branch\n\n\nReturns the name of the current git branch, possibly as managed by CI ENV vars\n\n\nios, android, mac\n\n\n\n\n\n\nlast_git_commit\n\n\nReturn last git commit hash, abbreviated commit hash, commit message and author\n\n\nios, android, mac\n\n\n\n\n\n\nreset_git_repo\n\n\nResets git repo to a clean state by discarding uncommitted changes\n\n\nios, android, mac\n\n\n\n\n\n\nchangelog_from_git_commits\n\n\nCollect git commit messages into a changelog\n\n\nios, android, mac\n\n\n\n\n\n\nnumber_of_commits\n\n\nReturn the number of commits in current git branch\n\n\nios, android, mac\n\n\n\n\n\n\ngit_pull\n\n\nExecutes a simple git pull command\n\n\nios, android, mac\n\n\n\n\n\n\nlast_git_tag\n\n\nGet the most recent git tag\n\n\nios, android, mac\n\n\n\n\n\n\npush_to_git_remote\n\n\nPush local changes to the remote branch\n\n\nios, android, mac\n\n\n\n\n\n\nadd_git_tag\n\n\nThis will add an annotated git tag to the current branch\n\n\nios, android, mac\n\n\n\n\n\n\ncommit_version_bump\n\n\nCreates a 'Version Bump' commit. Run after \nincrement_build_number\n\n\nios, mac\n\n\n\n\n\n\ngit_tag_exists\n\n\nChecks if the git tag with the given name exists in the current repo\n\n\nios, android, mac\n\n\n\n\n\n\nensure_git_branch\n\n\nRaises an exception if not on a specific git branch\n\n\nios, android, mac\n\n\n\n\n\n\ngit_commit\n\n\nDirectly commit the given file with the given message\n\n\nios, android, mac\n\n\n\n\n\n\npush_git_tags\n\n\nPush local tags to the remote - this will only push tags\n\n\nios, android, mac\n\n\n\n\n\n\ngit_add\n\n\nDirectly add the given file or all files\n\n\nios, android, mac\n\n\n\n\n\n\nget_build_number_repository\n\n\nGet the build number from the current repository\n\n\nios, mac\n\n\n\n\n\n\nset_github_release\n\n\nThis will create a new release on GitHub and upload assets for it\n\n\nios, android, mac\n\n\n\n\n\n\ncreate_pull_request\n\n\nThis will create a new pull request on GitHub\n\n\nios, android, mac\n\n\n\n\n\n\nget_github_release\n\n\nThis will verify if a given release version is available on GitHub\n\n\nios, android, mac\n\n\n\n\n\n\nhg_ensure_clean_status\n\n\nRaises an exception if there are uncommitted hg changes\n\n\nios, android, mac\n\n\n\n\n\n\nhg_commit_version_bump\n\n\nThis will commit a version bump to the hg repo\n\n\nios, android, mac\n\n\n\n\n\n\nhg_push\n\n\nThis will push changes to the remote hg repository\n\n\nios, android, mac\n\n\n\n\n\n\nhg_add_tag\n\n\nThis will add a hg tag to the current branch\n\n\nios, android, mac\n\n\n\n\n\n\ngithub_api\n\n\nCall a GitHub API endpoint and get the resulting JSON response\n\n\nios, android, mac\n\n\n\n\n\n\ngit_submodule_update\n\n\nExecutes a git submodule command\n\n\nios, android, mac\n\n\n\n\n\n\ncommit_github_file\n\n\nThis will commit a file directly on GitHub via the API\n\n\nios, android, mac\n\n\n\n\n\n\n\n\nNotifications\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nslack\n\n\nSend a success/error message to your \nSlack\n group\n\n\nios, android, mac\n\n\n\n\n\n\nnotification\n\n\nDisplay a macOS notification with custom message and title\n\n\nios, android, mac\n\n\n\n\n\n\nhipchat\n\n\nSend a error/success message to \nHipChat\n\n\nios, android, mac\n\n\n\n\n\n\nmailgun\n\n\nSend a success/error message to an email group\n\n\nios, android, mac\n\n\n\n\n\n\nchatwork\n\n\nSend a success/error message to \nChatWork\n\n\nios, android, mac\n\n\n\n\n\n\nifttt\n\n\nConnect to the \nIFTTT Maker Channel\n\n\nios, android, mac\n\n\n\n\n\n\nflock\n\n\nSend a message to a \nFlock\n group\n\n\nios, android, mac\n\n\n\n\n\n\ntwitter\n\n\nPost a tweet on \nTwitter.com\n\n\nios, android, mac\n\n\n\n\n\n\ntypetalk\n\n\nPost a message to \nTypetalk\n\n\nios, android, mac\n\n\n\n\n\n\n\n\nApp Store Connect\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nproduce\n\n\nAlias for the \ncreate_app_online\n action\n\n\nios\n\n\n\n\n\n\nprecheck\n\n\nAlias for the \ncheck_app_store_metadata\n action\n\n\nios\n\n\n\n\n\n\nlatest_testflight_build_number\n\n\nFetches most recent build number from TestFlight\n\n\nios, mac\n\n\n\n\n\n\ndownload_dsyms\n\n\nDownload dSYM files from App Store Connect for Bitcode apps\n\n\nios\n\n\n\n\n\n\napp_store_build_number\n\n\nReturns the current build_number of either live or edit version\n\n\nios, mac\n\n\n\n\n\n\nset_changelog\n\n\nSet the changelog for all languages on App Store Connect\n\n\nios, mac\n\n\n\n\n\n\ncheck_app_store_metadata\n\n\nCheck your app's metadata before you submit your app to review (via \nprecheck\n)\n\n\nios\n\n\n\n\n\n\ncreate_app_online\n\n\nCreates the given application on iTC and the Dev Portal (via \nproduce\n)\n\n\nios\n\n\n\n\n\n\napp_store_connect_api_key\n\n\nLoad the App Store Connect API token to use in other fastlane tools and actions\n\n\nios, android, mac\n\n\n\n\n\n\n\n\nMisc\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\nputs\n\n\nPrints out the given text\n\n\nios, android, mac\n\n\n\n\n\n\ndefault_platform\n\n\nDefines a default platform to not have to specify the platform\n\n\nios, android, mac\n\n\n\n\n\n\nfastlane_version\n\n\nAlias for the \nmin_fastlane_version\n action\n\n\nios, android, mac\n\n\n\n\n\n\nlane_context\n\n\nAccess lane context values\n\n\nios, android, mac\n\n\n\n\n\n\nimport\n\n\nImport another Fastfile to use its lanes\n\n\nios, android, mac\n\n\n\n\n\n\nimport_from_git\n\n\nImport another Fastfile from a remote git repository to use its lanes\n\n\nios, android, mac\n\n\n\n\n\n\nclean_build_artifacts\n\n\nDeletes files created as result of running gym, cert, sigh or download_dsyms\n\n\nios, mac\n\n\n\n\n\n\nskip_docs\n\n\nSkip the creation of the fastlane/README.md file when running fastlane\n\n\nios, android, mac\n\n\n\n\n\n\nis_ci\n\n\nIs the current run being executed on a CI system, like Jenkins or Travis\n\n\nios, android, mac\n\n\n\n\n\n\nsetup_jenkins\n\n\nSetup xcodebuild, gym and scan for easier Jenkins integration\n\n\nios, mac\n\n\n\n\n\n\nunlock_keychain\n\n\nUnlock a keychain\n\n\nios, android, mac\n\n\n\n\n\n\nupdate_fastlane\n\n\nMakes sure fastlane-tools are up-to-date when running fastlane\n\n\nios, android, mac\n\n\n\n\n\n\nbundle_install\n\n\nThis action runs \nbundle install\n (if available)\n\n\nios, android, mac\n\n\n\n\n\n\nupload_symbols_to_crashlytics\n\n\nUpload dSYM symbolication files to Crashlytics\n\n\nios\n\n\n\n\n\n\ncreate_keychain\n\n\nCreate a new Keychain\n\n\nios, android, mac\n\n\n\n\n\n\ndelete_keychain\n\n\nDelete keychains and remove them from the search list\n\n\nios, android, mac\n\n\n\n\n\n\nbackup_file\n\n\nThis action backs up your file to \"[path].back\"\n\n\nios, android, mac\n\n\n\n\n\n\ncopy_artifacts\n\n\nCopy and save your build artifacts (useful when you use reset_git_repo)\n\n\nios, android, mac\n\n\n\n\n\n\nprompt\n\n\nAsk the user for a value or for confirmation\n\n\nios, android, mac\n\n\n\n\n\n\nreset_simulator_contents\n\n\nShutdown and reset running simulators\n\n\nios\n\n\n\n\n\n\nrestore_file\n\n\nThis action restore your file that was backuped with the \nbackup_file\n action\n\n\nios, android, mac\n\n\n\n\n\n\nsay\n\n\nThis action speaks the given text out loud\n\n\nios, android, mac\n\n\n\n\n\n\nzip\n\n\nCompress a file or folder to a zip\n\n\nios, android, mac\n\n\n\n\n\n\ndanger\n\n\nRuns \ndanger\n for the project\n\n\nios, android, mac\n\n\n\n\n\n\nartifactory\n\n\nThis action uploads an artifact to artifactory\n\n\nios, android, mac\n\n\n\n\n\n\nversion_bump_podspec\n\n\nIncrement or set the version in a podspec file\n\n\nios, mac\n\n\n\n\n\n\nteam_id\n\n\nSpecify the Team ID you want to use for the Apple Developer Portal\n\n\nios\n\n\n\n\n\n\nbackup_xcarchive\n\n\nSave your [zipped] xcarchive elsewhere from default path\n\n\nios, mac\n\n\n\n\n\n\npod_lib_lint\n\n\nPod lib lint\n\n\nios, mac\n\n\n\n\n\n\nerb\n\n\nAllows to Generate output files based on ERB templates\n\n\nios, android, mac\n\n\n\n\n\n\ndownload\n\n\nDownload a file from a remote server (e.g. JSON file)\n\n\nios, android, mac\n\n\n\n\n\n\nrocket\n\n\nOutputs ascii-art for a rocket \ud83d\ude80\n\n\nios, android, mac\n\n\n\n\n\n\ndebug\n\n\nPrint out an overview of the lane context values\n\n\nios, android, mac\n\n\n\n\n\n\nmake_changelog_from_jenkins\n\n\nGenerate a changelog using the Changes section from the current Jenkins build\n\n\nios, android, mac\n\n\n\n\n\n\npod_push\n\n\nPush a Podspec to Trunk or a private repository\n\n\nios, mac\n\n\n\n\n\n\ndsym_zip\n\n\nCreates a zipped dSYM in the project root from the .xcarchive\n\n\nios, mac\n\n\n\n\n\n\nensure_no_debug_code\n\n\nEnsures the given text is nowhere in the code base\n\n\nios, android, mac\n\n\n\n\n\n\ncloc\n\n\nGenerates a Code Count that can be read by Jenkins (xml format)\n\n\nios, mac\n\n\n\n\n\n\nteam_name\n\n\nSet a team to use by its name\n\n\nios\n\n\n\n\n\n\nscp\n\n\nTransfer files via SCP\n\n\nios, android, mac\n\n\n\n\n\n\nverify_build\n\n\nAble to verify various settings in ipa file\n\n\nios\n\n\n\n\n\n\ninstall_on_device\n\n\nInstalls an .ipa file on a connected iOS-device via usb or wifi\n\n\nios\n\n\n\n\n\n\nversion_get_podspec\n\n\nReceive the version number from a podspec file\n\n\nios, mac\n\n\n\n\n\n\nrsync\n\n\nRsync files from :source to :destination\n\n\nios, android, mac\n\n\n\n\n\n\nadb_devices\n\n\nGet an array of Connected android device serials\n\n\nandroid\n\n\n\n\n\n\ndotgpg_environment\n\n\nReads in production secrets set in a dotgpg file and puts them in ENV\n\n\nios, android, mac\n\n\n\n\n\n\njira\n\n\nLeave a comment on JIRA tickets\n\n\nios, android, mac\n\n\n\n\n\n\nread_podspec\n\n\nLoads a CocoaPods spec as JSON\n\n\nios, mac\n\n\n\n\n\n\nssh\n\n\nAllows remote command execution using ssh\n\n\nios, android, mac\n\n\n\n\n\n\nappetize_viewing_url_generator\n\n\nGenerate an URL for appetize simulator\n\n\nios\n\n\n\n\n\n\ninstall_xcode_plugin\n\n\nInstall an Xcode plugin for the current user\n\n\nios, mac\n\n\n\n\n\n\nadd_extra_platforms\n\n\nModify the default list of supported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nclipboard\n\n\nCopies a given string into the clipboard. Works only on macOS\n\n\nios, android, mac\n\n\n\n\n\n\nbuild_and_upload_to_appetize\n\n\nGenerate and upload an ipa file to appetize.io\n\n\nios\n\n\n\n\n\n\nupdate_icloud_container_identifiers\n\n\nThis action changes the iCloud container identifiers in the entitlements file\n\n\nios\n\n\n\n\n\n\nsh\n\n\nRuns a shell command\n\n\nios, android, mac\n\n\n\n\n\n\nsetup_circle_ci\n\n\nSetup the keychain and match to work with CircleCI\n\n\nios, android, mac\n\n\n\n\n\n\necho\n\n\nAlias for the \nputs\n action\n\n\nios, android, mac\n\n\n\n\n\n\nensure_bundle_exec\n\n\nRaises an exception if not using \nbundle exec\n to run fastlane\n\n\nios, android, mac\n\n\n\n\n\n\nplugin_scores\n\n\n\u001b[31mNo description provided\u001b[0m\n\n\nios, android, mac\n\n\n\n\n\n\nsetup_ci\n\n\nSetup the keychain and match to work with CI\n\n\nios, mac\n\n\n\n\n\n\nenvironment_variable\n\n\nSets/gets env vars for Fastlane.swift. Don't use in ruby, use \nENV[key] = val\n\n\nios, android, mac\n\n\n\n\n\n\nmin_fastlane_version\n\n\nVerifies the minimum fastlane version required\n\n\nios, android, mac\n\n\n\n\n\n\nsetup_travis\n\n\nSetup the keychain and match to work with Travis CI\n\n\nios, android, mac\n\n\n\n\n\n\nruby_version\n\n\nVerifies the minimum ruby version required\n\n\nios, android, mac\n\n\n\n\n\n\nopt_out_usage\n\n\nThis will stop uploading the information which actions were run\n\n\nios, android, mac\n\n\n\n\n\n\nvalidate_play_store_json_key\n\n\nValidate that the Google Play Store \njson_key\n works\n\n\nandroid\n\n\n\n\n\n\ngoogle_play_track_release_names\n\n\nRetrieves release names for a Google Play track\n\n\nandroid\n\n\n\n\n\n\ncreate_app_on_managed_play_store\n\n\nCreate Managed Google Play Apps\n\n\nandroid\n\n\n\n\n\n\ngoogle_play_track_version_codes\n\n\nRetrieves version codes for a Google Play track\n\n\nandroid\n\n\n\n\n\n\nspaceship_logs\n\n\nFind, print, and copy Spaceship logs\n\n\nios, android, mac\n\n\n\n\n\n\nget_managed_play_store_publishing_rights\n\n\nObtain publishing rights for custom apps on Managed Google Play Store\n\n\nandroid\n\n\n\n\n\n\nmodify_services\n\n\nModifies the services of the app created on Developer Portal\n\n\nios\n\n\n\n\n\n\nspaceship_stats\n\n\nPrint out Spaceship stats from this session (number of request to each domain)\n\n\nios, android, mac\n\n\n\n\n\n\nensure_env_vars\n\n\nRaises an exception if the specified env vars are not set\n\n\nios, android, mac\n\n\n\n\n\n\nprintln\n\n\nAlias for the \nputs\n action\n\n\nios, android, mac\n\n\n\n\n\n\n\n\nDeprecated\n\n\n\n\n\n\n\n\nAction\n\n\nDescription\n\n\nSupported Platforms\n\n\n\n\n\n\n\n\n\n\ncrashlytics\n\n\nRefer to \nFirebase App Distribution\n\n\nios, android, mac\n\n\n\n\n\n\nhockey\n\n\nRefer to \nApp Center\n\n\nios, android, mac\n\n\n\n\n\n\nbadge\n\n\nAutomatically add a badge to your app icon\n\n\nios, android, mac\n\n\n\n\n\n\nautomatic_code_signing\n\n\nConfigures Xcode's Codesigning options\n\n\nios, mac\n\n\n\n\n\n\ns3\n\n\nGenerates a plist file and uploads all to AWS S3\n\n\n\n\n\n\n\n\nnotify\n\n\nShows a macOS notification - use \nnotification\n instead\n\n\nios, android, mac\n\n\n\n\n\n\nupdate_project_code_signing\n\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n\nios\n\n\n\n\n\n\nipa\n\n\nEasily build and sign your app using shenzhen\n\n\nios\n\n\n\n\n\n\nupload_symbols_to_sentry\n\n\nUpload dSYM symbolication files to Sentry\n\n\nios\n\n\n\n\n\n\nopt_out_crash_reporting\n\n\nThis will prevent reports from being uploaded when \nfastlane\n crashes\n\n\nios, android, mac",
            "title": "Available Actions"
        },
        {
            "location": "/actions/#fastlane-actions",
            "text": "This page contains a list of all built-in fastlane actions and their available options.  To get the most up-to-date information from the command line on your current version you can also run  fastlane actions # list all available fastlane actions\nfastlane action [action_name] # more information for a specific action  You can import another  Fastfile  by using the  import  action. This is useful if you have shared lanes across multiple apps and you want to store a  Fastfile  in a separate folder. The path must be relative to the  Fastfile  this is called from.  import './path/to/other/Fastfile'  For  fastlane  plugins, check out the  available plugins  page.\nIf you want to create your own action, check out the  local actions  page.   Testing  Building  Screenshots  Project  Code Signing  Documentation  Beta  Push  Releasing your app  Source Control  Notifications  App Store Connect  Misc  Deprecated  Plugins",
            "title": "fastlane actions"
        },
        {
            "location": "/actions/#testing",
            "text": "Action  Description  Supported Platforms      scan  Alias for the  run_tests  action  ios, mac    slather  Use slather to generate a code coverage report  ios, mac    swiftlint  Run swift code validation using SwiftLint  ios, mac    xcov  Nice code coverage reports without hassle  ios, mac    sonar  Invokes sonar-scanner to programmatically run SonarQube analysis  ios, android, mac    oclint  Lints implementation files with OCLint  ios, android, mac    gcovr  Runs test coverage reports for your Xcode project  ios    lcov  Generates coverage data using lcov  ios, mac    appium  Run UI test by Appium with RSpec  ios, android    xctool  Run tests using xctool  ios, mac    xcode_server_get_assets  Downloads Xcode Bot assets like the  .xcarchive  and logs  ios, mac    run_tests  Easily run tests of your iOS app (via  scan )  ios, mac",
            "title": "Testing"
        },
        {
            "location": "/actions/#building",
            "text": "Action  Description  Supported Platforms      gym  Alias for the  build_app  action  ios, mac    cocoapods  Runs  pod install  for the project  ios, mac    gradle  All gradle related actions, including building and testing your Android app  ios, android    clear_derived_data  Deletes the Xcode Derived Data  ios, mac    adb  Run ADB Actions  android    xcversion  Select an Xcode to use by version specifier  ios, mac    xcodebuild  Use the  xcodebuild  command to build and sign your app  ios, mac    carthage  Runs  carthage  for your project  ios, mac    xcode_select  Change the xcode-path to use. Useful for beta versions of Xcode  ios, mac    ensure_xcode_version  Ensure the right version of Xcode is used  ios, mac    clean_cocoapods_cache  Remove the cache for pods  ios, mac    verify_xcode  Verifies that the Xcode installation is properly signed by Apple  ios, mac    xcode_install  Make sure a certain version of Xcode is installed  ios, mac    verify_pod_keys  Verifies all keys referenced from the Podfile are non-empty  ios, mac    xctest  Runs tests on the given simulator  ios, mac    xcbuild  Builds the project using  xcodebuild  ios, mac    build_ios_app  Alias for the  build_app  action but only for iOS  ios    create_xcframework  Package multiple build configs of a library/framework into a single xcframework  ios, mac    xcarchive  Archives the project using  xcodebuild  ios, mac    build_app  Easily build and sign your app (via  gym )  ios, mac    xcexport  Exports the project using  xcodebuild  ios, mac    build_android_app  Alias for the  gradle  action  ios, android    spm  Runs Swift Package Manager on your project  ios, android, mac    build_mac_app  Alias for the  build_app  action but only for macOS  mac    xcclean  Cleans the project using  xcodebuild  ios, mac",
            "title": "Building"
        },
        {
            "location": "/actions/#screenshots",
            "text": "Action  Description  Supported Platforms      snapshot  Alias for the  capture_ios_screenshots  action  ios, mac    screengrab  Alias for the  capture_android_screenshots  action  android    frameit  Alias for the  frame_screenshots  action  ios, android, mac    capture_screenshots  Alias for the  capture_ios_screenshots  action  ios, mac    frame_screenshots  Adds device frames around all screenshots (via  frameit )  ios, android, mac    capture_ios_screenshots  Generate new localized screenshots on multiple devices (via  snapshot )  ios, mac    capture_android_screenshots  Automated localized screenshots of your Android app (via  screengrab )  android",
            "title": "Screenshots"
        },
        {
            "location": "/actions/#project",
            "text": "Action  Description  Supported Platforms      increment_build_number  Increment the build number of your project  ios, mac    set_info_plist_value  Sets value to Info.plist of your project as native Ruby data structures  ios, mac    get_version_number  Get the version number of your project  ios, mac    get_info_plist_value  Returns value from Info.plist of your project as native Ruby data structures  ios, mac    update_info_plist  Update a Info.plist file with bundle identifier and display name  ios    update_app_identifier  Update the project's bundle identifier  ios    get_build_number  Get the build number of your project  ios, mac    increment_version_number  Increment the version number of your project  ios, mac    update_project_team  Update Xcode Development Team ID  ios, mac    update_app_group_identifiers  This action changes the app group identifiers in the entitlements file  ios    get_ipa_info_plist_value  Returns a value from Info.plist inside a .ipa file  ios, mac    recreate_schemes  Recreate not shared Xcode project schemes  ios, mac    update_url_schemes  Updates the URL schemes in the given Info.plist  ios, mac    set_build_number_repository  Set the build number from the current repository  ios, mac    set_pod_key  Sets a value for a key with cocoapods-keys  ios, mac    update_keychain_access_groups  This action changes the keychain access groups in the entitlements file  ios    update_plist  Update a plist file  ios",
            "title": "Project"
        },
        {
            "location": "/actions/#code-signing",
            "text": "Action  Description  Supported Platforms      sigh  Alias for the  get_provisioning_profile  action  ios, mac    match  Alias for the  sync_code_signing  action  ios, mac    cert  Alias for the  get_certificates  action  ios    import_certificate  Import certificate from inputfile into a keychain  ios, android, mac    update_project_provisioning  Update projects code signing settings from your provisioning profile  ios, mac    resign  Codesign an existing ipa file  ios    register_devices  Registers new devices to the Apple Dev Portal  ios, mac    register_device  Registers a new device to the Apple Dev Portal  ios    get_provisioning_profile  Generates a provisioning profile, saving it in the current folder (via  sigh )  ios, mac    sync_code_signing  Easily sync your certificates and profiles across your team (via  match )  ios, mac    update_code_signing_settings  Configures Xcode's Codesigning options  ios, mac    notarize  Notarizes a macOS app  mac    install_provisioning_profile  Install provisioning profile from path  ios, mac    get_certificates  Create new iOS code signing certificates (via  cert )  ios",
            "title": "Code Signing"
        },
        {
            "location": "/actions/#documentation",
            "text": "Action  Description  Supported Platforms      jazzy  Generate docs using Jazzy  ios, mac    appledoc  Generate Apple-like source code documentation from the source code  ios, mac",
            "title": "Documentation"
        },
        {
            "location": "/actions/#beta",
            "text": "Action  Description  Supported Platforms      pilot  Alias for the  upload_to_testflight  action  ios    testflight  Alias for the  upload_to_testflight  action  ios    deploygate  Upload a new build to  DeployGate  ios, android    apteligent  Upload dSYM file to  Apteligent (Crittercism)  ios    appetize  Upload your app to  Appetize.io  to stream it in browser  ios, android    testfairy  Upload a new build to  TestFairy  ios, android    appaloosa  Upload your app to  Appaloosa Store  ios, android, mac    nexus_upload  Upload a file to  Sonatype Nexus platform  ios, android, mac    installr  Upload a new build to  Installr  ios    splunkmint  Upload dSYM file to  Splunk MINT  ios    tryouts  Upload a new build to  Tryouts  ios, android    podio_item  Creates or updates an item within your Podio app  ios, android, mac    upload_to_testflight  Upload new binary to App Store Connect for TestFlight beta testing (via  pilot )  ios",
            "title": "Beta"
        },
        {
            "location": "/actions/#push",
            "text": "Action  Description  Supported Platforms      pem  Alias for the  get_push_certificate  action  ios    update_urban_airship_configuration  Set  Urban Airship  plist configuration values  ios    onesignal  Create or update a new  OneSignal  application  ios, android    get_push_certificate  Ensure a valid push profile is active, creating a new one if needed (via  pem )  ios",
            "title": "Push"
        },
        {
            "location": "/actions/#releasing-your-app",
            "text": "Action  Description  Supported Platforms      deliver  Alias for the  upload_to_app_store  action  ios, mac    supply  Alias for the  upload_to_play_store  action  android    appstore  Alias for the  upload_to_app_store  action  ios, mac    upload_to_play_store_internal_app_sharing  Upload binaries to Google Play Internal App Sharing (via  supply )  android    upload_to_app_store  Upload metadata and binary to App Store Connect (via  deliver )  ios, mac    download_from_play_store  Download metadata and binaries from Google Play (via  supply )  android    upload_to_play_store  Upload metadata, screenshots and binaries to Google Play (via  supply )  android    download_app_privacy_details_from_app_store  Download App Privacy Details from an app in App Store Connect  ios, mac    upload_app_privacy_details_to_app_store  Upload App Privacy Details for an app in App Store Connect  ios, mac",
            "title": "Releasing your app"
        },
        {
            "location": "/actions/#source-control",
            "text": "Action  Description  Supported Platforms      ensure_git_status_clean  Raises an exception if there are uncommitted git changes  ios, android, mac    git_branch  Returns the name of the current git branch, possibly as managed by CI ENV vars  ios, android, mac    last_git_commit  Return last git commit hash, abbreviated commit hash, commit message and author  ios, android, mac    reset_git_repo  Resets git repo to a clean state by discarding uncommitted changes  ios, android, mac    changelog_from_git_commits  Collect git commit messages into a changelog  ios, android, mac    number_of_commits  Return the number of commits in current git branch  ios, android, mac    git_pull  Executes a simple git pull command  ios, android, mac    last_git_tag  Get the most recent git tag  ios, android, mac    push_to_git_remote  Push local changes to the remote branch  ios, android, mac    add_git_tag  This will add an annotated git tag to the current branch  ios, android, mac    commit_version_bump  Creates a 'Version Bump' commit. Run after  increment_build_number  ios, mac    git_tag_exists  Checks if the git tag with the given name exists in the current repo  ios, android, mac    ensure_git_branch  Raises an exception if not on a specific git branch  ios, android, mac    git_commit  Directly commit the given file with the given message  ios, android, mac    push_git_tags  Push local tags to the remote - this will only push tags  ios, android, mac    git_add  Directly add the given file or all files  ios, android, mac    get_build_number_repository  Get the build number from the current repository  ios, mac    set_github_release  This will create a new release on GitHub and upload assets for it  ios, android, mac    create_pull_request  This will create a new pull request on GitHub  ios, android, mac    get_github_release  This will verify if a given release version is available on GitHub  ios, android, mac    hg_ensure_clean_status  Raises an exception if there are uncommitted hg changes  ios, android, mac    hg_commit_version_bump  This will commit a version bump to the hg repo  ios, android, mac    hg_push  This will push changes to the remote hg repository  ios, android, mac    hg_add_tag  This will add a hg tag to the current branch  ios, android, mac    github_api  Call a GitHub API endpoint and get the resulting JSON response  ios, android, mac    git_submodule_update  Executes a git submodule command  ios, android, mac    commit_github_file  This will commit a file directly on GitHub via the API  ios, android, mac",
            "title": "Source Control"
        },
        {
            "location": "/actions/#notifications",
            "text": "Action  Description  Supported Platforms      slack  Send a success/error message to your  Slack  group  ios, android, mac    notification  Display a macOS notification with custom message and title  ios, android, mac    hipchat  Send a error/success message to  HipChat  ios, android, mac    mailgun  Send a success/error message to an email group  ios, android, mac    chatwork  Send a success/error message to  ChatWork  ios, android, mac    ifttt  Connect to the  IFTTT Maker Channel  ios, android, mac    flock  Send a message to a  Flock  group  ios, android, mac    twitter  Post a tweet on  Twitter.com  ios, android, mac    typetalk  Post a message to  Typetalk  ios, android, mac",
            "title": "Notifications"
        },
        {
            "location": "/actions/#app-store-connect",
            "text": "Action  Description  Supported Platforms      produce  Alias for the  create_app_online  action  ios    precheck  Alias for the  check_app_store_metadata  action  ios    latest_testflight_build_number  Fetches most recent build number from TestFlight  ios, mac    download_dsyms  Download dSYM files from App Store Connect for Bitcode apps  ios    app_store_build_number  Returns the current build_number of either live or edit version  ios, mac    set_changelog  Set the changelog for all languages on App Store Connect  ios, mac    check_app_store_metadata  Check your app's metadata before you submit your app to review (via  precheck )  ios    create_app_online  Creates the given application on iTC and the Dev Portal (via  produce )  ios    app_store_connect_api_key  Load the App Store Connect API token to use in other fastlane tools and actions  ios, android, mac",
            "title": "App Store Connect"
        },
        {
            "location": "/actions/#misc",
            "text": "Action  Description  Supported Platforms      puts  Prints out the given text  ios, android, mac    default_platform  Defines a default platform to not have to specify the platform  ios, android, mac    fastlane_version  Alias for the  min_fastlane_version  action  ios, android, mac    lane_context  Access lane context values  ios, android, mac    import  Import another Fastfile to use its lanes  ios, android, mac    import_from_git  Import another Fastfile from a remote git repository to use its lanes  ios, android, mac    clean_build_artifacts  Deletes files created as result of running gym, cert, sigh or download_dsyms  ios, mac    skip_docs  Skip the creation of the fastlane/README.md file when running fastlane  ios, android, mac    is_ci  Is the current run being executed on a CI system, like Jenkins or Travis  ios, android, mac    setup_jenkins  Setup xcodebuild, gym and scan for easier Jenkins integration  ios, mac    unlock_keychain  Unlock a keychain  ios, android, mac    update_fastlane  Makes sure fastlane-tools are up-to-date when running fastlane  ios, android, mac    bundle_install  This action runs  bundle install  (if available)  ios, android, mac    upload_symbols_to_crashlytics  Upload dSYM symbolication files to Crashlytics  ios    create_keychain  Create a new Keychain  ios, android, mac    delete_keychain  Delete keychains and remove them from the search list  ios, android, mac    backup_file  This action backs up your file to \"[path].back\"  ios, android, mac    copy_artifacts  Copy and save your build artifacts (useful when you use reset_git_repo)  ios, android, mac    prompt  Ask the user for a value or for confirmation  ios, android, mac    reset_simulator_contents  Shutdown and reset running simulators  ios    restore_file  This action restore your file that was backuped with the  backup_file  action  ios, android, mac    say  This action speaks the given text out loud  ios, android, mac    zip  Compress a file or folder to a zip  ios, android, mac    danger  Runs  danger  for the project  ios, android, mac    artifactory  This action uploads an artifact to artifactory  ios, android, mac    version_bump_podspec  Increment or set the version in a podspec file  ios, mac    team_id  Specify the Team ID you want to use for the Apple Developer Portal  ios    backup_xcarchive  Save your [zipped] xcarchive elsewhere from default path  ios, mac    pod_lib_lint  Pod lib lint  ios, mac    erb  Allows to Generate output files based on ERB templates  ios, android, mac    download  Download a file from a remote server (e.g. JSON file)  ios, android, mac    rocket  Outputs ascii-art for a rocket \ud83d\ude80  ios, android, mac    debug  Print out an overview of the lane context values  ios, android, mac    make_changelog_from_jenkins  Generate a changelog using the Changes section from the current Jenkins build  ios, android, mac    pod_push  Push a Podspec to Trunk or a private repository  ios, mac    dsym_zip  Creates a zipped dSYM in the project root from the .xcarchive  ios, mac    ensure_no_debug_code  Ensures the given text is nowhere in the code base  ios, android, mac    cloc  Generates a Code Count that can be read by Jenkins (xml format)  ios, mac    team_name  Set a team to use by its name  ios    scp  Transfer files via SCP  ios, android, mac    verify_build  Able to verify various settings in ipa file  ios    install_on_device  Installs an .ipa file on a connected iOS-device via usb or wifi  ios    version_get_podspec  Receive the version number from a podspec file  ios, mac    rsync  Rsync files from :source to :destination  ios, android, mac    adb_devices  Get an array of Connected android device serials  android    dotgpg_environment  Reads in production secrets set in a dotgpg file and puts them in ENV  ios, android, mac    jira  Leave a comment on JIRA tickets  ios, android, mac    read_podspec  Loads a CocoaPods spec as JSON  ios, mac    ssh  Allows remote command execution using ssh  ios, android, mac    appetize_viewing_url_generator  Generate an URL for appetize simulator  ios    install_xcode_plugin  Install an Xcode plugin for the current user  ios, mac    add_extra_platforms  Modify the default list of supported platforms  ios, android, mac    clipboard  Copies a given string into the clipboard. Works only on macOS  ios, android, mac    build_and_upload_to_appetize  Generate and upload an ipa file to appetize.io  ios    update_icloud_container_identifiers  This action changes the iCloud container identifiers in the entitlements file  ios    sh  Runs a shell command  ios, android, mac    setup_circle_ci  Setup the keychain and match to work with CircleCI  ios, android, mac    echo  Alias for the  puts  action  ios, android, mac    ensure_bundle_exec  Raises an exception if not using  bundle exec  to run fastlane  ios, android, mac    plugin_scores  \u001b[31mNo description provided\u001b[0m  ios, android, mac    setup_ci  Setup the keychain and match to work with CI  ios, mac    environment_variable  Sets/gets env vars for Fastlane.swift. Don't use in ruby, use  ENV[key] = val  ios, android, mac    min_fastlane_version  Verifies the minimum fastlane version required  ios, android, mac    setup_travis  Setup the keychain and match to work with Travis CI  ios, android, mac    ruby_version  Verifies the minimum ruby version required  ios, android, mac    opt_out_usage  This will stop uploading the information which actions were run  ios, android, mac    validate_play_store_json_key  Validate that the Google Play Store  json_key  works  android    google_play_track_release_names  Retrieves release names for a Google Play track  android    create_app_on_managed_play_store  Create Managed Google Play Apps  android    google_play_track_version_codes  Retrieves version codes for a Google Play track  android    spaceship_logs  Find, print, and copy Spaceship logs  ios, android, mac    get_managed_play_store_publishing_rights  Obtain publishing rights for custom apps on Managed Google Play Store  android    modify_services  Modifies the services of the app created on Developer Portal  ios    spaceship_stats  Print out Spaceship stats from this session (number of request to each domain)  ios, android, mac    ensure_env_vars  Raises an exception if the specified env vars are not set  ios, android, mac    println  Alias for the  puts  action  ios, android, mac",
            "title": "Misc"
        },
        {
            "location": "/actions/#deprecated",
            "text": "Action  Description  Supported Platforms      crashlytics  Refer to  Firebase App Distribution  ios, android, mac    hockey  Refer to  App Center  ios, android, mac    badge  Automatically add a badge to your app icon  ios, android, mac    automatic_code_signing  Configures Xcode's Codesigning options  ios, mac    s3  Generates a plist file and uploads all to AWS S3     notify  Shows a macOS notification - use  notification  instead  ios, android, mac    update_project_code_signing  Updated code signing settings from 'Automatic' to a specific profile  ios    ipa  Easily build and sign your app using shenzhen  ios    upload_symbols_to_sentry  Upload dSYM symbolication files to Sentry  ios    opt_out_crash_reporting  This will prevent reports from being uploaded when  fastlane  crashes  ios, android, mac",
            "title": "Deprecated"
        },
        {
            "location": "/create-action/",
            "text": "Local actions\n\n\nYou can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.\n\n\nJust run \nfastlane new_action\n, enter the name of the action and edit the generated Ruby file in \nfastlane/actions/[action_name].rb\n. After you finished writing your action, add it to your version control, so it is available for your whole team.\n\n\nFrom then on, you can just use your action in your \nFastfile\n, just like any other action.\n\n\nSubmitting the action to the fastlane main repo\n\n\nPlease be aware we may not accept all actions submitted to be bundled with \nfastlane\n. Before you submit a pull request adding the action to the \nfastlane\n code base, submit an issue proposing the new action and why it should be built-in.\n\n\nIn general we tend to accept actions that\n\n\n\n\nGenerally usable for a big majority of developers (e.g. basic interactions with git)\n\n\nSolve pain points for mobile app developers (iOS and Android)\n\n\nhave an easy to read documentation and great test coverage\n\n\n\n\nIn general, we might not accept actions that\n\n\n\n\nSolve specific use-cases for only a small subset of developers\n\n\nAccess the API of a third party service, the third party service should own and maintain the action\n\n\nComplex actions, that will require a lot of work to maintain in the future\n\n\nEverything that isn't mobile developer related",
            "title": "Create Your Own Action"
        },
        {
            "location": "/create-action/#local-actions",
            "text": "You can create your own actions to extend the functionality of fastlane for your project. The action you create will behave exactly like the built in actions.  Just run  fastlane new_action , enter the name of the action and edit the generated Ruby file in  fastlane/actions/[action_name].rb . After you finished writing your action, add it to your version control, so it is available for your whole team.  From then on, you can just use your action in your  Fastfile , just like any other action.",
            "title": "Local actions"
        },
        {
            "location": "/create-action/#submitting-the-action-to-the-fastlane-main-repo",
            "text": "Please be aware we may not accept all actions submitted to be bundled with  fastlane . Before you submit a pull request adding the action to the  fastlane  code base, submit an issue proposing the new action and why it should be built-in.  In general we tend to accept actions that   Generally usable for a big majority of developers (e.g. basic interactions with git)  Solve pain points for mobile app developers (iOS and Android)  have an easy to read documentation and great test coverage   In general, we might not accept actions that   Solve specific use-cases for only a small subset of developers  Access the API of a third party service, the third party service should own and maintain the action  Complex actions, that will require a lot of work to maintain in the future  Everything that isn't mobile developer related",
            "title": "Submitting the action to the fastlane main repo"
        },
        {
            "location": "/actions/adb/",
            "text": "adb\n\n\nRun ADB Actions\n\n\n\n\nsee adb --help for more details\n\n\n\n\n\n\n\n\n\n\nadb\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\nReturns\n\n\nThe output of the adb command\n\n\n\n\n\n\n\n\n1 Example\n\n\nadb(\n  command: \"shell ls\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nserial\n\n\nAndroid serial of the device to use for this command\n\n\n''\n\n\n\n\n\n\ncommand\n\n\nAll commands you want to pass to the adb command, e.g. \nkill-server\n\n\n\n\n\n\n\n\nadb_path\n\n\nThe path to your \nadb\n binary (can be left blank if the ANDROID_SDK_ROOT environment variable is set)\n\n\nadb\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action adb\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run adb\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run adb parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "adb"
        },
        {
            "location": "/actions/adb/#adb",
            "text": "Run ADB Actions   see adb --help for more details      adb       Supported platforms  android    Author  @hjanuschka    Returns  The output of the adb command",
            "title": "adb"
        },
        {
            "location": "/actions/adb/#1-example",
            "text": "adb(\n  command: \"shell ls\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/adb/#parameters",
            "text": "Key  Description  Default      serial  Android serial of the device to use for this command  ''    command  All commands you want to pass to the adb command, e.g.  kill-server     adb_path  The path to your  adb  binary (can be left blank if the ANDROID_SDK_ROOT environment variable is set)  adb     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/adb/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action adb",
            "title": "Documentation"
        },
        {
            "location": "/actions/adb/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run adb  To pass parameters, make use of the  :  symbol, for example  fastlane run adb parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/adb/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/adb_devices/",
            "text": "adb_devices\n\n\nGet an array of Connected android device serials\n\n\n\n\nFetches device list via adb, e.g. run an adb command on all connected devices.\n\n\n\n\n\n\n\n\n\n\nadb_devices\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\nReturns\n\n\nReturns an array of all currently connected android devices\n\n\n\n\n\n\n\n\n1 Example\n\n\nadb_devices.each do |device|\n  model = adb(command: \"shell getprop ro.product.model\",\n    serial: device.serial).strip\n\n  puts \"Model #{model} is connected\"\nend\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadb_path\n\n\nThe path to your \nadb\n binary (can be left blank if the ANDROID_SDK_ROOT environment variable is set)\n\n\nadb\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action adb_devices\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run adb_devices\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run adb_devices parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "adb_devices"
        },
        {
            "location": "/actions/adb_devices/#adb_devices",
            "text": "Get an array of Connected android device serials   Fetches device list via adb, e.g. run an adb command on all connected devices.      adb_devices       Supported platforms  android    Author  @hjanuschka    Returns  Returns an array of all currently connected android devices",
            "title": "adb_devices"
        },
        {
            "location": "/actions/adb_devices/#1-example",
            "text": "adb_devices.each do |device|\n  model = adb(command: \"shell getprop ro.product.model\",\n    serial: device.serial).strip\n\n  puts \"Model #{model} is connected\"\nend",
            "title": "1 Example"
        },
        {
            "location": "/actions/adb_devices/#parameters",
            "text": "Key  Description  Default      adb_path  The path to your  adb  binary (can be left blank if the ANDROID_SDK_ROOT environment variable is set)  adb     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/adb_devices/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action adb_devices",
            "title": "Documentation"
        },
        {
            "location": "/actions/adb_devices/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run adb_devices  To pass parameters, make use of the  :  symbol, for example  fastlane run adb_devices parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/adb_devices/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/add_extra_platforms/",
            "text": "add_extra_platforms\n\n\nModify the default list of supported platforms\n\n\n\n\n\n\n\n\nadd_extra_platforms\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lacostej\n\n\n\n\n\n\n\n\n1 Example\n\n\nadd_extra_platforms(\n  platforms: [:windows, :neogeo]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplatforms\n\n\nThe optional extra platforms to support\n\n\n''\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action add_extra_platforms\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run add_extra_platforms\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run add_extra_platforms parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "add_extra_platforms"
        },
        {
            "location": "/actions/add_extra_platforms/#add_extra_platforms",
            "text": "Modify the default list of supported platforms     add_extra_platforms       Supported platforms  ios, android, mac    Author  @lacostej",
            "title": "add_extra_platforms"
        },
        {
            "location": "/actions/add_extra_platforms/#1-example",
            "text": "add_extra_platforms(\n  platforms: [:windows, :neogeo]\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/add_extra_platforms/#parameters",
            "text": "Key  Description  Default      platforms  The optional extra platforms to support  ''     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/add_extra_platforms/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action add_extra_platforms",
            "title": "Documentation"
        },
        {
            "location": "/actions/add_extra_platforms/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run add_extra_platforms  To pass parameters, make use of the  :  symbol, for example  fastlane run add_extra_platforms parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/add_extra_platforms/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/add_git_tag/",
            "text": "add_git_tag\n\n\nThis will add an annotated git tag to the current branch\n\n\n\n\nThis will automatically tag your build with the following format: \n<grouping>/<lane>/<prefix><build_number><postfix>\n, where:\n\n\n\n\ngrouping\n is just to keep your tags organised under one 'folder', defaults to 'builds'\n\n\nlane\n is the name of the current fastlane lane, if chosen to be included via 'includes_lane' option, which defaults to 'true'\n\n\nprefix\n is anything you want to stick in front of the version number, e.g. 'v'\n\n\npostfix\n is anything you want to stick at the end of the version number, e.g. '-RC1'\n\n\nbuild_number\n is the build number, which defaults to the value emitted by the \nincrement_build_number\n action\n\n\n\n\nFor example, for build 1234 in the 'appstore' lane, it will tag the commit with \nbuilds/appstore/1234\n.\n\n\n\n\n\n\n\n\n\n\nadd_git_tag\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic, @maschall\n\n\n\n\n\n\n\n\n3 Examples\n\n\nadd_git_tag # simple tag with default values\n\n\n\n\nadd_git_tag(\n  grouping: \"fastlane-builds\",\n  includes_lane: true,\n  prefix: \"v\",\n  postfix: \"-RC1\",\n  build_number: 123\n)\n\n\n\n\n# Alternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.\nadd_git_tag(\n  tag: \"my_custom_tag\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nDefine your own tag text. This will replace all other parameters\n\n\n\n\n\n\n\n\ngrouping\n\n\nIs used to keep your tags organised under one 'folder'\n\n\nbuilds\n\n\n\n\n\n\nincludes_lane\n\n\nWhether the current lane should be included in the tag and message composition, e.g. '\n/\n/\n'\n\n\ntrue\n\n\n\n\n\n\nprefix\n\n\nAnything you want to put in front of the version number (e.g. 'v')\n\n\n''\n\n\n\n\n\n\npostfix\n\n\nAnything you want to put at the end of the version number (e.g. '-RC1')\n\n\n''\n\n\n\n\n\n\nbuild_number\n\n\nThe build number. Defaults to the result of increment_build_number if you're using it\n\n\n*\n\n\n\n\n\n\nmessage\n\n\nThe tag message. Defaults to the tag's name\n\n\n*\n\n\n\n\n\n\ncommit\n\n\nThe commit or object where the tag will be set. Defaults to the current HEAD\n\n\n*\n\n\n\n\n\n\nforce\n\n\nForce adding the tag\n\n\nfalse\n\n\n\n\n\n\nsign\n\n\nMake a GPG-signed tag, using the default e-mail address's key\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action add_git_tag\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run add_git_tag\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run add_git_tag parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "add_git_tag"
        },
        {
            "location": "/actions/add_git_tag/#add_git_tag",
            "text": "This will add an annotated git tag to the current branch   This will automatically tag your build with the following format:  <grouping>/<lane>/<prefix><build_number><postfix> , where:   grouping  is just to keep your tags organised under one 'folder', defaults to 'builds'  lane  is the name of the current fastlane lane, if chosen to be included via 'includes_lane' option, which defaults to 'true'  prefix  is anything you want to stick in front of the version number, e.g. 'v'  postfix  is anything you want to stick at the end of the version number, e.g. '-RC1'  build_number  is the build number, which defaults to the value emitted by the  increment_build_number  action   For example, for build 1234 in the 'appstore' lane, it will tag the commit with  builds/appstore/1234 .      add_git_tag       Supported platforms  ios, android, mac    Author  @lmirosevic, @maschall",
            "title": "add_git_tag"
        },
        {
            "location": "/actions/add_git_tag/#3-examples",
            "text": "add_git_tag # simple tag with default values  add_git_tag(\n  grouping: \"fastlane-builds\",\n  includes_lane: true,\n  prefix: \"v\",\n  postfix: \"-RC1\",\n  build_number: 123\n)  # Alternatively, you can specify your own tag. Note that if you do specify a tag, all other arguments are ignored.\nadd_git_tag(\n  tag: \"my_custom_tag\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/add_git_tag/#parameters",
            "text": "Key  Description  Default      tag  Define your own tag text. This will replace all other parameters     grouping  Is used to keep your tags organised under one 'folder'  builds    includes_lane  Whether the current lane should be included in the tag and message composition, e.g. ' / / '  true    prefix  Anything you want to put in front of the version number (e.g. 'v')  ''    postfix  Anything you want to put at the end of the version number (e.g. '-RC1')  ''    build_number  The build number. Defaults to the result of increment_build_number if you're using it  *    message  The tag message. Defaults to the tag's name  *    commit  The commit or object where the tag will be set. Defaults to the current HEAD  *    force  Force adding the tag  false    sign  Make a GPG-signed tag, using the default e-mail address's key  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/add_git_tag/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action add_git_tag",
            "title": "Documentation"
        },
        {
            "location": "/actions/add_git_tag/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run add_git_tag  To pass parameters, make use of the  :  symbol, for example  fastlane run add_git_tag parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/add_git_tag/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/app_store_build_number/",
            "text": "app_store_build_number\n\n\nReturns the current build_number of either live or edit version\n\n\n\n\nReturns the current build number of either the live or testflight version - it is useful for getting the build_number of the current or ready-for-sale app version, and it also works on non-live testflight version.\nIf you need to handle more build-trains please see \nlatest_testflight_build_number\n.\n\n\n\n\n\n\n\n\n\n\napp_store_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n4 Examples\n\n\napp_store_build_number\n\n\n\n\napp_store_build_number(\n  app_identifier: \"app.identifier\",\n  username: \"user@host.com\"\n)\n\n\n\n\napp_store_build_number(\n  live: false,\n  app_identifier: \"app.identifier\",\n  version: \"1.2.9\"\n)\n\n\n\n\napi_key = app_store_connect_api_key(\n  key_id: \"MyKeyID12345\",\n  issuer_id: \"00000000-0000-0000-0000-000000000000\",\n  key_filepath: \"./AuthKey.p8\"\n)\nbuild_num = app_store_build_number(\n  api_key: api_key\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\ninitial_build_number\n\n\nsets the build number to given value if no build is in current train\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nlive\n\n\nQuery the live version (ready-for-sale)\n\n\ntrue\n\n\n\n\n\n\nversion\n\n\nThe version number whose latest build number we want\n\n\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \napp_store_build_number\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::LATEST_BUILD_NUMBER\n\n\nThe latest build number of either live or testflight version\n\n\n\n\n\n\nSharedValues::LATEST_VERSION\n\n\nThe version of the latest build number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action app_store_build_number\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run app_store_build_number\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run app_store_build_number parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "app_store_build_number"
        },
        {
            "location": "/actions/app_store_build_number/#app_store_build_number",
            "text": "Returns the current build_number of either live or edit version   Returns the current build number of either the live or testflight version - it is useful for getting the build_number of the current or ready-for-sale app version, and it also works on non-live testflight version. If you need to handle more build-trains please see  latest_testflight_build_number .      app_store_build_number       Supported platforms  ios, mac    Author  @hjanuschka",
            "title": "app_store_build_number"
        },
        {
            "location": "/actions/app_store_build_number/#4-examples",
            "text": "app_store_build_number  app_store_build_number(\n  app_identifier: \"app.identifier\",\n  username: \"user@host.com\"\n)  app_store_build_number(\n  live: false,\n  app_identifier: \"app.identifier\",\n  version: \"1.2.9\"\n)  api_key = app_store_connect_api_key(\n  key_id: \"MyKeyID12345\",\n  issuer_id: \"00000000-0000-0000-0000-000000000000\",\n  key_filepath: \"./AuthKey.p8\"\n)\nbuild_num = app_store_build_number(\n  api_key: api_key\n)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/app_store_build_number/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     initial_build_number  sets the build number to given value if no build is in current train     app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    team_id  The ID of your App Store Connect team if you're in multiple teams  *    live  Query the live version (ready-for-sale)  true    version  The version number whose latest build number we want     platform  The platform to use (optional)  ios    team_name  The name of your App Store Connect team if you're in multiple teams  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/app_store_build_number/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  app_store_build_number  action generates the following Lane Variables:     SharedValue  Description      SharedValues::LATEST_BUILD_NUMBER  The latest build number of either live or testflight version    SharedValues::LATEST_VERSION  The version of the latest build number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/app_store_build_number/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action app_store_build_number",
            "title": "Documentation"
        },
        {
            "location": "/actions/app_store_build_number/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run app_store_build_number  To pass parameters, make use of the  :  symbol, for example  fastlane run app_store_build_number parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/app_store_build_number/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/app_store_connect_api_key/",
            "text": "app_store_connect_api_key\n\n\nLoad the App Store Connect API token to use in other fastlane tools and actions\n\n\n\n\nLoad the App Store Connect API token to use in other fastlane tools and actions\n\n\n\n\n\n\n\n\n\n\napp_store_connect_api_key\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n3 Examples\n\n\napp_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_filepath: \"D83848D23.p8\"\n)\n\n\n\n\napp_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_filepath: \"D83848D23.p8\",\n  duration: 200,\n  in_house: true\n)\n\n\n\n\napp_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_content: \"-----BEGIN EC PRIVATE KEY-----\\nfewfawefawfe\\n-----END EC PRIVATE KEY-----\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nkey_id\n\n\nThe key ID\n\n\n\n\n\n\n\n\nissuer_id\n\n\nThe issuer ID\n\n\n\n\n\n\n\n\nkey_filepath\n\n\nThe path to the key p8 file\n\n\n\n\n\n\n\n\nkey_content\n\n\nThe content of the key p8 file\n\n\n\n\n\n\n\n\nis_key_content_base64\n\n\nWhether :key_content is Base64 encoded or not\n\n\nfalse\n\n\n\n\n\n\nduration\n\n\nThe token session duration\n\n\n\n\n\n\n\n\nin_house\n\n\nIs App Store or Enterprise (in house) team? App Store Connect API cannot not determine this on its own (yet)\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \napp_store_connect_api_key\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::APP_STORE_CONNECT_API_KEY\n\n\nThe App Store Connect API key information used for authorization requests. This hash can be passed directly into the :api_key options on other tools or into Spaceship::ConnectAPI::Token.create method\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action app_store_connect_api_key\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run app_store_connect_api_key\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run app_store_connect_api_key parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "app_store_connect_api_key"
        },
        {
            "location": "/actions/app_store_connect_api_key/#app_store_connect_api_key",
            "text": "Load the App Store Connect API token to use in other fastlane tools and actions   Load the App Store Connect API token to use in other fastlane tools and actions      app_store_connect_api_key       Supported platforms  ios, android, mac    Author  @joshdholtz",
            "title": "app_store_connect_api_key"
        },
        {
            "location": "/actions/app_store_connect_api_key/#3-examples",
            "text": "app_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_filepath: \"D83848D23.p8\"\n)  app_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_filepath: \"D83848D23.p8\",\n  duration: 200,\n  in_house: true\n)  app_store_connect_api_key(\n  key_id: \"D83848D23\",\n  issuer_id: \"227b0bbf-ada8-458c-9d62-3d8022b7d07f\",\n  key_content: \"-----BEGIN EC PRIVATE KEY-----\\nfewfawefawfe\\n-----END EC PRIVATE KEY-----\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/app_store_connect_api_key/#parameters",
            "text": "Key  Description  Default      key_id  The key ID     issuer_id  The issuer ID     key_filepath  The path to the key p8 file     key_content  The content of the key p8 file     is_key_content_base64  Whether :key_content is Base64 encoded or not  false    duration  The token session duration     in_house  Is App Store or Enterprise (in house) team? App Store Connect API cannot not determine this on its own (yet)      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/app_store_connect_api_key/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  app_store_connect_api_key  action generates the following Lane Variables:     SharedValue  Description      SharedValues::APP_STORE_CONNECT_API_KEY  The App Store Connect API key information used for authorization requests. This hash can be passed directly into the :api_key options on other tools or into Spaceship::ConnectAPI::Token.create method     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/app_store_connect_api_key/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action app_store_connect_api_key",
            "title": "Documentation"
        },
        {
            "location": "/actions/app_store_connect_api_key/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run app_store_connect_api_key  To pass parameters, make use of the  :  symbol, for example  fastlane run app_store_connect_api_key parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/app_store_connect_api_key/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/appaloosa/",
            "text": "appaloosa\n\n\nUpload your app to \nAppaloosa Store\n\n\n\n\nAppaloosa is a private mobile application store. This action offers a quick deployment on the platform.\nYou can create an account, push to your existing account, or manage your user groups.\nWe accept iOS and Android applications.\n\n\n\n\n\n\n\n\n\n\nappaloosa\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@Appaloosa\n\n\n\n\n\n\n\n\n1 Example\n\n\nappaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store\u2019s id at the bottom of the \u201cSettings\u201d page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \u201cSettings\u201d page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like 'iphone6-s1.png' if device specified\n  screenshots: '/path/to_your/screenshots'\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbinary\n\n\nBinary path. Optional for ipa if you use the \nipa\n or \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\napi_token\n\n\nYour API token\n\n\n\n\n\n\n\n\nstore_id\n\n\nYour Store id\n\n\n\n\n\n\n\n\ngroup_ids\n\n\nYour app is limited to special users? Give us the group ids\n\n\n''\n\n\n\n\n\n\nscreenshots\n\n\nAdd some screenshots application to your store or hit [enter]\n\n\n*\n\n\n\n\n\n\nlocale\n\n\nSelect the folder locale for your screenshots\n\n\nen-US\n\n\n\n\n\n\ndevice\n\n\nSelect the device format for your screenshots\n\n\n\n\n\n\n\n\ndescription\n\n\nYour app description\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action appaloosa\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run appaloosa\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run appaloosa parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "appaloosa"
        },
        {
            "location": "/actions/appaloosa/#appaloosa",
            "text": "Upload your app to  Appaloosa Store   Appaloosa is a private mobile application store. This action offers a quick deployment on the platform. You can create an account, push to your existing account, or manage your user groups. We accept iOS and Android applications.      appaloosa       Supported platforms  ios, android, mac    Author  @Appaloosa",
            "title": "appaloosa"
        },
        {
            "location": "/actions/appaloosa/#1-example",
            "text": "appaloosa(\n  # Path tor your IPA or APK\n  binary: '/path/to/binary.ipa',\n  # You can find your store\u2019s id at the bottom of the \u201cSettings\u201d page of your store\n  store_id: 'your_store_id',\n  # You can find your api_token at the bottom of the \u201cSettings\u201d page of your store\n  api_token: 'your_api_key',\n  # User group_ids visibility, if it's not specified we'll publish the app for all users in your store'\n  group_ids: '112, 232, 387',\n  # You can use fastlane/snapshot or specify your own screenshots folder.\n  # If you use snapshot please specify a local and a device to upload your screenshots from.\n  # When multiple values are specified in the Snapfile, we default to 'en-US'\n  locale: 'en-US',\n  # By default, the screenshots from the last device will be used\n  device: 'iPhone6',\n  # Screenshots' filenames should start with device's name like 'iphone6-s1.png' if device specified\n  screenshots: '/path/to_your/screenshots'\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/appaloosa/#parameters",
            "text": "Key  Description  Default      binary  Binary path. Optional for ipa if you use the  ipa  or  xcodebuild  action  *    api_token  Your API token     store_id  Your Store id     group_ids  Your app is limited to special users? Give us the group ids  ''    screenshots  Add some screenshots application to your store or hit [enter]  *    locale  Select the folder locale for your screenshots  en-US    device  Select the device format for your screenshots     description  Your app description      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/appaloosa/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action appaloosa",
            "title": "Documentation"
        },
        {
            "location": "/actions/appaloosa/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run appaloosa  To pass parameters, make use of the  :  symbol, for example  fastlane run appaloosa parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/appaloosa/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/appetize/",
            "text": "appetize\n\n\nUpload your app to \nAppetize.io\n to stream it in browser\n\n\n\n\nIf you provide a \npublic_key\n, this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value.\nTo integrate appetize into your GitHub workflow check out the \ndevice_grid guide\n.\n\n\n\n\n\n\n\n\n\n\nappetize\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@klundberg, @giginet, @steprescott\n\n\n\n\n\n\n\n\n2 Examples\n\n\nappetize(\n  path: \"./MyApp.zip\",\n  api_token: \"yourapitoken\", # get it from https://appetize.io/docs#request-api-token\n  public_key: \"your_public_key\" # get it from https://appetize.io/dashboard\n)\n\n\n\n\nappetize(\n  path: \"./MyApp.zip\",\n  api_host: \"company.appetize.io\", # only needed for enterprise hosted solution\n  api_token: \"yourapitoken\", # get it from https://appetize.io/docs#request-api-token\n  public_key: \"your_public_key\" # get it from https://appetize.io/dashboard\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_host\n\n\nAppetize API host\n\n\napi.appetize.io\n\n\n\n\n\n\napi_token\n\n\nAppetize.io API Token\n\n\n\n\n\n\n\n\nurl\n\n\nURL from which the ipa file can be fetched. Alternative to :path\n\n\n\n\n\n\n\n\nplatform\n\n\nPlatform. Either \nios\n or \nandroid\n\n\nios\n\n\n\n\n\n\npath\n\n\nPath to zipped build on the local filesystem. Either this or \nurl\n must be specified\n\n\n\n\n\n\n\n\npublic_key\n\n\nIf not provided, a new app will be created. If provided, the existing build will be overwritten\n\n\n\n\n\n\n\n\nnote\n\n\nNotes you wish to add to the uploaded app\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nappetize\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::APPETIZE_API_HOST\n\n\nAppetize API host.\n\n\n\n\n\n\nSharedValues::APPETIZE_PUBLIC_KEY\n\n\na public identifier for your app. Use this to update your app after it has been initially created.\n\n\n\n\n\n\nSharedValues::APPETIZE_APP_URL\n\n\na page to test and share your app.\n\n\n\n\n\n\nSharedValues::APPETIZE_MANAGE_URL\n\n\na page to manage your app.\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action appetize\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run appetize\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run appetize parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "appetize"
        },
        {
            "location": "/actions/appetize/#appetize",
            "text": "Upload your app to  Appetize.io  to stream it in browser   If you provide a  public_key , this will overwrite an existing application. If you want to have this build as a new app version, you shouldn't provide this value. To integrate appetize into your GitHub workflow check out the  device_grid guide .      appetize       Supported platforms  ios, android    Author  @klundberg, @giginet, @steprescott",
            "title": "appetize"
        },
        {
            "location": "/actions/appetize/#2-examples",
            "text": "appetize(\n  path: \"./MyApp.zip\",\n  api_token: \"yourapitoken\", # get it from https://appetize.io/docs#request-api-token\n  public_key: \"your_public_key\" # get it from https://appetize.io/dashboard\n)  appetize(\n  path: \"./MyApp.zip\",\n  api_host: \"company.appetize.io\", # only needed for enterprise hosted solution\n  api_token: \"yourapitoken\", # get it from https://appetize.io/docs#request-api-token\n  public_key: \"your_public_key\" # get it from https://appetize.io/dashboard\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/appetize/#parameters",
            "text": "Key  Description  Default      api_host  Appetize API host  api.appetize.io    api_token  Appetize.io API Token     url  URL from which the ipa file can be fetched. Alternative to :path     platform  Platform. Either  ios  or  android  ios    path  Path to zipped build on the local filesystem. Either this or  url  must be specified     public_key  If not provided, a new app will be created. If provided, the existing build will be overwritten     note  Notes you wish to add to the uploaded app      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/appetize/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  appetize  action generates the following Lane Variables:     SharedValue  Description      SharedValues::APPETIZE_API_HOST  Appetize API host.    SharedValues::APPETIZE_PUBLIC_KEY  a public identifier for your app. Use this to update your app after it has been initially created.    SharedValues::APPETIZE_APP_URL  a page to test and share your app.    SharedValues::APPETIZE_MANAGE_URL  a page to manage your app.     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/appetize/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action appetize",
            "title": "Documentation"
        },
        {
            "location": "/actions/appetize/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run appetize  To pass parameters, make use of the  :  symbol, for example  fastlane run appetize parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/appetize/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/appetize_viewing_url_generator/",
            "text": "appetize_viewing_url_generator\n\n\nGenerate an URL for appetize simulator\n\n\n\n\nCheck out the \ndevice_grid guide\n for more information\n\n\n\n\n\n\n\n\n\n\nappetize_viewing_url_generator\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe URL to preview the iPhone app\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npublic_key\n\n\nPublic key of the app you wish to update\n\n\n*\n\n\n\n\n\n\nbase_url\n\n\nBase URL of Appetize service\n\n\nhttps://appetize.io/embed\n\n\n\n\n\n\ndevice\n\n\nDevice type: iphone4s, iphone5s, iphone6, iphone6plus, ipadair, iphone6s, iphone6splus, ipadair2, nexus5, nexus7 or nexus9\n\n\niphone5s\n\n\n\n\n\n\nscale\n\n\nScale of the simulator\n\n\n\n\n\n\n\n\norientation\n\n\nDevice orientation\n\n\nportrait\n\n\n\n\n\n\nlanguage\n\n\nDevice language in ISO 639-1 language code, e.g. 'de'\n\n\n\n\n\n\n\n\ncolor\n\n\nColor of the device\n\n\nblack\n\n\n\n\n\n\nlaunch_url\n\n\nSpecify a deep link to open when your app is launched\n\n\n\n\n\n\n\n\nos_version\n\n\nThe operating system version on which to run your app, e.g. 10.3, 8.0\n\n\n\n\n\n\n\n\nparams\n\n\nSpecify params value to be passed to Appetize\n\n\n\n\n\n\n\n\nproxy\n\n\nSpecify a HTTP proxy to be passed to Appetize\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action appetize_viewing_url_generator\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run appetize_viewing_url_generator\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run appetize_viewing_url_generator parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "appetize_viewing_url_generator"
        },
        {
            "location": "/actions/appetize_viewing_url_generator/#appetize_viewing_url_generator",
            "text": "Generate an URL for appetize simulator   Check out the  device_grid guide  for more information      appetize_viewing_url_generator       Supported platforms  ios    Author  @KrauseFx    Returns  The URL to preview the iPhone app",
            "title": "appetize_viewing_url_generator"
        },
        {
            "location": "/actions/appetize_viewing_url_generator/#parameters",
            "text": "Key  Description  Default      public_key  Public key of the app you wish to update  *    base_url  Base URL of Appetize service  https://appetize.io/embed    device  Device type: iphone4s, iphone5s, iphone6, iphone6plus, ipadair, iphone6s, iphone6splus, ipadair2, nexus5, nexus7 or nexus9  iphone5s    scale  Scale of the simulator     orientation  Device orientation  portrait    language  Device language in ISO 639-1 language code, e.g. 'de'     color  Color of the device  black    launch_url  Specify a deep link to open when your app is launched     os_version  The operating system version on which to run your app, e.g. 10.3, 8.0     params  Specify params value to be passed to Appetize     proxy  Specify a HTTP proxy to be passed to Appetize      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/appetize_viewing_url_generator/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action appetize_viewing_url_generator",
            "title": "Documentation"
        },
        {
            "location": "/actions/appetize_viewing_url_generator/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run appetize_viewing_url_generator  To pass parameters, make use of the  :  symbol, for example  fastlane run appetize_viewing_url_generator parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/appetize_viewing_url_generator/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/appium/",
            "text": "appium\n\n\nRun UI test by Appium with RSpec\n\n\n\n\n\n\n\n\nappium\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@yonekawa\n\n\n\n\n\n\n\n\n1 Example\n\n\nappium(\n  app_path:  \"appium/apps/TargetApp.app\",\n  spec_path: \"appium/spec\",\n  platform:  \"iOS\",\n  caps: {\n    versionNumber: \"9.1\",\n    deviceName:    \"iPhone 6\"\n  },\n  appium_lib: {\n    wait: 10\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplatform\n\n\nAppium platform name\n\n\n\n\n\n\n\n\nspec_path\n\n\nPath to Appium spec directory\n\n\n\n\n\n\n\n\napp_path\n\n\nPath to Appium target app file\n\n\n\n\n\n\n\n\ninvoke_appium_server\n\n\nUse local Appium server with invoke automatically\n\n\ntrue\n\n\n\n\n\n\nhost\n\n\nHostname of Appium server\n\n\n0.0.0.0\n\n\n\n\n\n\nport\n\n\nHTTP port of Appium server\n\n\n4723\n\n\n\n\n\n\nappium_path\n\n\nPath to Appium executable\n\n\n\n\n\n\n\n\ncaps\n\n\nHash of caps for Appium::Driver\n\n\n\n\n\n\n\n\nappium_lib\n\n\nHash of appium_lib for Appium::Driver\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action appium\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run appium\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run appium parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "appium"
        },
        {
            "location": "/actions/appium/#appium",
            "text": "Run UI test by Appium with RSpec     appium       Supported platforms  ios, android    Author  @yonekawa",
            "title": "appium"
        },
        {
            "location": "/actions/appium/#1-example",
            "text": "appium(\n  app_path:  \"appium/apps/TargetApp.app\",\n  spec_path: \"appium/spec\",\n  platform:  \"iOS\",\n  caps: {\n    versionNumber: \"9.1\",\n    deviceName:    \"iPhone 6\"\n  },\n  appium_lib: {\n    wait: 10\n  }\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/appium/#parameters",
            "text": "Key  Description  Default      platform  Appium platform name     spec_path  Path to Appium spec directory     app_path  Path to Appium target app file     invoke_appium_server  Use local Appium server with invoke automatically  true    host  Hostname of Appium server  0.0.0.0    port  HTTP port of Appium server  4723    appium_path  Path to Appium executable     caps  Hash of caps for Appium::Driver     appium_lib  Hash of appium_lib for Appium::Driver      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/appium/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action appium",
            "title": "Documentation"
        },
        {
            "location": "/actions/appium/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run appium  To pass parameters, make use of the  :  symbol, for example  fastlane run appium parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/appium/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/appledoc/",
            "text": "appledoc\n\n\nGenerate Apple-like source code documentation from the source code\n\n\n\n\nRuns \nappledoc [OPTIONS] <paths to source dirs or files>\n for the project\n\n\n\n\n\n\n\n\n\n\nappledoc\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@alexmx\n\n\n\n\n\n\n\n\n1 Example\n\n\nappledoc(\n  project_name: \"MyProjectName\",\n  project_company: \"Company Name\",\n  input: [\n    \"MyProjectSources\",\n    \"MyProjectSourceFile.h\"\n  ],\n  ignore: [\n    \"ignore/path/1\",\n    \"ingore/path/2\"\n  ],\n  options: \"--keep-intermediate-files --search-undocumented-doc\",\n  warnings: \"--warn-missing-output-path --warn-missing-company-id\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ninput\n\n\nPath(s) to source file directories or individual source files. Accepts a single path or an array of paths\n\n\n\n\n\n\n\n\noutput\n\n\nOutput path\n\n\n\n\n\n\n\n\ntemplates\n\n\nTemplate files path\n\n\n\n\n\n\n\n\ndocset_install_path\n\n\nDocSet installation path\n\n\n\n\n\n\n\n\ninclude\n\n\nInclude static doc(s) at path\n\n\n\n\n\n\n\n\nignore\n\n\nIgnore given path\n\n\n\n\n\n\n\n\nexclude_output\n\n\nExclude given path from output\n\n\n\n\n\n\n\n\nindex_desc\n\n\nFile including main index description\n\n\n\n\n\n\n\n\nproject_name\n\n\nProject name\n\n\n\n\n\n\n\n\nproject_version\n\n\nProject version\n\n\n\n\n\n\n\n\nproject_company\n\n\nProject company\n\n\n\n\n\n\n\n\ncompany_id\n\n\nCompany UTI (i.e. reverse DNS name)\n\n\n\n\n\n\n\n\ncreate_html\n\n\nCreate HTML\n\n\nfalse\n\n\n\n\n\n\ncreate_docset\n\n\nCreate documentation set\n\n\nfalse\n\n\n\n\n\n\ninstall_docset\n\n\nInstall documentation set to Xcode\n\n\nfalse\n\n\n\n\n\n\npublish_docset\n\n\nPrepare DocSet for publishing\n\n\nfalse\n\n\n\n\n\n\nno_create_docset\n\n\nCreate HTML and skip creating a DocSet\n\n\nfalse\n\n\n\n\n\n\nhtml_anchors\n\n\nThe html anchor format to use in DocSet HTML\n\n\n\n\n\n\n\n\nclean_output\n\n\nRemove contents of output path before starting\n\n\nfalse\n\n\n\n\n\n\ndocset_bundle_id\n\n\nDocSet bundle identifier\n\n\n\n\n\n\n\n\ndocset_bundle_name\n\n\nDocSet bundle name\n\n\n\n\n\n\n\n\ndocset_desc\n\n\nDocSet description\n\n\n\n\n\n\n\n\ndocset_copyright\n\n\nDocSet copyright message\n\n\n\n\n\n\n\n\ndocset_feed_name\n\n\nDocSet feed name\n\n\n\n\n\n\n\n\ndocset_feed_url\n\n\nDocSet feed URL\n\n\n\n\n\n\n\n\ndocset_feed_formats\n\n\nDocSet feed formats. Separated by a comma [atom,xml]\n\n\n\n\n\n\n\n\ndocset_package_url\n\n\nDocSet package (.xar) URL\n\n\n\n\n\n\n\n\ndocset_fallback_url\n\n\nDocSet fallback URL\n\n\n\n\n\n\n\n\ndocset_publisher_id\n\n\nDocSet publisher identifier\n\n\n\n\n\n\n\n\ndocset_publisher_name\n\n\nDocSet publisher name\n\n\n\n\n\n\n\n\ndocset_min_xcode_version\n\n\nDocSet min. Xcode version\n\n\n\n\n\n\n\n\ndocset_platform_family\n\n\nDocSet platform family\n\n\n\n\n\n\n\n\ndocset_cert_issuer\n\n\nDocSet certificate issuer\n\n\n\n\n\n\n\n\ndocset_cert_signer\n\n\nDocSet certificate signer\n\n\n\n\n\n\n\n\ndocset_bundle_filename\n\n\nDocSet bundle filename\n\n\n\n\n\n\n\n\ndocset_atom_filename\n\n\nDocSet atom feed filename\n\n\n\n\n\n\n\n\ndocset_xml_filename\n\n\nDocSet xml feed filename\n\n\n\n\n\n\n\n\ndocset_package_filename\n\n\nDocSet package (.xar,.tgz) filename\n\n\n\n\n\n\n\n\noptions\n\n\nDocumentation generation options\n\n\n\n\n\n\n\n\ncrossref_format\n\n\nCross reference template regex\n\n\n\n\n\n\n\n\nexit_threshold\n\n\nExit code threshold below which 0 is returned\n\n\n2\n\n\n\n\n\n\ndocs_section_title\n\n\nTitle of the documentation section (defaults to \"Programming Guides\"\n\n\n\n\n\n\n\n\nwarnings\n\n\nDocumentation generation warnings\n\n\n\n\n\n\n\n\nlogformat\n\n\nLog format [0-3]\n\n\n\n\n\n\n\n\nverbose\n\n\nLog verbosity level [0-6,xcode]\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nappledoc\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::APPLEDOC_DOCUMENTATION_OUTPUT\n\n\nDocumentation set output path\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action appledoc\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run appledoc\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run appledoc parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "appledoc"
        },
        {
            "location": "/actions/appledoc/#appledoc",
            "text": "Generate Apple-like source code documentation from the source code   Runs  appledoc [OPTIONS] <paths to source dirs or files>  for the project      appledoc       Supported platforms  ios, mac    Author  @alexmx",
            "title": "appledoc"
        },
        {
            "location": "/actions/appledoc/#1-example",
            "text": "appledoc(\n  project_name: \"MyProjectName\",\n  project_company: \"Company Name\",\n  input: [\n    \"MyProjectSources\",\n    \"MyProjectSourceFile.h\"\n  ],\n  ignore: [\n    \"ignore/path/1\",\n    \"ingore/path/2\"\n  ],\n  options: \"--keep-intermediate-files --search-undocumented-doc\",\n  warnings: \"--warn-missing-output-path --warn-missing-company-id\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/appledoc/#parameters",
            "text": "Key  Description  Default      input  Path(s) to source file directories or individual source files. Accepts a single path or an array of paths     output  Output path     templates  Template files path     docset_install_path  DocSet installation path     include  Include static doc(s) at path     ignore  Ignore given path     exclude_output  Exclude given path from output     index_desc  File including main index description     project_name  Project name     project_version  Project version     project_company  Project company     company_id  Company UTI (i.e. reverse DNS name)     create_html  Create HTML  false    create_docset  Create documentation set  false    install_docset  Install documentation set to Xcode  false    publish_docset  Prepare DocSet for publishing  false    no_create_docset  Create HTML and skip creating a DocSet  false    html_anchors  The html anchor format to use in DocSet HTML     clean_output  Remove contents of output path before starting  false    docset_bundle_id  DocSet bundle identifier     docset_bundle_name  DocSet bundle name     docset_desc  DocSet description     docset_copyright  DocSet copyright message     docset_feed_name  DocSet feed name     docset_feed_url  DocSet feed URL     docset_feed_formats  DocSet feed formats. Separated by a comma [atom,xml]     docset_package_url  DocSet package (.xar) URL     docset_fallback_url  DocSet fallback URL     docset_publisher_id  DocSet publisher identifier     docset_publisher_name  DocSet publisher name     docset_min_xcode_version  DocSet min. Xcode version     docset_platform_family  DocSet platform family     docset_cert_issuer  DocSet certificate issuer     docset_cert_signer  DocSet certificate signer     docset_bundle_filename  DocSet bundle filename     docset_atom_filename  DocSet atom feed filename     docset_xml_filename  DocSet xml feed filename     docset_package_filename  DocSet package (.xar,.tgz) filename     options  Documentation generation options     crossref_format  Cross reference template regex     exit_threshold  Exit code threshold below which 0 is returned  2    docs_section_title  Title of the documentation section (defaults to \"Programming Guides\"     warnings  Documentation generation warnings     logformat  Log format [0-3]     verbose  Log verbosity level [0-6,xcode]      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/appledoc/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  appledoc  action generates the following Lane Variables:     SharedValue  Description      SharedValues::APPLEDOC_DOCUMENTATION_OUTPUT  Documentation set output path     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/appledoc/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action appledoc",
            "title": "Documentation"
        },
        {
            "location": "/actions/appledoc/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run appledoc  To pass parameters, make use of the  :  symbol, for example  fastlane run appledoc parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/appledoc/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/appstore/",
            "text": "appstore\n\n\nAlias for the \nupload_to_app_store\n action\n\n\n\n  \n\n\n\n\n\ndeliver\n uploads screenshots, metadata and binaries to App Store Connect. Use \ndeliver\n to submit your app for App Store review.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nQuick Start\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ndeliver\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\n\n\nUpload hundreds of localized screenshots completely automatically\n\n\nUpload a new ipa/pkg file to App Store Connect without Xcode from any Mac\n\n\nMaintain your app metadata locally and push changes back to App Store Connect\n\n\nEasily implement a real Continuous Deployment process using \nfastlane\n\n\nStore the configuration in git to easily deploy from \nany\n Mac, including your Continuous Integration server\n\n\nGet a HTML preview of the fetched metadata before uploading the app metadata and screenshots to iTC\n\n\nAutomatically uses \nprecheck\n to ensure your app has the highest chances of passing app review the first time\n\n\n\n\nTo upload builds to TestFlight check out \npilot\n.\n\n\nQuick Start\n\n\nThe guide will create all the necessary files for you, using the existing app metadata from App Store Connect.\n\n\n\n\ncd [your_project_folder]\n\n\nfastlane deliver init\n\n\nEnter your App Store Connect credentials\n\n\nEnter your app identifier\n\n\nEnjoy a good drink, while the computer does all the work for you\n\n\n\n\nFrom now on, you can run \nfastlane deliver\n to deploy a new update, or just upload new app metadata and screenshots.\n\n\nUsage\n\n\nCheck out your local \n./fastlane/metadata\n and \n./fastlane/screenshots\n folders (if you don't use \nfastlane\n it's \n./metadata\n instead)\n\n\n\n\nYou'll see your metadata from App Store Connect. Feel free to store the metadata in git (not the screenshots). You can now modify it locally and push the changes back to App Store Connect.\n\n\nRun \nfastlane deliver\n to upload the app metadata from your local machine\n\n\nfastlane deliver\n\n\n\n\nProvide the path to an \nipa\n file to upload and submit your app for review:\n\n\nfastlane deliver --ipa \"App.ipa\" --submit_for_review\n\n\n\n\nor you can specify path to \npkg\n file for macOS apps:\n\n\nfastlane deliver --pkg \"MacApp.pkg\"\n\n\n\n\nIf you use \nfastlane\n you don't have to manually specify the path to your \nipa\n/\npkg\n file.\n\n\nThis is just a small sub-set of what you can do with \ndeliver\n, check out the full documentation in \n#more-options\n\n\nDownload existing screenshots from App Store Connect\n\n\nfastlane deliver download_screenshots\n\n\n\n\nDownload existing metadata from App Store Connect\n\n\nfastlane deliver download_metadata\n\n\n\n\nTo get a list of available options run\n\n\nfastlane action deliver\n\n\n\n\nUse in a \nFastfile\n\n\ndeliver\n\n\n\n\ndeliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)\n\n\n\n\nMore options\n\n\n\n\nView all available options and their valid values\n\n\nAvailable options\n\n\nAll the options below can easily be added to your \nDeliverfile\n. The great thing: if you use \nfastlane\n you can use all these options from your \nFastfile\n too, for example:\n\n\ndeliver(\n  submit_for_review: true,\n  metadata_path: \"../folder\"\n)\n\n\n\n\napp_identifier\n\n\nThe bundle identifier (e.g. \"com.krausefx.app\")\n\n\nusername\n\n\nYour Apple ID email address\n\n\nipa\n\n\nA path to a signed ipa file, which will be uploaded. If you don't provide this value, only app metadata will be uploaded. If you want to submit the app for review make sure to either use \nfastlane deliver --submit_for_review\n or add \nsubmit_for_review true\n to your \nDeliverfile\n\n\nipa(\"App.ipa\")\n\n\n\n\nif you use \nfastlane\n the ipa file will automatically be detected.\n\n\npkg\n\n\nA path to a signed pkg file, which will be uploaded. Submission logic of ipa applies to pkg files.\n\n\npkg(\"MacApp.pkg\")\n\n\n\n\napp_version\n\n\nOptional, as it is usually automatically detected. Specify the version that should be created / edited on App Store Connect:\n\n\napp_version(\"2.0\")\n\n\n\n\nskip_app_version_update\n\n\nIn the case if \ndeliver\n uploads your application to App Store Connect it will automatically update \"Prepare for submission\" app version (which could be found on App Store Connect->My Apps->App Store page)\n\n\nThe option allows uploading your app without updating \"Prepare for submission\" version.\n\n\nThis could be useful in the case if you are generating a lot of uploads while not submitting the latest build for Apple review.\n\n\nThe default value is false.\n\n\nskip_app_version_update(true)\n\n\n\n\nsubmit_for_review\n\n\nAdd this to your \nDeliverfile\n to automatically submit the app for review after uploading metadata/binary. This will select the latest build.\n\n\nsubmit_for_review(true)\n\n\n\n\nscreenshots_path\n\n\nA path to a folder containing subfolders for each language. This will automatically detect the device type based on the image resolution. Also includes \uf8ff Watch Support.\n\n\n\n\nmetadata_path\n\n\nPath to the metadata you want to use. The folder has to be structured like this\n\n\n\n\nIf you run \ndeliver init\n this will automatically be created for you.\n\n\nforce\n\n\nforce(true)\n\n\n\n\nIf set to \ntrue\n, no HTML report will be generated before the actual upload. You can also pass \n--force\n when calling \ndeliver\n.\n\n\nprice_tier\n\n\nPass the price tier as number. This will be active from the current day.\n\n\nprice_tier 0\n\n\n\n\ntrade_representative_contact_information\n\n\nTrade Representative Contact information for Korean App Store. Available options: \nfirst_name\n, \nlast_name\n, \naddress_line1\n, \naddress_line2\n, \naddress_line3\n, \ncity_name\n, \nstate\n, \ncountry\n, \npostal_code\n, \nphone_number\n, \nemail_address\n, \nis_displayed_on_app_store\n.\n\n\ntrade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)\n\n\n\n\nYou can also provide these values by creating files in a \nmetadata/trade_representative_contact_information/\n directory. The file names must match the pattern \n<key>.txt\n (e.g. \nfirst_name.txt\n, \naddress_line1.txt\n etc.). The contents of each file will be used as the value for the matching key. Values provided in the \nDeliverfile\n or \nFastfile\n will be take priority over values from these files.\n\n\nis_displayed_on_app_store\n is the option on App Store Connect described as: \nDisplay Trade Representative Contact Information on the Korean App Store\n\n\napp_review_information\n\n\nContact information for the app review team. Available options: \nfirst_name\n, \nlast_name\n, \nphone_number\n, \nemail_address\n, \ndemo_user\n, \ndemo_password\n, \nnotes\n.\n\n\napp_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)\n\n\n\n\nYou can also provide these values by creating files in a \nmetadata/review_information/\n directory. The file names must match the pattern \n<key>.txt\n (e.g. \nfirst_name.txt\n, \nnotes.txt\n etc.). The contents of each file will be used as the value for the matching key. Values provided in the \nDeliverfile\n or \nFastfile\n will be take priority over values from these files.\n\n\napp_review_attachment_file\n\n\nYou can provide additional information to the app review team as a file attachment. As of this writing, Apple supports following file attachment formats: .pdf, .doc, .docx, .rtf, .pages, .xls, .xlsx, .numbers, .zip, .rar, .plist, .crash, .jpg, .png, .mp4, or .avi.\n\n\nProvide an empty string (i.e. \"\", not null) to remove the existing attachment file (if any) from the review information being edited.\n\n\napp_review_attachment_file: \"./readme.txt\"\n\n\n\n\nsubmission_information\n\n\nMust be a hash. This is used as the last step for the deployment process, where you define if you use third party content or use encryption. \nA list of available options\n.\n\n\nsubmission_information({\n  add_id_info_serves_ads: true,\n  ...\n})\n\n\n\n\nautomatic_release\n\n\nShould the app be released to all users once Apple approves it? If set to \nfalse\n, you'll have to manually release the update once it got approved.\n\n\nautomatic_release(true)\n# or\nautomatic_release(false)\n\n\n\n\nphased_release\n\n\nEnable or disable the phased releases feature of App Store Connect. If set to \ntrue\n, the update will be released over a 7 day period. Default behavior is to leave whatever you defined on App Store Connect.\n\n\nphased_release(true)\n# or\nphased_release(false)\n\n\n\n\nreset_ratings\n\n\nReset your app's summary rating for all territories. If set to \ntrue\n, it will reset rating when this version is released. Default behavior is to keep existing rating.\n\n\nreset_ratings(true)\n# or\nreset_ratings(false)\n\n\n\n\napp_rating_config_path\n\n\nYou can set the app age ratings using \ndeliver\n. You'll have to create and store a \nJSON\n configuration file. Copy the \ntemplate\n to your project folder and pass the path to the \nJSON\n file using the \napp_rating_config_path\n option.\n\n\nThe keys/values on the top allow values from 0-2, and the items on the bottom allow only 0 or 1. More information in \n#reference\n.\n\n\nMetadata\n\n\nAll options below are useful if you want to specify certain app metadata in your \nDeliverfile\n or \nFastfile\n\n\nLocalized\n\n\nLocalized values should be set like this\n\n\ndescription({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})\n\n\n\n\nname\n\n\nThe title/name of the app\n\n\nsubtitle\n\n\nLocalized subtitle of the app\n\n\nsubtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)\n\n\n\n\ndescription\n\n\nThe description of the app\n\n\nrelease_notes\n\n\nThe release_notes (What's new / Changelog) of the latest version\n\n\nsupport_url, marketing_url, privacy_url\n\n\nThese URLs are shown in the AppStore\n\n\nkeywords\n\n\nKeywords separated using a comma.\n\n\nkeywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)\n\n\n\n\npromotional_text\n\n\nLocalized promotional text\n\n\npromotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)\n\n\n\n\napp_icon\n\n\nA path to a new app icon, which must be exactly 1024x1024px\n\n\napp_icon('./AppIcon.png')\n\n\n\n\napple_watch_app_icon\n\n\nA path to a new app icon for the \uf8ff Watch, which must be exactly 1024x1024px\n\n\napple_watch_app_icon('./AppleWatchAppIcon.png')\n\n\n\n\nplatform\n\n\nThe platform of your application (a.e. ios, osx).\n\n\nThis option is optional. The default value is \"ios\" and deliver should be able to figure out the platform from your binary.\n\n\nHowever, in the case if multiple binaries present, you can specify a platform which you want to deliver explicitly.\n\n\nThe available options:\n\n\n\n\n'ios'\n\n\n'appletvos'\n\n\n'osx'\n\n\n\n\nNon-Localized\n\n\ncopyright\n\n\nThe up to date copyright information.\n\n\ncopyright(\"#{Time.now.year} Felix Krause\")\n\n\n\n\nprimary_category\n\n\nThe english name of the category you want to set (e.g. \nBusiness\n, \nBooks\n)\n\n\nSee \n#reference\n for a list of available categories\n\n\nsecondary_category\n\n\nThe english name of the secondary category you want to set\n\n\nprimary_first_sub_category\n\n\nThe english name of the primary first sub category you want to set\n\n\nprimary_second_sub_category\n\n\nThe english name of the primary second sub category you want to set\n\n\nsecondary_first_sub_category\n\n\nThe english name of the secondary first sub category you want to set\n\n\nsecondary_second_sub_category\n\n\nThe english name of the secondary second sub category you want to set\n\n\n\nSubmit Build\n\n\ndeliver\n allows you to promote an existing build to production. Below are examples to select a previously uploaded build and submit it for review.\n\n\nfastlane deliver submit_build --build_number 830\n\n\n\n\nSubmit build in a \nFastfile\n\n\nlane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend\n\n\n\n\nOmit \nbuild_number\n to let \nfastlane\n automatically select the latest build number for the current version being edited for release from App Store Connect.\n\n\nCompliance and IDFA settings\n\n\nUse the \nsubmission_information\n parameter for additional submission specifiers, including compliance and IDFA settings. Look at the Spaceship's \napp_submission.rb\n file for options. See \nthis example\n.\n\n\nfastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"\n\n\n\n\nApp Privacy Details\n\n\nStarting on December 8, 2020, Apple announced that developers are required to provide app privacy details that will help users understand an app's privacy practies. \ndeliver\n does not allow for updating of this information but this can be done with the \nupload_app_privacy_details_to_app_store\n action. More information on \nUploading App Privacy Details\n\n\nCredentials\n\n\nA detailed description about how your credentials are handled is available in a \ncredentials_manager\n.\n\n\nHow does this thing even work? Is magic involved? \ud83c\udfa9\n\n\nYour password will be stored in the macOS keychain, but can also be passed using environment variables. (More information available on \nCredentialsManager\n)\n\n\nBefore actually uploading anything to iTunes, \ndeliver\n will generate a HTML summary of the collected data.\n\n\ndeliver\n uses the following techniques under the hood:\n\n\n\n\nThe iTMSTransporter tool is used to upload the binary to App Store Connect. iTMSTransporter is a command line tool provided by Apple.\n\n\nFor all metadata related actions \ndeliver\n uses \nspaceship\n\n\n\n\nTips\n\n\nAvailable language codes\n\n\nar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, uk, vi, zh-Hans, zh-Hant\n\n\n\n\nAvailable Metadata Folder Options\n\n\ndeliver\n allows for metadata to be set through \n.txt\n files in the metadata folder. This metadata folder location is defaulted to \n./fastlane/metadata\n but can be overridden through the \nmetadata_path\n parameter. Below are all allowed metadata options.\n\n\nNon-Localized Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\ncopyright\n\n\nYes\n\n\n<metadata_path>\n\n\ncopyright.txt\n\n\n\n\n\n\nprimary_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_category.txt\n\n\n\n\n\n\nsecondary_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_category.txt\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_first_sub_category.txt\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_second_sub_category.txt\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_first_sub_category.txt\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_second_sub_category.txt\n\n\n\n\n\n\n\n\nLocalized Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\nname\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nname.txt\n\n\n\n\n\n\nsubtitle\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nsubtitle.txt\n\n\n\n\n\n\nprivacy_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nprivacy_url.txt\n\n\n\n\n\n\napple_tv_privacy_policy\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\napple_tv_privacy_policy.txt\n\n\n\n\n\n\ndescription\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\ndescription.txt\n\n\n\n\n\n\nkeywords\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nkeywords.txt\n\n\n\n\n\n\nrelease_notes\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nrelease_notes.txt\n\n\n\n\n\n\nsupport_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nsupport_url.txt\n\n\n\n\n\n\nmarketing_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nmarketing_url.txt\n\n\n\n\n\n\npromotional_text\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\npromotional_text.txt\n\n\n\n\n\n\n\n\nReview Information Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\nDeprecated Filename\n\n\n\n\n\n\n\n\n\n\nfirst_name\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nfirst_name.txt\n\n\nreview_first_name.txt\n\n\n\n\n\n\nlast_name\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nlast_name.txt\n\n\nreview_last_name.txt\n\n\n\n\n\n\nphone_number\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nphone_number.txt\n\n\nreview_phone_number.txt\n\n\n\n\n\n\nemail_address\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nemail_address.txt\n\n\nreview_email.txt\n\n\n\n\n\n\ndemo_user\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\ndemo_user.txt\n\n\nreview_demo_user.txt\n\n\n\n\n\n\ndemo_password\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\ndemo_password.txt\n\n\nreview_demo_password.txt\n\n\n\n\n\n\nnotes\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nnotes.txt\n\n\nreview_notes.txt\n\n\n\n\n\n\n\n\nReference\n\n\n\n\nView all available categories, etc.\n\n\nAvailable Categories\n\n\n\n\nFOOD_AND_DRINK\n\n\nBUSINESS\n\n\nEDUCATION\n\n\nSOCIAL_NETWORKING\n\n\nBOOKS\n\n\nSPORTS\n\n\nFINANCE\n\n\nREFERENCE\n\n\nGRAPHICS_AND_DESIGN\n\n\nDEVELOPER_TOOLS\n\n\nHEALTH_AND_FITNESS\n\n\nMUSIC\n\n\nWEATHER\n\n\nTRAVEL\n\n\nENTERTAINMENT\n\n\nSTICKERS\n\n\nGAMES\n\n\nLIFESTYLE\n\n\nMEDICAL\n\n\nMAGAZINES_AND_NEWSPAPERS\n\n\nUTILITIES\n\n\nSHOPPING\n\n\nPRODUCTIVITY\n\n\nNEWS\n\n\nPHOTO_AND_VIDEO\n\n\nNAVIGATION\n\n\n\n\nAvailable Game Subcategories\n\n\n\n\nMZGenre.Action\n\n\nMZGenre.Adventure\n\n\nMZGenre.Arcade\n\n\nMZGenre.Board\n\n\nMZGenre.Card\n\n\nMZGenre.Casino\n\n\nMZGenre.Dice\n\n\nMZGenre.Educational\n\n\nMZGenre.Family\n\n\nMZGenre.Music\n\n\nMZGenre.Puzzle\n\n\nMZGenre.Racing\n\n\nMZGenre.RolePlaying\n\n\nMZGenre.Simulation\n\n\nMZGenre.Sports\n\n\nMZGenre.Strategy\n\n\nMZGenre.Trivia\n\n\nMZGenre.Word\n\n\n\n\n\n\nGAMES_SPORTS\n\n\nGAMES_WORD\n\n\nGAMES_MUSIC\n\n\nGAMES_ADVENTURE\n\n\nGAMES_ACTION\n\n\nGAMES_ROLE_PLAYING\n\n\nGAMES_CASUAL\n\n\nGAMES_BOARD\n\n\nGAMES_TRIVIA\n\n\nGAMES_CARD\n\n\nGAMES_PUZZLE\n\n\nGAMES_CASINO\n\n\nGAMES_STRATEGY\n\n\nGAMES_SIMULATION\n\n\nGAMES_RACING\n\n\nGAMES_FAMILY\n\n\n\n\nAvailable Stickers Subcategories\n\n\n\n\nSTICKERS_PLACES_AND_OBJECTS\n\n\nSTICKERS_EMOJI_AND_EXPRESSIONS\n\n\nSTICKERS_CELEBRATIONS\n\n\nSTICKERS_CELEBRITIES\n\n\nSTICKERS_MOVIES_AND_TV\n\n\nSTICKERS_SPORTS_AND_ACTIVITIES\n\n\nSTICKERS_EATING_AND_DRINKING\n\n\nSTICKERS_CHARACTERS\n\n\nSTICKERS_ANIMALS\n\n\nSTICKERS_FASHION\n\n\nSTICKERS_ART\n\n\nSTICKERS_GAMING\n\n\nSTICKERS_KIDS_AND_FAMILY\n\n\nSTICKERS_PEOPLE\n\n\nSTICKERS_MUSIC\n\n\n\n\nAvailable age rating groups\n\n\nNon Boolean\n\n\nValues\n\n\n\n\n0: None\n\n\n1: Infrequent/Mild\n\n\n2: Frequent/Intense\n\n\n\n\n\n\nNONE\n\n\nINFREQUENT_OR_MILD\n\n\nFREQUENT_OR_INTENSE\n\n\n\n\nKeys\n\n\n\n\nviolenceCartoonOrFantasy\n\n\nviolenceRealistic\n\n\nviolenceRealisticProlongedGraphicOrSadistic\n\n\nprofanityOrCrudeHumor\n\n\nmatureOrSuggestiveThemes\n\n\nhorrorOrFearThemes\n\n\nmedicalOrTreatmentInformation\n\n\nalcoholTobaccoOrDrugUseOrReferences\n\n\ngamblingSimulated\n\n\nsexualContentOrNudity\n\n\nsexualContentGraphicAndNudity\n\n\n\n\nBoolean\n\n\nKeys\n\n\n\n\nunrestrictedWebAccess\n\n\ngamblingAndContests\n\n\n\n\n\n\n\n\nDefault values\n\n\nDeliver has a special \ndefault\n language code which allows you to provide values that are not localized, and which will be used as defaults when you don\u2019t provide a specific localized value.\n\n\nIn order to use \ndefault\n, you will need to tell \ndeliver\n which languages your app uses. You can do this in either of two ways:\n\n\n\n\nCreate the folders named with the language in the metadata folder (i.e. fastlane/metadata/en-US or fastlane/metadata/de-DE)\n\n\nAdd the following to your \nDeliverfile\n \nlanguages(['en-US','de-DE'])\n\n\n\n\nYou can use this either in json within your \nDeliverfile\n and/or as folders in your metadata folder. \ndeliver\n will take the union of both language sets from the \nDeliverfile\n and from the metadata folder and create on single set of languages which will be enabled.\n\n\nImagine that you have localized data for the following language codes:  \nen-US, de-DE, el, it\n\n\nYou can set the following in your \nDeliverfile\n\n\nrelease_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})\n\n\n\n\nDeliver will use \"Shiny and new\" for en-US, el and it.\n\n\nIt will use \"glaenzend und neu\" for de-DE.\n\n\nYou can do the same with folders\n\n\n   default\n      keywords.txt\n      marketing_url.txt\n      name.txt\n      privacy_url.txt\n      support_url.txt\n      release_notes.txt\n   en-US\n      description.txt\n   de-DE\n      description.txt\n   el\n      description.txt\n   it\n      description.txt\n\n\n\n\nIn this case, default values for keywords, urls, name and release notes are used in all localizations, but each language has a fully localized description\n\n\nUploading screenshots for \"iPad Pro (12.9-inch) (3rd generation)\"\n\n\nStarting March 20, 2019 Apple's App Store\n requires 12.9-inch iPad Pro (3rd generation) screenshots additionally to the iPad Pro 2nd generation \nscreenshots\n. As fastlane historically uses the screenshot dimensions to determine the \"display family\" of a screenshot, this poses a problem as both use the same dimensions and are recognized as the same device family.\n\n\nTo solve this a screenshot of a 12.9-inch iPad Pro (3rd generation) must contain either the string \niPad Pro (12.9-inch) (3rd generation)\n or \nipadPro129\n (Apple's internal naming of the display family for the 3rd generation iPad Pro) in its filename to be assigned the correct display family and to be uploaded to the correct screenshot slot in your app's metadata.\n\n\nAutomatically create screenshots\n\n\nIf you want to integrate \ndeliver\n with \nsnapshot\n, check out \nfastlane\n!\n\n\nJenkins integration\n\n\nDetailed instructions about how to set up \ndeliver\n and \nfastlane\n in \nJenkins\n can be found in the \nfastlane README\n.\n\n\nFirewall Issues\n\n\ndeliver\n uses the iTunes Transporter to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol using\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" fastlane deliver\n\n\n\n\nHTTP Proxy\n\n\niTunes Transporter is a Java application bundled with Xcode. In addition to utilizing the \nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\"\n, you need to configure the transporter application to use the proxy independently from the system proxy or any environment proxy settings. You can find the configuration file within Xcode:\n\n\nfor Xcode11 and later\n\n\nTOOLS_PATH=$( xcode-select -p )\nREL_PATH='../SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"\n\n\n\n\nfor Xcode10 or earlier\n\n\nTOOLS_PATH=$( xcode-select -p )\nREL_PATH='../Applications/Application Loader.app/Contents/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"\n\n\n\n\nAdd necessary proxy configuration values to the net.properties according to \nJava Proxy Configuration\n.\n\n\nAs an alternative to editing the properties files, proxy configuration can be specified on the command line directly:\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV -Dhttp.proxyHost=myproxy.com -Dhttp.proxyPort=8080\"\n\n\n\n\nLimit\n\n\nApp Store Connect has a limit of 150 binary uploads per day.\n\n\nEditing the \nDeliverfile\n\n\nChange syntax highlighting to \nRuby\n.\n\n\nProvider Short Name\n\n\nIf you are on multiple App Store Connect teams, \ndeliver\n needs a provider short name to know where to upload your binary. \ndeliver\n will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the \nitc_provider\n option.\n\n\n\n\n\n\n\n\n\n\n\nappstore\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nupload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\ndeliver   # alias for \"upload_to_app_store\"\n\n\n\n\nappstore  # alias for \"upload_to_app_store\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\napp_version\n\n\nThe version that should be edited or created\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your ipa file\n\n\n*\n\n\n\n\n\n\npkg\n\n\nPath to your pkg file\n\n\n*\n\n\n\n\n\n\nbuild_number\n\n\nIf set the given build number (already uploaded to iTC) will be used instead of the current built one\n\n\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\nedit_live\n\n\nModify live metadata, this option disables ipa upload and screenshot upload\n\n\nfalse\n\n\n\n\n\n\nuse_live_version\n\n\nForce usage of live version rather than edit version\n\n\nfalse\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the folder containing the metadata files\n\n\n\n\n\n\n\n\nscreenshots_path\n\n\nPath to the folder containing the screenshots\n\n\n\n\n\n\n\n\nskip_binary_upload\n\n\nSkip uploading an ipa or pkg to App Store Connect\n\n\nfalse\n\n\n\n\n\n\nskip_screenshots\n\n\nDon't upload the screenshots\n\n\nfalse\n\n\n\n\n\n\nskip_metadata\n\n\nDon't upload the metadata (e.g. title, description). This will still upload screenshots\n\n\nfalse\n\n\n\n\n\n\nskip_app_version_update\n\n\nDon\u2019t create or update the app version that is being prepared for submission\n\n\nfalse\n\n\n\n\n\n\nforce\n\n\nSkip verification of HTML preview file\n\n\nfalse\n\n\n\n\n\n\noverwrite_screenshots\n\n\nClear all previously uploaded screenshots before uploading the new ones\n\n\nfalse\n\n\n\n\n\n\nsubmit_for_review\n\n\nSubmit the new version for Review after uploading everything\n\n\nfalse\n\n\n\n\n\n\nreject_if_possible\n\n\nRejects the previously submitted build if it's in a state where it's possible\n\n\nfalse\n\n\n\n\n\n\nautomatic_release\n\n\nShould the app be automatically released once it's approved? (Can not be used together with \nauto_release_date\n)\n\n\n\n\n\n\n\n\nauto_release_date\n\n\nDate in milliseconds for automatically releasing on pending approval (Can not be used together with \nautomatic_release\n)\n\n\n\n\n\n\n\n\nphased_release\n\n\nEnable the phased release feature of iTC\n\n\nfalse\n\n\n\n\n\n\nreset_ratings\n\n\nReset the summary rating when you release a new version of the application\n\n\nfalse\n\n\n\n\n\n\nprice_tier\n\n\nThe price tier of this application\n\n\n\n\n\n\n\n\napp_rating_config_path\n\n\nPath to the app rating's config\n\n\n\n\n\n\n\n\nsubmission_information\n\n\nExtra information for the submission (e.g. compliance specifications, IDFA settings)\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n\n\n*\n\n\n\n\n\n\ndev_portal_team_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run \npathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off\n. The short names of providers should be listed in the second column\n\n\n*\n\n\n\n\n\n\nrun_precheck_before_submit\n\n\nRun precheck before submitting to app review\n\n\ntrue\n\n\n\n\n\n\nprecheck_default_rule_level\n\n\nThe default precheck rule level unless otherwise configured\n\n\n:warn\n\n\n\n\n\n\nindividual_metadata_items\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - An array of localized metadata items to upload individually by language so that errors can be identified. E.g. ['name', 'keywords', 'description']. Note: slow\n\n\n\n\n\n\n\n\napp_icon\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the app icon\n\n\n\n\n\n\n\n\napple_watch_app_icon\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the Apple Watch app icon\n\n\n\n\n\n\n\n\ncopyright\n\n\nMetadata: The copyright notice\n\n\n\n\n\n\n\n\nprimary_category\n\n\nMetadata: The english name of the primary category (e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\n\n\nsecondary_category\n\n\nMetadata: The english name of the secondary category (e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nMetadata: The english name of the primary first sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nMetadata: The english name of the primary second sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nMetadata: The english name of the secondary first sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nMetadata: The english name of the secondary second sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\ntrade_representative_contact_information\n\n\nMetadata: A hash containing the trade representative contact information\n\n\n\n\n\n\n\n\napp_review_information\n\n\nMetadata: A hash containing the review information\n\n\n\n\n\n\n\n\napp_review_attachment_file\n\n\nMetadata: Path to the app review attachment file\n\n\n\n\n\n\n\n\ndescription\n\n\nMetadata: The localised app description\n\n\n\n\n\n\n\n\nname\n\n\nMetadata: The localised app name\n\n\n\n\n\n\n\n\nsubtitle\n\n\nMetadata: The localised app subtitle\n\n\n\n\n\n\n\n\nkeywords\n\n\nMetadata: An array of localised keywords\n\n\n\n\n\n\n\n\npromotional_text\n\n\nMetadata: An array of localised promotional texts\n\n\n\n\n\n\n\n\nrelease_notes\n\n\nMetadata: Localised release notes for this version\n\n\n\n\n\n\n\n\nprivacy_url\n\n\nMetadata: Localised privacy url\n\n\n\n\n\n\n\n\napple_tv_privacy_policy\n\n\nMetadata: Localised Apple TV privacy policy text\n\n\n\n\n\n\n\n\nsupport_url\n\n\nMetadata: Localised support url\n\n\n\n\n\n\n\n\nmarketing_url\n\n\nMetadata: Localised marketing url\n\n\n\n\n\n\n\n\nlanguages\n\n\nMetadata: List of languages to activate\n\n\n\n\n\n\n\n\nignore_language_directory_validation\n\n\nIgnore errors when invalid languages are found in metadata and screenshot directories\n\n\nfalse\n\n\n\n\n\n\nprecheck_include_in_app_purchases\n\n\nShould precheck check in-app purchases?\n\n\ntrue\n\n\n\n\n\n\napp\n\n\nThe (spaceship) app ID of the app you want to use/modify\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action appstore\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run appstore\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run appstore parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "appstore"
        },
        {
            "location": "/actions/appstore/#appstore",
            "text": "Alias for the  upload_to_app_store  action  \n     deliver  uploads screenshots, metadata and binaries to App Store Connect. Use  deliver  to submit your app for App Store review.   \n     Features  \u2022\n     Quick Start  \u2022\n     Usage  \u2022\n     Tips",
            "title": "appstore"
        },
        {
            "location": "/actions/appstore/#features",
            "text": "Upload hundreds of localized screenshots completely automatically  Upload a new ipa/pkg file to App Store Connect without Xcode from any Mac  Maintain your app metadata locally and push changes back to App Store Connect  Easily implement a real Continuous Deployment process using  fastlane  Store the configuration in git to easily deploy from  any  Mac, including your Continuous Integration server  Get a HTML preview of the fetched metadata before uploading the app metadata and screenshots to iTC  Automatically uses  precheck  to ensure your app has the highest chances of passing app review the first time   To upload builds to TestFlight check out  pilot .",
            "title": "Features"
        },
        {
            "location": "/actions/appstore/#quick-start",
            "text": "The guide will create all the necessary files for you, using the existing app metadata from App Store Connect.   cd [your_project_folder]  fastlane deliver init  Enter your App Store Connect credentials  Enter your app identifier  Enjoy a good drink, while the computer does all the work for you   From now on, you can run  fastlane deliver  to deploy a new update, or just upload new app metadata and screenshots.",
            "title": "Quick Start"
        },
        {
            "location": "/actions/appstore/#usage",
            "text": "Check out your local  ./fastlane/metadata  and  ./fastlane/screenshots  folders (if you don't use  fastlane  it's  ./metadata  instead)   You'll see your metadata from App Store Connect. Feel free to store the metadata in git (not the screenshots). You can now modify it locally and push the changes back to App Store Connect.  Run  fastlane deliver  to upload the app metadata from your local machine  fastlane deliver  Provide the path to an  ipa  file to upload and submit your app for review:  fastlane deliver --ipa \"App.ipa\" --submit_for_review  or you can specify path to  pkg  file for macOS apps:  fastlane deliver --pkg \"MacApp.pkg\"  If you use  fastlane  you don't have to manually specify the path to your  ipa / pkg  file.  This is just a small sub-set of what you can do with  deliver , check out the full documentation in  #more-options  Download existing screenshots from App Store Connect  fastlane deliver download_screenshots  Download existing metadata from App Store Connect  fastlane deliver download_metadata  To get a list of available options run  fastlane action deliver",
            "title": "Usage"
        },
        {
            "location": "/actions/appstore/#use-in-a-fastfile",
            "text": "deliver  deliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)",
            "title": "Use in a Fastfile"
        },
        {
            "location": "/actions/appstore/#more-options",
            "text": "View all available options and their valid values",
            "title": "More options"
        },
        {
            "location": "/actions/appstore/#available-options",
            "text": "All the options below can easily be added to your  Deliverfile . The great thing: if you use  fastlane  you can use all these options from your  Fastfile  too, for example:  deliver(\n  submit_for_review: true,\n  metadata_path: \"../folder\"\n)",
            "title": "Available options"
        },
        {
            "location": "/actions/appstore/#app_identifier",
            "text": "The bundle identifier (e.g. \"com.krausefx.app\")",
            "title": "app_identifier"
        },
        {
            "location": "/actions/appstore/#username",
            "text": "Your Apple ID email address",
            "title": "username"
        },
        {
            "location": "/actions/appstore/#ipa",
            "text": "A path to a signed ipa file, which will be uploaded. If you don't provide this value, only app metadata will be uploaded. If you want to submit the app for review make sure to either use  fastlane deliver --submit_for_review  or add  submit_for_review true  to your  Deliverfile  ipa(\"App.ipa\")  if you use  fastlane  the ipa file will automatically be detected.",
            "title": "ipa"
        },
        {
            "location": "/actions/appstore/#pkg",
            "text": "A path to a signed pkg file, which will be uploaded. Submission logic of ipa applies to pkg files.  pkg(\"MacApp.pkg\")",
            "title": "pkg"
        },
        {
            "location": "/actions/appstore/#app_version",
            "text": "Optional, as it is usually automatically detected. Specify the version that should be created / edited on App Store Connect:  app_version(\"2.0\")",
            "title": "app_version"
        },
        {
            "location": "/actions/appstore/#skip_app_version_update",
            "text": "In the case if  deliver  uploads your application to App Store Connect it will automatically update \"Prepare for submission\" app version (which could be found on App Store Connect->My Apps->App Store page)  The option allows uploading your app without updating \"Prepare for submission\" version.  This could be useful in the case if you are generating a lot of uploads while not submitting the latest build for Apple review.  The default value is false.  skip_app_version_update(true)",
            "title": "skip_app_version_update"
        },
        {
            "location": "/actions/appstore/#submit_for_review",
            "text": "Add this to your  Deliverfile  to automatically submit the app for review after uploading metadata/binary. This will select the latest build.  submit_for_review(true)",
            "title": "submit_for_review"
        },
        {
            "location": "/actions/appstore/#screenshots_path",
            "text": "A path to a folder containing subfolders for each language. This will automatically detect the device type based on the image resolution. Also includes \uf8ff Watch Support.",
            "title": "screenshots_path"
        },
        {
            "location": "/actions/appstore/#metadata_path",
            "text": "Path to the metadata you want to use. The folder has to be structured like this   If you run  deliver init  this will automatically be created for you.",
            "title": "metadata_path"
        },
        {
            "location": "/actions/appstore/#force",
            "text": "force(true)  If set to  true , no HTML report will be generated before the actual upload. You can also pass  --force  when calling  deliver .",
            "title": "force"
        },
        {
            "location": "/actions/appstore/#price_tier",
            "text": "Pass the price tier as number. This will be active from the current day.  price_tier 0",
            "title": "price_tier"
        },
        {
            "location": "/actions/appstore/#trade_representative_contact_information",
            "text": "Trade Representative Contact information for Korean App Store. Available options:  first_name ,  last_name ,  address_line1 ,  address_line2 ,  address_line3 ,  city_name ,  state ,  country ,  postal_code ,  phone_number ,  email_address ,  is_displayed_on_app_store .  trade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)  You can also provide these values by creating files in a  metadata/trade_representative_contact_information/  directory. The file names must match the pattern  <key>.txt  (e.g.  first_name.txt ,  address_line1.txt  etc.). The contents of each file will be used as the value for the matching key. Values provided in the  Deliverfile  or  Fastfile  will be take priority over values from these files.  is_displayed_on_app_store  is the option on App Store Connect described as:  Display Trade Representative Contact Information on the Korean App Store",
            "title": "trade_representative_contact_information"
        },
        {
            "location": "/actions/appstore/#app_review_information",
            "text": "Contact information for the app review team. Available options:  first_name ,  last_name ,  phone_number ,  email_address ,  demo_user ,  demo_password ,  notes .  app_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)  You can also provide these values by creating files in a  metadata/review_information/  directory. The file names must match the pattern  <key>.txt  (e.g.  first_name.txt ,  notes.txt  etc.). The contents of each file will be used as the value for the matching key. Values provided in the  Deliverfile  or  Fastfile  will be take priority over values from these files.",
            "title": "app_review_information"
        },
        {
            "location": "/actions/appstore/#app_review_attachment_file",
            "text": "You can provide additional information to the app review team as a file attachment. As of this writing, Apple supports following file attachment formats: .pdf, .doc, .docx, .rtf, .pages, .xls, .xlsx, .numbers, .zip, .rar, .plist, .crash, .jpg, .png, .mp4, or .avi.  Provide an empty string (i.e. \"\", not null) to remove the existing attachment file (if any) from the review information being edited.  app_review_attachment_file: \"./readme.txt\"",
            "title": "app_review_attachment_file"
        },
        {
            "location": "/actions/appstore/#submission_information",
            "text": "Must be a hash. This is used as the last step for the deployment process, where you define if you use third party content or use encryption.  A list of available options .  submission_information({\n  add_id_info_serves_ads: true,\n  ...\n})",
            "title": "submission_information"
        },
        {
            "location": "/actions/appstore/#automatic_release",
            "text": "Should the app be released to all users once Apple approves it? If set to  false , you'll have to manually release the update once it got approved.  automatic_release(true)\n# or\nautomatic_release(false)",
            "title": "automatic_release"
        },
        {
            "location": "/actions/appstore/#phased_release",
            "text": "Enable or disable the phased releases feature of App Store Connect. If set to  true , the update will be released over a 7 day period. Default behavior is to leave whatever you defined on App Store Connect.  phased_release(true)\n# or\nphased_release(false)",
            "title": "phased_release"
        },
        {
            "location": "/actions/appstore/#reset_ratings",
            "text": "Reset your app's summary rating for all territories. If set to  true , it will reset rating when this version is released. Default behavior is to keep existing rating.  reset_ratings(true)\n# or\nreset_ratings(false)",
            "title": "reset_ratings"
        },
        {
            "location": "/actions/appstore/#app_rating_config_path",
            "text": "You can set the app age ratings using  deliver . You'll have to create and store a  JSON  configuration file. Copy the  template  to your project folder and pass the path to the  JSON  file using the  app_rating_config_path  option.  The keys/values on the top allow values from 0-2, and the items on the bottom allow only 0 or 1. More information in  #reference .",
            "title": "app_rating_config_path"
        },
        {
            "location": "/actions/appstore/#metadata",
            "text": "All options below are useful if you want to specify certain app metadata in your  Deliverfile  or  Fastfile",
            "title": "Metadata"
        },
        {
            "location": "/actions/appstore/#localized",
            "text": "Localized values should be set like this  description({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})",
            "title": "Localized"
        },
        {
            "location": "/actions/appstore/#name",
            "text": "The title/name of the app",
            "title": "name"
        },
        {
            "location": "/actions/appstore/#subtitle",
            "text": "Localized subtitle of the app  subtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)",
            "title": "subtitle"
        },
        {
            "location": "/actions/appstore/#description",
            "text": "The description of the app",
            "title": "description"
        },
        {
            "location": "/actions/appstore/#release_notes",
            "text": "The release_notes (What's new / Changelog) of the latest version",
            "title": "release_notes"
        },
        {
            "location": "/actions/appstore/#support_url-marketing_url-privacy_url",
            "text": "These URLs are shown in the AppStore",
            "title": "support_url, marketing_url, privacy_url"
        },
        {
            "location": "/actions/appstore/#keywords",
            "text": "Keywords separated using a comma.  keywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)",
            "title": "keywords"
        },
        {
            "location": "/actions/appstore/#promotional_text",
            "text": "Localized promotional text  promotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)",
            "title": "promotional_text"
        },
        {
            "location": "/actions/appstore/#app_icon",
            "text": "A path to a new app icon, which must be exactly 1024x1024px  app_icon('./AppIcon.png')",
            "title": "app_icon"
        },
        {
            "location": "/actions/appstore/#apple_watch_app_icon",
            "text": "A path to a new app icon for the \uf8ff Watch, which must be exactly 1024x1024px  apple_watch_app_icon('./AppleWatchAppIcon.png')",
            "title": "apple_watch_app_icon"
        },
        {
            "location": "/actions/appstore/#platform",
            "text": "The platform of your application (a.e. ios, osx).  This option is optional. The default value is \"ios\" and deliver should be able to figure out the platform from your binary.  However, in the case if multiple binaries present, you can specify a platform which you want to deliver explicitly.  The available options:   'ios'  'appletvos'  'osx'",
            "title": "platform"
        },
        {
            "location": "/actions/appstore/#non-localized",
            "text": "",
            "title": "Non-Localized"
        },
        {
            "location": "/actions/appstore/#copyright",
            "text": "The up to date copyright information.  copyright(\"#{Time.now.year} Felix Krause\")",
            "title": "copyright"
        },
        {
            "location": "/actions/appstore/#primary_category",
            "text": "The english name of the category you want to set (e.g.  Business ,  Books )  See  #reference  for a list of available categories",
            "title": "primary_category"
        },
        {
            "location": "/actions/appstore/#secondary_category",
            "text": "The english name of the secondary category you want to set",
            "title": "secondary_category"
        },
        {
            "location": "/actions/appstore/#primary_first_sub_category",
            "text": "The english name of the primary first sub category you want to set",
            "title": "primary_first_sub_category"
        },
        {
            "location": "/actions/appstore/#primary_second_sub_category",
            "text": "The english name of the primary second sub category you want to set",
            "title": "primary_second_sub_category"
        },
        {
            "location": "/actions/appstore/#secondary_first_sub_category",
            "text": "The english name of the secondary first sub category you want to set",
            "title": "secondary_first_sub_category"
        },
        {
            "location": "/actions/appstore/#secondary_second_sub_category",
            "text": "The english name of the secondary second sub category you want to set",
            "title": "secondary_second_sub_category"
        },
        {
            "location": "/actions/appstore/#submit-build",
            "text": "deliver  allows you to promote an existing build to production. Below are examples to select a previously uploaded build and submit it for review.  fastlane deliver submit_build --build_number 830",
            "title": "Submit Build"
        },
        {
            "location": "/actions/appstore/#submit-build-in-a-fastfile",
            "text": "lane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend  Omit  build_number  to let  fastlane  automatically select the latest build number for the current version being edited for release from App Store Connect.",
            "title": "Submit build in a Fastfile"
        },
        {
            "location": "/actions/appstore/#compliance-and-idfa-settings",
            "text": "Use the  submission_information  parameter for additional submission specifiers, including compliance and IDFA settings. Look at the Spaceship's  app_submission.rb  file for options. See  this example .  fastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"",
            "title": "Compliance and IDFA settings"
        },
        {
            "location": "/actions/appstore/#app-privacy-details",
            "text": "Starting on December 8, 2020, Apple announced that developers are required to provide app privacy details that will help users understand an app's privacy practies.  deliver  does not allow for updating of this information but this can be done with the  upload_app_privacy_details_to_app_store  action. More information on  Uploading App Privacy Details",
            "title": "App Privacy Details"
        },
        {
            "location": "/actions/appstore/#credentials",
            "text": "A detailed description about how your credentials are handled is available in a  credentials_manager .",
            "title": "Credentials"
        },
        {
            "location": "/actions/appstore/#how-does-this-thing-even-work-is-magic-involved",
            "text": "Your password will be stored in the macOS keychain, but can also be passed using environment variables. (More information available on  CredentialsManager )  Before actually uploading anything to iTunes,  deliver  will generate a HTML summary of the collected data.  deliver  uses the following techniques under the hood:   The iTMSTransporter tool is used to upload the binary to App Store Connect. iTMSTransporter is a command line tool provided by Apple.  For all metadata related actions  deliver  uses  spaceship",
            "title": "How does this thing even work? Is magic involved? \ud83c\udfa9"
        },
        {
            "location": "/actions/appstore/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/appstore/#available-language-codes",
            "text": "ar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, uk, vi, zh-Hans, zh-Hant",
            "title": "Available language codes"
        },
        {
            "location": "/actions/appstore/#available-metadata-folder-options",
            "text": "deliver  allows for metadata to be set through  .txt  files in the metadata folder. This metadata folder location is defaulted to  ./fastlane/metadata  but can be overridden through the  metadata_path  parameter. Below are all allowed metadata options.",
            "title": "Available Metadata Folder Options"
        },
        {
            "location": "/actions/appstore/#non-localized-metadata",
            "text": "Key  Editable While Live  Directory  Filename      copyright  Yes  <metadata_path>  copyright.txt    primary_category  No  <metadata_path>  primary_category.txt    secondary_category  No  <metadata_path>  secondary_category.txt    primary_first_sub_category  No  <metadata_path>  primary_first_sub_category.txt    primary_second_sub_category  No  <metadata_path>  primary_second_sub_category.txt    secondary_first_sub_category  No  <metadata_path>  secondary_first_sub_category.txt    secondary_second_sub_category  No  <metadata_path>  secondary_second_sub_category.txt",
            "title": "Non-Localized Metadata"
        },
        {
            "location": "/actions/appstore/#localized-metadata",
            "text": "Key  Editable While Live  Directory  Filename      name  No  <metadata_path>/<lang>/  name.txt    subtitle  No  <metadata_path>/<lang>/  subtitle.txt    privacy_url  Yes  <metadata_path>/<lang>/  privacy_url.txt    apple_tv_privacy_policy  No  <metadata_path>/<lang>/  apple_tv_privacy_policy.txt    description  Yes  <metadata_path>/<lang>/  description.txt    keywords  No  <metadata_path>/<lang>/  keywords.txt    release_notes  Yes  <metadata_path>/<lang>/  release_notes.txt    support_url  Yes  <metadata_path>/<lang>/  support_url.txt    marketing_url  Yes  <metadata_path>/<lang>/  marketing_url.txt    promotional_text  Yes  <metadata_path>/<lang>/  promotional_text.txt",
            "title": "Localized Metadata"
        },
        {
            "location": "/actions/appstore/#review-information-metadata",
            "text": "Key  Editable While Live  Directory  Filename  Deprecated Filename      first_name  Yes  <metadata_path>/review_information  first_name.txt  review_first_name.txt    last_name  Yes  <metadata_path>/review_information  last_name.txt  review_last_name.txt    phone_number  Yes  <metadata_path>/review_information  phone_number.txt  review_phone_number.txt    email_address  Yes  <metadata_path>/review_information  email_address.txt  review_email.txt    demo_user  Yes  <metadata_path>/review_information  demo_user.txt  review_demo_user.txt    demo_password  Yes  <metadata_path>/review_information  demo_password.txt  review_demo_password.txt    notes  Yes  <metadata_path>/review_information  notes.txt  review_notes.txt",
            "title": "Review Information Metadata"
        },
        {
            "location": "/actions/appstore/#reference",
            "text": "View all available categories, etc.",
            "title": "Reference"
        },
        {
            "location": "/actions/appstore/#available-categories",
            "text": "FOOD_AND_DRINK  BUSINESS  EDUCATION  SOCIAL_NETWORKING  BOOKS  SPORTS  FINANCE  REFERENCE  GRAPHICS_AND_DESIGN  DEVELOPER_TOOLS  HEALTH_AND_FITNESS  MUSIC  WEATHER  TRAVEL  ENTERTAINMENT  STICKERS  GAMES  LIFESTYLE  MEDICAL  MAGAZINES_AND_NEWSPAPERS  UTILITIES  SHOPPING  PRODUCTIVITY  NEWS  PHOTO_AND_VIDEO  NAVIGATION",
            "title": "Available Categories"
        },
        {
            "location": "/actions/appstore/#available-game-subcategories",
            "text": "MZGenre.Action  MZGenre.Adventure  MZGenre.Arcade  MZGenre.Board  MZGenre.Card  MZGenre.Casino  MZGenre.Dice  MZGenre.Educational  MZGenre.Family  MZGenre.Music  MZGenre.Puzzle  MZGenre.Racing  MZGenre.RolePlaying  MZGenre.Simulation  MZGenre.Sports  MZGenre.Strategy  MZGenre.Trivia  MZGenre.Word    GAMES_SPORTS  GAMES_WORD  GAMES_MUSIC  GAMES_ADVENTURE  GAMES_ACTION  GAMES_ROLE_PLAYING  GAMES_CASUAL  GAMES_BOARD  GAMES_TRIVIA  GAMES_CARD  GAMES_PUZZLE  GAMES_CASINO  GAMES_STRATEGY  GAMES_SIMULATION  GAMES_RACING  GAMES_FAMILY",
            "title": "Available Game Subcategories"
        },
        {
            "location": "/actions/appstore/#available-stickers-subcategories",
            "text": "STICKERS_PLACES_AND_OBJECTS  STICKERS_EMOJI_AND_EXPRESSIONS  STICKERS_CELEBRATIONS  STICKERS_CELEBRITIES  STICKERS_MOVIES_AND_TV  STICKERS_SPORTS_AND_ACTIVITIES  STICKERS_EATING_AND_DRINKING  STICKERS_CHARACTERS  STICKERS_ANIMALS  STICKERS_FASHION  STICKERS_ART  STICKERS_GAMING  STICKERS_KIDS_AND_FAMILY  STICKERS_PEOPLE  STICKERS_MUSIC",
            "title": "Available Stickers Subcategories"
        },
        {
            "location": "/actions/appstore/#available-age-rating-groups",
            "text": "",
            "title": "Available age rating groups"
        },
        {
            "location": "/actions/appstore/#non-boolean",
            "text": "Values   0: None  1: Infrequent/Mild  2: Frequent/Intense    NONE  INFREQUENT_OR_MILD  FREQUENT_OR_INTENSE   Keys   violenceCartoonOrFantasy  violenceRealistic  violenceRealisticProlongedGraphicOrSadistic  profanityOrCrudeHumor  matureOrSuggestiveThemes  horrorOrFearThemes  medicalOrTreatmentInformation  alcoholTobaccoOrDrugUseOrReferences  gamblingSimulated  sexualContentOrNudity  sexualContentGraphicAndNudity",
            "title": "Non Boolean"
        },
        {
            "location": "/actions/appstore/#boolean",
            "text": "Keys   unrestrictedWebAccess  gamblingAndContests",
            "title": "Boolean"
        },
        {
            "location": "/actions/appstore/#default-values",
            "text": "Deliver has a special  default  language code which allows you to provide values that are not localized, and which will be used as defaults when you don\u2019t provide a specific localized value.  In order to use  default , you will need to tell  deliver  which languages your app uses. You can do this in either of two ways:   Create the folders named with the language in the metadata folder (i.e. fastlane/metadata/en-US or fastlane/metadata/de-DE)  Add the following to your  Deliverfile   languages(['en-US','de-DE'])   You can use this either in json within your  Deliverfile  and/or as folders in your metadata folder.  deliver  will take the union of both language sets from the  Deliverfile  and from the metadata folder and create on single set of languages which will be enabled.  Imagine that you have localized data for the following language codes:   en-US, de-DE, el, it  You can set the following in your  Deliverfile  release_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})  Deliver will use \"Shiny and new\" for en-US, el and it.  It will use \"glaenzend und neu\" for de-DE.  You can do the same with folders     default\n      keywords.txt\n      marketing_url.txt\n      name.txt\n      privacy_url.txt\n      support_url.txt\n      release_notes.txt\n   en-US\n      description.txt\n   de-DE\n      description.txt\n   el\n      description.txt\n   it\n      description.txt  In this case, default values for keywords, urls, name and release notes are used in all localizations, but each language has a fully localized description",
            "title": "Default values"
        },
        {
            "location": "/actions/appstore/#uploading-screenshots-for-ipad-pro-129-inch-3rd-generation",
            "text": "Starting March 20, 2019 Apple's App Store  requires 12.9-inch iPad Pro (3rd generation) screenshots additionally to the iPad Pro 2nd generation  screenshots . As fastlane historically uses the screenshot dimensions to determine the \"display family\" of a screenshot, this poses a problem as both use the same dimensions and are recognized as the same device family.  To solve this a screenshot of a 12.9-inch iPad Pro (3rd generation) must contain either the string  iPad Pro (12.9-inch) (3rd generation)  or  ipadPro129  (Apple's internal naming of the display family for the 3rd generation iPad Pro) in its filename to be assigned the correct display family and to be uploaded to the correct screenshot slot in your app's metadata.",
            "title": "Uploading screenshots for \"iPad Pro (12.9-inch) (3rd generation)\""
        },
        {
            "location": "/actions/appstore/#automatically-create-screenshots",
            "text": "If you want to integrate  deliver  with  snapshot , check out  fastlane !",
            "title": "Automatically create screenshots"
        },
        {
            "location": "/actions/appstore/#jenkins-integration",
            "text": "Detailed instructions about how to set up  deliver  and  fastlane  in  Jenkins  can be found in the  fastlane README .",
            "title": "Jenkins integration"
        },
        {
            "location": "/actions/appstore/#firewall-issues",
            "text": "deliver  uses the iTunes Transporter to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol using  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" fastlane deliver",
            "title": "Firewall Issues"
        },
        {
            "location": "/actions/appstore/#http-proxy",
            "text": "iTunes Transporter is a Java application bundled with Xcode. In addition to utilizing the  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" , you need to configure the transporter application to use the proxy independently from the system proxy or any environment proxy settings. You can find the configuration file within Xcode:  for Xcode11 and later  TOOLS_PATH=$( xcode-select -p )\nREL_PATH='../SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"  for Xcode10 or earlier  TOOLS_PATH=$( xcode-select -p )\nREL_PATH='../Applications/Application Loader.app/Contents/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"  Add necessary proxy configuration values to the net.properties according to  Java Proxy Configuration .  As an alternative to editing the properties files, proxy configuration can be specified on the command line directly:  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV -Dhttp.proxyHost=myproxy.com -Dhttp.proxyPort=8080\"",
            "title": "HTTP Proxy"
        },
        {
            "location": "/actions/appstore/#limit",
            "text": "App Store Connect has a limit of 150 binary uploads per day.",
            "title": "Limit"
        },
        {
            "location": "/actions/appstore/#editing-the-deliverfile",
            "text": "Change syntax highlighting to  Ruby .",
            "title": "Editing the Deliverfile"
        },
        {
            "location": "/actions/appstore/#provider-short-name",
            "text": "If you are on multiple App Store Connect teams,  deliver  needs a provider short name to know where to upload your binary.  deliver  will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the  itc_provider  option.      appstore       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Provider Short Name"
        },
        {
            "location": "/actions/appstore/#3-examples",
            "text": "upload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)  deliver   # alias for \"upload_to_app_store\"  appstore  # alias for \"upload_to_app_store\"",
            "title": "3 Examples"
        },
        {
            "location": "/actions/appstore/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    app_identifier  The bundle identifier of your app  *    app_version  The version that should be edited or created     ipa  Path to your ipa file  *    pkg  Path to your pkg file  *    build_number  If set the given build number (already uploaded to iTC) will be used instead of the current built one     platform  The platform to use (optional)  ios    edit_live  Modify live metadata, this option disables ipa upload and screenshot upload  false    use_live_version  Force usage of live version rather than edit version  false    metadata_path  Path to the folder containing the metadata files     screenshots_path  Path to the folder containing the screenshots     skip_binary_upload  Skip uploading an ipa or pkg to App Store Connect  false    skip_screenshots  Don't upload the screenshots  false    skip_metadata  Don't upload the metadata (e.g. title, description). This will still upload screenshots  false    skip_app_version_update  Don\u2019t create or update the app version that is being prepared for submission  false    force  Skip verification of HTML preview file  false    overwrite_screenshots  Clear all previously uploaded screenshots before uploading the new ones  false    submit_for_review  Submit the new version for Review after uploading everything  false    reject_if_possible  Rejects the previously submitted build if it's in a state where it's possible  false    automatic_release  Should the app be automatically released once it's approved? (Can not be used together with  auto_release_date )     auto_release_date  Date in milliseconds for automatically releasing on pending approval (Can not be used together with  automatic_release )     phased_release  Enable the phased release feature of iTC  false    reset_ratings  Reset the summary rating when you release a new version of the application  false    price_tier  The price tier of this application     app_rating_config_path  Path to the app rating's config     submission_information  Extra information for the submission (e.g. compliance specifications, IDFA settings)     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    dev_portal_team_id  The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!  *    dev_portal_team_name  The name of your Developer Portal team if you're in multiple teams  *    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run  pathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off . The short names of providers should be listed in the second column  *    run_precheck_before_submit  Run precheck before submitting to app review  true    precheck_default_rule_level  The default precheck rule level unless otherwise configured  :warn    individual_metadata_items  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - An array of localized metadata items to upload individually by language so that errors can be identified. E.g. ['name', 'keywords', 'description']. Note: slow     app_icon  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the app icon     apple_watch_app_icon  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the Apple Watch app icon     copyright  Metadata: The copyright notice     primary_category  Metadata: The english name of the primary category (e.g.  Business ,  Books )     secondary_category  Metadata: The english name of the secondary category (e.g.  Business ,  Books )     primary_first_sub_category  Metadata: The english name of the primary first sub category (e.g.  Educational ,  Puzzle )     primary_second_sub_category  Metadata: The english name of the primary second sub category (e.g.  Educational ,  Puzzle )     secondary_first_sub_category  Metadata: The english name of the secondary first sub category (e.g.  Educational ,  Puzzle )     secondary_second_sub_category  Metadata: The english name of the secondary second sub category (e.g.  Educational ,  Puzzle )     trade_representative_contact_information  Metadata: A hash containing the trade representative contact information     app_review_information  Metadata: A hash containing the review information     app_review_attachment_file  Metadata: Path to the app review attachment file     description  Metadata: The localised app description     name  Metadata: The localised app name     subtitle  Metadata: The localised app subtitle     keywords  Metadata: An array of localised keywords     promotional_text  Metadata: An array of localised promotional texts     release_notes  Metadata: Localised release notes for this version     privacy_url  Metadata: Localised privacy url     apple_tv_privacy_policy  Metadata: Localised Apple TV privacy policy text     support_url  Metadata: Localised support url     marketing_url  Metadata: Localised marketing url     languages  Metadata: List of languages to activate     ignore_language_directory_validation  Ignore errors when invalid languages are found in metadata and screenshot directories  false    precheck_include_in_app_purchases  Should precheck check in-app purchases?  true    app  The (spaceship) app ID of the app you want to use/modify      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/appstore/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action appstore",
            "title": "Documentation"
        },
        {
            "location": "/actions/appstore/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run appstore  To pass parameters, make use of the  :  symbol, for example  fastlane run appstore parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/appstore/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/apteligent/",
            "text": "apteligent\n\n\nUpload dSYM file to \nApteligent (Crittercism)\n\n\n\n\n\n\n\n\napteligent\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@Mo7amedFouad\n\n\n\n\n\n\n\n\n1 Example\n\n\napteligent(\n  app_id: \"...\",\n  api_key: \"...\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndsym\n\n\ndSYM.zip file to upload to Apteligent\n\n\n\n\n\n\n\n\napp_id\n\n\nApteligent App ID key e.g. 569f5c87cb99e10e00c7xxxx\n\n\n\n\n\n\n\n\napi_key\n\n\nApteligent App API key e.g. IXPQIi8yCbHaLliqzRoo065tH0lxxxxx\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action apteligent\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run apteligent\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run apteligent parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "apteligent"
        },
        {
            "location": "/actions/apteligent/#apteligent",
            "text": "Upload dSYM file to  Apteligent (Crittercism)     apteligent       Supported platforms  ios    Author  @Mo7amedFouad",
            "title": "apteligent"
        },
        {
            "location": "/actions/apteligent/#1-example",
            "text": "apteligent(\n  app_id: \"...\",\n  api_key: \"...\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/apteligent/#parameters",
            "text": "Key  Description  Default      dsym  dSYM.zip file to upload to Apteligent     app_id  Apteligent App ID key e.g. 569f5c87cb99e10e00c7xxxx     api_key  Apteligent App API key e.g. IXPQIi8yCbHaLliqzRoo065tH0lxxxxx      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/apteligent/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action apteligent",
            "title": "Documentation"
        },
        {
            "location": "/actions/apteligent/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run apteligent  To pass parameters, make use of the  :  symbol, for example  fastlane run apteligent parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/apteligent/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/artifactory/",
            "text": "artifactory\n\n\nThis action uploads an artifact to artifactory\n\n\n\n\nConnect to the artifactory server using either a username/password or an api_key\n\n\n\n\n\n\n\n\n\n\nartifactory\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@koglinjg, @tommeier\n\n\n\n\n\n\n\n\n2 Examples\n\n\nartifactory(\n  username: \"username\",\n  password: \"password\",\n  endpoint: \"https://artifactory.example.com/artifactory/\",\n  file: \"example.ipa\",  # File to upload\n  repo: \"mobile_artifacts\",       # Artifactory repo\n  repo_path: \"/ios/appname/example-major.minor.ipa\"   # Path to place the artifact including its filename\n)\n\n\n\n\nartifactory(\n  api_key: \"api_key\",\n  endpoint: \"https://artifactory.example.com/artifactory/\",\n  file: \"example.ipa\",  # File to upload\n  repo: \"mobile_artifacts\",       # Artifactory repo\n  repo_path: \"/ios/appname/example-major.minor.ipa\"   # Path to place the artifact including its filename\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nFile to be uploaded to artifactory\n\n\n\n\n\n\n\n\nrepo\n\n\nArtifactory repo to put the file in\n\n\n\n\n\n\n\n\nrepo_path\n\n\nPath to deploy within the repo, including filename\n\n\n\n\n\n\n\n\nendpoint\n\n\nArtifactory endpoint\n\n\n\n\n\n\n\n\nusername\n\n\nArtifactory username\n\n\n\n\n\n\n\n\npassword\n\n\nArtifactory password\n\n\n\n\n\n\n\n\napi_key\n\n\nArtifactory API key\n\n\n\n\n\n\n\n\nproperties\n\n\nArtifact properties hash\n\n\n{}\n\n\n\n\n\n\nssl_pem_file\n\n\nLocation of pem file to use for ssl verification\n\n\n\n\n\n\n\n\nssl_verify\n\n\nVerify SSL\n\n\ntrue\n\n\n\n\n\n\nproxy_username\n\n\nProxy username\n\n\n\n\n\n\n\n\nproxy_password\n\n\nProxy password\n\n\n\n\n\n\n\n\nproxy_address\n\n\nProxy address\n\n\n\n\n\n\n\n\nproxy_port\n\n\nProxy port\n\n\n\n\n\n\n\n\nread_timeout\n\n\nRead timeout\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nartifactory\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::ARTIFACTORY_DOWNLOAD_URL\n\n\nThe download url for file uploaded\n\n\n\n\n\n\nSharedValues::ARTIFACTORY_DOWNLOAD_SIZE\n\n\nThe reported file size for file uploaded\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action artifactory\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run artifactory\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run artifactory parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "artifactory"
        },
        {
            "location": "/actions/artifactory/#artifactory",
            "text": "This action uploads an artifact to artifactory   Connect to the artifactory server using either a username/password or an api_key      artifactory       Supported platforms  ios, android, mac    Author  @koglinjg, @tommeier",
            "title": "artifactory"
        },
        {
            "location": "/actions/artifactory/#2-examples",
            "text": "artifactory(\n  username: \"username\",\n  password: \"password\",\n  endpoint: \"https://artifactory.example.com/artifactory/\",\n  file: \"example.ipa\",  # File to upload\n  repo: \"mobile_artifacts\",       # Artifactory repo\n  repo_path: \"/ios/appname/example-major.minor.ipa\"   # Path to place the artifact including its filename\n)  artifactory(\n  api_key: \"api_key\",\n  endpoint: \"https://artifactory.example.com/artifactory/\",\n  file: \"example.ipa\",  # File to upload\n  repo: \"mobile_artifacts\",       # Artifactory repo\n  repo_path: \"/ios/appname/example-major.minor.ipa\"   # Path to place the artifact including its filename\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/artifactory/#parameters",
            "text": "Key  Description  Default      file  File to be uploaded to artifactory     repo  Artifactory repo to put the file in     repo_path  Path to deploy within the repo, including filename     endpoint  Artifactory endpoint     username  Artifactory username     password  Artifactory password     api_key  Artifactory API key     properties  Artifact properties hash  {}    ssl_pem_file  Location of pem file to use for ssl verification     ssl_verify  Verify SSL  true    proxy_username  Proxy username     proxy_password  Proxy password     proxy_address  Proxy address     proxy_port  Proxy port     read_timeout  Read timeout      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/artifactory/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  artifactory  action generates the following Lane Variables:     SharedValue  Description      SharedValues::ARTIFACTORY_DOWNLOAD_URL  The download url for file uploaded    SharedValues::ARTIFACTORY_DOWNLOAD_SIZE  The reported file size for file uploaded     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/artifactory/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action artifactory",
            "title": "Documentation"
        },
        {
            "location": "/actions/artifactory/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run artifactory  To pass parameters, make use of the  :  symbol, for example  fastlane run artifactory parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/artifactory/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/automatic_code_signing/",
            "text": "automatic_code_signing\n\n\nConfigures Xcode's Codesigning options\n\n\n\n\nPlease use \nupdate_code_signing_settings\n action instead.\n\n\nConfigures Xcode's Codesigning options of all targets in the project\n\n\n\n\n\n\n\n\n\n\nautomatic_code_signing\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@mathiasAichinger, @hjanuschka, @p4checo, @portellaa, @aeons\n\n\n\n\n\n\nReturns\n\n\nThe current status (boolean) of codesigning after modification\n\n\n\n\n\n\n\n\n8 Examples\n\n\n# enable automatic code signing\nenable_automatic_code_signing\n\n\n\n\nenable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n\n\n\n\n# disable automatic code signing\ndisable_automatic_code_signing\n\n\n\n\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n\n\n\n\n# also set team id\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  team_id: \"XXXX\"\n)\n\n\n\n\n# Only specific targets\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: false,\n  targets: [\"demo\"]\n)\n\n\n\n\n\n # via generic action\nautomatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: false\n)\n\n\n\n\nautomatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to your Xcode project\n\n\n*\n\n\n\n\n\n\nuse_automatic_signing\n\n\nDefines if project should use automatic signing\n\n\nfalse\n\n\n\n\n\n\nteam_id\n\n\nTeam ID, is used when upgrading project\n\n\n\n\n\n\n\n\ntargets\n\n\nSpecify targets you want to toggle the signing mech. (default to all targets)\n\n\n\n\n\n\n\n\ncode_sign_identity\n\n\nCode signing identity type (iPhone Developer, iPhone Distribution)\n\n\n\n\n\n\n\n\nprofile_name\n\n\nProvisioning profile name to use for code signing\n\n\n\n\n\n\n\n\nprofile_uuid\n\n\nProvisioning profile UUID to use for code signing\n\n\n\n\n\n\n\n\nbundle_identifier\n\n\nApplication Product Bundle Identifier\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action automatic_code_signing\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run automatic_code_signing\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run automatic_code_signing parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "automatic_code_signing"
        },
        {
            "location": "/actions/automatic_code_signing/#automatic_code_signing",
            "text": "Configures Xcode's Codesigning options   Please use  update_code_signing_settings  action instead.  Configures Xcode's Codesigning options of all targets in the project      automatic_code_signing       Supported platforms  ios, mac    Author  @mathiasAichinger, @hjanuschka, @p4checo, @portellaa, @aeons    Returns  The current status (boolean) of codesigning after modification",
            "title": "automatic_code_signing"
        },
        {
            "location": "/actions/automatic_code_signing/#8-examples",
            "text": "# enable automatic code signing\nenable_automatic_code_signing  enable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\"\n)  # disable automatic code signing\ndisable_automatic_code_signing  disable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\"\n)  # also set team id\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  team_id: \"XXXX\"\n)  # Only specific targets\ndisable_automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: false,\n  targets: [\"demo\"]\n)   # via generic action\nautomatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: false\n)  automatic_code_signing(\n  path: \"demo-project/demo/demo.xcodeproj\",\n  use_automatic_signing: true\n)",
            "title": "8 Examples"
        },
        {
            "location": "/actions/automatic_code_signing/#parameters",
            "text": "Key  Description  Default      path  Path to your Xcode project  *    use_automatic_signing  Defines if project should use automatic signing  false    team_id  Team ID, is used when upgrading project     targets  Specify targets you want to toggle the signing mech. (default to all targets)     code_sign_identity  Code signing identity type (iPhone Developer, iPhone Distribution)     profile_name  Provisioning profile name to use for code signing     profile_uuid  Provisioning profile UUID to use for code signing     bundle_identifier  Application Product Bundle Identifier      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/automatic_code_signing/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action automatic_code_signing",
            "title": "Documentation"
        },
        {
            "location": "/actions/automatic_code_signing/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run automatic_code_signing  To pass parameters, make use of the  :  symbol, for example  fastlane run automatic_code_signing parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/automatic_code_signing/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/backup_file/",
            "text": "backup_file\n\n\nThis action backs up your file to \"[path].back\"\n\n\n\n\n\n\n\n\nbackup_file\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n1 Example\n\n\nbackup_file(path: \"/path/to/file\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the file you want to backup\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action backup_file\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run backup_file\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run backup_file parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "backup_file"
        },
        {
            "location": "/actions/backup_file/#backup_file",
            "text": "This action backs up your file to \"[path].back\"     backup_file       Supported platforms  ios, android, mac    Author  @gin0606",
            "title": "backup_file"
        },
        {
            "location": "/actions/backup_file/#1-example",
            "text": "backup_file(path: \"/path/to/file\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/backup_file/#parameters",
            "text": "Key  Description  Default      path  Path to the file you want to backup      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/backup_file/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action backup_file",
            "title": "Documentation"
        },
        {
            "location": "/actions/backup_file/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run backup_file  To pass parameters, make use of the  :  symbol, for example  fastlane run backup_file parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/backup_file/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/backup_xcarchive/",
            "text": "backup_xcarchive\n\n\nSave your [zipped] xcarchive elsewhere from default path\n\n\n\n\n\n\n\n\nbackup_xcarchive\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dral3x\n\n\n\n\n\n\n\n\n1 Example\n\n\nbackup_xcarchive(\n  xcarchive: \"/path/to/file.xcarchive\", # Optional if you use the `xcodebuild` action\n  destination: \"/somewhere/else/\", # Where the backup should be created\n  zip_filename: \"file.xcarchive\", # The name of the backup file\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcarchive\n\n\nPath to your xcarchive file. Optional if you use the \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\ndestination\n\n\nWhere your archive will be placed\n\n\n\n\n\n\n\n\nzip\n\n\nEnable compression of the archive\n\n\ntrue\n\n\n\n\n\n\nzip_filename\n\n\nFilename of the compressed archive. Will be appended by \n.xcarchive.zip\n. Default value is the output xcarchive filename\n\n\n*\n\n\n\n\n\n\nversioned\n\n\nCreate a versioned (date and app version) subfolder where to put the archive\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nbackup_xcarchive\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::BACKUP_XCARCHIVE_FILE\n\n\nPath to your saved xcarchive (compressed) file\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action backup_xcarchive\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run backup_xcarchive\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run backup_xcarchive parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "backup_xcarchive"
        },
        {
            "location": "/actions/backup_xcarchive/#backup_xcarchive",
            "text": "Save your [zipped] xcarchive elsewhere from default path     backup_xcarchive       Supported platforms  ios, mac    Author  @dral3x",
            "title": "backup_xcarchive"
        },
        {
            "location": "/actions/backup_xcarchive/#1-example",
            "text": "backup_xcarchive(\n  xcarchive: \"/path/to/file.xcarchive\", # Optional if you use the `xcodebuild` action\n  destination: \"/somewhere/else/\", # Where the backup should be created\n  zip_filename: \"file.xcarchive\", # The name of the backup file\n  zip: false, # Enable compression of the archive. Defaults to `true`.\n  versioned: true # Create a versioned (date and app version) subfolder where to put the archive\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/backup_xcarchive/#parameters",
            "text": "Key  Description  Default      xcarchive  Path to your xcarchive file. Optional if you use the  xcodebuild  action  *    destination  Where your archive will be placed     zip  Enable compression of the archive  true    zip_filename  Filename of the compressed archive. Will be appended by  .xcarchive.zip . Default value is the output xcarchive filename  *    versioned  Create a versioned (date and app version) subfolder where to put the archive  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/backup_xcarchive/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  backup_xcarchive  action generates the following Lane Variables:     SharedValue  Description      SharedValues::BACKUP_XCARCHIVE_FILE  Path to your saved xcarchive (compressed) file     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/backup_xcarchive/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action backup_xcarchive",
            "title": "Documentation"
        },
        {
            "location": "/actions/backup_xcarchive/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run backup_xcarchive  To pass parameters, make use of the  :  symbol, for example  fastlane run backup_xcarchive parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/backup_xcarchive/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/badge/",
            "text": "badge\n\n\nAutomatically add a badge to your app icon\n\n\n\n\nPlease use the \nbadge plugin\n instead.\nThis action will add a light/dark badge onto your app icon.\nYou can also provide your custom badge/overlay or add a shield for more customization.\nMore info: \nhttps://github.com/HazAT/badge\nNote\n: If you want to reset the badge back to default, you can use \nsh 'git checkout -- <path>/Assets.xcassets/'\n.\n\n\n\n\n\n\n\n\n\n\nbadge\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@DanielGri\n\n\n\n\n\n\n\n\n4 Examples\n\n\nbadge(dark: true)\n\n\n\n\nbadge(alpha: true)\n\n\n\n\nbadge(custom: \"/Users/xxx/Desktop/badge.png\")\n\n\n\n\nbadge(shield: \"Version-0.0.3-blue\", no_badge: true)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndark\n\n\nAdds a dark flavored badge ontop of your icon\n\n\n\n\n\n\n\n\ncustom\n\n\nAdd your custom overlay/badge image\n\n\n\n\n\n\n\n\nno_badge\n\n\nHides the beta badge\n\n\n\n\n\n\n\n\nshield\n\n\nAdd a shield to your app icon from shields.io\n\n\n\n\n\n\n\n\nalpha\n\n\nAdds and alpha badge instead of the default beta one\n\n\n\n\n\n\n\n\npath\n\n\nSets the root path to look for AppIcons\n\n\n.\n\n\n\n\n\n\nshield_io_timeout\n\n\nSet custom duration for the timeout of the shields.io request in seconds\n\n\n\n\n\n\n\n\nglob\n\n\nGlob pattern for finding image files\n\n\n\n\n\n\n\n\nalpha_channel\n\n\nKeeps/adds an alpha channel to the icon (useful for android icons)\n\n\n\n\n\n\n\n\nshield_gravity\n\n\nPosition of shield on icon. Default: North - Choices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast\n\n\n\n\n\n\n\n\nshield_no_resize\n\n\nShield image will no longer be resized to aspect fill the full icon. Instead it will only be shrunk to not exceed the icon graphic\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action badge\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run badge\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run badge parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "badge"
        },
        {
            "location": "/actions/badge/#badge",
            "text": "Automatically add a badge to your app icon   Please use the  badge plugin  instead. This action will add a light/dark badge onto your app icon. You can also provide your custom badge/overlay or add a shield for more customization. More info:  https://github.com/HazAT/badge Note : If you want to reset the badge back to default, you can use  sh 'git checkout -- <path>/Assets.xcassets/' .      badge       Supported platforms  ios, android, mac    Author  @DanielGri",
            "title": "badge"
        },
        {
            "location": "/actions/badge/#4-examples",
            "text": "badge(dark: true)  badge(alpha: true)  badge(custom: \"/Users/xxx/Desktop/badge.png\")  badge(shield: \"Version-0.0.3-blue\", no_badge: true)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/badge/#parameters",
            "text": "Key  Description  Default      dark  Adds a dark flavored badge ontop of your icon     custom  Add your custom overlay/badge image     no_badge  Hides the beta badge     shield  Add a shield to your app icon from shields.io     alpha  Adds and alpha badge instead of the default beta one     path  Sets the root path to look for AppIcons  .    shield_io_timeout  Set custom duration for the timeout of the shields.io request in seconds     glob  Glob pattern for finding image files     alpha_channel  Keeps/adds an alpha channel to the icon (useful for android icons)     shield_gravity  Position of shield on icon. Default: North - Choices include: NorthWest, North, NorthEast, West, Center, East, SouthWest, South, SouthEast     shield_no_resize  Shield image will no longer be resized to aspect fill the full icon. Instead it will only be shrunk to not exceed the icon graphic      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/badge/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action badge",
            "title": "Documentation"
        },
        {
            "location": "/actions/badge/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run badge  To pass parameters, make use of the  :  symbol, for example  fastlane run badge parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/badge/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/build_and_upload_to_appetize/",
            "text": "build_and_upload_to_appetize\n\n\nGenerate and upload an ipa file to appetize.io\n\n\n\n\nThis should be called from danger.\nMore information in the \ndevice_grid guide\n.\n\n\n\n\n\n\n\n\n\n\nbuild_and_upload_to_appetize\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcodebuild\n\n\nParameters that are passed to the xcodebuild action\n\n\n{}\n\n\n\n\n\n\nscheme\n\n\nThe scheme to build. Can also be passed using the \nxcodebuild\n parameter\n\n\n\n\n\n\n\n\napi_token\n\n\nAppetize.io API Token\n\n\n\n\n\n\n\n\npublic_key\n\n\nIf not provided, a new app will be created. If provided, the existing build will be overwritten\n\n\n\n\n\n\n\n\nnote\n\n\nNotes you wish to add to the uploaded app\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action build_and_upload_to_appetize\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run build_and_upload_to_appetize\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run build_and_upload_to_appetize parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "build_and_upload_to_appetize"
        },
        {
            "location": "/actions/build_and_upload_to_appetize/#build_and_upload_to_appetize",
            "text": "Generate and upload an ipa file to appetize.io   This should be called from danger. More information in the  device_grid guide .      build_and_upload_to_appetize       Supported platforms  ios    Author  @KrauseFx",
            "title": "build_and_upload_to_appetize"
        },
        {
            "location": "/actions/build_and_upload_to_appetize/#parameters",
            "text": "Key  Description  Default      xcodebuild  Parameters that are passed to the xcodebuild action  {}    scheme  The scheme to build. Can also be passed using the  xcodebuild  parameter     api_token  Appetize.io API Token     public_key  If not provided, a new app will be created. If provided, the existing build will be overwritten     note  Notes you wish to add to the uploaded app      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/build_and_upload_to_appetize/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action build_and_upload_to_appetize",
            "title": "Documentation"
        },
        {
            "location": "/actions/build_and_upload_to_appetize/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run build_and_upload_to_appetize  To pass parameters, make use of the  :  symbol, for example  fastlane run build_and_upload_to_appetize parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/build_and_upload_to_appetize/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/build_android_app/",
            "text": "build_android_app\n\n\nAlias for the \ngradle\n action\n\n\n\n\nRun \n./gradlew tasks\n to get a list of all available gradle tasks for your project\n\n\n\n\n\n\n\n\n\n\nbuild_android_app\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @lmirosevic\n\n\n\n\n\n\nReturns\n\n\nThe output of running the gradle task\n\n\n\n\n\n\n\n\n1 Example\n\n\ngradle(\n  task: \"assemble\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n\n\n\n\nTo build an AAB use:\n\n\ngradle(\n  task: \"bundle\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n\n\n\n\nYou can pass multiple gradle tasks:\n\n\ngradle(\n  tasks: [\"assembleDebug\", \"bundleDebug\"]\n)\n\n\n\n\nYou can pass properties to gradle:\n\n\ngradle(\n  # ...\n\n  properties: {\n    \"versionCode\" => 100,\n    \"versionName\" => \"1.0.0\",\n    # ...\n  }\n)\n\n\n\n\nYou can use this to automatically \nsign and zipalign\n your app:\n\n\ngradle(\n  task: \"assemble\",\n  build_type: \"Release\",\n  print_command: false,\n  properties: {\n    \"android.injected.signing.store.file\" => \"keystore.jks\",\n    \"android.injected.signing.store.password\" => \"store_password\",\n    \"android.injected.signing.key.alias\" => \"key_alias\",\n    \"android.injected.signing.key.password\" => \"key_password\",\n  }\n)\n\n\n\n\nIf you need to pass sensitive information through the \ngradle\n action, and don't want the generated command to be printed before it is run, you can suppress that:\n\n\ngradle(\n  # ...\n  print_command: false\n)\n\n\n\n\nYou can also suppress printing the output generated by running the generated Gradle command:\n\n\ngradle(\n  # ...\n  print_command_output: false\n)\n\n\n\n\nTo pass any other CLI flags to gradle use:\n\n\ngradle(\n  # ...\n\n  flags: \"--exitcode --xml file.xml\"\n)\n\n\n\n\nDelete the build directory, generated APKs and AABs\n\n\ngradle(\n  task: \"clean\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntask\n\n\nThe gradle task you want to execute, e.g. \nassemble\n, \nbundle\n or \ntest\n. For tasks such as \nassembleMyFlavorRelease\n you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')\n\n\n\n\n\n\n\n\nflavor\n\n\nThe flavor that you want the task for, e.g. \nMyFlavor\n. If you are running the \nassemble\n task in a multi-flavor project, and you rely on Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined\n\n\n\n\n\n\n\n\nbuild_type\n\n\nThe build type that you want the task for, e.g. \nRelease\n. Useful for some tasks such as \nassemble\n\n\n\n\n\n\n\n\ntasks\n\n\nThe multiple gradle tasks that you want to execute, e.g. \n[assembleDebug, bundleDebug]\n\n\n\n\n\n\n\n\nflags\n\n\nAll parameter flags you want to pass to the gradle command, e.g. \n--exitcode --xml file.xml\n\n\n\n\n\n\n\n\nproject_dir\n\n\nThe root directory of the gradle project\n\n\n.\n\n\n\n\n\n\ngradle_path\n\n\nThe path to your \ngradlew\n. If you specify a relative path, it is assumed to be relative to the \nproject_dir\n\n\n\n\n\n\n\n\nproperties\n\n\nGradle properties to be exposed to the gradle script\n\n\n\n\n\n\n\n\nsystem_properties\n\n\nGradle system properties to be exposed to the gradle script\n\n\n\n\n\n\n\n\nserial\n\n\nAndroid serial, which device should be used for this command\n\n\n''\n\n\n\n\n\n\nprint_command\n\n\nControl whether the generated Gradle command is printed as output before running it (true/false)\n\n\ntrue\n\n\n\n\n\n\nprint_command_output\n\n\nControl whether the output produced by given Gradle command is printed while running (true/false)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nbuild_android_app\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GRADLE_APK_OUTPUT_PATH\n\n\nThe path to the newly generated apk file. Undefined in a multi-variant assemble scenario\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_APK_OUTPUT_PATHS\n\n\nWhen running a multi-variant \nassemble\n, the array of signed apk's that were generated\n\n\n\n\n\n\nSharedValues::GRADLE_FLAVOR\n\n\nThe flavor, e.g. \nMyFlavor\n\n\n\n\n\n\nSharedValues::GRADLE_BUILD_TYPE\n\n\nThe build type, e.g. \nRelease\n\n\n\n\n\n\nSharedValues::GRADLE_AAB_OUTPUT_PATH\n\n\nThe path to the most recent Android app bundle\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS\n\n\nThe paths to the most recent Android app bundles\n\n\n\n\n\n\nSharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH\n\n\nThe path to the most recent output.json file\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_OUTPUT_JSON_OUTPUT_PATHS\n\n\nThe path to the newly generated output.json files\n\n\n\n\n\n\nSharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH\n\n\nThe path to the most recent mapping.txt file\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_MAPPING_TXT_OUTPUT_PATHS\n\n\nThe path to the newly generated mapping.txt files\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action build_android_app\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run build_android_app\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run build_android_app parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "build_android_app"
        },
        {
            "location": "/actions/build_android_app/#build_android_app",
            "text": "Alias for the  gradle  action   Run  ./gradlew tasks  to get a list of all available gradle tasks for your project      build_android_app       Supported platforms  ios, android    Author  @KrauseFx, @lmirosevic    Returns  The output of running the gradle task",
            "title": "build_android_app"
        },
        {
            "location": "/actions/build_android_app/#1-example",
            "text": "gradle(\n  task: \"assemble\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)  To build an AAB use:  gradle(\n  task: \"bundle\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)  You can pass multiple gradle tasks:  gradle(\n  tasks: [\"assembleDebug\", \"bundleDebug\"]\n)  You can pass properties to gradle:  gradle(\n  # ...\n\n  properties: {\n    \"versionCode\" => 100,\n    \"versionName\" => \"1.0.0\",\n    # ...\n  }\n)  You can use this to automatically  sign and zipalign  your app:  gradle(\n  task: \"assemble\",\n  build_type: \"Release\",\n  print_command: false,\n  properties: {\n    \"android.injected.signing.store.file\" => \"keystore.jks\",\n    \"android.injected.signing.store.password\" => \"store_password\",\n    \"android.injected.signing.key.alias\" => \"key_alias\",\n    \"android.injected.signing.key.password\" => \"key_password\",\n  }\n)  If you need to pass sensitive information through the  gradle  action, and don't want the generated command to be printed before it is run, you can suppress that:  gradle(\n  # ...\n  print_command: false\n)  You can also suppress printing the output generated by running the generated Gradle command:  gradle(\n  # ...\n  print_command_output: false\n)  To pass any other CLI flags to gradle use:  gradle(\n  # ...\n\n  flags: \"--exitcode --xml file.xml\"\n)  Delete the build directory, generated APKs and AABs  gradle(\n  task: \"clean\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/build_android_app/#parameters",
            "text": "Key  Description  Default      task  The gradle task you want to execute, e.g.  assemble ,  bundle  or  test . For tasks such as  assembleMyFlavorRelease  you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')     flavor  The flavor that you want the task for, e.g.  MyFlavor . If you are running the  assemble  task in a multi-flavor project, and you rely on Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined     build_type  The build type that you want the task for, e.g.  Release . Useful for some tasks such as  assemble     tasks  The multiple gradle tasks that you want to execute, e.g.  [assembleDebug, bundleDebug]     flags  All parameter flags you want to pass to the gradle command, e.g.  --exitcode --xml file.xml     project_dir  The root directory of the gradle project  .    gradle_path  The path to your  gradlew . If you specify a relative path, it is assumed to be relative to the  project_dir     properties  Gradle properties to be exposed to the gradle script     system_properties  Gradle system properties to be exposed to the gradle script     serial  Android serial, which device should be used for this command  ''    print_command  Control whether the generated Gradle command is printed as output before running it (true/false)  true    print_command_output  Control whether the output produced by given Gradle command is printed while running (true/false)  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/build_android_app/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  build_android_app  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GRADLE_APK_OUTPUT_PATH  The path to the newly generated apk file. Undefined in a multi-variant assemble scenario    SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS  When running a multi-variant  assemble , the array of signed apk's that were generated    SharedValues::GRADLE_FLAVOR  The flavor, e.g.  MyFlavor    SharedValues::GRADLE_BUILD_TYPE  The build type, e.g.  Release    SharedValues::GRADLE_AAB_OUTPUT_PATH  The path to the most recent Android app bundle    SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS  The paths to the most recent Android app bundles    SharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH  The path to the most recent output.json file    SharedValues::GRADLE_ALL_OUTPUT_JSON_OUTPUT_PATHS  The path to the newly generated output.json files    SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH  The path to the most recent mapping.txt file    SharedValues::GRADLE_ALL_MAPPING_TXT_OUTPUT_PATHS  The path to the newly generated mapping.txt files     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/build_android_app/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action build_android_app",
            "title": "Documentation"
        },
        {
            "location": "/actions/build_android_app/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run build_android_app  To pass parameters, make use of the  :  symbol, for example  fastlane run build_android_app parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/build_android_app/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/build_app/",
            "text": "build_app\n\n\nEasily build and sign your app (via \ngym\n)\n\n\n\n  \n\n\n\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ngym\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nWhat's gym?\n\n\ngym\n builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed \nipa\n or \napp\n file \ud83d\udcaa\n\n\ngym\n is a replacement for \nshenzhen\n.\n\n\nBefore \ngym\n\n\nxcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"\n\n\n\n\nWith \ngym\n\n\nfastlane gym\n\n\n\n\nWhy \ngym\n?\n\n\ngym\n uses the latest APIs to build and sign your application which results in much faster build times.\n\n\n\n\n\n\n\n\n\n\nGym Features\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\ngym\n builds 30% faster than other build tools like \nshenzhen\n\n\n\n\n\n\n\ud83c\udfc1\n\n\nBeautiful inline build output\n\n\n\n\n\n\n\ud83d\udcd6\n\n\nHelps you resolve common build errors like code signing issues\n\n\n\n\n\n\n\ud83d\udea0\n\n\nSensible defaults: Automatically detect the project, its schemes and more\n\n\n\n\n\n\n\ud83d\udd17\n\n\nWorks perfectly with \nfastlane\n and other tools\n\n\n\n\n\n\n\ud83d\udce6\n\n\nAutomatically generates an \nipa\n and a compressed \ndSYM\n file\n\n\n\n\n\n\n\ud83d\ude85\n\n\nDon't remember any complicated build commands, just \ngym\n\n\n\n\n\n\n\ud83d\udd27\n\n\nEasy and dynamic configuration using parameters and environment variables\n\n\n\n\n\n\n\ud83d\udcbe\n\n\nStore common build settings in a \nGymfile\n\n\n\n\n\n\n\ud83d\udce4\n\n\nAll archives are stored and accessible in the Xcode Organizer\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSupports both iOS and Mac applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\nfastlane gym\n\n\n\n\nThat's all you need to build your application. If you want more control, here are some available parameters:\n\n\nfastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean\n\n\n\n\nIf you need to use a different Xcode installation, use \nxcode-select\n or define \nDEVELOPER_DIR\n:\n\n\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym\n\n\n\n\nFor a list of all available parameters use\n\n\nfastlane action gym\n\n\n\n\nIf you run into any issues, use the \nverbose\n mode to get more information\n\n\nfastlane gym --verbose\n\n\n\n\nSet the right export method if you're not uploading to App Store or TestFlight:\n\n\nfastlane gym --export_method ad-hoc\n\n\n\n\nTo pass boolean parameters make sure to use \ngym\n like this:\n\n\nfastlane gym --include_bitcode true --include_symbols false\n\n\n\n\nTo access the raw \nxcodebuild\n output open \n~/Library/Logs/gym\n\n\nGymfile\n\n\nSince you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called \nGymfile\n.\n\n\nRun \nfastlane gym init\n to create a new configuration file. Example:\n\n\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n\n\n\n\nExport options\n\n\nSince Xcode 7, \ngym\n is using new Xcode API which allows us to specify export options using \nplist\n file. By default \ngym\n creates this file for you and you are able to modify some parameters by using \nexport_method\n, \nexport_team_id\n, \ninclude_symbols\n or \ninclude_bitcode\n. If you want to have more options, like creating manifest file for app thinning, you can provide your own \nplist\n file:\n\n\nexport_options(\"./ExportOptions.plist\")\n\n\n\n\nor you can provide hash of values directly in the \nGymfile\n:\n\n\nexport_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})\n\n\n\n\nOptional: If \ngym\n can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:\n\n\nbuild_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)\n\n\n\n\nNote\n: If you use \nfastlane\n with \nmatch\n you don't need to provide those values manually, unless you pass a plist file into \nexport_options\n\n\nFor the list of available options run \nxcodebuild -help\n.\n\n\nSetup code signing\n\n\n\n\nMore information on how to get started with codesigning\n\n\nDocs on how to set up your Xcode project\n\n\n\n\nAutomating the whole process\n\n\ngym\n works great together with \nfastlane\n, which connects all deployment tools into one streamlined workflow.\n\n\nUsing \nfastlane\n you can define a configuration like\n\n\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend\n\n\n\n\nWhen \ngym\n raises an error the \nerror_info\n property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.\n\n\nYou can then easily switch between the beta provider (e.g. \ntestflight\n, \nhockey\n, \ns3\n and more).\n\n\nHow does it work?\n\n\ngym\n uses the latest APIs to build and sign your application. The 2 main components are\n\n\n\n\nxcodebuild\n\n\nxcpretty\n\n\n\n\nWhen you run \ngym\n without the \n--silent\n mode it will print out every command it executes.\n\n\nTo build the archive \ngym\n uses the following command:\n\n\nset -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty\n\n\n\n\nAfter building the archive it is being checked by \ngym\n. If it's valid, it gets packaged up and signed into an \nipa\n file.\n\n\ngym\n automatically chooses a different packaging method depending on the version of Xcode you're using.\n\n\nXcode 7 and above\n\n\n/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'\n\n\n\n\ngym\n makes use of the new Xcode 7 API which allows us to specify the export options using a \nplist\n file. You can find more information about the available options by running \nxcodebuild --help\n.\n\n\nUsing this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.\n\n\nNote: the \nxcbuild-safe.sh script\n wraps around xcodebuild to workaround some incompatibilities.\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nipa\n files like this:\n\n\n\n\n\n\n\n\n\n\n\n\nbuild_app\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe absolute path to the generated ipa file\n\n\n\n\n\n\n\n\n5 Examples\n\n\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n\n\n\n\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n\n\n\n\ngym    # alias for \"build_app\"\n\n\n\n\nbuild_ios_app    # alias for \"build_app (only iOS options)\"\n\n\n\n\nbuild_mac_app    # alias for \"build_app (only macOS options)\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath to the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath to the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n.\n\n\n\n\n\n\noutput_name\n\n\nThe name of the resulting ipa file\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nsilent\n\n\nHide all information that's not necessary while building\n\n\nfalse\n\n\n\n\n\n\ncodesigning_identity\n\n\nThe name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n\n\n\n\n\n\n\n\nskip_package_ipa\n\n\nShould we skip packaging the ipa?\n\n\nfalse\n\n\n\n\n\n\nskip_package_pkg\n\n\nShould we skip packaging the pkg?\n\n\nfalse\n\n\n\n\n\n\ninclude_symbols\n\n\nShould the ipa file include symbols?\n\n\n\n\n\n\n\n\ninclude_bitcode\n\n\nShould the ipa file include bitcode?\n\n\n\n\n\n\n\n\nexport_method\n\n\nMethod used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application\n\n\n\n\n\n\n\n\nexport_options\n\n\nPath to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options\n\n\n\n\n\n\n\n\nexport_xcargs\n\n\nPass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nskip_build_archive\n\n\nExport ipa from previously built xcarchive. Uses archive_path as source\n\n\n\n\n\n\n\n\nskip_archive\n\n\nAfter building, don't archive, effectively not including -archivePath param\n\n\n\n\n\n\n\n\nskip_codesigning\n\n\nBuild without codesigning\n\n\n\n\n\n\n\n\ncatalyst_platform\n\n\nPlatform to build when using a Catalyst enabled app. Valid values are: ios, macos\n\n\n\n\n\n\n\n\ninstaller_cert_name\n\n\nFull name of 3rd Party Mac Developer Installer or Developer ID Installer certificate. Example: \n3rd Party Mac Developer Installer: Your Company (ABC1234XWYZ)\n\n\n\n\n\n\n\n\nbuild_path\n\n\nThe directory in which the archive should be stored in\n\n\n\n\n\n\n\n\narchive_path\n\n\nThe path to the created archive\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where built products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\nresult_bundle_path\n\n\nPath to the result bundle directory to create. Ignored if \nresult_bundle\n if false\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n\n\n\n\n\n\n\n\ndestination\n\n\nUse a custom destination for building the app\n\n\n\n\n\n\n\n\nexport_team_id\n\n\nOptional: Sometimes you need to specify a team id when exporting the ipa file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build output\n\n\n\n\n\n\n\n\nxcpretty_test_format\n\n\nUse the test (RSpec style) format for build output\n\n\n\n\n\n\n\n\nxcpretty_formatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\n\n\nxcpretty_report_junit\n\n\nHave xcpretty create a JUnit-style XML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_html\n\n\nHave xcpretty create a simple HTML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_json\n\n\nHave xcpretty create a JSON compilation database at the provided path\n\n\n\n\n\n\n\n\nanalyze_build_time\n\n\nAnalyze the project build time and store the output in 'culprits.txt' file\n\n\n\n\n\n\n\n\nxcpretty_utf\n\n\nHave xcpretty use unicode encoding when reporting builds\n\n\n\n\n\n\n\n\nskip_profile_detection\n\n\nDo not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nbuild_app\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::IPA_OUTPUT_PATH\n\n\nThe path to the newly generated ipa file\n\n\n\n\n\n\nSharedValues::PKG_OUTPUT_PATH\n\n\nThe path to the newly generated pkg file\n\n\n\n\n\n\nSharedValues::DSYM_OUTPUT_PATH\n\n\nThe path to the dSYM files\n\n\n\n\n\n\nSharedValues::XCODEBUILD_ARCHIVE\n\n\nThe path to the xcodebuild archive\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action build_app\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run build_app\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run build_app parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "build_app"
        },
        {
            "location": "/actions/build_app/#build_app",
            "text": "Easily build and sign your app (via  gym )  \n      \n     Features  \u2022\n     Usage  \u2022\n     Tips",
            "title": "build_app"
        },
        {
            "location": "/actions/build_app/#whats-gym",
            "text": "gym  builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed  ipa  or  app  file \ud83d\udcaa  gym  is a replacement for  shenzhen .",
            "title": "What's gym?"
        },
        {
            "location": "/actions/build_app/#before-gym",
            "text": "xcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"",
            "title": "Before gym"
        },
        {
            "location": "/actions/build_app/#with-gym",
            "text": "fastlane gym",
            "title": "With gym"
        },
        {
            "location": "/actions/build_app/#why-gym",
            "text": "gym  uses the latest APIs to build and sign your application which results in much faster build times.      Gym Features      \ud83d\ude80  gym  builds 30% faster than other build tools like  shenzhen    \ud83c\udfc1  Beautiful inline build output    \ud83d\udcd6  Helps you resolve common build errors like code signing issues    \ud83d\udea0  Sensible defaults: Automatically detect the project, its schemes and more    \ud83d\udd17  Works perfectly with  fastlane  and other tools    \ud83d\udce6  Automatically generates an  ipa  and a compressed  dSYM  file    \ud83d\ude85  Don't remember any complicated build commands, just  gym    \ud83d\udd27  Easy and dynamic configuration using parameters and environment variables    \ud83d\udcbe  Store common build settings in a  Gymfile    \ud83d\udce4  All archives are stored and accessible in the Xcode Organizer    \ud83d\udcbb  Supports both iOS and Mac applications",
            "title": "Why gym?"
        },
        {
            "location": "/actions/build_app/#usage",
            "text": "fastlane gym  That's all you need to build your application. If you want more control, here are some available parameters:  fastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean  If you need to use a different Xcode installation, use  xcode-select  or define  DEVELOPER_DIR :  DEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym  For a list of all available parameters use  fastlane action gym  If you run into any issues, use the  verbose  mode to get more information  fastlane gym --verbose  Set the right export method if you're not uploading to App Store or TestFlight:  fastlane gym --export_method ad-hoc  To pass boolean parameters make sure to use  gym  like this:  fastlane gym --include_bitcode true --include_symbols false  To access the raw  xcodebuild  output open  ~/Library/Logs/gym",
            "title": "Usage"
        },
        {
            "location": "/actions/build_app/#gymfile",
            "text": "Since you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called  Gymfile .  Run  fastlane gym init  to create a new configuration file. Example:  scheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file",
            "title": "Gymfile"
        },
        {
            "location": "/actions/build_app/#export-options",
            "text": "Since Xcode 7,  gym  is using new Xcode API which allows us to specify export options using  plist  file. By default  gym  creates this file for you and you are able to modify some parameters by using  export_method ,  export_team_id ,  include_symbols  or  include_bitcode . If you want to have more options, like creating manifest file for app thinning, you can provide your own  plist  file:  export_options(\"./ExportOptions.plist\")  or you can provide hash of values directly in the  Gymfile :  export_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})  Optional: If  gym  can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:  build_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)  Note : If you use  fastlane  with  match  you don't need to provide those values manually, unless you pass a plist file into  export_options  For the list of available options run  xcodebuild -help .",
            "title": "Export options"
        },
        {
            "location": "/actions/build_app/#setup-code-signing",
            "text": "More information on how to get started with codesigning  Docs on how to set up your Xcode project",
            "title": "Setup code signing"
        },
        {
            "location": "/actions/build_app/#automating-the-whole-process",
            "text": "gym  works great together with  fastlane , which connects all deployment tools into one streamlined workflow.  Using  fastlane  you can define a configuration like  lane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend  When  gym  raises an error the  error_info  property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.  You can then easily switch between the beta provider (e.g.  testflight ,  hockey ,  s3  and more).",
            "title": "Automating the whole process"
        },
        {
            "location": "/actions/build_app/#how-does-it-work",
            "text": "gym  uses the latest APIs to build and sign your application. The 2 main components are   xcodebuild  xcpretty   When you run  gym  without the  --silent  mode it will print out every command it executes.  To build the archive  gym  uses the following command:  set -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty  After building the archive it is being checked by  gym . If it's valid, it gets packaged up and signed into an  ipa  file.  gym  automatically chooses a different packaging method depending on the version of Xcode you're using.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/build_app/#xcode-7-and-above",
            "text": "/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'  gym  makes use of the new Xcode 7 API which allows us to specify the export options using a  plist  file. You can find more information about the available options by running  xcodebuild --help .  Using this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.  Note: the  xcbuild-safe.sh script  wraps around xcodebuild to workaround some incompatibilities.",
            "title": "Xcode 7 and above"
        },
        {
            "location": "/actions/build_app/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  ipa  files like this:      build_app       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The absolute path to the generated ipa file",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/build_app/#5-examples",
            "text": "build_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")  build_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)  gym    # alias for \"build_app\"  build_ios_app    # alias for \"build_app (only iOS options)\"  build_mac_app    # alias for \"build_app (only macOS options)\"",
            "title": "5 Examples"
        },
        {
            "location": "/actions/build_app/#parameters",
            "text": "Key  Description  Default      workspace  Path to the workspace file     project  Path to the project file     scheme  The project's scheme. Make sure it's marked as  Shared     clean  Should the project be cleaned before building it?  false    output_directory  The directory in which the ipa file should be stored in  .    output_name  The name of the resulting ipa file     configuration  The configuration to use when building the app. Defaults to 'Release'  *    silent  Hide all information that's not necessary while building  false    codesigning_identity  The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'     skip_package_ipa  Should we skip packaging the ipa?  false    skip_package_pkg  Should we skip packaging the pkg?  false    include_symbols  Should the ipa file include symbols?     include_bitcode  Should the ipa file include bitcode?     export_method  Method used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application     export_options  Path to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options     export_xcargs  Pass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     skip_build_archive  Export ipa from previously built xcarchive. Uses archive_path as source     skip_archive  After building, don't archive, effectively not including -archivePath param     skip_codesigning  Build without codesigning     catalyst_platform  Platform to build when using a Catalyst enabled app. Valid values are: ios, macos     installer_cert_name  Full name of 3rd Party Mac Developer Installer or Developer ID Installer certificate. Example:  3rd Party Mac Developer Installer: Your Company (ABC1234XWYZ)     build_path  The directory in which the archive should be stored in     archive_path  The path to the created archive     derived_data_path  The directory where built products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    result_bundle_path  Path to the result bundle directory to create. Ignored if  result_bundle  if false     buildlog_path  The directory where to store the build log  *    sdk  The SDK that should be used for building the application     toolchain  The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)     destination  Use a custom destination for building the app     export_team_id  Optional: Sometimes you need to specify a team id when exporting the ipa file     xcargs  Pass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     disable_xcpretty  Disable xcpretty formatting of build output     xcpretty_test_format  Use the test (RSpec style) format for build output     xcpretty_formatter  A custom xcpretty formatter to use     xcpretty_report_junit  Have xcpretty create a JUnit-style XML report at the provided path     xcpretty_report_html  Have xcpretty create a simple HTML report at the provided path     xcpretty_report_json  Have xcpretty create a JSON compilation database at the provided path     analyze_build_time  Analyze the project build time and store the output in 'culprits.txt' file     xcpretty_utf  Have xcpretty use unicode encoding when reporting builds     skip_profile_detection  Do not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/build_app/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  build_app  action generates the following Lane Variables:     SharedValue  Description      SharedValues::IPA_OUTPUT_PATH  The path to the newly generated ipa file    SharedValues::PKG_OUTPUT_PATH  The path to the newly generated pkg file    SharedValues::DSYM_OUTPUT_PATH  The path to the dSYM files    SharedValues::XCODEBUILD_ARCHIVE  The path to the xcodebuild archive     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/build_app/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action build_app",
            "title": "Documentation"
        },
        {
            "location": "/actions/build_app/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run build_app  To pass parameters, make use of the  :  symbol, for example  fastlane run build_app parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/build_app/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/build_ios_app/",
            "text": "build_ios_app\n\n\nAlias for the \nbuild_app\n action but only for iOS\n\n\n\n  \n\n\n\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ngym\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nWhat's gym?\n\n\ngym\n builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed \nipa\n or \napp\n file \ud83d\udcaa\n\n\ngym\n is a replacement for \nshenzhen\n.\n\n\nBefore \ngym\n\n\nxcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"\n\n\n\n\nWith \ngym\n\n\nfastlane gym\n\n\n\n\nWhy \ngym\n?\n\n\ngym\n uses the latest APIs to build and sign your application which results in much faster build times.\n\n\n\n\n\n\n\n\n\n\nGym Features\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\ngym\n builds 30% faster than other build tools like \nshenzhen\n\n\n\n\n\n\n\ud83c\udfc1\n\n\nBeautiful inline build output\n\n\n\n\n\n\n\ud83d\udcd6\n\n\nHelps you resolve common build errors like code signing issues\n\n\n\n\n\n\n\ud83d\udea0\n\n\nSensible defaults: Automatically detect the project, its schemes and more\n\n\n\n\n\n\n\ud83d\udd17\n\n\nWorks perfectly with \nfastlane\n and other tools\n\n\n\n\n\n\n\ud83d\udce6\n\n\nAutomatically generates an \nipa\n and a compressed \ndSYM\n file\n\n\n\n\n\n\n\ud83d\ude85\n\n\nDon't remember any complicated build commands, just \ngym\n\n\n\n\n\n\n\ud83d\udd27\n\n\nEasy and dynamic configuration using parameters and environment variables\n\n\n\n\n\n\n\ud83d\udcbe\n\n\nStore common build settings in a \nGymfile\n\n\n\n\n\n\n\ud83d\udce4\n\n\nAll archives are stored and accessible in the Xcode Organizer\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSupports both iOS and Mac applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\nfastlane gym\n\n\n\n\nThat's all you need to build your application. If you want more control, here are some available parameters:\n\n\nfastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean\n\n\n\n\nIf you need to use a different Xcode installation, use \nxcode-select\n or define \nDEVELOPER_DIR\n:\n\n\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym\n\n\n\n\nFor a list of all available parameters use\n\n\nfastlane action gym\n\n\n\n\nIf you run into any issues, use the \nverbose\n mode to get more information\n\n\nfastlane gym --verbose\n\n\n\n\nSet the right export method if you're not uploading to App Store or TestFlight:\n\n\nfastlane gym --export_method ad-hoc\n\n\n\n\nTo pass boolean parameters make sure to use \ngym\n like this:\n\n\nfastlane gym --include_bitcode true --include_symbols false\n\n\n\n\nTo access the raw \nxcodebuild\n output open \n~/Library/Logs/gym\n\n\nGymfile\n\n\nSince you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called \nGymfile\n.\n\n\nRun \nfastlane gym init\n to create a new configuration file. Example:\n\n\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n\n\n\n\nExport options\n\n\nSince Xcode 7, \ngym\n is using new Xcode API which allows us to specify export options using \nplist\n file. By default \ngym\n creates this file for you and you are able to modify some parameters by using \nexport_method\n, \nexport_team_id\n, \ninclude_symbols\n or \ninclude_bitcode\n. If you want to have more options, like creating manifest file for app thinning, you can provide your own \nplist\n file:\n\n\nexport_options(\"./ExportOptions.plist\")\n\n\n\n\nor you can provide hash of values directly in the \nGymfile\n:\n\n\nexport_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})\n\n\n\n\nOptional: If \ngym\n can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:\n\n\nbuild_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)\n\n\n\n\nNote\n: If you use \nfastlane\n with \nmatch\n you don't need to provide those values manually, unless you pass a plist file into \nexport_options\n\n\nFor the list of available options run \nxcodebuild -help\n.\n\n\nSetup code signing\n\n\n\n\nMore information on how to get started with codesigning\n\n\nDocs on how to set up your Xcode project\n\n\n\n\nAutomating the whole process\n\n\ngym\n works great together with \nfastlane\n, which connects all deployment tools into one streamlined workflow.\n\n\nUsing \nfastlane\n you can define a configuration like\n\n\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend\n\n\n\n\nWhen \ngym\n raises an error the \nerror_info\n property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.\n\n\nYou can then easily switch between the beta provider (e.g. \ntestflight\n, \nhockey\n, \ns3\n and more).\n\n\nHow does it work?\n\n\ngym\n uses the latest APIs to build and sign your application. The 2 main components are\n\n\n\n\nxcodebuild\n\n\nxcpretty\n\n\n\n\nWhen you run \ngym\n without the \n--silent\n mode it will print out every command it executes.\n\n\nTo build the archive \ngym\n uses the following command:\n\n\nset -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty\n\n\n\n\nAfter building the archive it is being checked by \ngym\n. If it's valid, it gets packaged up and signed into an \nipa\n file.\n\n\ngym\n automatically chooses a different packaging method depending on the version of Xcode you're using.\n\n\nXcode 7 and above\n\n\n/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'\n\n\n\n\ngym\n makes use of the new Xcode 7 API which allows us to specify the export options using a \nplist\n file. You can find more information about the available options by running \nxcodebuild --help\n.\n\n\nUsing this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.\n\n\nNote: the \nxcbuild-safe.sh script\n wraps around xcodebuild to workaround some incompatibilities.\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nipa\n files like this:\n\n\n\n\n\n\n\n\n\n\n\n\nbuild_ios_app\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe absolute path to the generated ipa file\n\n\n\n\n\n\n\n\n5 Examples\n\n\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n\n\n\n\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n\n\n\n\ngym    # alias for \"build_app\"\n\n\n\n\nbuild_ios_app    # alias for \"build_app (only iOS options)\"\n\n\n\n\nbuild_mac_app    # alias for \"build_app (only macOS options)\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath to the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath to the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n.\n\n\n\n\n\n\noutput_name\n\n\nThe name of the resulting ipa file\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nsilent\n\n\nHide all information that's not necessary while building\n\n\nfalse\n\n\n\n\n\n\ncodesigning_identity\n\n\nThe name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n\n\n\n\n\n\n\n\nskip_package_ipa\n\n\nShould we skip packaging the ipa?\n\n\nfalse\n\n\n\n\n\n\ninclude_symbols\n\n\nShould the ipa file include symbols?\n\n\n\n\n\n\n\n\ninclude_bitcode\n\n\nShould the ipa file include bitcode?\n\n\n\n\n\n\n\n\nexport_method\n\n\nMethod used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application\n\n\n\n\n\n\n\n\nexport_options\n\n\nPath to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options\n\n\n\n\n\n\n\n\nexport_xcargs\n\n\nPass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nskip_build_archive\n\n\nExport ipa from previously built xcarchive. Uses archive_path as source\n\n\n\n\n\n\n\n\nskip_archive\n\n\nAfter building, don't archive, effectively not including -archivePath param\n\n\n\n\n\n\n\n\nskip_codesigning\n\n\nBuild without codesigning\n\n\n\n\n\n\n\n\nbuild_path\n\n\nThe directory in which the archive should be stored in\n\n\n\n\n\n\n\n\narchive_path\n\n\nThe path to the created archive\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where built products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\nresult_bundle_path\n\n\nPath to the result bundle directory to create. Ignored if \nresult_bundle\n if false\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n\n\n\n\n\n\n\n\ndestination\n\n\nUse a custom destination for building the app\n\n\n\n\n\n\n\n\nexport_team_id\n\n\nOptional: Sometimes you need to specify a team id when exporting the ipa file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build output\n\n\n\n\n\n\n\n\nxcpretty_test_format\n\n\nUse the test (RSpec style) format for build output\n\n\n\n\n\n\n\n\nxcpretty_formatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\n\n\nxcpretty_report_junit\n\n\nHave xcpretty create a JUnit-style XML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_html\n\n\nHave xcpretty create a simple HTML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_json\n\n\nHave xcpretty create a JSON compilation database at the provided path\n\n\n\n\n\n\n\n\nanalyze_build_time\n\n\nAnalyze the project build time and store the output in 'culprits.txt' file\n\n\n\n\n\n\n\n\nxcpretty_utf\n\n\nHave xcpretty use unicode encoding when reporting builds\n\n\n\n\n\n\n\n\nskip_profile_detection\n\n\nDo not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nbuild_ios_app\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::IPA_OUTPUT_PATH\n\n\nThe path to the newly generated ipa file\n\n\n\n\n\n\nSharedValues::PKG_OUTPUT_PATH\n\n\nThe path to the newly generated pkg file\n\n\n\n\n\n\nSharedValues::DSYM_OUTPUT_PATH\n\n\nThe path to the dSYM files\n\n\n\n\n\n\nSharedValues::XCODEBUILD_ARCHIVE\n\n\nThe path to the xcodebuild archive\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action build_ios_app\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run build_ios_app\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run build_ios_app parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "build_ios_app"
        },
        {
            "location": "/actions/build_ios_app/#build_ios_app",
            "text": "Alias for the  build_app  action but only for iOS  \n      \n     Features  \u2022\n     Usage  \u2022\n     Tips",
            "title": "build_ios_app"
        },
        {
            "location": "/actions/build_ios_app/#whats-gym",
            "text": "gym  builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed  ipa  or  app  file \ud83d\udcaa  gym  is a replacement for  shenzhen .",
            "title": "What's gym?"
        },
        {
            "location": "/actions/build_ios_app/#before-gym",
            "text": "xcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"",
            "title": "Before gym"
        },
        {
            "location": "/actions/build_ios_app/#with-gym",
            "text": "fastlane gym",
            "title": "With gym"
        },
        {
            "location": "/actions/build_ios_app/#why-gym",
            "text": "gym  uses the latest APIs to build and sign your application which results in much faster build times.      Gym Features      \ud83d\ude80  gym  builds 30% faster than other build tools like  shenzhen    \ud83c\udfc1  Beautiful inline build output    \ud83d\udcd6  Helps you resolve common build errors like code signing issues    \ud83d\udea0  Sensible defaults: Automatically detect the project, its schemes and more    \ud83d\udd17  Works perfectly with  fastlane  and other tools    \ud83d\udce6  Automatically generates an  ipa  and a compressed  dSYM  file    \ud83d\ude85  Don't remember any complicated build commands, just  gym    \ud83d\udd27  Easy and dynamic configuration using parameters and environment variables    \ud83d\udcbe  Store common build settings in a  Gymfile    \ud83d\udce4  All archives are stored and accessible in the Xcode Organizer    \ud83d\udcbb  Supports both iOS and Mac applications",
            "title": "Why gym?"
        },
        {
            "location": "/actions/build_ios_app/#usage",
            "text": "fastlane gym  That's all you need to build your application. If you want more control, here are some available parameters:  fastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean  If you need to use a different Xcode installation, use  xcode-select  or define  DEVELOPER_DIR :  DEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym  For a list of all available parameters use  fastlane action gym  If you run into any issues, use the  verbose  mode to get more information  fastlane gym --verbose  Set the right export method if you're not uploading to App Store or TestFlight:  fastlane gym --export_method ad-hoc  To pass boolean parameters make sure to use  gym  like this:  fastlane gym --include_bitcode true --include_symbols false  To access the raw  xcodebuild  output open  ~/Library/Logs/gym",
            "title": "Usage"
        },
        {
            "location": "/actions/build_ios_app/#gymfile",
            "text": "Since you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called  Gymfile .  Run  fastlane gym init  to create a new configuration file. Example:  scheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file",
            "title": "Gymfile"
        },
        {
            "location": "/actions/build_ios_app/#export-options",
            "text": "Since Xcode 7,  gym  is using new Xcode API which allows us to specify export options using  plist  file. By default  gym  creates this file for you and you are able to modify some parameters by using  export_method ,  export_team_id ,  include_symbols  or  include_bitcode . If you want to have more options, like creating manifest file for app thinning, you can provide your own  plist  file:  export_options(\"./ExportOptions.plist\")  or you can provide hash of values directly in the  Gymfile :  export_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})  Optional: If  gym  can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:  build_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)  Note : If you use  fastlane  with  match  you don't need to provide those values manually, unless you pass a plist file into  export_options  For the list of available options run  xcodebuild -help .",
            "title": "Export options"
        },
        {
            "location": "/actions/build_ios_app/#setup-code-signing",
            "text": "More information on how to get started with codesigning  Docs on how to set up your Xcode project",
            "title": "Setup code signing"
        },
        {
            "location": "/actions/build_ios_app/#automating-the-whole-process",
            "text": "gym  works great together with  fastlane , which connects all deployment tools into one streamlined workflow.  Using  fastlane  you can define a configuration like  lane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend  When  gym  raises an error the  error_info  property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.  You can then easily switch between the beta provider (e.g.  testflight ,  hockey ,  s3  and more).",
            "title": "Automating the whole process"
        },
        {
            "location": "/actions/build_ios_app/#how-does-it-work",
            "text": "gym  uses the latest APIs to build and sign your application. The 2 main components are   xcodebuild  xcpretty   When you run  gym  without the  --silent  mode it will print out every command it executes.  To build the archive  gym  uses the following command:  set -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty  After building the archive it is being checked by  gym . If it's valid, it gets packaged up and signed into an  ipa  file.  gym  automatically chooses a different packaging method depending on the version of Xcode you're using.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/build_ios_app/#xcode-7-and-above",
            "text": "/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'  gym  makes use of the new Xcode 7 API which allows us to specify the export options using a  plist  file. You can find more information about the available options by running  xcodebuild --help .  Using this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.  Note: the  xcbuild-safe.sh script  wraps around xcodebuild to workaround some incompatibilities.",
            "title": "Xcode 7 and above"
        },
        {
            "location": "/actions/build_ios_app/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  ipa  files like this:      build_ios_app       Supported platforms  ios    Author  @KrauseFx    Returns  The absolute path to the generated ipa file",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/build_ios_app/#5-examples",
            "text": "build_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")  build_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)  gym    # alias for \"build_app\"  build_ios_app    # alias for \"build_app (only iOS options)\"  build_mac_app    # alias for \"build_app (only macOS options)\"",
            "title": "5 Examples"
        },
        {
            "location": "/actions/build_ios_app/#parameters",
            "text": "Key  Description  Default      workspace  Path to the workspace file     project  Path to the project file     scheme  The project's scheme. Make sure it's marked as  Shared     clean  Should the project be cleaned before building it?  false    output_directory  The directory in which the ipa file should be stored in  .    output_name  The name of the resulting ipa file     configuration  The configuration to use when building the app. Defaults to 'Release'  *    silent  Hide all information that's not necessary while building  false    codesigning_identity  The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'     skip_package_ipa  Should we skip packaging the ipa?  false    include_symbols  Should the ipa file include symbols?     include_bitcode  Should the ipa file include bitcode?     export_method  Method used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application     export_options  Path to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options     export_xcargs  Pass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     skip_build_archive  Export ipa from previously built xcarchive. Uses archive_path as source     skip_archive  After building, don't archive, effectively not including -archivePath param     skip_codesigning  Build without codesigning     build_path  The directory in which the archive should be stored in     archive_path  The path to the created archive     derived_data_path  The directory where built products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    result_bundle_path  Path to the result bundle directory to create. Ignored if  result_bundle  if false     buildlog_path  The directory where to store the build log  *    sdk  The SDK that should be used for building the application     toolchain  The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)     destination  Use a custom destination for building the app     export_team_id  Optional: Sometimes you need to specify a team id when exporting the ipa file     xcargs  Pass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     disable_xcpretty  Disable xcpretty formatting of build output     xcpretty_test_format  Use the test (RSpec style) format for build output     xcpretty_formatter  A custom xcpretty formatter to use     xcpretty_report_junit  Have xcpretty create a JUnit-style XML report at the provided path     xcpretty_report_html  Have xcpretty create a simple HTML report at the provided path     xcpretty_report_json  Have xcpretty create a JSON compilation database at the provided path     analyze_build_time  Analyze the project build time and store the output in 'culprits.txt' file     xcpretty_utf  Have xcpretty use unicode encoding when reporting builds     skip_profile_detection  Do not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/build_ios_app/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  build_ios_app  action generates the following Lane Variables:     SharedValue  Description      SharedValues::IPA_OUTPUT_PATH  The path to the newly generated ipa file    SharedValues::PKG_OUTPUT_PATH  The path to the newly generated pkg file    SharedValues::DSYM_OUTPUT_PATH  The path to the dSYM files    SharedValues::XCODEBUILD_ARCHIVE  The path to the xcodebuild archive     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/build_ios_app/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action build_ios_app",
            "title": "Documentation"
        },
        {
            "location": "/actions/build_ios_app/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run build_ios_app  To pass parameters, make use of the  :  symbol, for example  fastlane run build_ios_app parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/build_ios_app/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/build_mac_app/",
            "text": "build_mac_app\n\n\nAlias for the \nbuild_app\n action but only for macOS\n\n\n\n  \n\n\n\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ngym\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nWhat's gym?\n\n\ngym\n builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed \nipa\n or \napp\n file \ud83d\udcaa\n\n\ngym\n is a replacement for \nshenzhen\n.\n\n\nBefore \ngym\n\n\nxcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"\n\n\n\n\nWith \ngym\n\n\nfastlane gym\n\n\n\n\nWhy \ngym\n?\n\n\ngym\n uses the latest APIs to build and sign your application which results in much faster build times.\n\n\n\n\n\n\n\n\n\n\nGym Features\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\ngym\n builds 30% faster than other build tools like \nshenzhen\n\n\n\n\n\n\n\ud83c\udfc1\n\n\nBeautiful inline build output\n\n\n\n\n\n\n\ud83d\udcd6\n\n\nHelps you resolve common build errors like code signing issues\n\n\n\n\n\n\n\ud83d\udea0\n\n\nSensible defaults: Automatically detect the project, its schemes and more\n\n\n\n\n\n\n\ud83d\udd17\n\n\nWorks perfectly with \nfastlane\n and other tools\n\n\n\n\n\n\n\ud83d\udce6\n\n\nAutomatically generates an \nipa\n and a compressed \ndSYM\n file\n\n\n\n\n\n\n\ud83d\ude85\n\n\nDon't remember any complicated build commands, just \ngym\n\n\n\n\n\n\n\ud83d\udd27\n\n\nEasy and dynamic configuration using parameters and environment variables\n\n\n\n\n\n\n\ud83d\udcbe\n\n\nStore common build settings in a \nGymfile\n\n\n\n\n\n\n\ud83d\udce4\n\n\nAll archives are stored and accessible in the Xcode Organizer\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSupports both iOS and Mac applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\nfastlane gym\n\n\n\n\nThat's all you need to build your application. If you want more control, here are some available parameters:\n\n\nfastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean\n\n\n\n\nIf you need to use a different Xcode installation, use \nxcode-select\n or define \nDEVELOPER_DIR\n:\n\n\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym\n\n\n\n\nFor a list of all available parameters use\n\n\nfastlane action gym\n\n\n\n\nIf you run into any issues, use the \nverbose\n mode to get more information\n\n\nfastlane gym --verbose\n\n\n\n\nSet the right export method if you're not uploading to App Store or TestFlight:\n\n\nfastlane gym --export_method ad-hoc\n\n\n\n\nTo pass boolean parameters make sure to use \ngym\n like this:\n\n\nfastlane gym --include_bitcode true --include_symbols false\n\n\n\n\nTo access the raw \nxcodebuild\n output open \n~/Library/Logs/gym\n\n\nGymfile\n\n\nSince you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called \nGymfile\n.\n\n\nRun \nfastlane gym init\n to create a new configuration file. Example:\n\n\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n\n\n\n\nExport options\n\n\nSince Xcode 7, \ngym\n is using new Xcode API which allows us to specify export options using \nplist\n file. By default \ngym\n creates this file for you and you are able to modify some parameters by using \nexport_method\n, \nexport_team_id\n, \ninclude_symbols\n or \ninclude_bitcode\n. If you want to have more options, like creating manifest file for app thinning, you can provide your own \nplist\n file:\n\n\nexport_options(\"./ExportOptions.plist\")\n\n\n\n\nor you can provide hash of values directly in the \nGymfile\n:\n\n\nexport_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})\n\n\n\n\nOptional: If \ngym\n can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:\n\n\nbuild_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)\n\n\n\n\nNote\n: If you use \nfastlane\n with \nmatch\n you don't need to provide those values manually, unless you pass a plist file into \nexport_options\n\n\nFor the list of available options run \nxcodebuild -help\n.\n\n\nSetup code signing\n\n\n\n\nMore information on how to get started with codesigning\n\n\nDocs on how to set up your Xcode project\n\n\n\n\nAutomating the whole process\n\n\ngym\n works great together with \nfastlane\n, which connects all deployment tools into one streamlined workflow.\n\n\nUsing \nfastlane\n you can define a configuration like\n\n\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend\n\n\n\n\nWhen \ngym\n raises an error the \nerror_info\n property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.\n\n\nYou can then easily switch between the beta provider (e.g. \ntestflight\n, \nhockey\n, \ns3\n and more).\n\n\nHow does it work?\n\n\ngym\n uses the latest APIs to build and sign your application. The 2 main components are\n\n\n\n\nxcodebuild\n\n\nxcpretty\n\n\n\n\nWhen you run \ngym\n without the \n--silent\n mode it will print out every command it executes.\n\n\nTo build the archive \ngym\n uses the following command:\n\n\nset -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty\n\n\n\n\nAfter building the archive it is being checked by \ngym\n. If it's valid, it gets packaged up and signed into an \nipa\n file.\n\n\ngym\n automatically chooses a different packaging method depending on the version of Xcode you're using.\n\n\nXcode 7 and above\n\n\n/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'\n\n\n\n\ngym\n makes use of the new Xcode 7 API which allows us to specify the export options using a \nplist\n file. You can find more information about the available options by running \nxcodebuild --help\n.\n\n\nUsing this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.\n\n\nNote: the \nxcbuild-safe.sh script\n wraps around xcodebuild to workaround some incompatibilities.\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nipa\n files like this:\n\n\n\n\n\n\n\n\n\n\n\n\nbuild_mac_app\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nmac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe absolute path to the generated ipa file\n\n\n\n\n\n\n\n\n5 Examples\n\n\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n\n\n\n\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n\n\n\n\ngym    # alias for \"build_app\"\n\n\n\n\nbuild_ios_app    # alias for \"build_app (only iOS options)\"\n\n\n\n\nbuild_mac_app    # alias for \"build_app (only macOS options)\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath to the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath to the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n.\n\n\n\n\n\n\noutput_name\n\n\nThe name of the resulting ipa file\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nsilent\n\n\nHide all information that's not necessary while building\n\n\nfalse\n\n\n\n\n\n\ncodesigning_identity\n\n\nThe name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n\n\n\n\n\n\n\n\nskip_package_pkg\n\n\nShould we skip packaging the pkg?\n\n\nfalse\n\n\n\n\n\n\ninclude_symbols\n\n\nShould the ipa file include symbols?\n\n\n\n\n\n\n\n\ninclude_bitcode\n\n\nShould the ipa file include bitcode?\n\n\n\n\n\n\n\n\nexport_method\n\n\nMethod used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application\n\n\n\n\n\n\n\n\nexport_options\n\n\nPath to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options\n\n\n\n\n\n\n\n\nexport_xcargs\n\n\nPass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nskip_build_archive\n\n\nExport ipa from previously built xcarchive. Uses archive_path as source\n\n\n\n\n\n\n\n\nskip_archive\n\n\nAfter building, don't archive, effectively not including -archivePath param\n\n\n\n\n\n\n\n\nskip_codesigning\n\n\nBuild without codesigning\n\n\n\n\n\n\n\n\ninstaller_cert_name\n\n\nFull name of 3rd Party Mac Developer Installer or Developer ID Installer certificate. Example: \n3rd Party Mac Developer Installer: Your Company (ABC1234XWYZ)\n\n\n\n\n\n\n\n\nbuild_path\n\n\nThe directory in which the archive should be stored in\n\n\n\n\n\n\n\n\narchive_path\n\n\nThe path to the created archive\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where built products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\nresult_bundle_path\n\n\nPath to the result bundle directory to create. Ignored if \nresult_bundle\n if false\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n\n\n\n\n\n\n\n\ndestination\n\n\nUse a custom destination for building the app\n\n\n\n\n\n\n\n\nexport_team_id\n\n\nOptional: Sometimes you need to specify a team id when exporting the ipa file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build output\n\n\n\n\n\n\n\n\nxcpretty_test_format\n\n\nUse the test (RSpec style) format for build output\n\n\n\n\n\n\n\n\nxcpretty_formatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\n\n\nxcpretty_report_junit\n\n\nHave xcpretty create a JUnit-style XML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_html\n\n\nHave xcpretty create a simple HTML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_json\n\n\nHave xcpretty create a JSON compilation database at the provided path\n\n\n\n\n\n\n\n\nanalyze_build_time\n\n\nAnalyze the project build time and store the output in 'culprits.txt' file\n\n\n\n\n\n\n\n\nxcpretty_utf\n\n\nHave xcpretty use unicode encoding when reporting builds\n\n\n\n\n\n\n\n\nskip_profile_detection\n\n\nDo not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nbuild_mac_app\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::IPA_OUTPUT_PATH\n\n\nThe path to the newly generated ipa file\n\n\n\n\n\n\nSharedValues::PKG_OUTPUT_PATH\n\n\nThe path to the newly generated pkg file\n\n\n\n\n\n\nSharedValues::DSYM_OUTPUT_PATH\n\n\nThe path to the dSYM files\n\n\n\n\n\n\nSharedValues::XCODEBUILD_ARCHIVE\n\n\nThe path to the xcodebuild archive\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action build_mac_app\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run build_mac_app\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run build_mac_app parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "build_mac_app"
        },
        {
            "location": "/actions/build_mac_app/#build_mac_app",
            "text": "Alias for the  build_app  action but only for macOS  \n      \n     Features  \u2022\n     Usage  \u2022\n     Tips",
            "title": "build_mac_app"
        },
        {
            "location": "/actions/build_mac_app/#whats-gym",
            "text": "gym  builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed  ipa  or  app  file \ud83d\udcaa  gym  is a replacement for  shenzhen .",
            "title": "What's gym?"
        },
        {
            "location": "/actions/build_mac_app/#before-gym",
            "text": "xcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"",
            "title": "Before gym"
        },
        {
            "location": "/actions/build_mac_app/#with-gym",
            "text": "fastlane gym",
            "title": "With gym"
        },
        {
            "location": "/actions/build_mac_app/#why-gym",
            "text": "gym  uses the latest APIs to build and sign your application which results in much faster build times.      Gym Features      \ud83d\ude80  gym  builds 30% faster than other build tools like  shenzhen    \ud83c\udfc1  Beautiful inline build output    \ud83d\udcd6  Helps you resolve common build errors like code signing issues    \ud83d\udea0  Sensible defaults: Automatically detect the project, its schemes and more    \ud83d\udd17  Works perfectly with  fastlane  and other tools    \ud83d\udce6  Automatically generates an  ipa  and a compressed  dSYM  file    \ud83d\ude85  Don't remember any complicated build commands, just  gym    \ud83d\udd27  Easy and dynamic configuration using parameters and environment variables    \ud83d\udcbe  Store common build settings in a  Gymfile    \ud83d\udce4  All archives are stored and accessible in the Xcode Organizer    \ud83d\udcbb  Supports both iOS and Mac applications",
            "title": "Why gym?"
        },
        {
            "location": "/actions/build_mac_app/#usage",
            "text": "fastlane gym  That's all you need to build your application. If you want more control, here are some available parameters:  fastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean  If you need to use a different Xcode installation, use  xcode-select  or define  DEVELOPER_DIR :  DEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym  For a list of all available parameters use  fastlane action gym  If you run into any issues, use the  verbose  mode to get more information  fastlane gym --verbose  Set the right export method if you're not uploading to App Store or TestFlight:  fastlane gym --export_method ad-hoc  To pass boolean parameters make sure to use  gym  like this:  fastlane gym --include_bitcode true --include_symbols false  To access the raw  xcodebuild  output open  ~/Library/Logs/gym",
            "title": "Usage"
        },
        {
            "location": "/actions/build_mac_app/#gymfile",
            "text": "Since you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called  Gymfile .  Run  fastlane gym init  to create a new configuration file. Example:  scheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file",
            "title": "Gymfile"
        },
        {
            "location": "/actions/build_mac_app/#export-options",
            "text": "Since Xcode 7,  gym  is using new Xcode API which allows us to specify export options using  plist  file. By default  gym  creates this file for you and you are able to modify some parameters by using  export_method ,  export_team_id ,  include_symbols  or  include_bitcode . If you want to have more options, like creating manifest file for app thinning, you can provide your own  plist  file:  export_options(\"./ExportOptions.plist\")  or you can provide hash of values directly in the  Gymfile :  export_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})  Optional: If  gym  can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:  build_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)  Note : If you use  fastlane  with  match  you don't need to provide those values manually, unless you pass a plist file into  export_options  For the list of available options run  xcodebuild -help .",
            "title": "Export options"
        },
        {
            "location": "/actions/build_mac_app/#setup-code-signing",
            "text": "More information on how to get started with codesigning  Docs on how to set up your Xcode project",
            "title": "Setup code signing"
        },
        {
            "location": "/actions/build_mac_app/#automating-the-whole-process",
            "text": "gym  works great together with  fastlane , which connects all deployment tools into one streamlined workflow.  Using  fastlane  you can define a configuration like  lane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend  When  gym  raises an error the  error_info  property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.  You can then easily switch between the beta provider (e.g.  testflight ,  hockey ,  s3  and more).",
            "title": "Automating the whole process"
        },
        {
            "location": "/actions/build_mac_app/#how-does-it-work",
            "text": "gym  uses the latest APIs to build and sign your application. The 2 main components are   xcodebuild  xcpretty   When you run  gym  without the  --silent  mode it will print out every command it executes.  To build the archive  gym  uses the following command:  set -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty  After building the archive it is being checked by  gym . If it's valid, it gets packaged up and signed into an  ipa  file.  gym  automatically chooses a different packaging method depending on the version of Xcode you're using.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/build_mac_app/#xcode-7-and-above",
            "text": "/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'  gym  makes use of the new Xcode 7 API which allows us to specify the export options using a  plist  file. You can find more information about the available options by running  xcodebuild --help .  Using this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.  Note: the  xcbuild-safe.sh script  wraps around xcodebuild to workaround some incompatibilities.",
            "title": "Xcode 7 and above"
        },
        {
            "location": "/actions/build_mac_app/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  ipa  files like this:      build_mac_app       Supported platforms  mac    Author  @KrauseFx    Returns  The absolute path to the generated ipa file",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/build_mac_app/#5-examples",
            "text": "build_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")  build_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)  gym    # alias for \"build_app\"  build_ios_app    # alias for \"build_app (only iOS options)\"  build_mac_app    # alias for \"build_app (only macOS options)\"",
            "title": "5 Examples"
        },
        {
            "location": "/actions/build_mac_app/#parameters",
            "text": "Key  Description  Default      workspace  Path to the workspace file     project  Path to the project file     scheme  The project's scheme. Make sure it's marked as  Shared     clean  Should the project be cleaned before building it?  false    output_directory  The directory in which the ipa file should be stored in  .    output_name  The name of the resulting ipa file     configuration  The configuration to use when building the app. Defaults to 'Release'  *    silent  Hide all information that's not necessary while building  false    codesigning_identity  The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'     skip_package_pkg  Should we skip packaging the pkg?  false    include_symbols  Should the ipa file include symbols?     include_bitcode  Should the ipa file include bitcode?     export_method  Method used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application     export_options  Path to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options     export_xcargs  Pass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     skip_build_archive  Export ipa from previously built xcarchive. Uses archive_path as source     skip_archive  After building, don't archive, effectively not including -archivePath param     skip_codesigning  Build without codesigning     installer_cert_name  Full name of 3rd Party Mac Developer Installer or Developer ID Installer certificate. Example:  3rd Party Mac Developer Installer: Your Company (ABC1234XWYZ)     build_path  The directory in which the archive should be stored in     archive_path  The path to the created archive     derived_data_path  The directory where built products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    result_bundle_path  Path to the result bundle directory to create. Ignored if  result_bundle  if false     buildlog_path  The directory where to store the build log  *    sdk  The SDK that should be used for building the application     toolchain  The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)     destination  Use a custom destination for building the app     export_team_id  Optional: Sometimes you need to specify a team id when exporting the ipa file     xcargs  Pass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     disable_xcpretty  Disable xcpretty formatting of build output     xcpretty_test_format  Use the test (RSpec style) format for build output     xcpretty_formatter  A custom xcpretty formatter to use     xcpretty_report_junit  Have xcpretty create a JUnit-style XML report at the provided path     xcpretty_report_html  Have xcpretty create a simple HTML report at the provided path     xcpretty_report_json  Have xcpretty create a JSON compilation database at the provided path     analyze_build_time  Analyze the project build time and store the output in 'culprits.txt' file     xcpretty_utf  Have xcpretty use unicode encoding when reporting builds     skip_profile_detection  Do not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/build_mac_app/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  build_mac_app  action generates the following Lane Variables:     SharedValue  Description      SharedValues::IPA_OUTPUT_PATH  The path to the newly generated ipa file    SharedValues::PKG_OUTPUT_PATH  The path to the newly generated pkg file    SharedValues::DSYM_OUTPUT_PATH  The path to the dSYM files    SharedValues::XCODEBUILD_ARCHIVE  The path to the xcodebuild archive     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/build_mac_app/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action build_mac_app",
            "title": "Documentation"
        },
        {
            "location": "/actions/build_mac_app/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run build_mac_app  To pass parameters, make use of the  :  symbol, for example  fastlane run build_mac_app parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/build_mac_app/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/bundle_install/",
            "text": "bundle_install\n\n\nThis action runs \nbundle install\n (if available)\n\n\n\n\n\n\n\n\nbundle_install\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@birmacher, @koglinjg\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbinstubs\n\n\nGenerate bin stubs for bundled gems to ./bin\n\n\n\n\n\n\n\n\nclean\n\n\nRun bundle clean automatically after install\n\n\nfalse\n\n\n\n\n\n\nfull_index\n\n\nUse the rubygems modern index instead of the API endpoint\n\n\nfalse\n\n\n\n\n\n\ngemfile\n\n\nUse the specified gemfile instead of Gemfile\n\n\n\n\n\n\n\n\njobs\n\n\nInstall gems using parallel workers\n\n\n\n\n\n\n\n\nlocal\n\n\nDo not attempt to fetch gems remotely and use the gem cache instead\n\n\nfalse\n\n\n\n\n\n\ndeployment\n\n\nInstall using defaults tuned for deployment and CI environments\n\n\nfalse\n\n\n\n\n\n\nno_cache\n\n\nDon't update the existing gem cache\n\n\nfalse\n\n\n\n\n\n\nno_prune\n\n\nDon't remove stale gems from the cache\n\n\nfalse\n\n\n\n\n\n\npath\n\n\nSpecify a different path than the system default ($BUNDLE_PATH or $GEM_HOME). Bundler will remember this value for future installs on this machine\n\n\n\n\n\n\n\n\nsystem\n\n\nInstall to the system location ($BUNDLE_PATH or $GEM_HOME) even if the bundle was previously installed somewhere else for this application\n\n\nfalse\n\n\n\n\n\n\nquiet\n\n\nOnly output warnings and errors\n\n\nfalse\n\n\n\n\n\n\nretry\n\n\nRetry network and git requests that have failed\n\n\n\n\n\n\n\n\nshebang\n\n\nSpecify a different shebang executable name than the default (usually 'ruby')\n\n\n\n\n\n\n\n\nstandalone\n\n\nMake a bundle that can work without the Bundler runtime\n\n\n\n\n\n\n\n\ntrust_policy\n\n\nSets level of security when dealing with signed gems. Accepts \nLowSecurity\n, \nMediumSecurity\n and \nHighSecurity\n as values\n\n\n\n\n\n\n\n\nwithout\n\n\nExclude gems that are part of the specified named group\n\n\n\n\n\n\n\n\nwith\n\n\nInclude gems that are part of the specified named group\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action bundle_install\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run bundle_install\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run bundle_install parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "bundle_install"
        },
        {
            "location": "/actions/bundle_install/#bundle_install",
            "text": "This action runs  bundle install  (if available)     bundle_install       Supported platforms  ios, android, mac    Author  @birmacher, @koglinjg",
            "title": "bundle_install"
        },
        {
            "location": "/actions/bundle_install/#parameters",
            "text": "Key  Description  Default      binstubs  Generate bin stubs for bundled gems to ./bin     clean  Run bundle clean automatically after install  false    full_index  Use the rubygems modern index instead of the API endpoint  false    gemfile  Use the specified gemfile instead of Gemfile     jobs  Install gems using parallel workers     local  Do not attempt to fetch gems remotely and use the gem cache instead  false    deployment  Install using defaults tuned for deployment and CI environments  false    no_cache  Don't update the existing gem cache  false    no_prune  Don't remove stale gems from the cache  false    path  Specify a different path than the system default ($BUNDLE_PATH or $GEM_HOME). Bundler will remember this value for future installs on this machine     system  Install to the system location ($BUNDLE_PATH or $GEM_HOME) even if the bundle was previously installed somewhere else for this application  false    quiet  Only output warnings and errors  false    retry  Retry network and git requests that have failed     shebang  Specify a different shebang executable name than the default (usually 'ruby')     standalone  Make a bundle that can work without the Bundler runtime     trust_policy  Sets level of security when dealing with signed gems. Accepts  LowSecurity ,  MediumSecurity  and  HighSecurity  as values     without  Exclude gems that are part of the specified named group     with  Include gems that are part of the specified named group      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/bundle_install/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action bundle_install",
            "title": "Documentation"
        },
        {
            "location": "/actions/bundle_install/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run bundle_install  To pass parameters, make use of the  :  symbol, for example  fastlane run bundle_install parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/bundle_install/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/capture_android_screenshots/",
            "text": "capture_android_screenshots\n\n\nAutomated localized screenshots of your Android app (via \nscreengrab\n)\n\n\n\n  \n\n\n\n\n\nAutomated localized screenshots of your Android app on every device\n\n\nscreengrab\n generates localized screenshots of your Android app for different device types and languages for Google Play and can be uploaded using \nsupply\n.\n\n\n\n\nWhy should I automate this process?\n\n\n\n\nCreate hundreds of screenshots in multiple languages on emulators or real devices, saving you hours\n\n\nEasily verify that localizations fit into labels on all screen dimensions to find UI mistakes before you ship\n\n\nYou only need to configure it once for anyone on your team to run it\n\n\nKeep your screenshots perfectly up-to-date with every app update. Your customers deserve it!\n\n\nFully integrates with \nfastlane\n and \nsupply\n\n\n\n\nInstallation\n\n\nInstall the gem\n\n\nsudo gem install fastlane\n\n\n\n\nGradle dependency\n\n\nandroidTestImplementation 'tools.fastlane:screengrab:x.x.x'\n\n\n\n\nThe latest version is \n \n \n\n\nAs of Screengrab version 2.0.0, all Android test dependencies are AndroidX dependencies. This means a device with API 18+, Android 4.3 or greater is required. If you wish to capture screenshots with an older Android OS, then you must use a 1.x.x version.\n\n\nConfiguring your Manifest Permissions\n\n\nEnsure that the following permissions exist in your \nsrc/debug/AndroidManifest.xml\n\n\n<!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />\n\n\n\n\nConfiguring your \nUI Tests\n for Screenshots\n\n\n\n\nAdd \nLocaleTestRule\n to your tests class to handle automatic switching of locales.\n\n   If you're using Java use:\n   \njava\n   @ClassRule\n   public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n   If you're using Kotlin use:\n   \nkotlin\n   @Rule @JvmField\n   val localeTestRule = LocaleTestRule()\n\n   Important is the \n@JvmField\n annotation. It won't work like that:\n   \nkotlin\n   companion object {\n       @get:ClassRule\n       val localeTestRule = LocaleTestRule()\n   }\n\n\n\n\n\n\nTo capture screenshots, add the following to your tests \nScreengrab.screenshot(\"name_of_screenshot_here\");\n on the appropriate screens\n\n\n\n\nGenerating Screenshots with Screengrab\n\n\n\n\nThen, before running \nfastlane screengrab\n you'll need a debug and test apk\n\n\nYou can create your APKs manually with \n./gradlew assembleDebug assembleAndroidTest\n\n\nYou can also create a lane and use \nbuild_android_app\n:\n  \nruby\n  desc \"Build debug and test APK for screenshots\"\n  lane :build_for_screengrab do\n    build_android_app(\n      task: 'assemble',\n      build_type: 'Debug'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'AndroidTest'\n    )\n  end\n\n\n\n\n\n\nOnce complete run \nfastlane screengrab\n in your app project directory to generate screenshots\n\n\nYou will be prompted to provide any required parameters which are not in your \nScreengrabfile\n or provided as command line arguments\n\n\n\n\n\n\nYour screenshots will be saved to \nfastlane/metadata/android\n in the directory where you ran \nscreengrab\n\n\n\n\nImproved screenshot capture with UI Automator\n\n\nAs of \nscreengrab\n 0.5.0, you can specify different strategies to control the way \nscreengrab\n captures screenshots. The newer strategy delegates to \nUI Automator\n which fixes a number of problems compared to the original strategy:\n\n\n\n\nShadows/elevation are correctly captured for Material UI\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nUI Automator is the default strategy. However, UI Automator requires a device with \nAPI level >= 18\n. If you need to grab screenshots on an older Android version, use the latest 1.x.x version of this library and set the DecorView ScreenshotStrategy.\n\n\nScreengrab.setDefaultScreenshotStrategy(new DecorViewScreenshotStrategy());\n\n\n\n\nImproved screenshot capture with Falcon\n\n\nAs of \nscreengrab\n 1.2.0, you can specify a new strategy to delegate to \nFalcon\n. Falcon may work better than UI Automator in some situations and also provides similar benefits as UI Automator:\n\n\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nFalcon requires a device with \nAPI level >= 10\n. To enable it for all screenshots by default, make the following call before your tests run:\n\n\nScreengrab.setDefaultScreenshotStrategy(new FalconScreenshotStrategy(activityRule.getActivity()));\n\n\n\n\nAdvanced Screengrabfile Configuration\n\n\nRunning \nfastlane screengrab init\n generated a Screengrabfile which can store all of your configuration options. Since most values will not change often for your project, it is recommended to store them there.\n\n\nThe \nScreengrabfile\n is written in Ruby, so you may find it helpful to use an editor that highlights Ruby syntax to modify this file.\n\n\n# remove the leading '#' to uncomment lines\n\n# app_package_name('your.app.package')\n# use_tests_in_packages(['your.screenshot.tests.package'])\n\n# app_apk_path('path/to/your/app.apk')\n# tests_apk_path('path/to/your/tests.apk')\n\nlocales(['en-US', 'fr-FR', 'it-IT'])\n\n# clear all previously generated screenshots in your local output directory before creating new ones\nclear_previous_screenshots(true)\n\n\n\n\nFor more information about all available options run\n\n\nfastlane action screengrab\n\n\n\n\nTips\n\n\nUI Tests\n\n\nCheck out \nTesting UI for a Single App\n for an introduction to using Espresso for UI testing.\n\n\nExample UI Test Class (Using JUnit4)\n\n\nJava:\n\n\n@RunWith(JUnit4.class)\npublic class JUnit4StyleTests {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}\n\n\n\n\n\nKotlin:\n\n\n@RunWith(JUnit4.class)\nclass JUnit4StyleTests {\n    @get:Rule\n    var activityRule = ActivityTestRule(MainActivity::class.java)\n\n    @Rule @JvmField\n    val localeTestRule = LocaleTestRule()\n\n    @Test\n    fun testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\")\n\n        onView(withId(R.id.fab)).perform(click())\n\n        Screengrab.screenshot(\"after_button_click\")\n    }\n}\n\n\n\n\n\nThere is an \nexample project\n showing how to use JUnit 3 or 4 and Espresso with the screengrab Java library to capture screenshots during a UI test run.\n\n\nUsing JUnit 4 is preferable because of its ability to perform actions before and after the entire test class is run. This means you will change the device's locale far fewer times when compared with JUnit 3 running those commands before and after each test method.\n\n\nWhen using JUnit 3 you'll need to add a bit more code:\n\n\n\n\nUse \nLocaleUtil.changeDeviceLocaleTo(LocaleUtil.getTestLocale());\n in \nsetUp()\n\n\nUse \nLocaleUtil.changeDeviceLocaleTo(LocaleUtil.getEndingLocale());\n in \ntearDown()\n\n\nUse \nScreengrab.screenshot(\"name_of_screenshot_here\");\n to capture screenshots at the appropriate points in your tests\n\n\n\n\nIf you're having trouble getting your device unlocked and the screen activated to run tests, try using \nScreenUtil.activateScreenForTesting(activity);\n in your test setup.\n\n\nClean Status Bar\n\n\nScreengrab can clean your status bar to make your screenshots even more beautiful.\n\nNote: the clean status bar feature is only supported on devices with \nAPI level >= 23\n.\n\n\nTo use the clean status bar feature add the following lines to your src/debug/AndroidManifest.xml\n\n\n<!-- Indicates the use of the clean status bar feature -->\n<uses-feature android:name=\"tools.fastlane.screengrab.cleanstatusbar\"/>\n<!-- Allows for changing the status bar -->\n<uses-permission android:name=\"android.permission.DUMP\"/>\n\n\n\n\nAfter that you can enable and disable the clean status bar at any moment during your tests.\n\nIn most cases you probably want to do this in the @BeforeClass and @AfterClass methods.\n\n\n@BeforeClass\npublic static void beforeAll() {\n    CleanStatusBar.enableWithDefaults();\n}\n\n@AfterClass\npublic static void afterAll() {\n    CleanStatusBar.disable();\n}\n\n\n\n\nHave a look at the methods of the \nCleanStatusBar\n class to customize the status bar even more.\n\nYou could for example show the Bluetooth icon and the LTE text.\n\n\nnew CleanStatusBar()\n    .setBluetoothState(BluetoothState.DISCONNECTED)\n    .setMobileNetworkDataType(MobileDataType.LTE)\n    .enable();\n\n\n\n\nAdvanced \nscreengrab\n\n\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your test cases on launch. These strings will be available in your tests through \nInstrumentationRegistry.getArguments()\n.\n\n\nscreengrab(\n  launch_arguments: [\n    \"username hjanuschka\",\n    \"build_number 201\"\n  ]\n)\n\n\n\n\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}\n\n\n\n\n\n\n\n\nDetecting screengrab at runtime\n\n\nFor some apps, it is helpful to know when \nscreengrab\n is running so that you can display specific data for your screenshots. For iOS fastlane users, this is much like \"FASTLANE_SNAPSHOT\". In order to do this, you'll need to have at least two product flavors of your app.\n\n\nAdd two product flavors to the app-level build.gradle file:\n\n\nandroid {\n...\n    flavorDimensions \"mode\"\n    productFlavors {\n        screengrab {\n            dimension \"mode\"\n        }\n        regular {\n            dimension \"mode\"\n        }\n    }\n...\n}\n\n\n\n\nCheck for the existence of that flavor (i.e screengrab) in your app code as follows in order to use mock data or customize data for screenshots:\n\n\nif (BuildConfig.FLAVOR == \"screengrab\") {\n    System.out.println(\"screengrab is running!\");\n}\n\n\n\n\nWhen running \nscreengrab\n, do the following to build the flavor you want as well as the test apk. Note that you use \"assembleFlavor_name\" where Flavor_name is the flavor name, capitalized (i.e. Screengrab).\n\n\n./gradlew assembleScreengrab assembleAndroidTest\n\n\n\n\nRun \nscreengrab\n:\n\n\nfastlane screengrab\n\n\n\n\nscreengrab\n will ask you to select the debug and test apps (which you can then add to your Screengrabfile to skip this step later).\n\n\nThe debug apk should be somewhere like this:\n\n\napp/build/outputs/apk/screengrab/debug/app-screengrab-debug.apk\n\n\nThe test apk should be somewhere like this:\n\n\napp/build/outputs/apk/androidTest/screengrab/debug/app-screengrab-debug-androidTest.apk\n\n\nSit back and enjoy your new screenshots!\n\n\nNote: while this could also be done by creating a new build variant (i.e. debug, release and creating a new one called screengrab), \nAndroid only allows one build type to be tested\n which defaults to debug. That's why we use product flavors.\n\n\n\n\n\n\n\n\n\n\n\n\n\ncapture_android_screenshots\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@asfalcone, @i2amsam, @mfurtak\n\n\n\n\n\n\n\n\n3 Examples\n\n\ncapture_android_screenshots\n\n\n\n\nscreengrab # alias for \"capture_android_screenshots\"\n\n\n\n\ncapture_android_screenshots(\n  locales: [\"en-US\", \"fr-FR\", \"ja-JP\"],\n  clear_previous_screenshots: true,\n  app_apk_path: \"build/outputs/apk/example-debug.apk\",\n  tests_apk_path: \"build/outputs/apk/example-debug-androidTest-unaligned.apk\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nandroid_home\n\n\nPath to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx\n\n\n*\n\n\n\n\n\n\nbuild_tools_version\n\n\nThe Android build tools version to use, e.g. '23.0.2'\n\n\n\n\n\n\n\n\nlocales\n\n\nA list of locales which should be used\n\n\n[\"en-US\"]\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running screengrab\n\n\nfalse\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\nfastlane/metadata/android\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the summary after running \nscreengrab\n\n\n*\n\n\n\n\n\n\napp_package_name\n\n\nThe package name of the app under test (e.g. com.yourcompany.yourapp)\n\n\n*\n\n\n\n\n\n\ntests_package_name\n\n\nThe package name of the tests bundle (e.g. com.yourcompany.yourapp.test)\n\n\n\n\n\n\n\n\nuse_tests_in_packages\n\n\nOnly run tests in these Java packages\n\n\n\n\n\n\n\n\nuse_tests_in_classes\n\n\nOnly run tests in these Java classes\n\n\n\n\n\n\n\n\nlaunch_arguments\n\n\nAdditional launch arguments\n\n\n\n\n\n\n\n\ntest_instrumentation_runner\n\n\nThe fully qualified class name of your test instrumentation runner\n\n\nandroidx.test.runner.AndroidJUnitRunner\n\n\n\n\n\n\nending_locale\n\n\nReturn the device to this locale after running tests\n\n\nen-US\n\n\n\n\n\n\nuse_adb_root\n\n\nRestarts the adb daemon using \nadb root\n to allow access to screenshots directories on device. Use if getting 'Permission denied' errors\n\n\nfalse\n\n\n\n\n\n\napp_apk_path\n\n\nThe path to the APK for the app under test\n\n\n*\n\n\n\n\n\n\ntests_apk_path\n\n\nThe path to the APK for the the tests bundle\n\n\n*\n\n\n\n\n\n\nspecific_device\n\n\nUse the device or emulator with the given serial number or qualifier\n\n\n\n\n\n\n\n\ndevice_type\n\n\nType of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)\n\n\nphone\n\n\n\n\n\n\nexit_on_test_failure\n\n\nWhether or not to exit Screengrab on test failure. Exiting on failure will not copy sceenshots to local machine nor open sceenshots summary\n\n\ntrue\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\nuse_timestamp_suffix\n\n\nAdd timestamp suffix to screenshot filename\n\n\ntrue\n\n\n\n\n\n\nadb_host\n\n\nConfigure the host used by adb to connect, allows running on remote devices farm\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncapture_android_screenshots\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SCREENGRAB_OUTPUT_DIRECTORY\n\n\nThe path to the output directory\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action capture_android_screenshots\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run capture_android_screenshots\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run capture_android_screenshots parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "capture_android_screenshots"
        },
        {
            "location": "/actions/capture_android_screenshots/#capture_android_screenshots",
            "text": "Automated localized screenshots of your Android app (via  screengrab )",
            "title": "capture_android_screenshots"
        },
        {
            "location": "/actions/capture_android_screenshots/#automated-localized-screenshots-of-your-android-app-on-every-device",
            "text": "screengrab  generates localized screenshots of your Android app for different device types and languages for Google Play and can be uploaded using  supply .",
            "title": "Automated localized screenshots of your Android app on every device"
        },
        {
            "location": "/actions/capture_android_screenshots/#why-should-i-automate-this-process",
            "text": "Create hundreds of screenshots in multiple languages on emulators or real devices, saving you hours  Easily verify that localizations fit into labels on all screen dimensions to find UI mistakes before you ship  You only need to configure it once for anyone on your team to run it  Keep your screenshots perfectly up-to-date with every app update. Your customers deserve it!  Fully integrates with  fastlane  and  supply",
            "title": "Why should I automate this process?"
        },
        {
            "location": "/actions/capture_android_screenshots/#installation",
            "text": "Install the gem  sudo gem install fastlane",
            "title": "Installation"
        },
        {
            "location": "/actions/capture_android_screenshots/#gradle-dependency",
            "text": "androidTestImplementation 'tools.fastlane:screengrab:x.x.x'  The latest version is       As of Screengrab version 2.0.0, all Android test dependencies are AndroidX dependencies. This means a device with API 18+, Android 4.3 or greater is required. If you wish to capture screenshots with an older Android OS, then you must use a 1.x.x version.",
            "title": "Gradle dependency"
        },
        {
            "location": "/actions/capture_android_screenshots/#configuring-your-manifest-permissions",
            "text": "Ensure that the following permissions exist in your  src/debug/AndroidManifest.xml  <!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />",
            "title": "Configuring your Manifest Permissions"
        },
        {
            "location": "/actions/capture_android_screenshots/#configuring-your-ui-tests-for-screenshots",
            "text": "Add  LocaleTestRule  to your tests class to handle automatic switching of locales. \n   If you're using Java use:\n    java\n   @ClassRule\n   public static final LocaleTestRule localeTestRule = new LocaleTestRule(); \n   If you're using Kotlin use:\n    kotlin\n   @Rule @JvmField\n   val localeTestRule = LocaleTestRule() \n   Important is the  @JvmField  annotation. It won't work like that:\n    kotlin\n   companion object {\n       @get:ClassRule\n       val localeTestRule = LocaleTestRule()\n   }    To capture screenshots, add the following to your tests  Screengrab.screenshot(\"name_of_screenshot_here\");  on the appropriate screens",
            "title": "Configuring your UI Tests"
        },
        {
            "location": "/actions/capture_android_screenshots/#generating-screenshots-with-screengrab",
            "text": "Then, before running  fastlane screengrab  you'll need a debug and test apk  You can create your APKs manually with  ./gradlew assembleDebug assembleAndroidTest  You can also create a lane and use  build_android_app :\n   ruby\n  desc \"Build debug and test APK for screenshots\"\n  lane :build_for_screengrab do\n    build_android_app(\n      task: 'assemble',\n      build_type: 'Debug'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'AndroidTest'\n    )\n  end    Once complete run  fastlane screengrab  in your app project directory to generate screenshots  You will be prompted to provide any required parameters which are not in your  Screengrabfile  or provided as command line arguments    Your screenshots will be saved to  fastlane/metadata/android  in the directory where you ran  screengrab",
            "title": "Generating Screenshots with Screengrab"
        },
        {
            "location": "/actions/capture_android_screenshots/#improved-screenshot-capture-with-ui-automator",
            "text": "As of  screengrab  0.5.0, you can specify different strategies to control the way  screengrab  captures screenshots. The newer strategy delegates to  UI Automator  which fixes a number of problems compared to the original strategy:   Shadows/elevation are correctly captured for Material UI  Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   UI Automator is the default strategy. However, UI Automator requires a device with  API level >= 18 . If you need to grab screenshots on an older Android version, use the latest 1.x.x version of this library and set the DecorView ScreenshotStrategy.  Screengrab.setDefaultScreenshotStrategy(new DecorViewScreenshotStrategy());",
            "title": "Improved screenshot capture with UI Automator"
        },
        {
            "location": "/actions/capture_android_screenshots/#improved-screenshot-capture-with-falcon",
            "text": "As of  screengrab  1.2.0, you can specify a new strategy to delegate to  Falcon . Falcon may work better than UI Automator in some situations and also provides similar benefits as UI Automator:   Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   Falcon requires a device with  API level >= 10 . To enable it for all screenshots by default, make the following call before your tests run:  Screengrab.setDefaultScreenshotStrategy(new FalconScreenshotStrategy(activityRule.getActivity()));",
            "title": "Improved screenshot capture with Falcon"
        },
        {
            "location": "/actions/capture_android_screenshots/#advanced-screengrabfile-configuration",
            "text": "Running  fastlane screengrab init  generated a Screengrabfile which can store all of your configuration options. Since most values will not change often for your project, it is recommended to store them there.  The  Screengrabfile  is written in Ruby, so you may find it helpful to use an editor that highlights Ruby syntax to modify this file.  # remove the leading '#' to uncomment lines\n\n# app_package_name('your.app.package')\n# use_tests_in_packages(['your.screenshot.tests.package'])\n\n# app_apk_path('path/to/your/app.apk')\n# tests_apk_path('path/to/your/tests.apk')\n\nlocales(['en-US', 'fr-FR', 'it-IT'])\n\n# clear all previously generated screenshots in your local output directory before creating new ones\nclear_previous_screenshots(true)  For more information about all available options run  fastlane action screengrab",
            "title": "Advanced Screengrabfile Configuration"
        },
        {
            "location": "/actions/capture_android_screenshots/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/capture_android_screenshots/#ui-tests",
            "text": "Check out  Testing UI for a Single App  for an introduction to using Espresso for UI testing.",
            "title": "UI Tests"
        },
        {
            "location": "/actions/capture_android_screenshots/#example-ui-test-class-using-junit4",
            "text": "Java:  @RunWith(JUnit4.class)\npublic class JUnit4StyleTests {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}  Kotlin:  @RunWith(JUnit4.class)\nclass JUnit4StyleTests {\n    @get:Rule\n    var activityRule = ActivityTestRule(MainActivity::class.java)\n\n    @Rule @JvmField\n    val localeTestRule = LocaleTestRule()\n\n    @Test\n    fun testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\")\n\n        onView(withId(R.id.fab)).perform(click())\n\n        Screengrab.screenshot(\"after_button_click\")\n    }\n}  There is an  example project  showing how to use JUnit 3 or 4 and Espresso with the screengrab Java library to capture screenshots during a UI test run.  Using JUnit 4 is preferable because of its ability to perform actions before and after the entire test class is run. This means you will change the device's locale far fewer times when compared with JUnit 3 running those commands before and after each test method.  When using JUnit 3 you'll need to add a bit more code:   Use  LocaleUtil.changeDeviceLocaleTo(LocaleUtil.getTestLocale());  in  setUp()  Use  LocaleUtil.changeDeviceLocaleTo(LocaleUtil.getEndingLocale());  in  tearDown()  Use  Screengrab.screenshot(\"name_of_screenshot_here\");  to capture screenshots at the appropriate points in your tests   If you're having trouble getting your device unlocked and the screen activated to run tests, try using  ScreenUtil.activateScreenForTesting(activity);  in your test setup.",
            "title": "Example UI Test Class (Using JUnit4)"
        },
        {
            "location": "/actions/capture_android_screenshots/#clean-status-bar",
            "text": "Screengrab can clean your status bar to make your screenshots even more beautiful. \nNote: the clean status bar feature is only supported on devices with  API level >= 23 .  To use the clean status bar feature add the following lines to your src/debug/AndroidManifest.xml  <!-- Indicates the use of the clean status bar feature -->\n<uses-feature android:name=\"tools.fastlane.screengrab.cleanstatusbar\"/>\n<!-- Allows for changing the status bar -->\n<uses-permission android:name=\"android.permission.DUMP\"/>  After that you can enable and disable the clean status bar at any moment during your tests. \nIn most cases you probably want to do this in the @BeforeClass and @AfterClass methods.  @BeforeClass\npublic static void beforeAll() {\n    CleanStatusBar.enableWithDefaults();\n}\n\n@AfterClass\npublic static void afterAll() {\n    CleanStatusBar.disable();\n}  Have a look at the methods of the  CleanStatusBar  class to customize the status bar even more. \nYou could for example show the Bluetooth icon and the LTE text.  new CleanStatusBar()\n    .setBluetoothState(BluetoothState.DISCONNECTED)\n    .setMobileNetworkDataType(MobileDataType.LTE)\n    .enable();",
            "title": "Clean Status Bar"
        },
        {
            "location": "/actions/capture_android_screenshots/#advanced-screengrab",
            "text": "Launch Arguments  You can provide additional arguments to your test cases on launch. These strings will be available in your tests through  InstrumentationRegistry.getArguments() .  screengrab(\n  launch_arguments: [\n    \"username hjanuschka\",\n    \"build_number 201\"\n  ]\n)  Bundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}    Detecting screengrab at runtime  For some apps, it is helpful to know when  screengrab  is running so that you can display specific data for your screenshots. For iOS fastlane users, this is much like \"FASTLANE_SNAPSHOT\". In order to do this, you'll need to have at least two product flavors of your app.  Add two product flavors to the app-level build.gradle file:  android {\n...\n    flavorDimensions \"mode\"\n    productFlavors {\n        screengrab {\n            dimension \"mode\"\n        }\n        regular {\n            dimension \"mode\"\n        }\n    }\n...\n}  Check for the existence of that flavor (i.e screengrab) in your app code as follows in order to use mock data or customize data for screenshots:  if (BuildConfig.FLAVOR == \"screengrab\") {\n    System.out.println(\"screengrab is running!\");\n}  When running  screengrab , do the following to build the flavor you want as well as the test apk. Note that you use \"assembleFlavor_name\" where Flavor_name is the flavor name, capitalized (i.e. Screengrab).  ./gradlew assembleScreengrab assembleAndroidTest  Run  screengrab :  fastlane screengrab  screengrab  will ask you to select the debug and test apps (which you can then add to your Screengrabfile to skip this step later).  The debug apk should be somewhere like this:  app/build/outputs/apk/screengrab/debug/app-screengrab-debug.apk  The test apk should be somewhere like this:  app/build/outputs/apk/androidTest/screengrab/debug/app-screengrab-debug-androidTest.apk  Sit back and enjoy your new screenshots!  Note: while this could also be done by creating a new build variant (i.e. debug, release and creating a new one called screengrab),  Android only allows one build type to be tested  which defaults to debug. That's why we use product flavors.       capture_android_screenshots       Supported platforms  android    Author  @asfalcone, @i2amsam, @mfurtak",
            "title": "Advanced screengrab"
        },
        {
            "location": "/actions/capture_android_screenshots/#3-examples",
            "text": "capture_android_screenshots  screengrab # alias for \"capture_android_screenshots\"  capture_android_screenshots(\n  locales: [\"en-US\", \"fr-FR\", \"ja-JP\"],\n  clear_previous_screenshots: true,\n  app_apk_path: \"build/outputs/apk/example-debug.apk\",\n  tests_apk_path: \"build/outputs/apk/example-debug-androidTest-unaligned.apk\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/capture_android_screenshots/#parameters",
            "text": "Key  Description  Default      android_home  Path to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx  *    build_tools_version  The Android build tools version to use, e.g. '23.0.2'     locales  A list of locales which should be used  [\"en-US\"]    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running screengrab  false    output_directory  The directory where to store the screenshots  fastlane/metadata/android    skip_open_summary  Don't open the summary after running  screengrab  *    app_package_name  The package name of the app under test (e.g. com.yourcompany.yourapp)  *    tests_package_name  The package name of the tests bundle (e.g. com.yourcompany.yourapp.test)     use_tests_in_packages  Only run tests in these Java packages     use_tests_in_classes  Only run tests in these Java classes     launch_arguments  Additional launch arguments     test_instrumentation_runner  The fully qualified class name of your test instrumentation runner  androidx.test.runner.AndroidJUnitRunner    ending_locale  Return the device to this locale after running tests  en-US    use_adb_root  Restarts the adb daemon using  adb root  to allow access to screenshots directories on device. Use if getting 'Permission denied' errors  false    app_apk_path  The path to the APK for the app under test  *    tests_apk_path  The path to the APK for the the tests bundle  *    specific_device  Use the device or emulator with the given serial number or qualifier     device_type  Type of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)  phone    exit_on_test_failure  Whether or not to exit Screengrab on test failure. Exiting on failure will not copy sceenshots to local machine nor open sceenshots summary  true    reinstall_app  Enabling this option will automatically uninstall the application before running it  false    use_timestamp_suffix  Add timestamp suffix to screenshot filename  true    adb_host  Configure the host used by adb to connect, allows running on remote devices farm      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/capture_android_screenshots/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  capture_android_screenshots  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SCREENGRAB_OUTPUT_DIRECTORY  The path to the output directory     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/capture_android_screenshots/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action capture_android_screenshots",
            "title": "Documentation"
        },
        {
            "location": "/actions/capture_android_screenshots/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run capture_android_screenshots  To pass parameters, make use of the  :  symbol, for example  fastlane run capture_android_screenshots parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/capture_android_screenshots/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/capture_ios_screenshots/",
            "text": "capture_ios_screenshots\n\n\nGenerate new localized screenshots on multiple devices (via \nsnapshot\n)\n\n\n\n  \n\n\n\n\n\nAutomate taking localized screenshots of your iOS and tvOS apps on every device\n\n\n\n\n\n  Check out the new \nfastlane documentation\n on how to generate screenshots\n\n\n\n\n\nsnapshot\n generates localized iOS and tvOS screenshots for different device types and languages for the App Store and can be uploaded using (\ndeliver\n).\n\n\nYou have to manually create 20 (languages) x 6 (devices) x 5 (screenshots) = \n600 screenshots\n.\n\n\nIt's hard to get everything right!\n\n\n\n\nNew screenshots with every (design) update\n\n\nNo loading indicators\n\n\nSame content / screens\n\n\nClean Status Bar\n\n\nUploading screenshots (\ndeliver\n is your friend)\n\n\n\n\nMore information about \ncreating perfect screenshots\n.\n\n\nsnapshot\n runs completely in the background - you can do something else, while your computer takes the screenshots for you.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUI Tests\n \u2022\n    \nQuick Start\n \u2022\n    \nUsage\n \u2022\n    \nTips\n \u2022\n    \nHow?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nCreate hundreds of screenshots in multiple languages on all simulators\n\n\nTake screenshots in multiple device simulators concurrently to cut down execution time (Xcode 9 only)\n\n\nConfigure it once, store the configuration in git\n\n\nDo something else, while the computer takes the screenshots for you\n\n\nIntegrates with \nfastlane\n and \ndeliver\n\n\nGenerates a beautiful web page, which shows all screenshots on all devices. This is perfect to send to QA or the marketing team\n\n\nsnapshot\n automatically waits for network requests to be finished before taking a screenshot (we don't want loading images in the App Store screenshots)\n\n\n\n\nAfter \nsnapshot\n successfully created new screenshots, it will generate a beautiful HTML file to get a quick overview of all screens:\n\n\n\n\nWhy?\n\n\nThis tool automatically switches the language and device type and runs UI Tests for every combination.\n\n\nWhy should I automate this process?\n\n\n\n\nIt takes \nhours\n to take screenshots\n\n\nYou get a great overview of all your screens, running on all available simulators without the need to manually start it hundreds of times\n\n\nEasy verification for translators (without an iDevice) that translations do make sense in real App context\n\n\nEasy verification that localizations fit into labels on all screen dimensions\n\n\nIt is an integration test: You can test for UI elements and other things inside your scripts\n\n\nBe so nice, and provide new screenshots with every App Store update. Your customers deserve it\n\n\nYou realize, there is a spelling mistake in one of the screens? Well, just correct it and re-run the script\n\n\n\n\nUI Tests\n\n\nGetting started\n\n\nThis project uses Apple's newly announced UI Tests. We will not go into detail on how to write scripts.\n\n\nHere a few links to get started:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nQuick Start\n\n\n\n\nCreate a new UI Test target in your Xcode project (\ntop part of this article\n)\n\n\nRun \nfastlane snapshot init\n in your project folder\n\n\nAdd the ./SnapshotHelper.swift to your UI Test target (You can move the file anywhere you want)\n\n\n(Xcode 8 only) add the ./SnapshotHelperXcode8.swift to your UI Test target\n\n\n\n\n\n\n(Objective C only) add the bridging header to your test class:\n\n\n#import \"MYUITests-Swift.h\"\n\n  (The bridging header is named after your test target with \n-Swift.h\n appended.)\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a snapshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nSwift:\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C:\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n\n\n\n\nMake sure you only have one \nlaunch\n call in your test class, as Xcode adds one automatically on new test files.\n\n\n\n\nYou can try the \nsnapshot\n \nexample project\n by cloning this repo.\n\n\nTo quick start your UI tests, you can use the UI Test recorder. You only have to interact with the simulator, and Xcode will generate the UI Test code for you. You can find the red record button on the bottom of the screen (more information in \nthis blog post\n)\n\n\nUsage\n\n\nfastlane snapshot\n\n\n\n\nYour screenshots will be stored in the \n./screenshots/\n folder by default (or \n./fastlane/screenshots\n if you're using \nfastlane\n)\n\n\nNew with Xcode 9, \nsnapshot\n can run multiple simulators concurrently. This is the default behavior in order to take your screenshots as quickly as possible. This can be disabled to run each device, one at a time, by setting the \n:concurrent_simulators\n option to \nfalse\n.\n\n\nNote:\n While running \nsnapshot\n with Xcode 9, the simulators will not be visibly spawned. So, while you won't see the simulators running your tests, they will, in fact, be taking your screenshots.\n\n\nIf any error occurs while running the snapshot script on a device, that device will not have any screenshots, and \nsnapshot\n will continue with the next device or language. To stop the flow after the first error, run\n\n\nfastlane snapshot --stop_after_first_error\n\n\n\n\nAlso by default, \nsnapshot\n will open the HTML after all is done. This can be skipped with the following command\n\n\nfastlane snapshot --stop_after_first_error --skip_open_summary\n\n\n\n\nThere are a lot of options available that define how to build your app, for example\n\n\nfastlane snapshot --scheme \"UITests\" --configuration \"Release\"  --sdk \"iphonesimulator\"\n\n\n\n\nReinstall the app before running \nsnapshot\n\n\nfastlane snapshot --reinstall_app --app_identifier \"tools.fastlane.app\"\n\n\n\n\nBy default \nsnapshot\n automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g. \n#2517\n). You can adapt this number using\n\n\nfastlane snapshot --number_of_retries 3\n\n\n\n\nAdd photos and/or videos to the simulator before running \nsnapshot\n\n\nfastlane snapshot --add_photos MyTestApp/Assets/demo.jpg --add_videos MyTestApp/Assets/demo.mp4\n\n\n\n\nFor a list for all available options run\n\n\nfastlane action snapshot\n\n\n\n\nAfter running \nsnapshot\n you will get a nice summary:\n\n\n\n\nSnapfile\n\n\nAll of the available options can also be stored in a configuration file called the \nSnapfile\n. Since most values will not change often for your project, it is recommended to store them there:\n\n\nFirst make sure to have a \nSnapfile\n (you get it for free when running \nfastlane snapshot init\n)\n\n\nThe \nSnapfile\n can contain all the options that are also available on \nfastlane action snapshot\n\n\nscheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])\n\n\n\n\nCompletely reset all simulators\n\n\nYou can run this command in the terminal to delete and re-create all iOS and tvOS simulators:\n\n\nfastlane snapshot reset_simulators\n\n\n\n\nWarning\n: This will delete \nall\n your simulators and replace by new ones! This is useful, if you run into weird problems when running \nsnapshot\n.\n\n\nYou can use the environment variable \nSNAPSHOT_FORCE_DELETE\n to stop asking for confirmation before deleting.\n\n\nSNAPSHOT_FORCE_DELETE=1 fastlane snapshot reset_simulators\n\n\n\n\nUpdate snapshot helpers\n\n\nSome updates require the helper files to be updated. \nsnapshot\n will automatically warn you and tell you how to update.\n\n\nBasically you can run\n\n\nfastlane snapshot update\n\n\n\n\nto update your \nSnapshotHelper.swift\n files. In case you modified your \nSnapshotHelper.swift\n and want to manually update the file, check out \nSnapshotHelper.swift\n.\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your app on launch. These strings will be available in your app (e.g. not in the testing target) through \nProcessInfo.processInfo.arguments\n. Alternatively, use user-default syntax (\n-key value\n) and they will be available as key-value pairs in \nUserDefaults.standard\n.\n\n\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n\n\n\n\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n\n\n\n\nsnapshot\n includes \n-FASTLANE_SNAPSHOT YES\n, which will set a temporary user default for the key \nFASTLANE_SNAPSHOT\n, you may use this to detect when the app is run by \nsnapshot\n.\n\n\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n\n\n\n\nSpecify multiple argument strings and \nsnapshot\n will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.\n\n\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n\n\n\n\nXcode Environment Variables\n\n\nsnapshot\n includes \nFASTLANE_SNAPSHOT=YES\n and \nFASTLANE_LANGUAGE=<language>\n as arguments when executing \nxcodebuild\n. This means you may use these environment variables in a custom build phase run script to do any additional configuration.\n\n\nHow does it work?\n\n\nThe easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So \nsnapshot\n uses a different approach:\n\n\nWhen you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests (\nMore Information\n). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which \nsnapshot\n stores in a temporary folder.\n\n\nWhen the user calls \nsnapshot(...)\n in the UI Tests (Swift or Objective C) the script actually does a rotation to \n.Unknown\n which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find \nsome\n event that a user would never trigger, so that we know it's from \nsnapshot\n. On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).\n\n\nsnapshot\n then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once \nsnapshot\n has all events triggered by \nsnapshot\n it collects a ordered list of all the file names of the actual screenshots of the application.\n\n\nIn the test output, the Swift \nsnapshot\n function will print out something like this\n\n\n\n\nsnapshot: [some random text here]\n\n\n\n\nsnapshot\n finds all these entries using a regex. The number of \nsnapshot\n outputs in the terminal and the number of \nsnapshot\n events in the plist file should be the same. Knowing that, \nsnapshot\n automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.\n\n\n2 thing have to be passed on from \nsnapshot\n to the \nxcodebuild\n command line tool:\n\n\n\n\nThe device type is passed via the \ndestination\n parameter of the \nxcodebuild\n parameter\n\n\nThe language is passed via a temporary file which is written by \nsnapshot\n before running the tests and read by the UI Tests when launching the application\n\n\n\n\nIf you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:\n\n\nRadar \n23062925\n has been resolved with Xcode 8.3, so it's now possible to actually take screenshots from the simulator. We'll keep using the old approach for now, since many of you still want to use older versions of Xcode.\n\n\nTips\n\n\n\n\n\n  Check out the new \nfastlane documentation\n on how to generate screenshots\n\n\n\n\n\nFrame the screenshots\n\n\nIf you want to add frames around the screenshots and even put a title on top, check out \nframeit\n.\n\n\nAvailable language codes\n\n\nALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]\n\n\n\n\nTo get more information about language and locale codes please read \nInternationalization and Localization Guide\n.\n\n\nUse a clean status bar\n\n\nYou can set \noverride_status_bar\n to \ntrue\n to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.\n\n\nEditing the \nSnapfile\n\n\nChange syntax highlighting to \nRuby\n.\n\n\nSimulator doesn't launch the application\n\n\nWhen the app dies directly after the application is launched there might be 2 problems\n\n\n\n\nThe simulator is somehow in a broken state and you need to re-create it. You can use \nsnapshot reset_simulators\n to reset all simulators (this will remove all installed apps)\n\n\nA restart helps very often\n\n\n\n\nDetermine language\n\n\nTo detect the currently used localization in your tests, access the \ndeviceLanguage\n variable from \nSnapshotHelper.swift\n.\n\n\nSpeed up snapshots\n\n\nA lot of time in UI tests is spent waiting for animations.\n\n\nYou can disable \nUIView\n animations in your app to make the tests faster:\n\n\nif ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}\n\n\n\n\nThis requires you to pass the launch argument like so:\n\n\nsnapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])\n\n\n\n\nBy default, \nsnapshot\n will wait for a short time for the animations to finish.\nIf you're skipping the animations, this wait time is unnecessary and can be skipped:\n\n\nsetupSnapshot(app, waitForAnimations: false)\n\n\n\n\n\n\n\n\n\n\n\n\n\ncapture_ios_screenshots\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\ncapture_ios_screenshots\n\n\n\n\nsnapshot # alias for \"capture_ios_screenshots\"\n\n\n\n\ncapture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\ndevices\n\n\nA list of devices you want to take the screenshots from\n\n\n\n\n\n\n\n\nlanguages\n\n\nA list of languages which should be used\n\n\n[\"en-US\"]\n\n\n\n\n\n\nlaunch_arguments\n\n\nA list of launch arguments which should be used\n\n\n[\"\"]\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\n*\n\n\n\n\n\n\noutput_simulator_logs\n\n\nIf the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n\n\nfalse\n\n\n\n\n\n\nios_version\n\n\nBy default, the latest version should be used automatically. If you want to change it, do it here\n\n\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the HTML summary after running \nsnapshot\n\n\nfalse\n\n\n\n\n\n\nskip_helper_version_check\n\n\nDo not check for most recent SnapshotHelper code\n\n\nfalse\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running snapshot\n\n\nfalse\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\nerase_simulator\n\n\nEnabling this option will automatically erase the simulator before running the application\n\n\nfalse\n\n\n\n\n\n\nheadless\n\n\nEnabling this option will prevent displaying the simulator window\n\n\ntrue\n\n\n\n\n\n\noverride_status_bar\n\n\nEnabling this option will automatically override the status bar to show 9:41 AM, full battery, and full reception\n\n\nfalse\n\n\n\n\n\n\nlocalize_simulator\n\n\nEnabling this option will configure the Simulator's system language\n\n\nfalse\n\n\n\n\n\n\ndark_mode\n\n\nEnabling this option will configure the Simulator to be in dark mode (false for light, true for dark)\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n\n\n*\n\n\n\n\n\n\nadd_photos\n\n\nA list of photos that should be added to the simulator before running the application\n\n\n\n\n\n\n\n\nadd_videos\n\n\nA list of videos that should be added to the simulator before running the application\n\n\n\n\n\n\n\n\nhtml_template\n\n\nA path to screenshots.html template\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\ntest_without_building\n\n\nTest without building, requires a derived data path\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nxcpretty_args\n\n\nAdditional xcpretty arguments\n\n\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\nscheme\n\n\nThe scheme you want to use, this must be the scheme for the UI Tests\n\n\n\n\n\n\n\n\nnumber_of_retries\n\n\nThe number of times a test can fail before snapshot should stop retrying\n\n\n1\n\n\n\n\n\n\nstop_after_first_error\n\n\nShould snapshot stop immediately after the tests completely failed on one device?\n\n\nfalse\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\ntest_target_name\n\n\nThe name of the target you want to test (if you desire to override the Target Application from Xcode)\n\n\n\n\n\n\n\n\nnamespace_log_files\n\n\nSeparate the log files per device and per language\n\n\n\n\n\n\n\n\nconcurrent_simulators\n\n\nTake snapshots on multiple simulators concurrently. Note: This option is only applicable when running against Xcode 9\n\n\ntrue\n\n\n\n\n\n\ndisable_slide_to_type\n\n\nDisable the simulator from showing the 'Slide to type' prompt\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\ntestplan\n\n\nThe testplan associated with the scheme that should be used for testing\n\n\n\n\n\n\n\n\nonly_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to run\n\n\n\n\n\n\n\n\nskip_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to skip\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncapture_ios_screenshots\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SNAPSHOT_SCREENSHOTS_PATH\n\n\nThe path to the screenshots\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action capture_ios_screenshots\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run capture_ios_screenshots\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run capture_ios_screenshots parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "capture_ios_screenshots"
        },
        {
            "location": "/actions/capture_ios_screenshots/#capture_ios_screenshots",
            "text": "Generate new localized screenshots on multiple devices (via  snapshot )",
            "title": "capture_ios_screenshots"
        },
        {
            "location": "/actions/capture_ios_screenshots/#automate-taking-localized-screenshots-of-your-ios-and-tvos-apps-on-every-device",
            "text": "",
            "title": "Automate taking localized screenshots of your iOS and tvOS apps on every device"
        },
        {
            "location": "/actions/capture_ios_screenshots/#features",
            "text": "Create hundreds of screenshots in multiple languages on all simulators  Take screenshots in multiple device simulators concurrently to cut down execution time (Xcode 9 only)  Configure it once, store the configuration in git  Do something else, while the computer takes the screenshots for you  Integrates with  fastlane  and  deliver  Generates a beautiful web page, which shows all screenshots on all devices. This is perfect to send to QA or the marketing team  snapshot  automatically waits for network requests to be finished before taking a screenshot (we don't want loading images in the App Store screenshots)   After  snapshot  successfully created new screenshots, it will generate a beautiful HTML file to get a quick overview of all screens:",
            "title": "Features"
        },
        {
            "location": "/actions/capture_ios_screenshots/#why",
            "text": "This tool automatically switches the language and device type and runs UI Tests for every combination.",
            "title": "Why?"
        },
        {
            "location": "/actions/capture_ios_screenshots/#why-should-i-automate-this-process",
            "text": "It takes  hours  to take screenshots  You get a great overview of all your screens, running on all available simulators without the need to manually start it hundreds of times  Easy verification for translators (without an iDevice) that translations do make sense in real App context  Easy verification that localizations fit into labels on all screen dimensions  It is an integration test: You can test for UI elements and other things inside your scripts  Be so nice, and provide new screenshots with every App Store update. Your customers deserve it  You realize, there is a spelling mistake in one of the screens? Well, just correct it and re-run the script",
            "title": "Why should I automate this process?"
        },
        {
            "location": "/actions/capture_ios_screenshots/#ui-tests",
            "text": "",
            "title": "UI Tests"
        },
        {
            "location": "/actions/capture_ios_screenshots/#getting-started",
            "text": "This project uses Apple's newly announced UI Tests. We will not go into detail on how to write scripts.  Here a few links to get started:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit",
            "title": "Getting started"
        },
        {
            "location": "/actions/capture_ios_screenshots/#quick-start",
            "text": "Create a new UI Test target in your Xcode project ( top part of this article )  Run  fastlane snapshot init  in your project folder  Add the ./SnapshotHelper.swift to your UI Test target (You can move the file anywhere you want)  (Xcode 8 only) add the ./SnapshotHelperXcode8.swift to your UI Test target    (Objective C only) add the bridging header to your test class:  #import \"MYUITests-Swift.h\" \n  (The bridging header is named after your test target with  -Swift.h  appended.)    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a snapshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];    Add the following code to your  setUp()  method:   Swift:  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C:  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];  Make sure you only have one  launch  call in your test class, as Xcode adds one automatically on new test files.   You can try the  snapshot   example project  by cloning this repo.  To quick start your UI tests, you can use the UI Test recorder. You only have to interact with the simulator, and Xcode will generate the UI Test code for you. You can find the red record button on the bottom of the screen (more information in  this blog post )",
            "title": "Quick Start"
        },
        {
            "location": "/actions/capture_ios_screenshots/#usage",
            "text": "fastlane snapshot  Your screenshots will be stored in the  ./screenshots/  folder by default (or  ./fastlane/screenshots  if you're using  fastlane )  New with Xcode 9,  snapshot  can run multiple simulators concurrently. This is the default behavior in order to take your screenshots as quickly as possible. This can be disabled to run each device, one at a time, by setting the  :concurrent_simulators  option to  false .  Note:  While running  snapshot  with Xcode 9, the simulators will not be visibly spawned. So, while you won't see the simulators running your tests, they will, in fact, be taking your screenshots.  If any error occurs while running the snapshot script on a device, that device will not have any screenshots, and  snapshot  will continue with the next device or language. To stop the flow after the first error, run  fastlane snapshot --stop_after_first_error  Also by default,  snapshot  will open the HTML after all is done. This can be skipped with the following command  fastlane snapshot --stop_after_first_error --skip_open_summary  There are a lot of options available that define how to build your app, for example  fastlane snapshot --scheme \"UITests\" --configuration \"Release\"  --sdk \"iphonesimulator\"  Reinstall the app before running  snapshot  fastlane snapshot --reinstall_app --app_identifier \"tools.fastlane.app\"  By default  snapshot  automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g.  #2517 ). You can adapt this number using  fastlane snapshot --number_of_retries 3  Add photos and/or videos to the simulator before running  snapshot  fastlane snapshot --add_photos MyTestApp/Assets/demo.jpg --add_videos MyTestApp/Assets/demo.mp4  For a list for all available options run  fastlane action snapshot  After running  snapshot  you will get a nice summary:",
            "title": "Usage"
        },
        {
            "location": "/actions/capture_ios_screenshots/#snapfile",
            "text": "All of the available options can also be stored in a configuration file called the  Snapfile . Since most values will not change often for your project, it is recommended to store them there:  First make sure to have a  Snapfile  (you get it for free when running  fastlane snapshot init )  The  Snapfile  can contain all the options that are also available on  fastlane action snapshot  scheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])",
            "title": "Snapfile"
        },
        {
            "location": "/actions/capture_ios_screenshots/#completely-reset-all-simulators",
            "text": "You can run this command in the terminal to delete and re-create all iOS and tvOS simulators:  fastlane snapshot reset_simulators  Warning : This will delete  all  your simulators and replace by new ones! This is useful, if you run into weird problems when running  snapshot .  You can use the environment variable  SNAPSHOT_FORCE_DELETE  to stop asking for confirmation before deleting.  SNAPSHOT_FORCE_DELETE=1 fastlane snapshot reset_simulators",
            "title": "Completely reset all simulators"
        },
        {
            "location": "/actions/capture_ios_screenshots/#update-snapshot-helpers",
            "text": "Some updates require the helper files to be updated.  snapshot  will automatically warn you and tell you how to update.  Basically you can run  fastlane snapshot update  to update your  SnapshotHelper.swift  files. In case you modified your  SnapshotHelper.swift  and want to manually update the file, check out  SnapshotHelper.swift .",
            "title": "Update snapshot helpers"
        },
        {
            "location": "/actions/capture_ios_screenshots/#launch-arguments",
            "text": "You can provide additional arguments to your app on launch. These strings will be available in your app (e.g. not in the testing target) through  ProcessInfo.processInfo.arguments . Alternatively, use user-default syntax ( -key value ) and they will be available as key-value pairs in  UserDefaults.standard .  launch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])  name.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"  snapshot  includes  -FASTLANE_SNAPSHOT YES , which will set a temporary user default for the key  FASTLANE_SNAPSHOT , you may use this to detect when the app is run by  snapshot .  if UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}  Specify multiple argument strings and  snapshot  will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.  # Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])",
            "title": "Launch Arguments"
        },
        {
            "location": "/actions/capture_ios_screenshots/#xcode-environment-variables",
            "text": "snapshot  includes  FASTLANE_SNAPSHOT=YES  and  FASTLANE_LANGUAGE=<language>  as arguments when executing  xcodebuild . This means you may use these environment variables in a custom build phase run script to do any additional configuration.",
            "title": "Xcode Environment Variables"
        },
        {
            "location": "/actions/capture_ios_screenshots/#how-does-it-work",
            "text": "The easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So  snapshot  uses a different approach:  When you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests ( More Information ). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which  snapshot  stores in a temporary folder.  When the user calls  snapshot(...)  in the UI Tests (Swift or Objective C) the script actually does a rotation to  .Unknown  which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find  some  event that a user would never trigger, so that we know it's from  snapshot . On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).  snapshot  then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once  snapshot  has all events triggered by  snapshot  it collects a ordered list of all the file names of the actual screenshots of the application.  In the test output, the Swift  snapshot  function will print out something like this   snapshot: [some random text here]   snapshot  finds all these entries using a regex. The number of  snapshot  outputs in the terminal and the number of  snapshot  events in the plist file should be the same. Knowing that,  snapshot  automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.  2 thing have to be passed on from  snapshot  to the  xcodebuild  command line tool:   The device type is passed via the  destination  parameter of the  xcodebuild  parameter  The language is passed via a temporary file which is written by  snapshot  before running the tests and read by the UI Tests when launching the application   If you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:  Radar  23062925  has been resolved with Xcode 8.3, so it's now possible to actually take screenshots from the simulator. We'll keep using the old approach for now, since many of you still want to use older versions of Xcode.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/capture_ios_screenshots/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/capture_ios_screenshots/#frame-the-screenshots",
            "text": "If you want to add frames around the screenshots and even put a title on top, check out  frameit .",
            "title": "Frame the screenshots"
        },
        {
            "location": "/actions/capture_ios_screenshots/#available-language-codes",
            "text": "ALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]  To get more information about language and locale codes please read  Internationalization and Localization Guide .",
            "title": "Available language codes"
        },
        {
            "location": "/actions/capture_ios_screenshots/#use-a-clean-status-bar",
            "text": "You can set  override_status_bar  to  true  to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.",
            "title": "Use a clean status bar"
        },
        {
            "location": "/actions/capture_ios_screenshots/#editing-the-snapfile",
            "text": "Change syntax highlighting to  Ruby .",
            "title": "Editing the Snapfile"
        },
        {
            "location": "/actions/capture_ios_screenshots/#simulator-doesnt-launch-the-application",
            "text": "When the app dies directly after the application is launched there might be 2 problems   The simulator is somehow in a broken state and you need to re-create it. You can use  snapshot reset_simulators  to reset all simulators (this will remove all installed apps)  A restart helps very often",
            "title": "Simulator doesn't launch the application"
        },
        {
            "location": "/actions/capture_ios_screenshots/#determine-language",
            "text": "To detect the currently used localization in your tests, access the  deviceLanguage  variable from  SnapshotHelper.swift .",
            "title": "Determine language"
        },
        {
            "location": "/actions/capture_ios_screenshots/#speed-up-snapshots",
            "text": "A lot of time in UI tests is spent waiting for animations.  You can disable  UIView  animations in your app to make the tests faster:  if ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}  This requires you to pass the launch argument like so:  snapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])  By default,  snapshot  will wait for a short time for the animations to finish.\nIf you're skipping the animations, this wait time is unnecessary and can be skipped:  setupSnapshot(app, waitForAnimations: false)      capture_ios_screenshots       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Speed up snapshots"
        },
        {
            "location": "/actions/capture_ios_screenshots/#3-examples",
            "text": "capture_ios_screenshots  snapshot # alias for \"capture_ios_screenshots\"  capture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/capture_ios_screenshots/#parameters",
            "text": "Key  Description  Default      workspace  Path the workspace file     project  Path the project file     xcargs  Pass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     devices  A list of devices you want to take the screenshots from     languages  A list of languages which should be used  [\"en-US\"]    launch_arguments  A list of launch arguments which should be used  [\"\"]    output_directory  The directory where to store the screenshots  *    output_simulator_logs  If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory  false    ios_version  By default, the latest version should be used automatically. If you want to change it, do it here     skip_open_summary  Don't open the HTML summary after running  snapshot  false    skip_helper_version_check  Do not check for most recent SnapshotHelper code  false    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running snapshot  false    reinstall_app  Enabling this option will automatically uninstall the application before running it  false    erase_simulator  Enabling this option will automatically erase the simulator before running the application  false    headless  Enabling this option will prevent displaying the simulator window  true    override_status_bar  Enabling this option will automatically override the status bar to show 9:41 AM, full battery, and full reception  false    localize_simulator  Enabling this option will configure the Simulator's system language  false    dark_mode  Enabling this option will configure the Simulator to be in dark mode (false for light, true for dark)     app_identifier  The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)  *    add_photos  A list of photos that should be added to the simulator before running the application     add_videos  A list of videos that should be added to the simulator before running the application     html_template  A path to screenshots.html template     buildlog_path  The directory where to store the build log  *    clean  Should the project be cleaned before building it?  false    test_without_building  Test without building, requires a derived data path     configuration  The configuration to use when building the app. Defaults to 'Release'  *    xcpretty_args  Additional xcpretty arguments     sdk  The SDK that should be used for building the application     scheme  The scheme you want to use, this must be the scheme for the UI Tests     number_of_retries  The number of times a test can fail before snapshot should stop retrying  1    stop_after_first_error  Should snapshot stop immediately after the tests completely failed on one device?  false    derived_data_path  The directory where build products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    test_target_name  The name of the target you want to test (if you desire to override the Target Application from Xcode)     namespace_log_files  Separate the log files per device and per language     concurrent_simulators  Take snapshots on multiple simulators concurrently. Note: This option is only applicable when running against Xcode 9  true    disable_slide_to_type  Disable the simulator from showing the 'Slide to type' prompt  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    testplan  The testplan associated with the scheme that should be used for testing     only_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to run     skip_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to skip     disable_xcpretty  Disable xcpretty formatting of build     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/capture_ios_screenshots/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  capture_ios_screenshots  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SNAPSHOT_SCREENSHOTS_PATH  The path to the screenshots     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/capture_ios_screenshots/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action capture_ios_screenshots",
            "title": "Documentation"
        },
        {
            "location": "/actions/capture_ios_screenshots/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run capture_ios_screenshots  To pass parameters, make use of the  :  symbol, for example  fastlane run capture_ios_screenshots parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/capture_ios_screenshots/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/capture_screenshots/",
            "text": "capture_screenshots\n\n\nAlias for the \ncapture_ios_screenshots\n action\n\n\n\n  \n\n\n\n\n\nAutomate taking localized screenshots of your iOS and tvOS apps on every device\n\n\n\n\n\n  Check out the new \nfastlane documentation\n on how to generate screenshots\n\n\n\n\n\nsnapshot\n generates localized iOS and tvOS screenshots for different device types and languages for the App Store and can be uploaded using (\ndeliver\n).\n\n\nYou have to manually create 20 (languages) x 6 (devices) x 5 (screenshots) = \n600 screenshots\n.\n\n\nIt's hard to get everything right!\n\n\n\n\nNew screenshots with every (design) update\n\n\nNo loading indicators\n\n\nSame content / screens\n\n\nClean Status Bar\n\n\nUploading screenshots (\ndeliver\n is your friend)\n\n\n\n\nMore information about \ncreating perfect screenshots\n.\n\n\nsnapshot\n runs completely in the background - you can do something else, while your computer takes the screenshots for you.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUI Tests\n \u2022\n    \nQuick Start\n \u2022\n    \nUsage\n \u2022\n    \nTips\n \u2022\n    \nHow?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nCreate hundreds of screenshots in multiple languages on all simulators\n\n\nTake screenshots in multiple device simulators concurrently to cut down execution time (Xcode 9 only)\n\n\nConfigure it once, store the configuration in git\n\n\nDo something else, while the computer takes the screenshots for you\n\n\nIntegrates with \nfastlane\n and \ndeliver\n\n\nGenerates a beautiful web page, which shows all screenshots on all devices. This is perfect to send to QA or the marketing team\n\n\nsnapshot\n automatically waits for network requests to be finished before taking a screenshot (we don't want loading images in the App Store screenshots)\n\n\n\n\nAfter \nsnapshot\n successfully created new screenshots, it will generate a beautiful HTML file to get a quick overview of all screens:\n\n\n\n\nWhy?\n\n\nThis tool automatically switches the language and device type and runs UI Tests for every combination.\n\n\nWhy should I automate this process?\n\n\n\n\nIt takes \nhours\n to take screenshots\n\n\nYou get a great overview of all your screens, running on all available simulators without the need to manually start it hundreds of times\n\n\nEasy verification for translators (without an iDevice) that translations do make sense in real App context\n\n\nEasy verification that localizations fit into labels on all screen dimensions\n\n\nIt is an integration test: You can test for UI elements and other things inside your scripts\n\n\nBe so nice, and provide new screenshots with every App Store update. Your customers deserve it\n\n\nYou realize, there is a spelling mistake in one of the screens? Well, just correct it and re-run the script\n\n\n\n\nUI Tests\n\n\nGetting started\n\n\nThis project uses Apple's newly announced UI Tests. We will not go into detail on how to write scripts.\n\n\nHere a few links to get started:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nQuick Start\n\n\n\n\nCreate a new UI Test target in your Xcode project (\ntop part of this article\n)\n\n\nRun \nfastlane snapshot init\n in your project folder\n\n\nAdd the ./SnapshotHelper.swift to your UI Test target (You can move the file anywhere you want)\n\n\n(Xcode 8 only) add the ./SnapshotHelperXcode8.swift to your UI Test target\n\n\n\n\n\n\n(Objective C only) add the bridging header to your test class:\n\n\n#import \"MYUITests-Swift.h\"\n\n  (The bridging header is named after your test target with \n-Swift.h\n appended.)\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a snapshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nSwift:\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C:\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n\n\n\n\nMake sure you only have one \nlaunch\n call in your test class, as Xcode adds one automatically on new test files.\n\n\n\n\nYou can try the \nsnapshot\n \nexample project\n by cloning this repo.\n\n\nTo quick start your UI tests, you can use the UI Test recorder. You only have to interact with the simulator, and Xcode will generate the UI Test code for you. You can find the red record button on the bottom of the screen (more information in \nthis blog post\n)\n\n\nUsage\n\n\nfastlane snapshot\n\n\n\n\nYour screenshots will be stored in the \n./screenshots/\n folder by default (or \n./fastlane/screenshots\n if you're using \nfastlane\n)\n\n\nNew with Xcode 9, \nsnapshot\n can run multiple simulators concurrently. This is the default behavior in order to take your screenshots as quickly as possible. This can be disabled to run each device, one at a time, by setting the \n:concurrent_simulators\n option to \nfalse\n.\n\n\nNote:\n While running \nsnapshot\n with Xcode 9, the simulators will not be visibly spawned. So, while you won't see the simulators running your tests, they will, in fact, be taking your screenshots.\n\n\nIf any error occurs while running the snapshot script on a device, that device will not have any screenshots, and \nsnapshot\n will continue with the next device or language. To stop the flow after the first error, run\n\n\nfastlane snapshot --stop_after_first_error\n\n\n\n\nAlso by default, \nsnapshot\n will open the HTML after all is done. This can be skipped with the following command\n\n\nfastlane snapshot --stop_after_first_error --skip_open_summary\n\n\n\n\nThere are a lot of options available that define how to build your app, for example\n\n\nfastlane snapshot --scheme \"UITests\" --configuration \"Release\"  --sdk \"iphonesimulator\"\n\n\n\n\nReinstall the app before running \nsnapshot\n\n\nfastlane snapshot --reinstall_app --app_identifier \"tools.fastlane.app\"\n\n\n\n\nBy default \nsnapshot\n automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g. \n#2517\n). You can adapt this number using\n\n\nfastlane snapshot --number_of_retries 3\n\n\n\n\nAdd photos and/or videos to the simulator before running \nsnapshot\n\n\nfastlane snapshot --add_photos MyTestApp/Assets/demo.jpg --add_videos MyTestApp/Assets/demo.mp4\n\n\n\n\nFor a list for all available options run\n\n\nfastlane action snapshot\n\n\n\n\nAfter running \nsnapshot\n you will get a nice summary:\n\n\n\n\nSnapfile\n\n\nAll of the available options can also be stored in a configuration file called the \nSnapfile\n. Since most values will not change often for your project, it is recommended to store them there:\n\n\nFirst make sure to have a \nSnapfile\n (you get it for free when running \nfastlane snapshot init\n)\n\n\nThe \nSnapfile\n can contain all the options that are also available on \nfastlane action snapshot\n\n\nscheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])\n\n\n\n\nCompletely reset all simulators\n\n\nYou can run this command in the terminal to delete and re-create all iOS and tvOS simulators:\n\n\nfastlane snapshot reset_simulators\n\n\n\n\nWarning\n: This will delete \nall\n your simulators and replace by new ones! This is useful, if you run into weird problems when running \nsnapshot\n.\n\n\nYou can use the environment variable \nSNAPSHOT_FORCE_DELETE\n to stop asking for confirmation before deleting.\n\n\nSNAPSHOT_FORCE_DELETE=1 fastlane snapshot reset_simulators\n\n\n\n\nUpdate snapshot helpers\n\n\nSome updates require the helper files to be updated. \nsnapshot\n will automatically warn you and tell you how to update.\n\n\nBasically you can run\n\n\nfastlane snapshot update\n\n\n\n\nto update your \nSnapshotHelper.swift\n files. In case you modified your \nSnapshotHelper.swift\n and want to manually update the file, check out \nSnapshotHelper.swift\n.\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your app on launch. These strings will be available in your app (e.g. not in the testing target) through \nProcessInfo.processInfo.arguments\n. Alternatively, use user-default syntax (\n-key value\n) and they will be available as key-value pairs in \nUserDefaults.standard\n.\n\n\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n\n\n\n\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n\n\n\n\nsnapshot\n includes \n-FASTLANE_SNAPSHOT YES\n, which will set a temporary user default for the key \nFASTLANE_SNAPSHOT\n, you may use this to detect when the app is run by \nsnapshot\n.\n\n\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n\n\n\n\nSpecify multiple argument strings and \nsnapshot\n will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.\n\n\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n\n\n\n\nXcode Environment Variables\n\n\nsnapshot\n includes \nFASTLANE_SNAPSHOT=YES\n and \nFASTLANE_LANGUAGE=<language>\n as arguments when executing \nxcodebuild\n. This means you may use these environment variables in a custom build phase run script to do any additional configuration.\n\n\nHow does it work?\n\n\nThe easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So \nsnapshot\n uses a different approach:\n\n\nWhen you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests (\nMore Information\n). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which \nsnapshot\n stores in a temporary folder.\n\n\nWhen the user calls \nsnapshot(...)\n in the UI Tests (Swift or Objective C) the script actually does a rotation to \n.Unknown\n which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find \nsome\n event that a user would never trigger, so that we know it's from \nsnapshot\n. On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).\n\n\nsnapshot\n then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once \nsnapshot\n has all events triggered by \nsnapshot\n it collects a ordered list of all the file names of the actual screenshots of the application.\n\n\nIn the test output, the Swift \nsnapshot\n function will print out something like this\n\n\n\n\nsnapshot: [some random text here]\n\n\n\n\nsnapshot\n finds all these entries using a regex. The number of \nsnapshot\n outputs in the terminal and the number of \nsnapshot\n events in the plist file should be the same. Knowing that, \nsnapshot\n automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.\n\n\n2 thing have to be passed on from \nsnapshot\n to the \nxcodebuild\n command line tool:\n\n\n\n\nThe device type is passed via the \ndestination\n parameter of the \nxcodebuild\n parameter\n\n\nThe language is passed via a temporary file which is written by \nsnapshot\n before running the tests and read by the UI Tests when launching the application\n\n\n\n\nIf you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:\n\n\nRadar \n23062925\n has been resolved with Xcode 8.3, so it's now possible to actually take screenshots from the simulator. We'll keep using the old approach for now, since many of you still want to use older versions of Xcode.\n\n\nTips\n\n\n\n\n\n  Check out the new \nfastlane documentation\n on how to generate screenshots\n\n\n\n\n\nFrame the screenshots\n\n\nIf you want to add frames around the screenshots and even put a title on top, check out \nframeit\n.\n\n\nAvailable language codes\n\n\nALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]\n\n\n\n\nTo get more information about language and locale codes please read \nInternationalization and Localization Guide\n.\n\n\nUse a clean status bar\n\n\nYou can set \noverride_status_bar\n to \ntrue\n to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.\n\n\nEditing the \nSnapfile\n\n\nChange syntax highlighting to \nRuby\n.\n\n\nSimulator doesn't launch the application\n\n\nWhen the app dies directly after the application is launched there might be 2 problems\n\n\n\n\nThe simulator is somehow in a broken state and you need to re-create it. You can use \nsnapshot reset_simulators\n to reset all simulators (this will remove all installed apps)\n\n\nA restart helps very often\n\n\n\n\nDetermine language\n\n\nTo detect the currently used localization in your tests, access the \ndeviceLanguage\n variable from \nSnapshotHelper.swift\n.\n\n\nSpeed up snapshots\n\n\nA lot of time in UI tests is spent waiting for animations.\n\n\nYou can disable \nUIView\n animations in your app to make the tests faster:\n\n\nif ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}\n\n\n\n\nThis requires you to pass the launch argument like so:\n\n\nsnapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])\n\n\n\n\nBy default, \nsnapshot\n will wait for a short time for the animations to finish.\nIf you're skipping the animations, this wait time is unnecessary and can be skipped:\n\n\nsetupSnapshot(app, waitForAnimations: false)\n\n\n\n\n\n\n\n\n\n\n\n\n\ncapture_screenshots\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\ncapture_ios_screenshots\n\n\n\n\nsnapshot # alias for \"capture_ios_screenshots\"\n\n\n\n\ncapture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\ndevices\n\n\nA list of devices you want to take the screenshots from\n\n\n\n\n\n\n\n\nlanguages\n\n\nA list of languages which should be used\n\n\n[\"en-US\"]\n\n\n\n\n\n\nlaunch_arguments\n\n\nA list of launch arguments which should be used\n\n\n[\"\"]\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\n*\n\n\n\n\n\n\noutput_simulator_logs\n\n\nIf the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n\n\nfalse\n\n\n\n\n\n\nios_version\n\n\nBy default, the latest version should be used automatically. If you want to change it, do it here\n\n\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the HTML summary after running \nsnapshot\n\n\nfalse\n\n\n\n\n\n\nskip_helper_version_check\n\n\nDo not check for most recent SnapshotHelper code\n\n\nfalse\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running snapshot\n\n\nfalse\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\nerase_simulator\n\n\nEnabling this option will automatically erase the simulator before running the application\n\n\nfalse\n\n\n\n\n\n\nheadless\n\n\nEnabling this option will prevent displaying the simulator window\n\n\ntrue\n\n\n\n\n\n\noverride_status_bar\n\n\nEnabling this option will automatically override the status bar to show 9:41 AM, full battery, and full reception\n\n\nfalse\n\n\n\n\n\n\nlocalize_simulator\n\n\nEnabling this option will configure the Simulator's system language\n\n\nfalse\n\n\n\n\n\n\ndark_mode\n\n\nEnabling this option will configure the Simulator to be in dark mode (false for light, true for dark)\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n\n\n*\n\n\n\n\n\n\nadd_photos\n\n\nA list of photos that should be added to the simulator before running the application\n\n\n\n\n\n\n\n\nadd_videos\n\n\nA list of videos that should be added to the simulator before running the application\n\n\n\n\n\n\n\n\nhtml_template\n\n\nA path to screenshots.html template\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\ntest_without_building\n\n\nTest without building, requires a derived data path\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nxcpretty_args\n\n\nAdditional xcpretty arguments\n\n\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\nscheme\n\n\nThe scheme you want to use, this must be the scheme for the UI Tests\n\n\n\n\n\n\n\n\nnumber_of_retries\n\n\nThe number of times a test can fail before snapshot should stop retrying\n\n\n1\n\n\n\n\n\n\nstop_after_first_error\n\n\nShould snapshot stop immediately after the tests completely failed on one device?\n\n\nfalse\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\ntest_target_name\n\n\nThe name of the target you want to test (if you desire to override the Target Application from Xcode)\n\n\n\n\n\n\n\n\nnamespace_log_files\n\n\nSeparate the log files per device and per language\n\n\n\n\n\n\n\n\nconcurrent_simulators\n\n\nTake snapshots on multiple simulators concurrently. Note: This option is only applicable when running against Xcode 9\n\n\ntrue\n\n\n\n\n\n\ndisable_slide_to_type\n\n\nDisable the simulator from showing the 'Slide to type' prompt\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\ntestplan\n\n\nThe testplan associated with the scheme that should be used for testing\n\n\n\n\n\n\n\n\nonly_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to run\n\n\n\n\n\n\n\n\nskip_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to skip\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncapture_screenshots\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SNAPSHOT_SCREENSHOTS_PATH\n\n\nThe path to the screenshots\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action capture_screenshots\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run capture_screenshots\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run capture_screenshots parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "capture_screenshots"
        },
        {
            "location": "/actions/capture_screenshots/#capture_screenshots",
            "text": "Alias for the  capture_ios_screenshots  action",
            "title": "capture_screenshots"
        },
        {
            "location": "/actions/capture_screenshots/#automate-taking-localized-screenshots-of-your-ios-and-tvos-apps-on-every-device",
            "text": "",
            "title": "Automate taking localized screenshots of your iOS and tvOS apps on every device"
        },
        {
            "location": "/actions/capture_screenshots/#features",
            "text": "Create hundreds of screenshots in multiple languages on all simulators  Take screenshots in multiple device simulators concurrently to cut down execution time (Xcode 9 only)  Configure it once, store the configuration in git  Do something else, while the computer takes the screenshots for you  Integrates with  fastlane  and  deliver  Generates a beautiful web page, which shows all screenshots on all devices. This is perfect to send to QA or the marketing team  snapshot  automatically waits for network requests to be finished before taking a screenshot (we don't want loading images in the App Store screenshots)   After  snapshot  successfully created new screenshots, it will generate a beautiful HTML file to get a quick overview of all screens:",
            "title": "Features"
        },
        {
            "location": "/actions/capture_screenshots/#why",
            "text": "This tool automatically switches the language and device type and runs UI Tests for every combination.",
            "title": "Why?"
        },
        {
            "location": "/actions/capture_screenshots/#why-should-i-automate-this-process",
            "text": "It takes  hours  to take screenshots  You get a great overview of all your screens, running on all available simulators without the need to manually start it hundreds of times  Easy verification for translators (without an iDevice) that translations do make sense in real App context  Easy verification that localizations fit into labels on all screen dimensions  It is an integration test: You can test for UI elements and other things inside your scripts  Be so nice, and provide new screenshots with every App Store update. Your customers deserve it  You realize, there is a spelling mistake in one of the screens? Well, just correct it and re-run the script",
            "title": "Why should I automate this process?"
        },
        {
            "location": "/actions/capture_screenshots/#ui-tests",
            "text": "",
            "title": "UI Tests"
        },
        {
            "location": "/actions/capture_screenshots/#getting-started",
            "text": "This project uses Apple's newly announced UI Tests. We will not go into detail on how to write scripts.  Here a few links to get started:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit",
            "title": "Getting started"
        },
        {
            "location": "/actions/capture_screenshots/#quick-start",
            "text": "Create a new UI Test target in your Xcode project ( top part of this article )  Run  fastlane snapshot init  in your project folder  Add the ./SnapshotHelper.swift to your UI Test target (You can move the file anywhere you want)  (Xcode 8 only) add the ./SnapshotHelperXcode8.swift to your UI Test target    (Objective C only) add the bridging header to your test class:  #import \"MYUITests-Swift.h\" \n  (The bridging header is named after your test target with  -Swift.h  appended.)    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a snapshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];    Add the following code to your  setUp()  method:   Swift:  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C:  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];  Make sure you only have one  launch  call in your test class, as Xcode adds one automatically on new test files.   You can try the  snapshot   example project  by cloning this repo.  To quick start your UI tests, you can use the UI Test recorder. You only have to interact with the simulator, and Xcode will generate the UI Test code for you. You can find the red record button on the bottom of the screen (more information in  this blog post )",
            "title": "Quick Start"
        },
        {
            "location": "/actions/capture_screenshots/#usage",
            "text": "fastlane snapshot  Your screenshots will be stored in the  ./screenshots/  folder by default (or  ./fastlane/screenshots  if you're using  fastlane )  New with Xcode 9,  snapshot  can run multiple simulators concurrently. This is the default behavior in order to take your screenshots as quickly as possible. This can be disabled to run each device, one at a time, by setting the  :concurrent_simulators  option to  false .  Note:  While running  snapshot  with Xcode 9, the simulators will not be visibly spawned. So, while you won't see the simulators running your tests, they will, in fact, be taking your screenshots.  If any error occurs while running the snapshot script on a device, that device will not have any screenshots, and  snapshot  will continue with the next device or language. To stop the flow after the first error, run  fastlane snapshot --stop_after_first_error  Also by default,  snapshot  will open the HTML after all is done. This can be skipped with the following command  fastlane snapshot --stop_after_first_error --skip_open_summary  There are a lot of options available that define how to build your app, for example  fastlane snapshot --scheme \"UITests\" --configuration \"Release\"  --sdk \"iphonesimulator\"  Reinstall the app before running  snapshot  fastlane snapshot --reinstall_app --app_identifier \"tools.fastlane.app\"  By default  snapshot  automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g.  #2517 ). You can adapt this number using  fastlane snapshot --number_of_retries 3  Add photos and/or videos to the simulator before running  snapshot  fastlane snapshot --add_photos MyTestApp/Assets/demo.jpg --add_videos MyTestApp/Assets/demo.mp4  For a list for all available options run  fastlane action snapshot  After running  snapshot  you will get a nice summary:",
            "title": "Usage"
        },
        {
            "location": "/actions/capture_screenshots/#snapfile",
            "text": "All of the available options can also be stored in a configuration file called the  Snapfile . Since most values will not change often for your project, it is recommended to store them there:  First make sure to have a  Snapfile  (you get it for free when running  fastlane snapshot init )  The  Snapfile  can contain all the options that are also available on  fastlane action snapshot  scheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])",
            "title": "Snapfile"
        },
        {
            "location": "/actions/capture_screenshots/#completely-reset-all-simulators",
            "text": "You can run this command in the terminal to delete and re-create all iOS and tvOS simulators:  fastlane snapshot reset_simulators  Warning : This will delete  all  your simulators and replace by new ones! This is useful, if you run into weird problems when running  snapshot .  You can use the environment variable  SNAPSHOT_FORCE_DELETE  to stop asking for confirmation before deleting.  SNAPSHOT_FORCE_DELETE=1 fastlane snapshot reset_simulators",
            "title": "Completely reset all simulators"
        },
        {
            "location": "/actions/capture_screenshots/#update-snapshot-helpers",
            "text": "Some updates require the helper files to be updated.  snapshot  will automatically warn you and tell you how to update.  Basically you can run  fastlane snapshot update  to update your  SnapshotHelper.swift  files. In case you modified your  SnapshotHelper.swift  and want to manually update the file, check out  SnapshotHelper.swift .",
            "title": "Update snapshot helpers"
        },
        {
            "location": "/actions/capture_screenshots/#launch-arguments",
            "text": "You can provide additional arguments to your app on launch. These strings will be available in your app (e.g. not in the testing target) through  ProcessInfo.processInfo.arguments . Alternatively, use user-default syntax ( -key value ) and they will be available as key-value pairs in  UserDefaults.standard .  launch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])  name.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"  snapshot  includes  -FASTLANE_SNAPSHOT YES , which will set a temporary user default for the key  FASTLANE_SNAPSHOT , you may use this to detect when the app is run by  snapshot .  if UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}  Specify multiple argument strings and  snapshot  will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.  # Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])",
            "title": "Launch Arguments"
        },
        {
            "location": "/actions/capture_screenshots/#xcode-environment-variables",
            "text": "snapshot  includes  FASTLANE_SNAPSHOT=YES  and  FASTLANE_LANGUAGE=<language>  as arguments when executing  xcodebuild . This means you may use these environment variables in a custom build phase run script to do any additional configuration.",
            "title": "Xcode Environment Variables"
        },
        {
            "location": "/actions/capture_screenshots/#how-does-it-work",
            "text": "The easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So  snapshot  uses a different approach:  When you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests ( More Information ). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which  snapshot  stores in a temporary folder.  When the user calls  snapshot(...)  in the UI Tests (Swift or Objective C) the script actually does a rotation to  .Unknown  which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find  some  event that a user would never trigger, so that we know it's from  snapshot . On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).  snapshot  then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once  snapshot  has all events triggered by  snapshot  it collects a ordered list of all the file names of the actual screenshots of the application.  In the test output, the Swift  snapshot  function will print out something like this   snapshot: [some random text here]   snapshot  finds all these entries using a regex. The number of  snapshot  outputs in the terminal and the number of  snapshot  events in the plist file should be the same. Knowing that,  snapshot  automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.  2 thing have to be passed on from  snapshot  to the  xcodebuild  command line tool:   The device type is passed via the  destination  parameter of the  xcodebuild  parameter  The language is passed via a temporary file which is written by  snapshot  before running the tests and read by the UI Tests when launching the application   If you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:  Radar  23062925  has been resolved with Xcode 8.3, so it's now possible to actually take screenshots from the simulator. We'll keep using the old approach for now, since many of you still want to use older versions of Xcode.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/capture_screenshots/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/capture_screenshots/#frame-the-screenshots",
            "text": "If you want to add frames around the screenshots and even put a title on top, check out  frameit .",
            "title": "Frame the screenshots"
        },
        {
            "location": "/actions/capture_screenshots/#available-language-codes",
            "text": "ALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]  To get more information about language and locale codes please read  Internationalization and Localization Guide .",
            "title": "Available language codes"
        },
        {
            "location": "/actions/capture_screenshots/#use-a-clean-status-bar",
            "text": "You can set  override_status_bar  to  true  to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.",
            "title": "Use a clean status bar"
        },
        {
            "location": "/actions/capture_screenshots/#editing-the-snapfile",
            "text": "Change syntax highlighting to  Ruby .",
            "title": "Editing the Snapfile"
        },
        {
            "location": "/actions/capture_screenshots/#simulator-doesnt-launch-the-application",
            "text": "When the app dies directly after the application is launched there might be 2 problems   The simulator is somehow in a broken state and you need to re-create it. You can use  snapshot reset_simulators  to reset all simulators (this will remove all installed apps)  A restart helps very often",
            "title": "Simulator doesn't launch the application"
        },
        {
            "location": "/actions/capture_screenshots/#determine-language",
            "text": "To detect the currently used localization in your tests, access the  deviceLanguage  variable from  SnapshotHelper.swift .",
            "title": "Determine language"
        },
        {
            "location": "/actions/capture_screenshots/#speed-up-snapshots",
            "text": "A lot of time in UI tests is spent waiting for animations.  You can disable  UIView  animations in your app to make the tests faster:  if ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}  This requires you to pass the launch argument like so:  snapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])  By default,  snapshot  will wait for a short time for the animations to finish.\nIf you're skipping the animations, this wait time is unnecessary and can be skipped:  setupSnapshot(app, waitForAnimations: false)      capture_screenshots       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Speed up snapshots"
        },
        {
            "location": "/actions/capture_screenshots/#3-examples",
            "text": "capture_ios_screenshots  snapshot # alias for \"capture_ios_screenshots\"  capture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/capture_screenshots/#parameters",
            "text": "Key  Description  Default      workspace  Path the workspace file     project  Path the project file     xcargs  Pass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     devices  A list of devices you want to take the screenshots from     languages  A list of languages which should be used  [\"en-US\"]    launch_arguments  A list of launch arguments which should be used  [\"\"]    output_directory  The directory where to store the screenshots  *    output_simulator_logs  If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory  false    ios_version  By default, the latest version should be used automatically. If you want to change it, do it here     skip_open_summary  Don't open the HTML summary after running  snapshot  false    skip_helper_version_check  Do not check for most recent SnapshotHelper code  false    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running snapshot  false    reinstall_app  Enabling this option will automatically uninstall the application before running it  false    erase_simulator  Enabling this option will automatically erase the simulator before running the application  false    headless  Enabling this option will prevent displaying the simulator window  true    override_status_bar  Enabling this option will automatically override the status bar to show 9:41 AM, full battery, and full reception  false    localize_simulator  Enabling this option will configure the Simulator's system language  false    dark_mode  Enabling this option will configure the Simulator to be in dark mode (false for light, true for dark)     app_identifier  The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)  *    add_photos  A list of photos that should be added to the simulator before running the application     add_videos  A list of videos that should be added to the simulator before running the application     html_template  A path to screenshots.html template     buildlog_path  The directory where to store the build log  *    clean  Should the project be cleaned before building it?  false    test_without_building  Test without building, requires a derived data path     configuration  The configuration to use when building the app. Defaults to 'Release'  *    xcpretty_args  Additional xcpretty arguments     sdk  The SDK that should be used for building the application     scheme  The scheme you want to use, this must be the scheme for the UI Tests     number_of_retries  The number of times a test can fail before snapshot should stop retrying  1    stop_after_first_error  Should snapshot stop immediately after the tests completely failed on one device?  false    derived_data_path  The directory where build products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    test_target_name  The name of the target you want to test (if you desire to override the Target Application from Xcode)     namespace_log_files  Separate the log files per device and per language     concurrent_simulators  Take snapshots on multiple simulators concurrently. Note: This option is only applicable when running against Xcode 9  true    disable_slide_to_type  Disable the simulator from showing the 'Slide to type' prompt  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    testplan  The testplan associated with the scheme that should be used for testing     only_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to run     skip_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to skip     disable_xcpretty  Disable xcpretty formatting of build     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/capture_screenshots/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  capture_screenshots  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SNAPSHOT_SCREENSHOTS_PATH  The path to the screenshots     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/capture_screenshots/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action capture_screenshots",
            "title": "Documentation"
        },
        {
            "location": "/actions/capture_screenshots/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run capture_screenshots  To pass parameters, make use of the  :  symbol, for example  fastlane run capture_screenshots parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/capture_screenshots/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/carthage/",
            "text": "carthage\n\n\nRuns \ncarthage\n for your project\n\n\n\n\n\n\n\n\ncarthage\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@bassrock, @petester42, @jschmid, @JaviSoto, @uny, @phatblat, @bfcrampton, @antondomashnev, @gbrhaz\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncarthage\n\n\n\n\ncarthage(\n  frameworks: [\"MyFramework1\", \"MyFramework2\"],   # Specify which frameworks to archive (only for the archive command)\n  output: \"MyFrameworkBundle.framework.zip\",      # Specify the output archive name (only for the archive command)\n  command: \"bootstrap\",       # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: [\"Alamofire\", \"Notice\"],# Specify which dependencies to update or build (only for update, build and bootstrap commands)\n  use_ssh: false,   # Use SSH for downloading GitHub repositories.\n  use_submodules: false,      # Add dependencies as Git submodules.\n  use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,  # When bootstrapping Carthage do not build\n  no_skip_current: false,     # Don't skip building the current project (only for frameworks)\n  verbose: false,   # Print xcodebuild output inline\n  platform: \"all\",  # Define which platform to build for (one of \u2018all\u2019, \u2018Mac\u2019, \u2018iOS\u2019, \u2018watchOS\u2019, \u2018tvOS\u2018, or comma-separated values of the formers except for \u2018all\u2019)\n  configuration: \"Release\",   # Build configuration to use when building\n  cache_builds: true,         # By default Carthage will rebuild a dependency regardless of whether its the same resolved version as before.\n  toolchain: \"com.apple.dt.toolchain.Swift_2_3\",  # Specify the xcodebuild toolchain\n  new_resolver: false,        # Use the new resolver to resolve depdendency graph\n  log_path: \"carthage.log\"    # Path to the xcode build output\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\nCarthage command (one of: build, bootstrap, update, archive)\n\n\nbootstrap\n\n\n\n\n\n\ndependencies\n\n\nCarthage dependencies to update, build or bootstrap\n\n\n[]\n\n\n\n\n\n\nuse_ssh\n\n\nUse SSH for downloading GitHub repositories\n\n\n\n\n\n\n\n\nuse_submodules\n\n\nAdd dependencies as Git submodules\n\n\n\n\n\n\n\n\nuse_netrc\n\n\nUse .netrc for downloading frameworks\n\n\n\n\n\n\n\n\nuse_binaries\n\n\nCheck out dependency repositories even when prebuilt frameworks exist\n\n\n\n\n\n\n\n\nno_checkout\n\n\nWhen bootstrapping Carthage do not checkout\n\n\n\n\n\n\n\n\nno_build\n\n\nWhen bootstrapping Carthage do not build\n\n\n\n\n\n\n\n\nno_skip_current\n\n\nDon't skip building the Carthage project (in addition to its dependencies)\n\n\n\n\n\n\n\n\nderived_data\n\n\nUse derived data folder at path\n\n\n\n\n\n\n\n\nverbose\n\n\nPrint xcodebuild output inline\n\n\n\n\n\n\n\n\nplatform\n\n\nDefine which platform to build for\n\n\n\n\n\n\n\n\ncache_builds\n\n\nBy default Carthage will rebuild a dependency regardless of whether it's the same resolved version as before. Passing the --cache-builds will cause carthage to avoid rebuilding a dependency if it can\n\n\nfalse\n\n\n\n\n\n\nframeworks\n\n\nFramework name or names to archive, could be applied only along with the archive command\n\n\n[]\n\n\n\n\n\n\noutput\n\n\nOutput name for the archive, could be applied only along with the archive command. Use following format *.framework.zip\n\n\n\n\n\n\n\n\nconfiguration\n\n\nDefine which build configuration to use when building\n\n\n\n\n\n\n\n\ntoolchain\n\n\nDefine which xcodebuild toolchain to use when building\n\n\n\n\n\n\n\n\nproject_directory\n\n\nDefine the directory containing the Carthage project\n\n\n\n\n\n\n\n\nnew_resolver\n\n\nUse new resolver when resolving dependency graph\n\n\n\n\n\n\n\n\nlog_path\n\n\nPath to the xcode build output\n\n\n\n\n\n\n\n\nexecutable\n\n\nPath to the \ncarthage\n executable on your machine\n\n\ncarthage\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action carthage\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run carthage\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run carthage parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "carthage"
        },
        {
            "location": "/actions/carthage/#carthage",
            "text": "Runs  carthage  for your project     carthage       Supported platforms  ios, mac    Author  @bassrock, @petester42, @jschmid, @JaviSoto, @uny, @phatblat, @bfcrampton, @antondomashnev, @gbrhaz",
            "title": "carthage"
        },
        {
            "location": "/actions/carthage/#2-examples",
            "text": "carthage  carthage(\n  frameworks: [\"MyFramework1\", \"MyFramework2\"],   # Specify which frameworks to archive (only for the archive command)\n  output: \"MyFrameworkBundle.framework.zip\",      # Specify the output archive name (only for the archive command)\n  command: \"bootstrap\",       # One of: build, bootstrap, update, archive. (default: bootstrap)\n  dependencies: [\"Alamofire\", \"Notice\"],# Specify which dependencies to update or build (only for update, build and bootstrap commands)\n  use_ssh: false,   # Use SSH for downloading GitHub repositories.\n  use_submodules: false,      # Add dependencies as Git submodules.\n  use_binaries: true,         # Check out dependency repositories even when prebuilt frameworks exist\n  no_build: false,  # When bootstrapping Carthage do not build\n  no_skip_current: false,     # Don't skip building the current project (only for frameworks)\n  verbose: false,   # Print xcodebuild output inline\n  platform: \"all\",  # Define which platform to build for (one of \u2018all\u2019, \u2018Mac\u2019, \u2018iOS\u2019, \u2018watchOS\u2019, \u2018tvOS\u2018, or comma-separated values of the formers except for \u2018all\u2019)\n  configuration: \"Release\",   # Build configuration to use when building\n  cache_builds: true,         # By default Carthage will rebuild a dependency regardless of whether its the same resolved version as before.\n  toolchain: \"com.apple.dt.toolchain.Swift_2_3\",  # Specify the xcodebuild toolchain\n  new_resolver: false,        # Use the new resolver to resolve depdendency graph\n  log_path: \"carthage.log\"    # Path to the xcode build output\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/carthage/#parameters",
            "text": "Key  Description  Default      command  Carthage command (one of: build, bootstrap, update, archive)  bootstrap    dependencies  Carthage dependencies to update, build or bootstrap  []    use_ssh  Use SSH for downloading GitHub repositories     use_submodules  Add dependencies as Git submodules     use_netrc  Use .netrc for downloading frameworks     use_binaries  Check out dependency repositories even when prebuilt frameworks exist     no_checkout  When bootstrapping Carthage do not checkout     no_build  When bootstrapping Carthage do not build     no_skip_current  Don't skip building the Carthage project (in addition to its dependencies)     derived_data  Use derived data folder at path     verbose  Print xcodebuild output inline     platform  Define which platform to build for     cache_builds  By default Carthage will rebuild a dependency regardless of whether it's the same resolved version as before. Passing the --cache-builds will cause carthage to avoid rebuilding a dependency if it can  false    frameworks  Framework name or names to archive, could be applied only along with the archive command  []    output  Output name for the archive, could be applied only along with the archive command. Use following format *.framework.zip     configuration  Define which build configuration to use when building     toolchain  Define which xcodebuild toolchain to use when building     project_directory  Define the directory containing the Carthage project     new_resolver  Use new resolver when resolving dependency graph     log_path  Path to the xcode build output     executable  Path to the  carthage  executable on your machine  carthage     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/carthage/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action carthage",
            "title": "Documentation"
        },
        {
            "location": "/actions/carthage/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run carthage  To pass parameters, make use of the  :  symbol, for example  fastlane run carthage parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/carthage/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/cert/",
            "text": "cert\n\n\nAlias for the \nget_certificates\n action\n\n\n\n  \n\n\n\n\n\n\n\n\n    \nWhy?\n \u2022\n    \nUsage\n \u2022\n    \nHow does it work?\n \u2022\n    \nTips\n\n\n\n\n\n\ncert\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\n\n\nIn the gif we used \ncert && sigh\n, which will first create an iOS code signing certificate and then a provisioning profile for your app if \ncert\n succeeded.\n\n\nUsage\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your certificates. Use \ncert\n directly only if you want full control over what's going on and know more about codesigning.\n\n\nfastlane cert\n\n\n\n\nThis will check if any of the available signing certificates is installed on your local machine.\n\n\nOnly if a new certificate needs to be created, \ncert\n will\n\n\n\n\nCreate a new private key\n\n\nCreate a new signing request\n\n\nGenerate, downloads and installs the certificate\n\n\nImport all the generated files into your Keychain\n\n\n\n\ncert\n will never revoke your existing certificates. If you can't create any more certificates, \ncert\n will raise an exception, which means, you have to revoke one of the existing certificates to make room for a new one.\n\n\nYou can pass your Apple ID:\n\n\nfastlane cert -u cert@krausefx.com\n\n\n\n\nFor a list of available commands run\n\n\nfastlane action cert\n\n\n\n\nKeep in mind, there is no way for \ncert\n to download existing certificates + private keys from the Apple Developer Portal, as the private key never leaves your computer.\n\n\nEnvironment Variables\n\n\nRun \nfastlane action cert\n to get a list of all available environment variables.\n\n\nUse with \nsigh\n\n\ncert\n becomes really interesting when used in \nfastlane\n in combination with \nsigh\n.\n\n\nUpdate your \nFastfile\n to contain the following code:\n\n\nlane :beta do\n  cert\n  sigh(force: true)\nend\n\n\n\n\nforce: true\n will make sure to re-generate the provisioning profile on each run.\nThis will result in \nsigh\n always using the correct signing certificate, which is installed on the local machine.\n\n\nHow is my password stored?\n\n\ncert\n uses the \npassword manager\n from \nfastlane\n. Take a look the \nCredentialsManager README\n for more information.\n\n\nTips\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nmobileprovision\n files like this:\n\n\n\n\n\n\n\n\n\n\n\n\ncert\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nget_certificates\n\n\n\n\ncert # alias for \"get_certificates\"\n\n\n\n\nget_certificates(\n  development: true,\n  username: \"user@email.com\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndevelopment\n\n\nCreate a development certificate instead of a distribution one\n\n\nfalse\n\n\n\n\n\n\ntype\n\n\nCreate specific certificate type (takes precedence over :development)\n\n\n\n\n\n\n\n\nforce\n\n\nCreate a certificate even if an existing certificate exists\n\n\nfalse\n\n\n\n\n\n\ngenerate_apple_certs\n\n\nCreate a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)\n\n\n*\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nfilename\n\n\nThe filename of certificate to store\n\n\n\n\n\n\n\n\noutput_path\n\n\nThe path to a directory in which all certificates and private keys should be stored\n\n\n.\n\n\n\n\n\n\nkeychain_path\n\n\nPath to a custom keychain\n\n\n*\n\n\n\n\n\n\nkeychain_password\n\n\nThis might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password\n\n\n\n\n\n\n\n\nskip_set_partition_list\n\n\nSkips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing\n\n\nfalse\n\n\n\n\n\n\nplatform\n\n\nSet the provisioning profile's platform (ios, macos, tvos)\n\n\nios\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncert\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::CERT_FILE_PATH\n\n\nThe path to the certificate\n\n\n\n\n\n\nSharedValues::CERT_CERTIFICATE_ID\n\n\nThe id of the certificate\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action cert\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run cert\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run cert parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "cert"
        },
        {
            "location": "/actions/cert/#cert",
            "text": "Alias for the  get_certificates  action  \n      \n     Why?  \u2022\n     Usage  \u2022\n     How does it work?  \u2022\n     Tips",
            "title": "cert"
        },
        {
            "location": "/actions/cert/#usage",
            "text": "Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your certificates. Use  cert  directly only if you want full control over what's going on and know more about codesigning.  fastlane cert  This will check if any of the available signing certificates is installed on your local machine.  Only if a new certificate needs to be created,  cert  will   Create a new private key  Create a new signing request  Generate, downloads and installs the certificate  Import all the generated files into your Keychain   cert  will never revoke your existing certificates. If you can't create any more certificates,  cert  will raise an exception, which means, you have to revoke one of the existing certificates to make room for a new one.  You can pass your Apple ID:  fastlane cert -u cert@krausefx.com  For a list of available commands run  fastlane action cert  Keep in mind, there is no way for  cert  to download existing certificates + private keys from the Apple Developer Portal, as the private key never leaves your computer.",
            "title": "Usage"
        },
        {
            "location": "/actions/cert/#environment-variables",
            "text": "Run  fastlane action cert  to get a list of all available environment variables.",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/cert/#use-with-sigh",
            "text": "cert  becomes really interesting when used in  fastlane  in combination with  sigh .  Update your  Fastfile  to contain the following code:  lane :beta do\n  cert\n  sigh(force: true)\nend  force: true  will make sure to re-generate the provisioning profile on each run.\nThis will result in  sigh  always using the correct signing certificate, which is installed on the local machine.",
            "title": "Use with sigh"
        },
        {
            "location": "/actions/cert/#how-is-my-password-stored",
            "text": "cert  uses the  password manager  from  fastlane . Take a look the  CredentialsManager README  for more information.",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/cert/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/cert/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  mobileprovision  files like this:      cert       Supported platforms  ios    Author  @KrauseFx",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/cert/#3-examples",
            "text": "get_certificates  cert # alias for \"get_certificates\"  get_certificates(\n  development: true,\n  username: \"user@email.com\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/cert/#parameters",
            "text": "Key  Description  Default      development  Create a development certificate instead of a distribution one  false    type  Create specific certificate type (takes precedence over :development)     force  Create a certificate even if an existing certificate exists  false    generate_apple_certs  Create a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)  *    api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    filename  The filename of certificate to store     output_path  The path to a directory in which all certificates and private keys should be stored  .    keychain_path  Path to a custom keychain  *    keychain_password  This might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password     skip_set_partition_list  Skips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing  false    platform  Set the provisioning profile's platform (ios, macos, tvos)  ios     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/cert/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  cert  action generates the following Lane Variables:     SharedValue  Description      SharedValues::CERT_FILE_PATH  The path to the certificate    SharedValues::CERT_CERTIFICATE_ID  The id of the certificate     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/cert/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action cert",
            "title": "Documentation"
        },
        {
            "location": "/actions/cert/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run cert  To pass parameters, make use of the  :  symbol, for example  fastlane run cert parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/cert/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/changelog_from_git_commits/",
            "text": "changelog_from_git_commits\n\n\nCollect git commit messages into a changelog\n\n\n\n\nBy default, messages will be collected back to the last tag, but the range can be controlled\n\n\n\n\n\n\n\n\n\n\nchangelog_from_git_commits\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@mfurtak, @asfalcone, @SiarheiFedartsou, @allewun\n\n\n\n\n\n\nReturns\n\n\nReturns a String containing your formatted git commits\n\n\n\n\n\n\n\n\n2 Examples\n\n\nchangelog_from_git_commits\n\n\n\n\nchangelog_from_git_commits(\n  between: [\"7b092b3\", \"HEAD\"],  # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty: \"- (%ae) %s\",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  date_format: \"short\",# Optional, lets you provide an additional date format to dates within the pretty-formatted string\n  match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  merge_commit_filtering: \"exclude_merges\" # Optional, lets you filter out merge commits\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbetween\n\n\nArray containing two Git revision values between which to collect messages, you mustn't use it with :commits_count key at the same time\n\n\n\n\n\n\n\n\ncommits_count\n\n\nNumber of commits to include in changelog, you mustn't use it with :between key at the same time\n\n\n\n\n\n\n\n\npath\n\n\nPath of the git repository\n\n\n./\n\n\n\n\n\n\npretty\n\n\nThe format applied to each commit while generating the collected value\n\n\n%B\n\n\n\n\n\n\ndate_format\n\n\nThe date format applied to each commit while generating the collected value\n\n\n\n\n\n\n\n\nancestry_path\n\n\nWhether or not to use ancestry-path param\n\n\nfalse\n\n\n\n\n\n\ntag_match_pattern\n\n\nA glob(7) pattern to match against when finding the last git tag\n\n\n\n\n\n\n\n\nmatch_lightweight_tag\n\n\nWhether or not to match a lightweight tag when searching for the last one\n\n\ntrue\n\n\n\n\n\n\nquiet\n\n\nWhether or not to disable changelog output\n\n\nfalse\n\n\n\n\n\n\ninclude_merges\n\n\nDEPRECATED!\n Use \n:merge_commit_filtering\n instead - Whether or not to include any commits that are merges\n\n\n\n\n\n\n\n\nmerge_commit_filtering\n\n\nControls inclusion of merge commits when collecting the changelog. Valid values: \n:include_merges\n, \n:exclude_merges\n, \n:only_include_merges\n\n\ninclude_merges\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nchangelog_from_git_commits\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::FL_CHANGELOG\n\n\nThe changelog string generated from the collected git commit messages\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action changelog_from_git_commits\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run changelog_from_git_commits\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run changelog_from_git_commits parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "changelog_from_git_commits"
        },
        {
            "location": "/actions/changelog_from_git_commits/#changelog_from_git_commits",
            "text": "Collect git commit messages into a changelog   By default, messages will be collected back to the last tag, but the range can be controlled      changelog_from_git_commits       Supported platforms  ios, android, mac    Author  @mfurtak, @asfalcone, @SiarheiFedartsou, @allewun    Returns  Returns a String containing your formatted git commits",
            "title": "changelog_from_git_commits"
        },
        {
            "location": "/actions/changelog_from_git_commits/#2-examples",
            "text": "changelog_from_git_commits  changelog_from_git_commits(\n  between: [\"7b092b3\", \"HEAD\"],  # Optional, lets you specify a revision/tag range between which to collect commit info\n  pretty: \"- (%ae) %s\",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text\n  date_format: \"short\",# Optional, lets you provide an additional date format to dates within the pretty-formatted string\n  match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag\n  merge_commit_filtering: \"exclude_merges\" # Optional, lets you filter out merge commits\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/changelog_from_git_commits/#parameters",
            "text": "Key  Description  Default      between  Array containing two Git revision values between which to collect messages, you mustn't use it with :commits_count key at the same time     commits_count  Number of commits to include in changelog, you mustn't use it with :between key at the same time     path  Path of the git repository  ./    pretty  The format applied to each commit while generating the collected value  %B    date_format  The date format applied to each commit while generating the collected value     ancestry_path  Whether or not to use ancestry-path param  false    tag_match_pattern  A glob(7) pattern to match against when finding the last git tag     match_lightweight_tag  Whether or not to match a lightweight tag when searching for the last one  true    quiet  Whether or not to disable changelog output  false    include_merges  DEPRECATED!  Use  :merge_commit_filtering  instead - Whether or not to include any commits that are merges     merge_commit_filtering  Controls inclusion of merge commits when collecting the changelog. Valid values:  :include_merges ,  :exclude_merges ,  :only_include_merges  include_merges     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/changelog_from_git_commits/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  changelog_from_git_commits  action generates the following Lane Variables:     SharedValue  Description      SharedValues::FL_CHANGELOG  The changelog string generated from the collected git commit messages     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/changelog_from_git_commits/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action changelog_from_git_commits",
            "title": "Documentation"
        },
        {
            "location": "/actions/changelog_from_git_commits/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run changelog_from_git_commits  To pass parameters, make use of the  :  symbol, for example  fastlane run changelog_from_git_commits parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/changelog_from_git_commits/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/chatwork/",
            "text": "chatwork\n\n\nSend a success/error message to \nChatWork\n\n\n\n\nInformation on how to obtain an API token: \nhttp://developer.chatwork.com/ja/authenticate.html\n\n\n\n\n\n\n\n\n\n\nchatwork\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@astronaughts\n\n\n\n\n\n\n\n\n1 Example\n\n\nchatwork(\n  message: \"App successfully released!\",\n  roomid: 12345,\n  success: true,\n  api_token: \"Your Token\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nChatWork API Token\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message to post on ChatWork\n\n\n\n\n\n\n\n\nroomid\n\n\nThe room ID\n\n\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action chatwork\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run chatwork\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run chatwork parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "chatwork"
        },
        {
            "location": "/actions/chatwork/#chatwork",
            "text": "Send a success/error message to  ChatWork   Information on how to obtain an API token:  http://developer.chatwork.com/ja/authenticate.html      chatwork       Supported platforms  ios, android, mac    Author  @astronaughts",
            "title": "chatwork"
        },
        {
            "location": "/actions/chatwork/#1-example",
            "text": "chatwork(\n  message: \"App successfully released!\",\n  roomid: 12345,\n  success: true,\n  api_token: \"Your Token\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/chatwork/#parameters",
            "text": "Key  Description  Default      api_token  ChatWork API Token     message  The message to post on ChatWork     roomid  The room ID     success  Was this build successful? (true/false)  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/chatwork/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action chatwork",
            "title": "Documentation"
        },
        {
            "location": "/actions/chatwork/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run chatwork  To pass parameters, make use of the  :  symbol, for example  fastlane run chatwork parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/chatwork/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/check_app_store_metadata/",
            "text": "check_app_store_metadata\n\n\nCheck your app's metadata before you submit your app to review (via \nprecheck\n)\n\n\n\n  \n\n\n\n\n\nPrecheck\n\n\nCheck your app using a community driven set of App Store review rules to avoid being rejected\n\n\nApple rejects builds for many avoidable metadata issues like including swear words \ud83d\ude2e, other companies\u2019 trademarks, or even mentioning an iOS bug \ud83d\udc1b. \nfastlane precheck\n takes a lot of the guess work out by scanning your app\u2019s details in App Store Connect for avoidable problems. fastlane precheck helps you get your app through app review without rejections so you can ship faster \ud83d\ude80\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nExample\n \u2022\n    \nHow does it work?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\n\n\n\n\n\n\nprecheck Features\n\n\n\n\n\n\n\n\n\n\n\ud83d\udc1b\n\n\n\uf8ff product bug mentions\n\n\n\n\n\n\n\ud83d\ude45\n\n\nSwear word checker\n\n\n\n\n\n\n\ud83e\udd16\n\n\nMentioning other platforms\n\n\n\n\n\n\n\ud83d\ude35\n\n\nURL reachability checker\n\n\n\n\n\n\n\ud83d\udcdd\n\n\nPlaceholder/test words/mentioning future features\n\n\n\n\n\n\n\ud83d\udcc5\n\n\nCopyright date checking\n\n\n\n\n\n\n\ud83d\ude48\n\n\nCustomizable word list checking\n\n\n\n\n\n\n\ud83d\udce2\n\n\nYou can decide if you want to warn about potential problems and continue or have \nfastlane\n show an error and stop after all scans are done\n\n\n\n\n\n\n\n\nUsage\n\n\nRun \nfastlane precheck\n to check the app metadata from App Store Connect\n\n\nfastlane precheck\n\n\n\n\nTo get a list of available options run\n\n\nfastlane action precheck\n\n\n\n\n\n\nExample\n\n\nSince you might want to manually trigger \nprecheck\n but don't want to specify all the parameters every time, you can store your defaults in a so called \nPrecheckfile\n.\n\n\nRun \nfastlane precheck init\n to create a new configuration file. Example:\n\n\n# indicates that your metadata will not be checked by this rule\nnegative_apple_sentiment(level: :skip)\n\n# when triggered, this rule will warn you of a potential problem\ncurse_words(level: :warn)\n\n# show error and prevent any further commands from running after fastlane precheck finishes\nunreachable_urls(level: :error)\n\n# pass in whatever words you want to check for\ncustom_text(data: [\"chrome\", \"webos\"], \n           level: :warn)\n\n\n\n\nUse with \nfastlane\n\n\nprecheck\n is fully integrated with \ndeliver\n another \nfastlane\n tool.\n\n\nUpdate your \nFastfile\n to contain the following code:\n\n\nlane :production do\n  # ...\n\n  # by default deliver will call precheck and warn you of any problems\n  # if you want precheck to halt submitting to app review, you can pass\n  # precheck_default_rule_level: :error\n  deliver(precheck_default_rule_level: :error)\n\n  # ...\nend\n\n# or if you prefer, you can run precheck alone\nlane :check_metadata do\n  precheck\nend\n\n\n\n\n\nHow does it work?\n\n\nprecheck\n will access \nApp Store Connect\n to download your app's metadata. It uses \nspaceship\n to communicate with Apple's web services.\n\n\nWant to improve precheck's rules?\n\n\nPlease submit an issue on GitHub and provide information about your App Store rejection! Make sure you scrub out any personally identifiable information since this will be public.\n\n\n\n\n\n\n\n\n\n\n\ncheck_app_store_metadata\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@taquitos\n\n\n\n\n\n\nReturns\n\n\ntrue if precheck passes, else, false\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncheck_app_store_metadata(\n  negative_apple_sentiment: [level: :skip], # Set to skip to not run the `negative_apple_sentiment` rule\n  curse_words: [level: :warn] # Set to warn to only warn on curse word check failures\n)\n\n\n\n\nprecheck   # alias for \"check_app_store_metadata\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\ndefault_rule_level\n\n\nThe default rule level unless otherwise configured\n\n\n:error\n\n\n\n\n\n\ninclude_in_app_purchases\n\n\nShould check in-app purchases?\n\n\ntrue\n\n\n\n\n\n\nuse_live\n\n\nShould force check live app?\n\n\nfalse\n\n\n\n\n\n\nnegative_apple_sentiment\n\n\nmentioning \uf8ff in a way that could be considered negative\n\n\n\n\n\n\n\n\nplaceholder_text\n\n\nusing placeholder text (e.g.:\"lorem ipsum\", \"text here\", etc...)\n\n\n\n\n\n\n\n\nother_platforms\n\n\nmentioning other platforms, like Android or Blackberry\n\n\n\n\n\n\n\n\nfuture_functionality\n\n\nmentioning features or content that is not currently available in your app\n\n\n\n\n\n\n\n\ntest_words\n\n\nusing text indicating this release is a test\n\n\n\n\n\n\n\n\ncurse_words\n\n\nincluding words that might be considered objectionable\n\n\n\n\n\n\n\n\nfree_stuff_in_iap\n\n\nusing text indicating that your IAP is free\n\n\n\n\n\n\n\n\ncustom_text\n\n\nmentioning any of the user-specified words passed to custom_text(data: [words])\n\n\n\n\n\n\n\n\ncopyright_date\n\n\nusing a copyright date that is any different from this current year, or missing a date\n\n\n\n\n\n\n\n\nunreachable_urls\n\n\nunreachable URLs in app metadata\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action check_app_store_metadata\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run check_app_store_metadata\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run check_app_store_metadata parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "check_app_store_metadata"
        },
        {
            "location": "/actions/check_app_store_metadata/#check_app_store_metadata",
            "text": "Check your app's metadata before you submit your app to review (via  precheck )",
            "title": "check_app_store_metadata"
        },
        {
            "location": "/actions/check_app_store_metadata/#precheck",
            "text": "",
            "title": "Precheck"
        },
        {
            "location": "/actions/check_app_store_metadata/#check-your-app-using-a-community-driven-set-of-app-store-review-rules-to-avoid-being-rejected",
            "text": "Apple rejects builds for many avoidable metadata issues like including swear words \ud83d\ude2e, other companies\u2019 trademarks, or even mentioning an iOS bug \ud83d\udc1b.  fastlane precheck  takes a lot of the guess work out by scanning your app\u2019s details in App Store Connect for avoidable problems. fastlane precheck helps you get your app through app review without rejections so you can ship faster \ud83d\ude80   \n     Features  \u2022\n     Usage  \u2022\n     Example  \u2022\n     How does it work?",
            "title": "Check your app using a community driven set of App Store review rules to avoid being rejected"
        },
        {
            "location": "/actions/check_app_store_metadata/#features",
            "text": "precheck Features      \ud83d\udc1b  \uf8ff product bug mentions    \ud83d\ude45  Swear word checker    \ud83e\udd16  Mentioning other platforms    \ud83d\ude35  URL reachability checker    \ud83d\udcdd  Placeholder/test words/mentioning future features    \ud83d\udcc5  Copyright date checking    \ud83d\ude48  Customizable word list checking    \ud83d\udce2  You can decide if you want to warn about potential problems and continue or have  fastlane  show an error and stop after all scans are done",
            "title": "Features"
        },
        {
            "location": "/actions/check_app_store_metadata/#usage",
            "text": "Run  fastlane precheck  to check the app metadata from App Store Connect  fastlane precheck  To get a list of available options run  fastlane action precheck",
            "title": "Usage"
        },
        {
            "location": "/actions/check_app_store_metadata/#example",
            "text": "Since you might want to manually trigger  precheck  but don't want to specify all the parameters every time, you can store your defaults in a so called  Precheckfile .  Run  fastlane precheck init  to create a new configuration file. Example:  # indicates that your metadata will not be checked by this rule\nnegative_apple_sentiment(level: :skip)\n\n# when triggered, this rule will warn you of a potential problem\ncurse_words(level: :warn)\n\n# show error and prevent any further commands from running after fastlane precheck finishes\nunreachable_urls(level: :error)\n\n# pass in whatever words you want to check for\ncustom_text(data: [\"chrome\", \"webos\"], \n           level: :warn)",
            "title": "Example"
        },
        {
            "location": "/actions/check_app_store_metadata/#use-with-fastlane",
            "text": "precheck  is fully integrated with  deliver  another  fastlane  tool.  Update your  Fastfile  to contain the following code:  lane :production do\n  # ...\n\n  # by default deliver will call precheck and warn you of any problems\n  # if you want precheck to halt submitting to app review, you can pass\n  # precheck_default_rule_level: :error\n  deliver(precheck_default_rule_level: :error)\n\n  # ...\nend\n\n# or if you prefer, you can run precheck alone\nlane :check_metadata do\n  precheck\nend",
            "title": "Use with fastlane"
        },
        {
            "location": "/actions/check_app_store_metadata/#how-does-it-work",
            "text": "precheck  will access  App Store Connect  to download your app's metadata. It uses  spaceship  to communicate with Apple's web services.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/check_app_store_metadata/#want-to-improve-prechecks-rules",
            "text": "Please submit an issue on GitHub and provide information about your App Store rejection! Make sure you scrub out any personally identifiable information since this will be public.      check_app_store_metadata       Supported platforms  ios    Author  @taquitos    Returns  true if precheck passes, else, false",
            "title": "Want to improve precheck's rules?"
        },
        {
            "location": "/actions/check_app_store_metadata/#2-examples",
            "text": "check_app_store_metadata(\n  negative_apple_sentiment: [level: :skip], # Set to skip to not run the `negative_apple_sentiment` rule\n  curse_words: [level: :warn] # Set to warn to only warn on curse word check failures\n)  precheck   # alias for \"check_app_store_metadata\"",
            "title": "2 Examples"
        },
        {
            "location": "/actions/check_app_store_metadata/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    platform  The platform to use (optional)  ios    default_rule_level  The default rule level unless otherwise configured  :error    include_in_app_purchases  Should check in-app purchases?  true    use_live  Should force check live app?  false    negative_apple_sentiment  mentioning \uf8ff in a way that could be considered negative     placeholder_text  using placeholder text (e.g.:\"lorem ipsum\", \"text here\", etc...)     other_platforms  mentioning other platforms, like Android or Blackberry     future_functionality  mentioning features or content that is not currently available in your app     test_words  using text indicating this release is a test     curse_words  including words that might be considered objectionable     free_stuff_in_iap  using text indicating that your IAP is free     custom_text  mentioning any of the user-specified words passed to custom_text(data: [words])     copyright_date  using a copyright date that is any different from this current year, or missing a date     unreachable_urls  unreachable URLs in app metadata      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/check_app_store_metadata/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action check_app_store_metadata",
            "title": "Documentation"
        },
        {
            "location": "/actions/check_app_store_metadata/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run check_app_store_metadata  To pass parameters, make use of the  :  symbol, for example  fastlane run check_app_store_metadata parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/check_app_store_metadata/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/clean_build_artifacts/",
            "text": "clean_build_artifacts\n\n\nDeletes files created as result of running gym, cert, sigh or download_dsyms\n\n\n\n\nThis action deletes the files that get created in your repo as a result of running the \ngym\n and \nsigh\n commands. It doesn't delete the \nfastlane/report.xml\n though, this is probably more suited for the .gitignore.\nUseful if you quickly want to send out a test build by dropping down to the command line and typing something like \nfastlane beta\n, without leaving your repo in a messy state afterwards.\n\n\n\n\n\n\n\n\n\n\nclean_build_artifacts\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n1 Example\n\n\nclean_build_artifacts\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nexclude_pattern\n\n\nExclude all files from clearing that match the given Regex pattern: e.g. '.*.mobileprovision'\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action clean_build_artifacts\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run clean_build_artifacts\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run clean_build_artifacts parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "clean_build_artifacts"
        },
        {
            "location": "/actions/clean_build_artifacts/#clean_build_artifacts",
            "text": "Deletes files created as result of running gym, cert, sigh or download_dsyms   This action deletes the files that get created in your repo as a result of running the  gym  and  sigh  commands. It doesn't delete the  fastlane/report.xml  though, this is probably more suited for the .gitignore. Useful if you quickly want to send out a test build by dropping down to the command line and typing something like  fastlane beta , without leaving your repo in a messy state afterwards.      clean_build_artifacts       Supported platforms  ios, mac    Author  @lmirosevic",
            "title": "clean_build_artifacts"
        },
        {
            "location": "/actions/clean_build_artifacts/#1-example",
            "text": "clean_build_artifacts",
            "title": "1 Example"
        },
        {
            "location": "/actions/clean_build_artifacts/#parameters",
            "text": "Key  Description  Default      exclude_pattern  Exclude all files from clearing that match the given Regex pattern: e.g. '.*.mobileprovision'      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/clean_build_artifacts/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action clean_build_artifacts",
            "title": "Documentation"
        },
        {
            "location": "/actions/clean_build_artifacts/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run clean_build_artifacts  To pass parameters, make use of the  :  symbol, for example  fastlane run clean_build_artifacts parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/clean_build_artifacts/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/clean_cocoapods_cache/",
            "text": "clean_cocoapods_cache\n\n\nRemove the cache for pods\n\n\n\n\n\n\n\n\nclean_cocoapods_cache\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@alexmx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nclean_cocoapods_cache\n\n\n\n\nclean_cocoapods_cache(name: \"CACHED_POD\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nPod name to be removed from cache\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action clean_cocoapods_cache\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run clean_cocoapods_cache\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run clean_cocoapods_cache parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "clean_cocoapods_cache"
        },
        {
            "location": "/actions/clean_cocoapods_cache/#clean_cocoapods_cache",
            "text": "Remove the cache for pods     clean_cocoapods_cache       Supported platforms  ios, mac    Author  @alexmx",
            "title": "clean_cocoapods_cache"
        },
        {
            "location": "/actions/clean_cocoapods_cache/#2-examples",
            "text": "clean_cocoapods_cache  clean_cocoapods_cache(name: \"CACHED_POD\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/clean_cocoapods_cache/#parameters",
            "text": "Key  Description  Default      name  Pod name to be removed from cache      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/clean_cocoapods_cache/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action clean_cocoapods_cache",
            "title": "Documentation"
        },
        {
            "location": "/actions/clean_cocoapods_cache/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run clean_cocoapods_cache  To pass parameters, make use of the  :  symbol, for example  fastlane run clean_cocoapods_cache parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/clean_cocoapods_cache/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/clear_derived_data/",
            "text": "clear_derived_data\n\n\nDeletes the Xcode Derived Data\n\n\n\n\nDeletes the Derived Data from path set on Xcode or a supplied path\n\n\n\n\n\n\n\n\n\n\nclear_derived_data\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nclear_derived_data\n\n\n\n\nclear_derived_data(derived_data_path: \"/custom/\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nCustom path for derivedData\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action clear_derived_data\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run clear_derived_data\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run clear_derived_data parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "clear_derived_data"
        },
        {
            "location": "/actions/clear_derived_data/#clear_derived_data",
            "text": "Deletes the Xcode Derived Data   Deletes the Derived Data from path set on Xcode or a supplied path      clear_derived_data       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "clear_derived_data"
        },
        {
            "location": "/actions/clear_derived_data/#2-examples",
            "text": "clear_derived_data  clear_derived_data(derived_data_path: \"/custom/\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/clear_derived_data/#parameters",
            "text": "Key  Description  Default      derived_data_path  Custom path for derivedData  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/clear_derived_data/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action clear_derived_data",
            "title": "Documentation"
        },
        {
            "location": "/actions/clear_derived_data/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run clear_derived_data  To pass parameters, make use of the  :  symbol, for example  fastlane run clear_derived_data parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/clear_derived_data/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/clipboard/",
            "text": "clipboard\n\n\nCopies a given string into the clipboard. Works only on macOS\n\n\n\n\n\n\n\n\nclipboard\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @joshdholtz\n\n\n\n\n\n\n\n\n2 Examples\n\n\nclipboard(value: \"https://docs.fastlane.tools/\")\n\n\n\n\nclipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] || \"\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nvalue\n\n\nThe string that should be copied into the clipboard\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action clipboard\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run clipboard\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run clipboard parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "clipboard"
        },
        {
            "location": "/actions/clipboard/#clipboard",
            "text": "Copies a given string into the clipboard. Works only on macOS     clipboard       Supported platforms  ios, android, mac    Author  @KrauseFx, @joshdholtz",
            "title": "clipboard"
        },
        {
            "location": "/actions/clipboard/#2-examples",
            "text": "clipboard(value: \"https://docs.fastlane.tools/\")  clipboard(value: lane_context[SharedValues::HOCKEY_DOWNLOAD_LINK] || \"\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/clipboard/#parameters",
            "text": "Key  Description  Default      value  The string that should be copied into the clipboard      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/clipboard/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action clipboard",
            "title": "Documentation"
        },
        {
            "location": "/actions/clipboard/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run clipboard  To pass parameters, make use of the  :  symbol, for example  fastlane run clipboard parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/clipboard/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/cloc/",
            "text": "cloc\n\n\nGenerates a Code Count that can be read by Jenkins (xml format)\n\n\n\n\nThis action will run cloc to generate a SLOC report that the Jenkins SLOCCount plugin can read.\nSee \nhttps://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin\n and \nhttps://github.com/AlDanial/cloc\n for more information.\n\n\n\n\n\n\n\n\n\n\ncloc\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@intere\n\n\n\n\n\n\n\n\n1 Example\n\n\ncloc(\n   exclude_dir: \"ThirdParty,Resources\",\n   output_directory: \"reports\",\n   source_directory: \"MyCoolApp\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbinary_path\n\n\nWhere the cloc binary lives on your system (full path including 'cloc')\n\n\n/usr/local/bin/cloc\n\n\n\n\n\n\nexclude_dir\n\n\nComma separated list of directories to exclude\n\n\n\n\n\n\n\n\noutput_directory\n\n\nWhere to put the generated report file\n\n\nbuild\n\n\n\n\n\n\nsource_directory\n\n\nWhere to look for the source code (relative to the project root folder)\n\n\n''\n\n\n\n\n\n\nxml\n\n\nShould we generate an XML File (if false, it will generate a plain text file)?\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action cloc\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run cloc\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run cloc parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "cloc"
        },
        {
            "location": "/actions/cloc/#cloc",
            "text": "Generates a Code Count that can be read by Jenkins (xml format)   This action will run cloc to generate a SLOC report that the Jenkins SLOCCount plugin can read. See  https://wiki.jenkins-ci.org/display/JENKINS/SLOCCount+Plugin  and  https://github.com/AlDanial/cloc  for more information.      cloc       Supported platforms  ios, mac    Author  @intere",
            "title": "cloc"
        },
        {
            "location": "/actions/cloc/#1-example",
            "text": "cloc(\n   exclude_dir: \"ThirdParty,Resources\",\n   output_directory: \"reports\",\n   source_directory: \"MyCoolApp\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/cloc/#parameters",
            "text": "Key  Description  Default      binary_path  Where the cloc binary lives on your system (full path including 'cloc')  /usr/local/bin/cloc    exclude_dir  Comma separated list of directories to exclude     output_directory  Where to put the generated report file  build    source_directory  Where to look for the source code (relative to the project root folder)  ''    xml  Should we generate an XML File (if false, it will generate a plain text file)?  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/cloc/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action cloc",
            "title": "Documentation"
        },
        {
            "location": "/actions/cloc/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run cloc  To pass parameters, make use of the  :  symbol, for example  fastlane run cloc parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/cloc/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/cocoapods/",
            "text": "cocoapods\n\n\nRuns \npod install\n for the project\n\n\n\n\nIf you use \nCocoaPods\n you can use the \ncocoapods\n integration to run \npod install\n before building your app.\n\n\n\n\n\n\n\n\n\n\ncocoapods\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @tadpol, @birmacher, @Liquidsoul\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncocoapods\n\n\n\n\ncocoapods(\n  clean_install: true,\n  podfile: \"./CustomPodfile\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrepo_update\n\n\nAdd \n--repo-update\n flag to \npod install\n command\n\n\nfalse\n\n\n\n\n\n\nclean_install\n\n\nExecute a full pod installation ignoring the content of the project cache\n\n\nfalse\n\n\n\n\n\n\nsilent\n\n\nExecute command without logging output\n\n\nfalse\n\n\n\n\n\n\nverbose\n\n\nShow more debugging information\n\n\nfalse\n\n\n\n\n\n\nansi\n\n\nShow output with ANSI codes\n\n\ntrue\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\ntrue\n\n\n\n\n\n\npodfile\n\n\nExplicitly specify the path to the Cocoapods' Podfile. You can either set it to the Podfile's path or to the folder containing the Podfile file\n\n\n\n\n\n\n\n\nerror_callback\n\n\nA callback invoked with the command output if there is a non-zero exit status\n\n\n\n\n\n\n\n\ntry_repo_update_on_error\n\n\nRetry with --repo-update if action was finished with error\n\n\nfalse\n\n\n\n\n\n\ndeployment\n\n\nDisallow any changes to the Podfile or the Podfile.lock during installation\n\n\nfalse\n\n\n\n\n\n\nclean\n\n\nDEPRECATED!\n (Option renamed as clean_install) Remove SCM directories\n\n\ntrue\n\n\n\n\n\n\nintegrate\n\n\nDEPRECATED!\n (Option removed from cocoapods) Integrate the Pods libraries into the Xcode project(s)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action cocoapods\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run cocoapods\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run cocoapods parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "cocoapods"
        },
        {
            "location": "/actions/cocoapods/#cocoapods",
            "text": "Runs  pod install  for the project   If you use  CocoaPods  you can use the  cocoapods  integration to run  pod install  before building your app.      cocoapods       Supported platforms  ios, mac    Author  @KrauseFx, @tadpol, @birmacher, @Liquidsoul",
            "title": "cocoapods"
        },
        {
            "location": "/actions/cocoapods/#2-examples",
            "text": "cocoapods  cocoapods(\n  clean_install: true,\n  podfile: \"./CustomPodfile\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/cocoapods/#parameters",
            "text": "Key  Description  Default      repo_update  Add  --repo-update  flag to  pod install  command  false    clean_install  Execute a full pod installation ignoring the content of the project cache  false    silent  Execute command without logging output  false    verbose  Show more debugging information  false    ansi  Show output with ANSI codes  true    use_bundle_exec  Use bundle exec when there is a Gemfile presented  true    podfile  Explicitly specify the path to the Cocoapods' Podfile. You can either set it to the Podfile's path or to the folder containing the Podfile file     error_callback  A callback invoked with the command output if there is a non-zero exit status     try_repo_update_on_error  Retry with --repo-update if action was finished with error  false    deployment  Disallow any changes to the Podfile or the Podfile.lock during installation  false    clean  DEPRECATED!  (Option renamed as clean_install) Remove SCM directories  true    integrate  DEPRECATED!  (Option removed from cocoapods) Integrate the Pods libraries into the Xcode project(s)  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/cocoapods/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action cocoapods",
            "title": "Documentation"
        },
        {
            "location": "/actions/cocoapods/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run cocoapods  To pass parameters, make use of the  :  symbol, for example  fastlane run cocoapods parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/cocoapods/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/commit_github_file/",
            "text": "commit_github_file\n\n\nThis will commit a file directly on GitHub via the API\n\n\n\n\nCommits a file directly to GitHub. You must provide your GitHub Personal token (get one from \nhttps://github.com/settings/tokens/new\n), the repository name and the relative file path from the root git project.\nOut parameters provide the commit sha created, which can be used for later usage for examples such as releases, the direct download link and the full response JSON.\nDocumentation: \nhttps://developer.github.com/v3/repos/contents/#create-a-file\n.\n\n\n\n\n\n\n\n\n\n\ncommit_github_file\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@tommeier\n\n\n\n\n\n\nReturns\n\n\nA hash containing all relevant information for this commit\nAccess things like 'html_url', 'sha', 'message'\n\n\n\n\n\n\n\n\n1 Example\n\n\nresponse = commit_github_file(\n  repository_name: \"fastlane/fastlane\",\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  message: \"Add my new file\",\n  branch: \"master\",\n  path: \"assets/my_new_file.xcarchive\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrepository_name\n\n\nThe path to your repo, e.g. 'fastlane/fastlane'\n\n\n\n\n\n\n\n\nserver_url\n\n\nThe server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n\n\nhttps://api.github.com\n\n\n\n\n\n\napi_token\n\n\nPersonal API Token for GitHub - generate one at https://github.com/settings/tokens\n\n\n*\n\n\n\n\n\n\nbranch\n\n\nThe branch that the file should be committed on (default: master)\n\n\nmaster\n\n\n\n\n\n\npath\n\n\nThe relative path to your file from project root e.g. assets/my_app.xcarchive\n\n\n\n\n\n\n\n\nmessage\n\n\nThe commit message. Defaults to the file name\n\n\n*\n\n\n\n\n\n\nsecure\n\n\nOptionally disable secure requests (ssl_verify_peer)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncommit_github_file\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::COMMIT_GITHUB_FILE_HTML_LINK\n\n\nLink to your committed file\n\n\n\n\n\n\nSharedValues::COMMIT_GITHUB_FILE_SHA\n\n\nCommit SHA generated\n\n\n\n\n\n\nSharedValues::COMMIT_GITHUB_FILE_JSON\n\n\nThe whole commit JSON object response\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action commit_github_file\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run commit_github_file\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run commit_github_file parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "commit_github_file"
        },
        {
            "location": "/actions/commit_github_file/#commit_github_file",
            "text": "This will commit a file directly on GitHub via the API   Commits a file directly to GitHub. You must provide your GitHub Personal token (get one from  https://github.com/settings/tokens/new ), the repository name and the relative file path from the root git project. Out parameters provide the commit sha created, which can be used for later usage for examples such as releases, the direct download link and the full response JSON. Documentation:  https://developer.github.com/v3/repos/contents/#create-a-file .      commit_github_file       Supported platforms  ios, android, mac    Author  @tommeier    Returns  A hash containing all relevant information for this commit Access things like 'html_url', 'sha', 'message'",
            "title": "commit_github_file"
        },
        {
            "location": "/actions/commit_github_file/#1-example",
            "text": "response = commit_github_file(\n  repository_name: \"fastlane/fastlane\",\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  message: \"Add my new file\",\n  branch: \"master\",\n  path: \"assets/my_new_file.xcarchive\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/commit_github_file/#parameters",
            "text": "Key  Description  Default      repository_name  The path to your repo, e.g. 'fastlane/fastlane'     server_url  The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')  https://api.github.com    api_token  Personal API Token for GitHub - generate one at https://github.com/settings/tokens  *    branch  The branch that the file should be committed on (default: master)  master    path  The relative path to your file from project root e.g. assets/my_app.xcarchive     message  The commit message. Defaults to the file name  *    secure  Optionally disable secure requests (ssl_verify_peer)  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/commit_github_file/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  commit_github_file  action generates the following Lane Variables:     SharedValue  Description      SharedValues::COMMIT_GITHUB_FILE_HTML_LINK  Link to your committed file    SharedValues::COMMIT_GITHUB_FILE_SHA  Commit SHA generated    SharedValues::COMMIT_GITHUB_FILE_JSON  The whole commit JSON object response     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/commit_github_file/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action commit_github_file",
            "title": "Documentation"
        },
        {
            "location": "/actions/commit_github_file/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run commit_github_file  To pass parameters, make use of the  :  symbol, for example  fastlane run commit_github_file parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/commit_github_file/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/commit_version_bump/",
            "text": "commit_version_bump\n\n\nCreates a 'Version Bump' commit. Run after \nincrement_build_number\n\n\n\n\nThis action will create a 'Version Bump' commit in your repo. Useful in conjunction with \nincrement_build_number\n.\nIt checks the repo to make sure that only the relevant files have changed. These are the files that \nincrement_build_number\n (\nagvtool\n) touches:\n\n\n\n\nAll \n.plist\n files\n\n\nThe \n.xcodeproj/project.pbxproj\n file\n\n\n\n\nThen commits those files to the repo.\nCustomize the message with the \n:message\n option. It defaults to 'Version Bump'.\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the \nipa\n and or \nsigh\n actions, then you can use the \nclean_build_artifacts\n action to clean those temporary files up before running this action.\n\n\n\n\n\n\n\n\n\n\ncommit_version_bump\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n8 Examples\n\n\ncommit_version_bump\n\n\n\n\ncommit_version_bump(\n  message: \"Version Bump\",# create a commit with a custom message\n  xcodeproj: \"./path/to/MyProject.xcodeproj\"  # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n\n\n\n\ncommit_version_bump(\n  settings: true # Include Settings.bundle/Root.plist\n)\n\n\n\n\ncommit_version_bump(\n  settings: \"About.plist\" # Include Settings.bundle/About.plist\n)\n\n\n\n\ncommit_version_bump(\n  settings: %w[About.plist Root.plist] # Include more than one plist from Settings.bundle\n)\n\n\n\n\ncommit_version_bump(\n  include: %w[package.json custom.cfg] # include other updated files as part of the version bump\n)\n\n\n\n\ncommit_version_bump(\n  ignore: /OtherProject/ # ignore files matching a regular expression\n)\n\n\n\n\ncommit_version_bump(\n  no_verify: true # optional, default: false\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe commit message when committing the version bump\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nThe path to your project file (Not the workspace). If you have only one, this is optional\n\n\n\n\n\n\n\n\nforce\n\n\nForces the commit, even if other files than the ones containing the version number have been modified\n\n\nfalse\n\n\n\n\n\n\nsettings\n\n\nInclude Settings.bundle/Root.plist with version bump\n\n\nfalse\n\n\n\n\n\n\nignore\n\n\nA regular expression used to filter matched plist files to be modified\n\n\n\n\n\n\n\n\ninclude\n\n\nA list of extra files to be included in the version bump (string array or comma-separated string)\n\n\n[]\n\n\n\n\n\n\nno_verify\n\n\nWhether or not to use --no-verify\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncommit_version_bump\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::MODIFIED_FILES\n\n\nThe list of paths of modified files\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action commit_version_bump\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run commit_version_bump\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run commit_version_bump parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "commit_version_bump"
        },
        {
            "location": "/actions/commit_version_bump/#commit_version_bump",
            "text": "Creates a 'Version Bump' commit. Run after  increment_build_number   This action will create a 'Version Bump' commit in your repo. Useful in conjunction with  increment_build_number . It checks the repo to make sure that only the relevant files have changed. These are the files that  increment_build_number  ( agvtool ) touches:   All  .plist  files  The  .xcodeproj/project.pbxproj  file   Then commits those files to the repo. Customize the message with the  :message  option. It defaults to 'Version Bump'. If you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the  ipa  and or  sigh  actions, then you can use the  clean_build_artifacts  action to clean those temporary files up before running this action.      commit_version_bump       Supported platforms  ios, mac    Author  @lmirosevic",
            "title": "commit_version_bump"
        },
        {
            "location": "/actions/commit_version_bump/#8-examples",
            "text": "commit_version_bump  commit_version_bump(\n  message: \"Version Bump\",# create a commit with a custom message\n  xcodeproj: \"./path/to/MyProject.xcodeproj\"  # optional, if you have multiple Xcode project files, you must specify your main project here\n)  commit_version_bump(\n  settings: true # Include Settings.bundle/Root.plist\n)  commit_version_bump(\n  settings: \"About.plist\" # Include Settings.bundle/About.plist\n)  commit_version_bump(\n  settings: %w[About.plist Root.plist] # Include more than one plist from Settings.bundle\n)  commit_version_bump(\n  include: %w[package.json custom.cfg] # include other updated files as part of the version bump\n)  commit_version_bump(\n  ignore: /OtherProject/ # ignore files matching a regular expression\n)  commit_version_bump(\n  no_verify: true # optional, default: false\n)",
            "title": "8 Examples"
        },
        {
            "location": "/actions/commit_version_bump/#parameters",
            "text": "Key  Description  Default      message  The commit message when committing the version bump     xcodeproj  The path to your project file (Not the workspace). If you have only one, this is optional     force  Forces the commit, even if other files than the ones containing the version number have been modified  false    settings  Include Settings.bundle/Root.plist with version bump  false    ignore  A regular expression used to filter matched plist files to be modified     include  A list of extra files to be included in the version bump (string array or comma-separated string)  []    no_verify  Whether or not to use --no-verify  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/commit_version_bump/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  commit_version_bump  action generates the following Lane Variables:     SharedValue  Description      SharedValues::MODIFIED_FILES  The list of paths of modified files     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/commit_version_bump/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action commit_version_bump",
            "title": "Documentation"
        },
        {
            "location": "/actions/commit_version_bump/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run commit_version_bump  To pass parameters, make use of the  :  symbol, for example  fastlane run commit_version_bump parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/commit_version_bump/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/copy_artifacts/",
            "text": "copy_artifacts\n\n\nCopy and save your build artifacts (useful when you use reset_git_repo)\n\n\n\n\nThis action copies artifacts to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your \n.ipa\ns, \n.dSYM.zip\ns, \n.mobileprovision\ns, \n.cert\ns.\nMake sure your \n:target_path\n is ignored from git, and if you use \nreset_git_repo\n, make sure the artifacts are added to the exclude list.\n\n\n\n\n\n\n\n\n\n\ncopy_artifacts\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncopy_artifacts(\n  target_path: \"artifacts\",\n  artifacts: [\"*.cer\", \"*.mobileprovision\", \"*.ipa\", \"*.dSYM.zip\", \"path/to/file.txt\", \"another/path/*.extension\"]\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude: \"artifacts\"\n)\n\n\n\n\n# Copy the .ipa created by _gym_ if it was successfully created\nartifacts = []\nartifacts << lane_context[SharedValues::IPA_OUTPUT_PATH] if lane_context[SharedValues::IPA_OUTPUT_PATH]\ncopy_artifacts(\n   artifacts: artifacts\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nkeep_original\n\n\nSet this to false if you want move, rather than copy, the found artifacts\n\n\ntrue\n\n\n\n\n\n\ntarget_path\n\n\nThe directory in which you want your artifacts placed\n\n\nartifacts\n\n\n\n\n\n\nartifacts\n\n\nAn array of file patterns of the files/folders you want to preserve\n\n\n[]\n\n\n\n\n\n\nfail_on_missing\n\n\nFail when a source file isn't found\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action copy_artifacts\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run copy_artifacts\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run copy_artifacts parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "copy_artifacts"
        },
        {
            "location": "/actions/copy_artifacts/#copy_artifacts",
            "text": "Copy and save your build artifacts (useful when you use reset_git_repo)   This action copies artifacts to a target directory. It's useful if you have a CI that will pick up these artifacts and attach them to the build. Useful e.g. for storing your  .ipa s,  .dSYM.zip s,  .mobileprovision s,  .cert s. Make sure your  :target_path  is ignored from git, and if you use  reset_git_repo , make sure the artifacts are added to the exclude list.      copy_artifacts       Supported platforms  ios, android, mac    Author  @lmirosevic",
            "title": "copy_artifacts"
        },
        {
            "location": "/actions/copy_artifacts/#2-examples",
            "text": "copy_artifacts(\n  target_path: \"artifacts\",\n  artifacts: [\"*.cer\", \"*.mobileprovision\", \"*.ipa\", \"*.dSYM.zip\", \"path/to/file.txt\", \"another/path/*.extension\"]\n)\n\n# Reset the git repo to a clean state, but leave our artifacts in place\nreset_git_repo(\n  exclude: \"artifacts\"\n)  # Copy the .ipa created by _gym_ if it was successfully created\nartifacts = []\nartifacts << lane_context[SharedValues::IPA_OUTPUT_PATH] if lane_context[SharedValues::IPA_OUTPUT_PATH]\ncopy_artifacts(\n   artifacts: artifacts\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/copy_artifacts/#parameters",
            "text": "Key  Description  Default      keep_original  Set this to false if you want move, rather than copy, the found artifacts  true    target_path  The directory in which you want your artifacts placed  artifacts    artifacts  An array of file patterns of the files/folders you want to preserve  []    fail_on_missing  Fail when a source file isn't found  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/copy_artifacts/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action copy_artifacts",
            "title": "Documentation"
        },
        {
            "location": "/actions/copy_artifacts/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run copy_artifacts  To pass parameters, make use of the  :  symbol, for example  fastlane run copy_artifacts parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/copy_artifacts/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/crashlytics/",
            "text": "crashlytics\n\n\nRefer to \nFirebase App Distribution\n\n\n\n\nCrashlytics Beta has been deprecated and replaced with Firebase App Distribution.\nBeta will continue working until May 4, 2020.\nCheck out the \nFirebase App Distribution docs\n to get started.\n\n\nAdditionally, you can specify \nnotes\n, \nemails\n, \ngroups\n and \nnotifications\n.\nDistributing to Groups: When using the \ngroups\n parameter, it's important to use the group \nalias\n names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog by clicking the 'Manage Groups' button.\nThis action uses the \nsubmit\n binary provided by the Crashlytics framework. If the binary is not found in its usual path, you'll need to specify the path manually by using the \ncrashlytics_path\n option.\n\n\n\n\n\n\n\n\n\n\ncrashlytics\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @pedrogimenez\n\n\n\n\n\n\n\n\n3 Examples\n\n\ncrashlytics\n\n\n\n\n# If you installed Crashlytics via CocoaPods\ncrashlytics(\n  crashlytics_path: \"./Pods/Crashlytics/submit\", # path to your Crashlytics submit binary.\n  api_token: \"...\",\n  build_secret: \"...\",\n  ipa_path: \"./app.ipa\"\n)\n\n\n\n\n# If you installed Crashlytics via Carthage for iOS platform\ncrashlytics(\n  crashlytics_path: \"./Carthage/Build/iOS/Crashlytics.framework/submit\", # path to your Crashlytics submit binary.\n  api_token: \"...\",\n  build_secret: \"...\",\n  ipa_path: \"./app.ipa\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nipa_path\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\napk_path\n\n\nPath to your APK file\n\n\n*\n\n\n\n\n\n\ncrashlytics_path\n\n\nPath to the submit binary in the Crashlytics bundle (iOS) or \ncrashlytics-devtools.jar\n file (Android)\n\n\n\n\n\n\n\n\napi_token\n\n\nCrashlytics API Key\n\n\n\n\n\n\n\n\nbuild_secret\n\n\nCrashlytics Build Secret\n\n\n\n\n\n\n\n\nnotes_path\n\n\nPath to the release notes\n\n\n\n\n\n\n\n\nnotes\n\n\nThe release notes as string - uses :notes_path under the hood\n\n\n\n\n\n\n\n\ngroups\n\n\nThe groups used for distribution, separated by commas\n\n\n\n\n\n\n\n\nemails\n\n\nPass email addresses of testers, separated by commas\n\n\n\n\n\n\n\n\nnotifications\n\n\nCrashlytics notification option (true/false)\n\n\ntrue\n\n\n\n\n\n\ndebug\n\n\nCrashlytics debug option (true/false)\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action crashlytics\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run crashlytics\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run crashlytics parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "crashlytics"
        },
        {
            "location": "/actions/crashlytics/#crashlytics",
            "text": "Refer to  Firebase App Distribution   Crashlytics Beta has been deprecated and replaced with Firebase App Distribution. Beta will continue working until May 4, 2020. Check out the  Firebase App Distribution docs  to get started.  Additionally, you can specify  notes ,  emails ,  groups  and  notifications . Distributing to Groups: When using the  groups  parameter, it's important to use the group  alias  names for each group you'd like to distribute to. A group's alias can be found in the web UI. If you're viewing the Beta page, you can open the groups dialog by clicking the 'Manage Groups' button. This action uses the  submit  binary provided by the Crashlytics framework. If the binary is not found in its usual path, you'll need to specify the path manually by using the  crashlytics_path  option.      crashlytics       Supported platforms  ios, android, mac    Author  @KrauseFx, @pedrogimenez",
            "title": "crashlytics"
        },
        {
            "location": "/actions/crashlytics/#3-examples",
            "text": "crashlytics  # If you installed Crashlytics via CocoaPods\ncrashlytics(\n  crashlytics_path: \"./Pods/Crashlytics/submit\", # path to your Crashlytics submit binary.\n  api_token: \"...\",\n  build_secret: \"...\",\n  ipa_path: \"./app.ipa\"\n)  # If you installed Crashlytics via Carthage for iOS platform\ncrashlytics(\n  crashlytics_path: \"./Carthage/Build/iOS/Crashlytics.framework/submit\", # path to your Crashlytics submit binary.\n  api_token: \"...\",\n  build_secret: \"...\",\n  ipa_path: \"./app.ipa\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/crashlytics/#parameters",
            "text": "Key  Description  Default      ipa_path  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action  *    apk_path  Path to your APK file  *    crashlytics_path  Path to the submit binary in the Crashlytics bundle (iOS) or  crashlytics-devtools.jar  file (Android)     api_token  Crashlytics API Key     build_secret  Crashlytics Build Secret     notes_path  Path to the release notes     notes  The release notes as string - uses :notes_path under the hood     groups  The groups used for distribution, separated by commas     emails  Pass email addresses of testers, separated by commas     notifications  Crashlytics notification option (true/false)  true    debug  Crashlytics debug option (true/false)  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/crashlytics/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action crashlytics",
            "title": "Documentation"
        },
        {
            "location": "/actions/crashlytics/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run crashlytics  To pass parameters, make use of the  :  symbol, for example  fastlane run crashlytics parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/crashlytics/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/",
            "text": "create_app_on_managed_play_store\n\n\nCreate Managed Google Play Apps\n\n\n\n\nCreate new apps on Managed Google Play.\n\n\n\n\n\n\n\n\n\n\ncreate_app_on_managed_play_store\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@janpio\n\n\n\n\n\n\n\n\n1 Example\n\n\ncreate_app_on_managed_play_store(\n  json_key: 'path/to/you/json/key/file',\n  developer_account_id: 'developer_account_id', # obtained using the `get_managed_play_store_publishing_rights` action (or looking at the Play Console url)\n  app_title: 'Your app title',\n  language: 'en_US', # primary app language in BCP 47 format\n  apk: '/files/app-release.apk'\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\ndeveloper_account_id\n\n\nThe ID of your Google Play Console account. Can be obtained from the URL when you log in (\nhttps://play.google.com/apps/publish/?account=...\n or when you 'Obtain private app publishing rights' (https://developers.google.com/android/work/play/custom-app-api/get-started#retrieve_the_developer_account_id)\n\n\n*\n\n\n\n\n\n\napk\n\n\nPath to the APK file to upload\n\n\n*\n\n\n\n\n\n\napp_title\n\n\nApp Title\n\n\n\n\n\n\n\n\nlanguage\n\n\nDefault app language (e.g. 'en_US')\n\n\nen_US\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action create_app_on_managed_play_store\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run create_app_on_managed_play_store\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run create_app_on_managed_play_store parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "create_app_on_managed_play_store"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/#create_app_on_managed_play_store",
            "text": "Create Managed Google Play Apps   Create new apps on Managed Google Play.      create_app_on_managed_play_store       Supported platforms  android    Author  @janpio",
            "title": "create_app_on_managed_play_store"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/#1-example",
            "text": "create_app_on_managed_play_store(\n  json_key: 'path/to/you/json/key/file',\n  developer_account_id: 'developer_account_id', # obtained using the `get_managed_play_store_publishing_rights` action (or looking at the Play Console url)\n  app_title: 'Your app title',\n  language: 'en_US', # primary app language in BCP 47 format\n  apk: '/files/app-release.apk'\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/#parameters",
            "text": "Key  Description  Default      json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    developer_account_id  The ID of your Google Play Console account. Can be obtained from the URL when you log in ( https://play.google.com/apps/publish/?account=...  or when you 'Obtain private app publishing rights' (https://developers.google.com/android/work/play/custom-app-api/get-started#retrieve_the_developer_account_id)  *    apk  Path to the APK file to upload  *    app_title  App Title     language  Default app language (e.g. 'en_US')  en_US    root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     timeout  Timeout for read, open, and send (in seconds)  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action create_app_on_managed_play_store",
            "title": "Documentation"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run create_app_on_managed_play_store  To pass parameters, make use of the  :  symbol, for example  fastlane run create_app_on_managed_play_store parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/create_app_on_managed_play_store/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/create_app_online/",
            "text": "create_app_online\n\n\nCreates the given application on iTC and the Dev Portal (via \nproduce\n)\n\n\n\n  \n\n\n\n\n\nCreate new iOS apps on App Store Connect and Apple Developer Portal using your command line\n\n\nproduce\n creates new iOS apps on both the Apple Developer Portal and App Store Connect with the minimum required information.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nHow does it work?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nCreate\n new apps on both App Store Connect and the Apple Developer Portal\n\n\nModify\n Application Services on the Apple Developer Portal\n\n\nCreate\n App Groups on the Apple Developer Portal\n\n\nAssociate\n apps with App Groups on the Apple Developer Portal\n\n\nCreate\n iCloud Containers on the Apple Developer Portal\n\n\nAssociate\n apps with iCloud Containers on the Apple Developer Portal\n\n\nCreate\n Merchant Identifiers on the Apple Developer Portal\n\n\nAssociate\n apps with Merchant Identifiers on the Apple Developer Portal\n\n\nSupport for \nmultiple Apple accounts\n, storing your credentials securely in the Keychain\n\n\n\n\nUsage\n\n\nCreating a new application\n\n\nfastlane produce\n\n\n\n\nTo get a list of all available parameters:\n\n\nfastlane produce --help\n\n\n\n\nCommands: (* default)\n  associate_group      Associate with a group, which is created if needed or simply located otherwise\n  associate_merchant   Associate with a merchant for use with Apple Pay. Apple Pay will be enabled for this app\n  create             * Creates a new app on App Store Connect and the Apple Developer Portal\n  disable_services     Disable specific Application Services for a specific app on the Apple Developer Portal\n  enable_services      Enable specific Application Services for a specific app on the Apple Developer Portal\n  group                Ensure that a specific App Group exists\n  cloud_container      Ensure that a specific iCloud Container exists\n  help                 Display global or [command] help documentation\n  merchant             Ensure that a specific Merchant exists\n\nGlobal Options:\n  --verbose\n  -h, --help           Display help documentation\n  -v, --version        Display version information\n\nOptions for create:\n  -u, --username STRING Your Apple ID Username (PRODUCE_USERNAME)\n  -a, --app_identifier STRING App Identifier (Bundle ID, e.g. com.krausefx.app) (PRODUCE_APP_IDENTIFIER)\n  -e, --bundle_identifier_suffix STRING App Identifier Suffix (Ignored if App Identifier does not ends with .*) (PRODUCE_APP_IDENTIFIER_SUFFIX)\n  -q, --app_name STRING App Name (PRODUCE_APP_NAME)\n  -z, --app_version STRING Initial version number (e.g. '1.0') (PRODUCE_VERSION)\n  -y, --sku STRING     SKU Number (e.g. '1234') (PRODUCE_SKU)\n  -j, --platform STRING The platform to use (optional) (PRODUCE_PLATFORM)\n  -m, --language STRING Primary Language (e.g. 'English', 'German') (PRODUCE_LANGUAGE)\n  -c, --company_name STRING The name of your company. Only required if it's the first app you create (PRODUCE_COMPANY_NAME)\n  -i, --skip_itc [VALUE] Skip the creation of the app on App Store Connect (PRODUCE_SKIP_ITC)\n  -d, --skip_devcenter [VALUE] Skip the creation of the app on the Apple Developer Portal (PRODUCE_SKIP_DEVCENTER)\n  -s, --itc_users ARRAY Array of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles (ITC_USERS)\n  -b, --team_id STRING The ID of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_ID)\n  -l, --team_name STRING The name of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_NAME)\n  -k, --itc_team_id [VALUE] The ID of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_ID)\n  -p, --itc_team_name STRING The name of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_NAME)\n\n\n\n\nEnabling / Disabling Application Services\n\n\nIf you want to enable Application Services for an App ID (HomeKit and HealthKit in this example):\n\n\nfastlane produce enable_services --homekit --healthkit\n\n\n\n\nIf you want to disable Application Services for an App ID (iCloud in this case):\n\n\nfastlane produce disable_services --icloud\n\n\n\n\nIf you want to create a new App Group:\n\n\nfastlane produce group -g group.krausefx -n \"Example App Group\"\n\n\n\n\nIf you want to associate an app with an App Group:\n\n\nfastlane produce associate_group -a com.krausefx.app group.krausefx\n\n\n\n\nIf you want to create a new iCloud Container:\n\n\nfastlane produce cloud_container -g iCloud.com.krausefx.app -n \"Example iCloud Container\"\n\n\n\n\nIf you want to associate an app with an iCloud Container:\n\n\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app\n\n\n\n\nIf you want to associate an app with multiple iCloud Containers:\n\n\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app1 iCloud.com.krausefx.app2\n\n\n\n\nParameters\n\n\nGet a list of all available options using\n\n\nfastlane produce enable_services --help\n\n\n\n\n--app-group          Enable App Groups\n--apple-pay          Enable Apple Pay\n--associated-domains Enable Associated Domains\n--data-protection STRING Enable Data Protection, suitable values are \"complete\", \"unlessopen\" and \"untilfirstauth\"\n--game-center        Enable Game Center\n--healthkit          Enable HealthKit\n--homekit            Enable HomeKit\n--hotspot            Enable Hotspot\n--icloud STRING      Enable iCloud, suitable values are \"legacy\" and \"cloudkit\"\n--in-app-purchase    Enable In-App Purchase\n--inter-app-audio    Enable Inter-App-Audio\n--multipath          Enable Multipath\n--network-extension  Enable Network Extensions\n--nfc-tag-reading    Enable NFC Tag Reading\n--personal-vpn       Enable Personal VPN\n--passbook           Enable Passbook (deprecated)\n--push-notification  Enable Push notification (only enables the service, does not configure certificates)\n--sirikit            Enable SiriKit\n--vpn-conf           Enable VPN Configuration (deprecated)\n--wallet             Enable Wallet\n--wireless-conf      Enable Wireless Accessory Configuration\n\n\n\n\nfastlane produce disable_services --help\n\n\n\n\n--app-group          Disable App Groups\n--apple-pay          Disable Apple Pay\n--associated-domains Disable Associated Domains\n--data-protection    Disable Data Protection\n--game-center        Disable Game Center\n--healthkit          Disable HealthKit\n--homekit            Disable HomeKit\n--hotspot            Disable Hotspot\n--icloud             Disable iCloud\n--in-app-purchase    Disable In-App Purchase\n--inter-app-audio    Disable Inter-App-Audio\n--multipath          Disable Multipath\n--network-extension  Disable Network Extensions\n--nfc-tag-reading    Disable NFC Tag Reading\n--personal-vpn       Disable Personal VPN\n--passbook           Disable Passbook (deprecated)\n--push-notification  Disable Push notifications\n--sirikit            Disable SiriKit\n--vpn-conf           Disable VPN Configuration (deprecated)\n--wallet             Disable Wallet\n--wireless-conf      Disable Wireless Accessory Configuration\n\n\n\n\nCreating Apple Pay merchants and associating them with an App ID\n\n\nIf you want to create a new Apple Pay Merchant Identifier:\n\n\nfastlane produce merchant -o merchant.com.example.production -r \"Example Merchant Production\"\n\n\n\n\nUse \n--help\n for more information about all available parameters\n\n\nfastlane produce merchant --help\n\n\n\n\nIf you want to associate an app with a Merchant Identifier:\n\n\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production\n\n\n\n\nIf you want to associate an app with multiple Merchant Identifiers:\n\n\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production merchant.com.example.sandbox\n\n\n\n\nUse --help for more information about all available parameters\n\n\nfastlane produce associate_merchant --help\n\n\n\n\nEnvironment Variables\n\n\nAll available values can also be passed using environment variables, run \nfastlane produce --help\n to get a list of all available parameters.\n\n\nfastlane\n Integration\n\n\nYour \nFastfile\n should look like this\n\n\nlane :release do\n  produce(\n    username: 'felix@krausefx.com',\n    app_identifier: 'com.krausefx.app',\n    app_name: 'MyApp',\n    language: 'English',\n    app_version: '1.0',\n    sku: '123',\n    team_name: 'SunApps GmbH', # only necessary when in multiple teams\n\n    # Optional\n    # App services can be enabled during app creation\n    enable_services: {\n      access_wifi: \"on\",             # Valid values: \"on\", \"off\"\n      app_group: \"on\",               # Valid values: \"on\", \"off\"\n      apple_pay: \"on\",               # Valid values: \"on\", \"off\"\n      associated_domains: \"on\",      # Valid values: \"on\", \"off\"\n      auto_fill_credential: \"on\",    # Valid values: \"on\", \"off\"\n      data_protection: \"complete\",   # Valid values: \"complete\", \"unlessopen\", \"untilfirstauth\",\n      game_center: \"on\",             # Valid values: \"on\", \"off\"\n      health_kit: \"on\",              # Valid values: \"on\", \"off\"\n      home_kit: \"on\",                # Valid values: \"on\", \"off\"\n      hotspot: \"on\",                 # Valid values: \"on\", \"off\"\n      icloud: \"cloudkit\",            # Valid values: \"legacy\", \"cloudkit\"\n      in_app_purchase: \"on\",         # Valid values: \"on\", \"off\"\n      inter_app_audio: \"on\",         # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\"\n      multipath: \"on\",               # Valid values: \"on\", \"off\"\n      network_extension: \"on\",       # Valid values: \"on\", \"off\"\n      nfc_tag_reading: \"on\",         # Valid values: \"on\", \"off\"\n      personal_vpn: \"on\",            # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\" (deprecated)\n      push_notification: \"on\",       # Valid values: \"on\", \"off\"\n      siri_kit: \"on\",                # Valid values: \"on\", \"off\"\n      vpn_configuration: \"on\",       # Valid values: \"on\", \"off\" (deprecated)\n      wallet: \"on\",                  # Valid values: \"on\", \"off\"\n      wireless_accessory: \"on\",      # Valid values: \"on\", \"off\"\n    }\n  )\n\n  deliver\nend\n\n\n\n\nTo use the newly generated app in \ndeliver\n, you need to add this line to your \nDeliverfile\n:\n\n\napple_id(ENV['PRODUCE_APPLE_ID'])\n\n\n\n\nThis will tell \ndeliver\n, which \nApp ID\n to use, since the app is not yet available in the App Store.\n\n\nYou'll still have to fill out the remaining information (like screenshots, app description and pricing). You can use \ndeliver\n to upload your app metadata using a CLI\n\n\nHow is my password stored?\n\n\nproduce\n uses the \npassword manager\n from \nfastlane\n. Take a look the \nCredentialsManager README\n for more information.\n\n\n\n\n\n\n\n\n\n\n\ncreate_app_online\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncreate_app_online(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  app_name: \"MyApp\",\n  language: \"English\",\n  app_version: \"1.0\",\n  sku: \"123\",\n  team_name: \"SunApps GmbH\" # Only necessary when in multiple teams.\n)\n\n\n\n\nproduce   # alias for \"create_app_online\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nApp Identifier (Bundle ID, e.g. com.krausefx.app)\n\n\n*\n\n\n\n\n\n\nbundle_identifier_suffix\n\n\nApp Identifier Suffix (Ignored if App Identifier does not end with .*)\n\n\n\n\n\n\n\n\napp_name\n\n\nApp Name\n\n\n\n\n\n\n\n\napp_version\n\n\nInitial version number (e.g. '1.0')\n\n\n\n\n\n\n\n\nsku\n\n\nSKU Number (e.g. '1234')\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\nplatforms\n\n\nThe platforms to use (optional)\n\n\n\n\n\n\n\n\nlanguage\n\n\nPrimary Language (e.g. 'en-US', 'fr-FR')\n\n\nEnglish\n\n\n\n\n\n\ncompany_name\n\n\nThe name of your company. Only required if it's the first app you create\n\n\n\n\n\n\n\n\nskip_itc\n\n\nSkip the creation of the app on App Store Connect\n\n\nfalse\n\n\n\n\n\n\nitc_users\n\n\nArray of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles\n\n\n\n\n\n\n\n\nenabled_features\n\n\nDEPRECATED!\n Please use \nenable_services\n instead - Array with Spaceship App Services\n\n\n{}\n\n\n\n\n\n\nenable_services\n\n\nArray with Spaceship App Services (e.g. access_wifi: (on|off), app_group: (on|off), apple_pay: (on|off), associated_domains: (on|off), auto_fill_credential: (on|off), data_protection: (complete|unlessopen|untilfirstauth), game_center: (on|off), health_kit: (on|off), home_kit: (on|off), hotspot: (on|off), icloud: (legacy|cloudkit), in_app_purchase: (on|off), inter_app_audio: (on|off), multipath: (on|off), network_extension: (on|off), nfc_tag_reading: (on|off), personal_vpn: (on|off), passbook: (on|off), push_notification: (on|off), siri_kit: (on|off), vpn_configuration: (on|off), wallet: (on|off), wireless_accessory: (on|off))\n\n\n{}\n\n\n\n\n\n\nskip_devcenter\n\n\nSkip the creation of the app on the Apple Developer Portal\n\n\nfalse\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_team_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_team_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncreate_app_online\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::PRODUCE_APPLE_ID\n\n\nThe Apple ID of the newly created app. You probably need it for \ndeliver\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action create_app_online\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run create_app_online\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run create_app_online parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "create_app_online"
        },
        {
            "location": "/actions/create_app_online/#create_app_online",
            "text": "Creates the given application on iTC and the Dev Portal (via  produce )",
            "title": "create_app_online"
        },
        {
            "location": "/actions/create_app_online/#create-new-ios-apps-on-app-store-connect-and-apple-developer-portal-using-your-command-line",
            "text": "produce  creates new iOS apps on both the Apple Developer Portal and App Store Connect with the minimum required information.   \n     Features  \u2022\n     Usage  \u2022\n     How does it work?",
            "title": "Create new iOS apps on App Store Connect and Apple Developer Portal using your command line"
        },
        {
            "location": "/actions/create_app_online/#features",
            "text": "Create  new apps on both App Store Connect and the Apple Developer Portal  Modify  Application Services on the Apple Developer Portal  Create  App Groups on the Apple Developer Portal  Associate  apps with App Groups on the Apple Developer Portal  Create  iCloud Containers on the Apple Developer Portal  Associate  apps with iCloud Containers on the Apple Developer Portal  Create  Merchant Identifiers on the Apple Developer Portal  Associate  apps with Merchant Identifiers on the Apple Developer Portal  Support for  multiple Apple accounts , storing your credentials securely in the Keychain",
            "title": "Features"
        },
        {
            "location": "/actions/create_app_online/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/actions/create_app_online/#creating-a-new-application",
            "text": "fastlane produce  To get a list of all available parameters:  fastlane produce --help  Commands: (* default)\n  associate_group      Associate with a group, which is created if needed or simply located otherwise\n  associate_merchant   Associate with a merchant for use with Apple Pay. Apple Pay will be enabled for this app\n  create             * Creates a new app on App Store Connect and the Apple Developer Portal\n  disable_services     Disable specific Application Services for a specific app on the Apple Developer Portal\n  enable_services      Enable specific Application Services for a specific app on the Apple Developer Portal\n  group                Ensure that a specific App Group exists\n  cloud_container      Ensure that a specific iCloud Container exists\n  help                 Display global or [command] help documentation\n  merchant             Ensure that a specific Merchant exists\n\nGlobal Options:\n  --verbose\n  -h, --help           Display help documentation\n  -v, --version        Display version information\n\nOptions for create:\n  -u, --username STRING Your Apple ID Username (PRODUCE_USERNAME)\n  -a, --app_identifier STRING App Identifier (Bundle ID, e.g. com.krausefx.app) (PRODUCE_APP_IDENTIFIER)\n  -e, --bundle_identifier_suffix STRING App Identifier Suffix (Ignored if App Identifier does not ends with .*) (PRODUCE_APP_IDENTIFIER_SUFFIX)\n  -q, --app_name STRING App Name (PRODUCE_APP_NAME)\n  -z, --app_version STRING Initial version number (e.g. '1.0') (PRODUCE_VERSION)\n  -y, --sku STRING     SKU Number (e.g. '1234') (PRODUCE_SKU)\n  -j, --platform STRING The platform to use (optional) (PRODUCE_PLATFORM)\n  -m, --language STRING Primary Language (e.g. 'English', 'German') (PRODUCE_LANGUAGE)\n  -c, --company_name STRING The name of your company. Only required if it's the first app you create (PRODUCE_COMPANY_NAME)\n  -i, --skip_itc [VALUE] Skip the creation of the app on App Store Connect (PRODUCE_SKIP_ITC)\n  -d, --skip_devcenter [VALUE] Skip the creation of the app on the Apple Developer Portal (PRODUCE_SKIP_DEVCENTER)\n  -s, --itc_users ARRAY Array of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles (ITC_USERS)\n  -b, --team_id STRING The ID of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_ID)\n  -l, --team_name STRING The name of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_NAME)\n  -k, --itc_team_id [VALUE] The ID of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_ID)\n  -p, --itc_team_name STRING The name of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_NAME)",
            "title": "Creating a new application"
        },
        {
            "location": "/actions/create_app_online/#enabling-disabling-application-services",
            "text": "If you want to enable Application Services for an App ID (HomeKit and HealthKit in this example):  fastlane produce enable_services --homekit --healthkit  If you want to disable Application Services for an App ID (iCloud in this case):  fastlane produce disable_services --icloud  If you want to create a new App Group:  fastlane produce group -g group.krausefx -n \"Example App Group\"  If you want to associate an app with an App Group:  fastlane produce associate_group -a com.krausefx.app group.krausefx  If you want to create a new iCloud Container:  fastlane produce cloud_container -g iCloud.com.krausefx.app -n \"Example iCloud Container\"  If you want to associate an app with an iCloud Container:  fastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app  If you want to associate an app with multiple iCloud Containers:  fastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app1 iCloud.com.krausefx.app2",
            "title": "Enabling / Disabling Application Services"
        },
        {
            "location": "/actions/create_app_online/#parameters",
            "text": "Get a list of all available options using  fastlane produce enable_services --help  --app-group          Enable App Groups\n--apple-pay          Enable Apple Pay\n--associated-domains Enable Associated Domains\n--data-protection STRING Enable Data Protection, suitable values are \"complete\", \"unlessopen\" and \"untilfirstauth\"\n--game-center        Enable Game Center\n--healthkit          Enable HealthKit\n--homekit            Enable HomeKit\n--hotspot            Enable Hotspot\n--icloud STRING      Enable iCloud, suitable values are \"legacy\" and \"cloudkit\"\n--in-app-purchase    Enable In-App Purchase\n--inter-app-audio    Enable Inter-App-Audio\n--multipath          Enable Multipath\n--network-extension  Enable Network Extensions\n--nfc-tag-reading    Enable NFC Tag Reading\n--personal-vpn       Enable Personal VPN\n--passbook           Enable Passbook (deprecated)\n--push-notification  Enable Push notification (only enables the service, does not configure certificates)\n--sirikit            Enable SiriKit\n--vpn-conf           Enable VPN Configuration (deprecated)\n--wallet             Enable Wallet\n--wireless-conf      Enable Wireless Accessory Configuration  fastlane produce disable_services --help  --app-group          Disable App Groups\n--apple-pay          Disable Apple Pay\n--associated-domains Disable Associated Domains\n--data-protection    Disable Data Protection\n--game-center        Disable Game Center\n--healthkit          Disable HealthKit\n--homekit            Disable HomeKit\n--hotspot            Disable Hotspot\n--icloud             Disable iCloud\n--in-app-purchase    Disable In-App Purchase\n--inter-app-audio    Disable Inter-App-Audio\n--multipath          Disable Multipath\n--network-extension  Disable Network Extensions\n--nfc-tag-reading    Disable NFC Tag Reading\n--personal-vpn       Disable Personal VPN\n--passbook           Disable Passbook (deprecated)\n--push-notification  Disable Push notifications\n--sirikit            Disable SiriKit\n--vpn-conf           Disable VPN Configuration (deprecated)\n--wallet             Disable Wallet\n--wireless-conf      Disable Wireless Accessory Configuration",
            "title": "Parameters"
        },
        {
            "location": "/actions/create_app_online/#creating-apple-pay-merchants-and-associating-them-with-an-app-id",
            "text": "If you want to create a new Apple Pay Merchant Identifier:  fastlane produce merchant -o merchant.com.example.production -r \"Example Merchant Production\"  Use  --help  for more information about all available parameters  fastlane produce merchant --help  If you want to associate an app with a Merchant Identifier:  fastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production  If you want to associate an app with multiple Merchant Identifiers:  fastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production merchant.com.example.sandbox  Use --help for more information about all available parameters  fastlane produce associate_merchant --help",
            "title": "Creating Apple Pay merchants and associating them with an App ID"
        },
        {
            "location": "/actions/create_app_online/#environment-variables",
            "text": "All available values can also be passed using environment variables, run  fastlane produce --help  to get a list of all available parameters.",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/create_app_online/#fastlane-integration",
            "text": "Your  Fastfile  should look like this  lane :release do\n  produce(\n    username: 'felix@krausefx.com',\n    app_identifier: 'com.krausefx.app',\n    app_name: 'MyApp',\n    language: 'English',\n    app_version: '1.0',\n    sku: '123',\n    team_name: 'SunApps GmbH', # only necessary when in multiple teams\n\n    # Optional\n    # App services can be enabled during app creation\n    enable_services: {\n      access_wifi: \"on\",             # Valid values: \"on\", \"off\"\n      app_group: \"on\",               # Valid values: \"on\", \"off\"\n      apple_pay: \"on\",               # Valid values: \"on\", \"off\"\n      associated_domains: \"on\",      # Valid values: \"on\", \"off\"\n      auto_fill_credential: \"on\",    # Valid values: \"on\", \"off\"\n      data_protection: \"complete\",   # Valid values: \"complete\", \"unlessopen\", \"untilfirstauth\",\n      game_center: \"on\",             # Valid values: \"on\", \"off\"\n      health_kit: \"on\",              # Valid values: \"on\", \"off\"\n      home_kit: \"on\",                # Valid values: \"on\", \"off\"\n      hotspot: \"on\",                 # Valid values: \"on\", \"off\"\n      icloud: \"cloudkit\",            # Valid values: \"legacy\", \"cloudkit\"\n      in_app_purchase: \"on\",         # Valid values: \"on\", \"off\"\n      inter_app_audio: \"on\",         # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\"\n      multipath: \"on\",               # Valid values: \"on\", \"off\"\n      network_extension: \"on\",       # Valid values: \"on\", \"off\"\n      nfc_tag_reading: \"on\",         # Valid values: \"on\", \"off\"\n      personal_vpn: \"on\",            # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\" (deprecated)\n      push_notification: \"on\",       # Valid values: \"on\", \"off\"\n      siri_kit: \"on\",                # Valid values: \"on\", \"off\"\n      vpn_configuration: \"on\",       # Valid values: \"on\", \"off\" (deprecated)\n      wallet: \"on\",                  # Valid values: \"on\", \"off\"\n      wireless_accessory: \"on\",      # Valid values: \"on\", \"off\"\n    }\n  )\n\n  deliver\nend  To use the newly generated app in  deliver , you need to add this line to your  Deliverfile :  apple_id(ENV['PRODUCE_APPLE_ID'])  This will tell  deliver , which  App ID  to use, since the app is not yet available in the App Store.  You'll still have to fill out the remaining information (like screenshots, app description and pricing). You can use  deliver  to upload your app metadata using a CLI",
            "title": "fastlane Integration"
        },
        {
            "location": "/actions/create_app_online/#how-is-my-password-stored",
            "text": "produce  uses the  password manager  from  fastlane . Take a look the  CredentialsManager README  for more information.      create_app_online       Supported platforms  ios    Author  @KrauseFx",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/create_app_online/#2-examples",
            "text": "create_app_online(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  app_name: \"MyApp\",\n  language: \"English\",\n  app_version: \"1.0\",\n  sku: \"123\",\n  team_name: \"SunApps GmbH\" # Only necessary when in multiple teams.\n)  produce   # alias for \"create_app_online\"",
            "title": "2 Examples"
        },
        {
            "location": "/actions/create_app_online/#parameters_1",
            "text": "Key  Description  Default      username  Your Apple ID Username  *    app_identifier  App Identifier (Bundle ID, e.g. com.krausefx.app)  *    bundle_identifier_suffix  App Identifier Suffix (Ignored if App Identifier does not end with .*)     app_name  App Name     app_version  Initial version number (e.g. '1.0')     sku  SKU Number (e.g. '1234')  *    platform  The platform to use (optional)  ios    platforms  The platforms to use (optional)     language  Primary Language (e.g. 'en-US', 'fr-FR')  English    company_name  The name of your company. Only required if it's the first app you create     skip_itc  Skip the creation of the app on App Store Connect  false    itc_users  Array of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles     enabled_features  DEPRECATED!  Please use  enable_services  instead - Array with Spaceship App Services  {}    enable_services  Array with Spaceship App Services (e.g. access_wifi: (on|off), app_group: (on|off), apple_pay: (on|off), associated_domains: (on|off), auto_fill_credential: (on|off), data_protection: (complete|unlessopen|untilfirstauth), game_center: (on|off), health_kit: (on|off), home_kit: (on|off), hotspot: (on|off), icloud: (legacy|cloudkit), in_app_purchase: (on|off), inter_app_audio: (on|off), multipath: (on|off), network_extension: (on|off), nfc_tag_reading: (on|off), personal_vpn: (on|off), passbook: (on|off), push_notification: (on|off), siri_kit: (on|off), vpn_configuration: (on|off), wallet: (on|off), wireless_accessory: (on|off))  {}    skip_devcenter  Skip the creation of the app on the Apple Developer Portal  false    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    itc_team_id  The ID of your App Store Connect team if you're in multiple teams  *    itc_team_name  The name of your App Store Connect team if you're in multiple teams  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/create_app_online/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  create_app_online  action generates the following Lane Variables:     SharedValue  Description      SharedValues::PRODUCE_APPLE_ID  The Apple ID of the newly created app. You probably need it for  deliver     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/create_app_online/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action create_app_online",
            "title": "Documentation"
        },
        {
            "location": "/actions/create_app_online/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run create_app_online  To pass parameters, make use of the  :  symbol, for example  fastlane run create_app_online parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/create_app_online/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/create_keychain/",
            "text": "create_keychain\n\n\nCreate a new Keychain\n\n\n\n\n\n\n\n\ncreate_keychain\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n1 Example\n\n\ncreate_keychain(\n  name: \"KeychainName\",\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nKeychain name\n\n\n\n\n\n\n\n\npath\n\n\nPath to keychain\n\n\n\n\n\n\n\n\npassword\n\n\nPassword for the keychain\n\n\n\n\n\n\n\n\ndefault_keychain\n\n\nShould the newly created Keychain be the new system default keychain\n\n\nfalse\n\n\n\n\n\n\nunlock\n\n\nUnlock keychain after create\n\n\nfalse\n\n\n\n\n\n\ntimeout\n\n\ntimeout interval in seconds. Set \nfalse\n if you want to specify \"no time-out\"\n\n\n300\n\n\n\n\n\n\nlock_when_sleeps\n\n\nLock keychain when the system sleeps\n\n\nfalse\n\n\n\n\n\n\nlock_after_timeout\n\n\nLock keychain after timeout interval\n\n\nfalse\n\n\n\n\n\n\nadd_to_search_list\n\n\nAdd keychain to search list\n\n\ntrue\n\n\n\n\n\n\nrequire_create\n\n\nFail the action if the Keychain already exists\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncreate_keychain\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::ORIGINAL_DEFAULT_KEYCHAIN\n\n\nThe path to the default keychain\n\n\n\n\n\n\nSharedValues::KEYCHAIN_PATH\n\n\nThe path of the keychain\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action create_keychain\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run create_keychain\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run create_keychain parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "create_keychain"
        },
        {
            "location": "/actions/create_keychain/#create_keychain",
            "text": "Create a new Keychain     create_keychain       Supported platforms  ios, android, mac    Author  @gin0606",
            "title": "create_keychain"
        },
        {
            "location": "/actions/create_keychain/#1-example",
            "text": "create_keychain(\n  name: \"KeychainName\",\n  default_keychain: true,\n  unlock: true,\n  timeout: 3600,\n  lock_when_sleeps: true\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/create_keychain/#parameters",
            "text": "Key  Description  Default      name  Keychain name     path  Path to keychain     password  Password for the keychain     default_keychain  Should the newly created Keychain be the new system default keychain  false    unlock  Unlock keychain after create  false    timeout  timeout interval in seconds. Set  false  if you want to specify \"no time-out\"  300    lock_when_sleeps  Lock keychain when the system sleeps  false    lock_after_timeout  Lock keychain after timeout interval  false    add_to_search_list  Add keychain to search list  true    require_create  Fail the action if the Keychain already exists  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/create_keychain/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  create_keychain  action generates the following Lane Variables:     SharedValue  Description      SharedValues::ORIGINAL_DEFAULT_KEYCHAIN  The path to the default keychain    SharedValues::KEYCHAIN_PATH  The path of the keychain     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/create_keychain/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action create_keychain",
            "title": "Documentation"
        },
        {
            "location": "/actions/create_keychain/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run create_keychain  To pass parameters, make use of the  :  symbol, for example  fastlane run create_keychain parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/create_keychain/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/create_pull_request/",
            "text": "create_pull_request\n\n\nThis will create a new pull request on GitHub\n\n\n\n\n\n\n\n\ncreate_pull_request\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@seei, @tommeier, @marumemomo, @elneruda, @kagemiku\n\n\n\n\n\n\nReturns\n\n\nThe pull request URL when successful\n\n\n\n\n\n\n\n\n1 Example\n\n\ncreate_pull_request(\n  api_token: \"secret\",      # optional, defaults to ENV[\"GITHUB_API_TOKEN\"]\n  repo: \"fastlane/fastlane\",\n  title: \"Amazing new feature\",\n  head: \"my-feature\",       # optional, defaults to current branch name\n  base: \"master\", # optional, defaults to \"master\"\n  body: \"Please pull this in!\",       # optional\n  api_url: \"http://yourdomain/api/v3\" # optional, for GitHub Enterprise, defaults to \"https://api.github.com\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nPersonal API Token for GitHub - generate one at https://github.com/settings/tokens\n\n\n*\n\n\n\n\n\n\napi_bearer\n\n\nUse a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN environment variable\n\n\n\n\n\n\n\n\nrepo\n\n\nThe name of the repository you want to submit the pull request to\n\n\n\n\n\n\n\n\ntitle\n\n\nThe title of the pull request\n\n\n\n\n\n\n\n\nbody\n\n\nThe contents of the pull request\n\n\n\n\n\n\n\n\ndraft\n\n\nIndicates whether the pull request is a draft\n\n\n\n\n\n\n\n\nlabels\n\n\nThe labels for the pull request\n\n\n\n\n\n\n\n\nmilestone\n\n\nThe milestone ID (Integer) for the pull request\n\n\n\n\n\n\n\n\nhead\n\n\nThe name of the branch where your changes are implemented (defaults to the current branch name)\n\n\n*\n\n\n\n\n\n\nbase\n\n\nThe name of the branch you want your changes pulled into (defaults to \nmaster\n)\n\n\nmaster\n\n\n\n\n\n\napi_url\n\n\nThe URL of GitHub API - used when the Enterprise (default to \nhttps://api.github.com\n)\n\n\nhttps://api.github.com\n\n\n\n\n\n\nassignees\n\n\nThe assignees for the pull request\n\n\n\n\n\n\n\n\nreviewers\n\n\nThe reviewers (slug) for the pull request\n\n\n\n\n\n\n\n\nteam_reviewers\n\n\nThe team reviewers (slug) for the pull request\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncreate_pull_request\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::CREATE_PULL_REQUEST_HTML_URL\n\n\nThe HTML URL to the created pull request\n\n\n\n\n\n\nSharedValues::CREATE_PULL_REQUEST_NUMBER\n\n\nThe identifier number of the created pull request\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action create_pull_request\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run create_pull_request\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run create_pull_request parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "create_pull_request"
        },
        {
            "location": "/actions/create_pull_request/#create_pull_request",
            "text": "This will create a new pull request on GitHub     create_pull_request       Supported platforms  ios, android, mac    Author  @seei, @tommeier, @marumemomo, @elneruda, @kagemiku    Returns  The pull request URL when successful",
            "title": "create_pull_request"
        },
        {
            "location": "/actions/create_pull_request/#1-example",
            "text": "create_pull_request(\n  api_token: \"secret\",      # optional, defaults to ENV[\"GITHUB_API_TOKEN\"]\n  repo: \"fastlane/fastlane\",\n  title: \"Amazing new feature\",\n  head: \"my-feature\",       # optional, defaults to current branch name\n  base: \"master\", # optional, defaults to \"master\"\n  body: \"Please pull this in!\",       # optional\n  api_url: \"http://yourdomain/api/v3\" # optional, for GitHub Enterprise, defaults to \"https://api.github.com\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/create_pull_request/#parameters",
            "text": "Key  Description  Default      api_token  Personal API Token for GitHub - generate one at https://github.com/settings/tokens  *    api_bearer  Use a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN environment variable     repo  The name of the repository you want to submit the pull request to     title  The title of the pull request     body  The contents of the pull request     draft  Indicates whether the pull request is a draft     labels  The labels for the pull request     milestone  The milestone ID (Integer) for the pull request     head  The name of the branch where your changes are implemented (defaults to the current branch name)  *    base  The name of the branch you want your changes pulled into (defaults to  master )  master    api_url  The URL of GitHub API - used when the Enterprise (default to  https://api.github.com )  https://api.github.com    assignees  The assignees for the pull request     reviewers  The reviewers (slug) for the pull request     team_reviewers  The team reviewers (slug) for the pull request      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/create_pull_request/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  create_pull_request  action generates the following Lane Variables:     SharedValue  Description      SharedValues::CREATE_PULL_REQUEST_HTML_URL  The HTML URL to the created pull request    SharedValues::CREATE_PULL_REQUEST_NUMBER  The identifier number of the created pull request     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/create_pull_request/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action create_pull_request",
            "title": "Documentation"
        },
        {
            "location": "/actions/create_pull_request/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run create_pull_request  To pass parameters, make use of the  :  symbol, for example  fastlane run create_pull_request parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/create_pull_request/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/create_xcframework/",
            "text": "create_xcframework\n\n\nPackage multiple build configs of a library/framework into a single xcframework\n\n\n\n\nUtility for packaging multiple build configurations of a given library\nor framework into a single xcframework.\nIf you want to package several frameworks just provide an array containing\nthe list of frameworks to be packaged using the :frameworks parameter.\nIf you want to package several libraries with their corresponding headers\nprovide a hash containing the library as the key and the directory containing\nits headers as the value (or an empty string if there are no headers associated\nwith the provided library).\nFinally specify the location of the xcframework to be generated using the :output\nparameter.\n\n\n\n\n\n\n\n\n\n\ncreate_xcframework\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@jgongo\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncreate_xcframework(frameworks: ['FrameworkA.framework', 'FrameworkB.framework'], output: 'UniversalFramework.xcframework')\n\n\n\n\ncreate_xcframework(libraries: { 'LibraryA.so' => '', 'LibraryB.so' => 'LibraryBHeaders'}, output: 'UniversalFramework.xcframework')\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nframeworks\n\n\nFrameworks to add to the target xcframework\n\n\n\n\n\n\n\n\nlibraries\n\n\nLibraries to add to the target xcframework, with their corresponding headers\n\n\n\n\n\n\n\n\noutput\n\n\nThe path to write the xcframework to\n\n\n\n\n\n\n\n\nallow_internal_distribution\n\n\nSpecifies that the created xcframework contains information not suitable for public distribution\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ncreate_xcframework\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::XCFRAMEWORK_PATH\n\n\nLocation of the generated xcframework\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action create_xcframework\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run create_xcframework\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run create_xcframework parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "create_xcframework"
        },
        {
            "location": "/actions/create_xcframework/#create_xcframework",
            "text": "Package multiple build configs of a library/framework into a single xcframework   Utility for packaging multiple build configurations of a given library or framework into a single xcframework. If you want to package several frameworks just provide an array containing the list of frameworks to be packaged using the :frameworks parameter. If you want to package several libraries with their corresponding headers provide a hash containing the library as the key and the directory containing its headers as the value (or an empty string if there are no headers associated with the provided library). Finally specify the location of the xcframework to be generated using the :output parameter.      create_xcframework       Supported platforms  ios, mac    Author  @jgongo",
            "title": "create_xcframework"
        },
        {
            "location": "/actions/create_xcframework/#2-examples",
            "text": "create_xcframework(frameworks: ['FrameworkA.framework', 'FrameworkB.framework'], output: 'UniversalFramework.xcframework')  create_xcframework(libraries: { 'LibraryA.so' => '', 'LibraryB.so' => 'LibraryBHeaders'}, output: 'UniversalFramework.xcframework')",
            "title": "2 Examples"
        },
        {
            "location": "/actions/create_xcframework/#parameters",
            "text": "Key  Description  Default      frameworks  Frameworks to add to the target xcframework     libraries  Libraries to add to the target xcframework, with their corresponding headers     output  The path to write the xcframework to     allow_internal_distribution  Specifies that the created xcframework contains information not suitable for public distribution  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/create_xcframework/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  create_xcframework  action generates the following Lane Variables:     SharedValue  Description      SharedValues::XCFRAMEWORK_PATH  Location of the generated xcframework     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/create_xcframework/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action create_xcframework",
            "title": "Documentation"
        },
        {
            "location": "/actions/create_xcframework/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run create_xcframework  To pass parameters, make use of the  :  symbol, for example  fastlane run create_xcframework parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/create_xcframework/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/danger/",
            "text": "danger\n\n\nRuns \ndanger\n for the project\n\n\n\n\nFormalize your Pull Request etiquette.\nMore information: \nhttps://github.com/danger/danger\n.\n\n\n\n\n\n\n\n\n\n\ndanger\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndanger\n\n\n\n\ndanger(\n  danger_id: \"unit-tests\",\n  dangerfile: \"tests/MyOtherDangerFile\",\n  github_api_token: ENV[\"GITHUB_API_TOKEN\"],\n  verbose: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\ntrue\n\n\n\n\n\n\nverbose\n\n\nShow more debugging information\n\n\nfalse\n\n\n\n\n\n\ndanger_id\n\n\nThe identifier of this Danger instance\n\n\n\n\n\n\n\n\ndangerfile\n\n\nThe location of your Dangerfile\n\n\n\n\n\n\n\n\ngithub_api_token\n\n\nGitHub API token for danger\n\n\n\n\n\n\n\n\nfail_on_errors\n\n\nShould always fail the build process, defaults to false\n\n\nfalse\n\n\n\n\n\n\nnew_comment\n\n\nMakes Danger post a new comment instead of editing its previous one\n\n\nfalse\n\n\n\n\n\n\nremove_previous_comments\n\n\nMakes Danger remove all previous comment and create a new one in the end of the list\n\n\nfalse\n\n\n\n\n\n\nbase\n\n\nA branch/tag/commit to use as the base of the diff. [master|dev|stable]\n\n\n\n\n\n\n\n\nhead\n\n\nA branch/tag/commit to use as the head. [master|dev|stable]\n\n\n\n\n\n\n\n\npr\n\n\nRun danger on a specific pull request. e.g. \"https://github.com/danger/danger/pull/518\"\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action danger\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run danger\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run danger parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "danger"
        },
        {
            "location": "/actions/danger/#danger",
            "text": "Runs  danger  for the project   Formalize your Pull Request etiquette. More information:  https://github.com/danger/danger .      danger       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "danger"
        },
        {
            "location": "/actions/danger/#2-examples",
            "text": "danger  danger(\n  danger_id: \"unit-tests\",\n  dangerfile: \"tests/MyOtherDangerFile\",\n  github_api_token: ENV[\"GITHUB_API_TOKEN\"],\n  verbose: true\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/danger/#parameters",
            "text": "Key  Description  Default      use_bundle_exec  Use bundle exec when there is a Gemfile presented  true    verbose  Show more debugging information  false    danger_id  The identifier of this Danger instance     dangerfile  The location of your Dangerfile     github_api_token  GitHub API token for danger     fail_on_errors  Should always fail the build process, defaults to false  false    new_comment  Makes Danger post a new comment instead of editing its previous one  false    remove_previous_comments  Makes Danger remove all previous comment and create a new one in the end of the list  false    base  A branch/tag/commit to use as the base of the diff. [master|dev|stable]     head  A branch/tag/commit to use as the head. [master|dev|stable]     pr  Run danger on a specific pull request. e.g. \"https://github.com/danger/danger/pull/518\"      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/danger/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action danger",
            "title": "Documentation"
        },
        {
            "location": "/actions/danger/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run danger  To pass parameters, make use of the  :  symbol, for example  fastlane run danger parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/danger/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/debug/",
            "text": "debug\n\n\nPrint out an overview of the lane context values\n\n\n\n\n\n\n\n\ndebug\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\ndebug\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action debug\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run debug\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run debug parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "debug"
        },
        {
            "location": "/actions/debug/#debug",
            "text": "Print out an overview of the lane context values     debug       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "debug"
        },
        {
            "location": "/actions/debug/#1-example",
            "text": "debug",
            "title": "1 Example"
        },
        {
            "location": "/actions/debug/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action debug",
            "title": "Documentation"
        },
        {
            "location": "/actions/debug/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run debug  To pass parameters, make use of the  :  symbol, for example  fastlane run debug parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/debug/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/default_platform/",
            "text": "default_platform\n\n\nDefines a default platform to not have to specify the platform\n\n\n\n\n\n\n\n\ndefault_platform\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\ndefault_platform(:android)\n\n\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ndefault_platform\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::DEFAULT_PLATFORM\n\n\nThe default platform\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action default_platform\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run default_platform\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run default_platform parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "default_platform"
        },
        {
            "location": "/actions/default_platform/#default_platform",
            "text": "Defines a default platform to not have to specify the platform     default_platform       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "default_platform"
        },
        {
            "location": "/actions/default_platform/#1-example",
            "text": "default_platform(:android)",
            "title": "1 Example"
        },
        {
            "location": "/actions/default_platform/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  default_platform  action generates the following Lane Variables:     SharedValue  Description      SharedValues::DEFAULT_PLATFORM  The default platform     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/default_platform/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action default_platform",
            "title": "Documentation"
        },
        {
            "location": "/actions/default_platform/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run default_platform  To pass parameters, make use of the  :  symbol, for example  fastlane run default_platform parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/default_platform/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/delete_keychain/",
            "text": "delete_keychain\n\n\nDelete keychains and remove them from the search list\n\n\n\n\nKeychains can be deleted after being created with \ncreate_keychain\n\n\n\n\n\n\n\n\n\n\ndelete_keychain\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606, @koenpunt\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndelete_keychain(name: \"KeychainName\")\n\n\n\n\ndelete_keychain(keychain_path: \"/keychains/project.keychain\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nKeychain name\n\n\n\n\n\n\n\n\nkeychain_path\n\n\nKeychain path\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action delete_keychain\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run delete_keychain\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run delete_keychain parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "delete_keychain"
        },
        {
            "location": "/actions/delete_keychain/#delete_keychain",
            "text": "Delete keychains and remove them from the search list   Keychains can be deleted after being created with  create_keychain      delete_keychain       Supported platforms  ios, android, mac    Author  @gin0606, @koenpunt",
            "title": "delete_keychain"
        },
        {
            "location": "/actions/delete_keychain/#2-examples",
            "text": "delete_keychain(name: \"KeychainName\")  delete_keychain(keychain_path: \"/keychains/project.keychain\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/delete_keychain/#parameters",
            "text": "Key  Description  Default      name  Keychain name     keychain_path  Keychain path      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/delete_keychain/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action delete_keychain",
            "title": "Documentation"
        },
        {
            "location": "/actions/delete_keychain/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run delete_keychain  To pass parameters, make use of the  :  symbol, for example  fastlane run delete_keychain parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/delete_keychain/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/deliver/",
            "text": "deliver\n\n\nAlias for the \nupload_to_app_store\n action\n\n\n\n  \n\n\n\n\n\ndeliver\n uploads screenshots, metadata and binaries to App Store Connect. Use \ndeliver\n to submit your app for App Store review.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nQuick Start\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ndeliver\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\n\n\nUpload hundreds of localized screenshots completely automatically\n\n\nUpload a new ipa/pkg file to App Store Connect without Xcode from any Mac\n\n\nMaintain your app metadata locally and push changes back to App Store Connect\n\n\nEasily implement a real Continuous Deployment process using \nfastlane\n\n\nStore the configuration in git to easily deploy from \nany\n Mac, including your Continuous Integration server\n\n\nGet a HTML preview of the fetched metadata before uploading the app metadata and screenshots to iTC\n\n\nAutomatically uses \nprecheck\n to ensure your app has the highest chances of passing app review the first time\n\n\n\n\nTo upload builds to TestFlight check out \npilot\n.\n\n\nQuick Start\n\n\nThe guide will create all the necessary files for you, using the existing app metadata from App Store Connect.\n\n\n\n\ncd [your_project_folder]\n\n\nfastlane deliver init\n\n\nEnter your App Store Connect credentials\n\n\nEnter your app identifier\n\n\nEnjoy a good drink, while the computer does all the work for you\n\n\n\n\nFrom now on, you can run \nfastlane deliver\n to deploy a new update, or just upload new app metadata and screenshots.\n\n\nUsage\n\n\nCheck out your local \n./fastlane/metadata\n and \n./fastlane/screenshots\n folders (if you don't use \nfastlane\n it's \n./metadata\n instead)\n\n\n\n\nYou'll see your metadata from App Store Connect. Feel free to store the metadata in git (not the screenshots). You can now modify it locally and push the changes back to App Store Connect.\n\n\nRun \nfastlane deliver\n to upload the app metadata from your local machine\n\n\nfastlane deliver\n\n\n\n\nProvide the path to an \nipa\n file to upload and submit your app for review:\n\n\nfastlane deliver --ipa \"App.ipa\" --submit_for_review\n\n\n\n\nor you can specify path to \npkg\n file for macOS apps:\n\n\nfastlane deliver --pkg \"MacApp.pkg\"\n\n\n\n\nIf you use \nfastlane\n you don't have to manually specify the path to your \nipa\n/\npkg\n file.\n\n\nThis is just a small sub-set of what you can do with \ndeliver\n, check out the full documentation in \n#more-options\n\n\nDownload existing screenshots from App Store Connect\n\n\nfastlane deliver download_screenshots\n\n\n\n\nDownload existing metadata from App Store Connect\n\n\nfastlane deliver download_metadata\n\n\n\n\nTo get a list of available options run\n\n\nfastlane action deliver\n\n\n\n\nUse in a \nFastfile\n\n\ndeliver\n\n\n\n\ndeliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)\n\n\n\n\nMore options\n\n\n\n\nView all available options and their valid values\n\n\nAvailable options\n\n\nAll the options below can easily be added to your \nDeliverfile\n. The great thing: if you use \nfastlane\n you can use all these options from your \nFastfile\n too, for example:\n\n\ndeliver(\n  submit_for_review: true,\n  metadata_path: \"../folder\"\n)\n\n\n\n\napp_identifier\n\n\nThe bundle identifier (e.g. \"com.krausefx.app\")\n\n\nusername\n\n\nYour Apple ID email address\n\n\nipa\n\n\nA path to a signed ipa file, which will be uploaded. If you don't provide this value, only app metadata will be uploaded. If you want to submit the app for review make sure to either use \nfastlane deliver --submit_for_review\n or add \nsubmit_for_review true\n to your \nDeliverfile\n\n\nipa(\"App.ipa\")\n\n\n\n\nif you use \nfastlane\n the ipa file will automatically be detected.\n\n\npkg\n\n\nA path to a signed pkg file, which will be uploaded. Submission logic of ipa applies to pkg files.\n\n\npkg(\"MacApp.pkg\")\n\n\n\n\napp_version\n\n\nOptional, as it is usually automatically detected. Specify the version that should be created / edited on App Store Connect:\n\n\napp_version(\"2.0\")\n\n\n\n\nskip_app_version_update\n\n\nIn the case if \ndeliver\n uploads your application to App Store Connect it will automatically update \"Prepare for submission\" app version (which could be found on App Store Connect->My Apps->App Store page)\n\n\nThe option allows uploading your app without updating \"Prepare for submission\" version.\n\n\nThis could be useful in the case if you are generating a lot of uploads while not submitting the latest build for Apple review.\n\n\nThe default value is false.\n\n\nskip_app_version_update(true)\n\n\n\n\nsubmit_for_review\n\n\nAdd this to your \nDeliverfile\n to automatically submit the app for review after uploading metadata/binary. This will select the latest build.\n\n\nsubmit_for_review(true)\n\n\n\n\nscreenshots_path\n\n\nA path to a folder containing subfolders for each language. This will automatically detect the device type based on the image resolution. Also includes \uf8ff Watch Support.\n\n\n\n\nmetadata_path\n\n\nPath to the metadata you want to use. The folder has to be structured like this\n\n\n\n\nIf you run \ndeliver init\n this will automatically be created for you.\n\n\nforce\n\n\nforce(true)\n\n\n\n\nIf set to \ntrue\n, no HTML report will be generated before the actual upload. You can also pass \n--force\n when calling \ndeliver\n.\n\n\nprice_tier\n\n\nPass the price tier as number. This will be active from the current day.\n\n\nprice_tier 0\n\n\n\n\ntrade_representative_contact_information\n\n\nTrade Representative Contact information for Korean App Store. Available options: \nfirst_name\n, \nlast_name\n, \naddress_line1\n, \naddress_line2\n, \naddress_line3\n, \ncity_name\n, \nstate\n, \ncountry\n, \npostal_code\n, \nphone_number\n, \nemail_address\n, \nis_displayed_on_app_store\n.\n\n\ntrade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)\n\n\n\n\nYou can also provide these values by creating files in a \nmetadata/trade_representative_contact_information/\n directory. The file names must match the pattern \n<key>.txt\n (e.g. \nfirst_name.txt\n, \naddress_line1.txt\n etc.). The contents of each file will be used as the value for the matching key. Values provided in the \nDeliverfile\n or \nFastfile\n will be take priority over values from these files.\n\n\nis_displayed_on_app_store\n is the option on App Store Connect described as: \nDisplay Trade Representative Contact Information on the Korean App Store\n\n\napp_review_information\n\n\nContact information for the app review team. Available options: \nfirst_name\n, \nlast_name\n, \nphone_number\n, \nemail_address\n, \ndemo_user\n, \ndemo_password\n, \nnotes\n.\n\n\napp_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)\n\n\n\n\nYou can also provide these values by creating files in a \nmetadata/review_information/\n directory. The file names must match the pattern \n<key>.txt\n (e.g. \nfirst_name.txt\n, \nnotes.txt\n etc.). The contents of each file will be used as the value for the matching key. Values provided in the \nDeliverfile\n or \nFastfile\n will be take priority over values from these files.\n\n\napp_review_attachment_file\n\n\nYou can provide additional information to the app review team as a file attachment. As of this writing, Apple supports following file attachment formats: .pdf, .doc, .docx, .rtf, .pages, .xls, .xlsx, .numbers, .zip, .rar, .plist, .crash, .jpg, .png, .mp4, or .avi.\n\n\nProvide an empty string (i.e. \"\", not null) to remove the existing attachment file (if any) from the review information being edited.\n\n\napp_review_attachment_file: \"./readme.txt\"\n\n\n\n\nsubmission_information\n\n\nMust be a hash. This is used as the last step for the deployment process, where you define if you use third party content or use encryption. \nA list of available options\n.\n\n\nsubmission_information({\n  add_id_info_serves_ads: true,\n  ...\n})\n\n\n\n\nautomatic_release\n\n\nShould the app be released to all users once Apple approves it? If set to \nfalse\n, you'll have to manually release the update once it got approved.\n\n\nautomatic_release(true)\n# or\nautomatic_release(false)\n\n\n\n\nphased_release\n\n\nEnable or disable the phased releases feature of App Store Connect. If set to \ntrue\n, the update will be released over a 7 day period. Default behavior is to leave whatever you defined on App Store Connect.\n\n\nphased_release(true)\n# or\nphased_release(false)\n\n\n\n\nreset_ratings\n\n\nReset your app's summary rating for all territories. If set to \ntrue\n, it will reset rating when this version is released. Default behavior is to keep existing rating.\n\n\nreset_ratings(true)\n# or\nreset_ratings(false)\n\n\n\n\napp_rating_config_path\n\n\nYou can set the app age ratings using \ndeliver\n. You'll have to create and store a \nJSON\n configuration file. Copy the \ntemplate\n to your project folder and pass the path to the \nJSON\n file using the \napp_rating_config_path\n option.\n\n\nThe keys/values on the top allow values from 0-2, and the items on the bottom allow only 0 or 1. More information in \n#reference\n.\n\n\nMetadata\n\n\nAll options below are useful if you want to specify certain app metadata in your \nDeliverfile\n or \nFastfile\n\n\nLocalized\n\n\nLocalized values should be set like this\n\n\ndescription({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})\n\n\n\n\nname\n\n\nThe title/name of the app\n\n\nsubtitle\n\n\nLocalized subtitle of the app\n\n\nsubtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)\n\n\n\n\ndescription\n\n\nThe description of the app\n\n\nrelease_notes\n\n\nThe release_notes (What's new / Changelog) of the latest version\n\n\nsupport_url, marketing_url, privacy_url\n\n\nThese URLs are shown in the AppStore\n\n\nkeywords\n\n\nKeywords separated using a comma.\n\n\nkeywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)\n\n\n\n\npromotional_text\n\n\nLocalized promotional text\n\n\npromotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)\n\n\n\n\napp_icon\n\n\nA path to a new app icon, which must be exactly 1024x1024px\n\n\napp_icon('./AppIcon.png')\n\n\n\n\napple_watch_app_icon\n\n\nA path to a new app icon for the \uf8ff Watch, which must be exactly 1024x1024px\n\n\napple_watch_app_icon('./AppleWatchAppIcon.png')\n\n\n\n\nplatform\n\n\nThe platform of your application (a.e. ios, osx).\n\n\nThis option is optional. The default value is \"ios\" and deliver should be able to figure out the platform from your binary.\n\n\nHowever, in the case if multiple binaries present, you can specify a platform which you want to deliver explicitly.\n\n\nThe available options:\n\n\n\n\n'ios'\n\n\n'appletvos'\n\n\n'osx'\n\n\n\n\nNon-Localized\n\n\ncopyright\n\n\nThe up to date copyright information.\n\n\ncopyright(\"#{Time.now.year} Felix Krause\")\n\n\n\n\nprimary_category\n\n\nThe english name of the category you want to set (e.g. \nBusiness\n, \nBooks\n)\n\n\nSee \n#reference\n for a list of available categories\n\n\nsecondary_category\n\n\nThe english name of the secondary category you want to set\n\n\nprimary_first_sub_category\n\n\nThe english name of the primary first sub category you want to set\n\n\nprimary_second_sub_category\n\n\nThe english name of the primary second sub category you want to set\n\n\nsecondary_first_sub_category\n\n\nThe english name of the secondary first sub category you want to set\n\n\nsecondary_second_sub_category\n\n\nThe english name of the secondary second sub category you want to set\n\n\n\nSubmit Build\n\n\ndeliver\n allows you to promote an existing build to production. Below are examples to select a previously uploaded build and submit it for review.\n\n\nfastlane deliver submit_build --build_number 830\n\n\n\n\nSubmit build in a \nFastfile\n\n\nlane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend\n\n\n\n\nOmit \nbuild_number\n to let \nfastlane\n automatically select the latest build number for the current version being edited for release from App Store Connect.\n\n\nCompliance and IDFA settings\n\n\nUse the \nsubmission_information\n parameter for additional submission specifiers, including compliance and IDFA settings. Look at the Spaceship's \napp_submission.rb\n file for options. See \nthis example\n.\n\n\nfastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"\n\n\n\n\nApp Privacy Details\n\n\nStarting on December 8, 2020, Apple announced that developers are required to provide app privacy details that will help users understand an app's privacy practies. \ndeliver\n does not allow for updating of this information but this can be done with the \nupload_app_privacy_details_to_app_store\n action. More information on \nUploading App Privacy Details\n\n\nCredentials\n\n\nA detailed description about how your credentials are handled is available in a \ncredentials_manager\n.\n\n\nHow does this thing even work? Is magic involved? \ud83c\udfa9\n\n\nYour password will be stored in the macOS keychain, but can also be passed using environment variables. (More information available on \nCredentialsManager\n)\n\n\nBefore actually uploading anything to iTunes, \ndeliver\n will generate a HTML summary of the collected data.\n\n\ndeliver\n uses the following techniques under the hood:\n\n\n\n\nThe iTMSTransporter tool is used to upload the binary to App Store Connect. iTMSTransporter is a command line tool provided by Apple.\n\n\nFor all metadata related actions \ndeliver\n uses \nspaceship\n\n\n\n\nTips\n\n\nAvailable language codes\n\n\nar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, uk, vi, zh-Hans, zh-Hant\n\n\n\n\nAvailable Metadata Folder Options\n\n\ndeliver\n allows for metadata to be set through \n.txt\n files in the metadata folder. This metadata folder location is defaulted to \n./fastlane/metadata\n but can be overridden through the \nmetadata_path\n parameter. Below are all allowed metadata options.\n\n\nNon-Localized Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\ncopyright\n\n\nYes\n\n\n<metadata_path>\n\n\ncopyright.txt\n\n\n\n\n\n\nprimary_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_category.txt\n\n\n\n\n\n\nsecondary_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_category.txt\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_first_sub_category.txt\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_second_sub_category.txt\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_first_sub_category.txt\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_second_sub_category.txt\n\n\n\n\n\n\n\n\nLocalized Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\nname\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nname.txt\n\n\n\n\n\n\nsubtitle\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nsubtitle.txt\n\n\n\n\n\n\nprivacy_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nprivacy_url.txt\n\n\n\n\n\n\napple_tv_privacy_policy\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\napple_tv_privacy_policy.txt\n\n\n\n\n\n\ndescription\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\ndescription.txt\n\n\n\n\n\n\nkeywords\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nkeywords.txt\n\n\n\n\n\n\nrelease_notes\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nrelease_notes.txt\n\n\n\n\n\n\nsupport_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nsupport_url.txt\n\n\n\n\n\n\nmarketing_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nmarketing_url.txt\n\n\n\n\n\n\npromotional_text\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\npromotional_text.txt\n\n\n\n\n\n\n\n\nReview Information Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\nDeprecated Filename\n\n\n\n\n\n\n\n\n\n\nfirst_name\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nfirst_name.txt\n\n\nreview_first_name.txt\n\n\n\n\n\n\nlast_name\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nlast_name.txt\n\n\nreview_last_name.txt\n\n\n\n\n\n\nphone_number\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nphone_number.txt\n\n\nreview_phone_number.txt\n\n\n\n\n\n\nemail_address\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nemail_address.txt\n\n\nreview_email.txt\n\n\n\n\n\n\ndemo_user\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\ndemo_user.txt\n\n\nreview_demo_user.txt\n\n\n\n\n\n\ndemo_password\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\ndemo_password.txt\n\n\nreview_demo_password.txt\n\n\n\n\n\n\nnotes\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nnotes.txt\n\n\nreview_notes.txt\n\n\n\n\n\n\n\n\nReference\n\n\n\n\nView all available categories, etc.\n\n\nAvailable Categories\n\n\n\n\nFOOD_AND_DRINK\n\n\nBUSINESS\n\n\nEDUCATION\n\n\nSOCIAL_NETWORKING\n\n\nBOOKS\n\n\nSPORTS\n\n\nFINANCE\n\n\nREFERENCE\n\n\nGRAPHICS_AND_DESIGN\n\n\nDEVELOPER_TOOLS\n\n\nHEALTH_AND_FITNESS\n\n\nMUSIC\n\n\nWEATHER\n\n\nTRAVEL\n\n\nENTERTAINMENT\n\n\nSTICKERS\n\n\nGAMES\n\n\nLIFESTYLE\n\n\nMEDICAL\n\n\nMAGAZINES_AND_NEWSPAPERS\n\n\nUTILITIES\n\n\nSHOPPING\n\n\nPRODUCTIVITY\n\n\nNEWS\n\n\nPHOTO_AND_VIDEO\n\n\nNAVIGATION\n\n\n\n\nAvailable Game Subcategories\n\n\n\n\nMZGenre.Action\n\n\nMZGenre.Adventure\n\n\nMZGenre.Arcade\n\n\nMZGenre.Board\n\n\nMZGenre.Card\n\n\nMZGenre.Casino\n\n\nMZGenre.Dice\n\n\nMZGenre.Educational\n\n\nMZGenre.Family\n\n\nMZGenre.Music\n\n\nMZGenre.Puzzle\n\n\nMZGenre.Racing\n\n\nMZGenre.RolePlaying\n\n\nMZGenre.Simulation\n\n\nMZGenre.Sports\n\n\nMZGenre.Strategy\n\n\nMZGenre.Trivia\n\n\nMZGenre.Word\n\n\n\n\n\n\nGAMES_SPORTS\n\n\nGAMES_WORD\n\n\nGAMES_MUSIC\n\n\nGAMES_ADVENTURE\n\n\nGAMES_ACTION\n\n\nGAMES_ROLE_PLAYING\n\n\nGAMES_CASUAL\n\n\nGAMES_BOARD\n\n\nGAMES_TRIVIA\n\n\nGAMES_CARD\n\n\nGAMES_PUZZLE\n\n\nGAMES_CASINO\n\n\nGAMES_STRATEGY\n\n\nGAMES_SIMULATION\n\n\nGAMES_RACING\n\n\nGAMES_FAMILY\n\n\n\n\nAvailable Stickers Subcategories\n\n\n\n\nSTICKERS_PLACES_AND_OBJECTS\n\n\nSTICKERS_EMOJI_AND_EXPRESSIONS\n\n\nSTICKERS_CELEBRATIONS\n\n\nSTICKERS_CELEBRITIES\n\n\nSTICKERS_MOVIES_AND_TV\n\n\nSTICKERS_SPORTS_AND_ACTIVITIES\n\n\nSTICKERS_EATING_AND_DRINKING\n\n\nSTICKERS_CHARACTERS\n\n\nSTICKERS_ANIMALS\n\n\nSTICKERS_FASHION\n\n\nSTICKERS_ART\n\n\nSTICKERS_GAMING\n\n\nSTICKERS_KIDS_AND_FAMILY\n\n\nSTICKERS_PEOPLE\n\n\nSTICKERS_MUSIC\n\n\n\n\nAvailable age rating groups\n\n\nNon Boolean\n\n\nValues\n\n\n\n\n0: None\n\n\n1: Infrequent/Mild\n\n\n2: Frequent/Intense\n\n\n\n\n\n\nNONE\n\n\nINFREQUENT_OR_MILD\n\n\nFREQUENT_OR_INTENSE\n\n\n\n\nKeys\n\n\n\n\nviolenceCartoonOrFantasy\n\n\nviolenceRealistic\n\n\nviolenceRealisticProlongedGraphicOrSadistic\n\n\nprofanityOrCrudeHumor\n\n\nmatureOrSuggestiveThemes\n\n\nhorrorOrFearThemes\n\n\nmedicalOrTreatmentInformation\n\n\nalcoholTobaccoOrDrugUseOrReferences\n\n\ngamblingSimulated\n\n\nsexualContentOrNudity\n\n\nsexualContentGraphicAndNudity\n\n\n\n\nBoolean\n\n\nKeys\n\n\n\n\nunrestrictedWebAccess\n\n\ngamblingAndContests\n\n\n\n\n\n\n\n\nDefault values\n\n\nDeliver has a special \ndefault\n language code which allows you to provide values that are not localized, and which will be used as defaults when you don\u2019t provide a specific localized value.\n\n\nIn order to use \ndefault\n, you will need to tell \ndeliver\n which languages your app uses. You can do this in either of two ways:\n\n\n\n\nCreate the folders named with the language in the metadata folder (i.e. fastlane/metadata/en-US or fastlane/metadata/de-DE)\n\n\nAdd the following to your \nDeliverfile\n \nlanguages(['en-US','de-DE'])\n\n\n\n\nYou can use this either in json within your \nDeliverfile\n and/or as folders in your metadata folder. \ndeliver\n will take the union of both language sets from the \nDeliverfile\n and from the metadata folder and create on single set of languages which will be enabled.\n\n\nImagine that you have localized data for the following language codes:  \nen-US, de-DE, el, it\n\n\nYou can set the following in your \nDeliverfile\n\n\nrelease_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})\n\n\n\n\nDeliver will use \"Shiny and new\" for en-US, el and it.\n\n\nIt will use \"glaenzend und neu\" for de-DE.\n\n\nYou can do the same with folders\n\n\n   default\n      keywords.txt\n      marketing_url.txt\n      name.txt\n      privacy_url.txt\n      support_url.txt\n      release_notes.txt\n   en-US\n      description.txt\n   de-DE\n      description.txt\n   el\n      description.txt\n   it\n      description.txt\n\n\n\n\nIn this case, default values for keywords, urls, name and release notes are used in all localizations, but each language has a fully localized description\n\n\nUploading screenshots for \"iPad Pro (12.9-inch) (3rd generation)\"\n\n\nStarting March 20, 2019 Apple's App Store\n requires 12.9-inch iPad Pro (3rd generation) screenshots additionally to the iPad Pro 2nd generation \nscreenshots\n. As fastlane historically uses the screenshot dimensions to determine the \"display family\" of a screenshot, this poses a problem as both use the same dimensions and are recognized as the same device family.\n\n\nTo solve this a screenshot of a 12.9-inch iPad Pro (3rd generation) must contain either the string \niPad Pro (12.9-inch) (3rd generation)\n or \nipadPro129\n (Apple's internal naming of the display family for the 3rd generation iPad Pro) in its filename to be assigned the correct display family and to be uploaded to the correct screenshot slot in your app's metadata.\n\n\nAutomatically create screenshots\n\n\nIf you want to integrate \ndeliver\n with \nsnapshot\n, check out \nfastlane\n!\n\n\nJenkins integration\n\n\nDetailed instructions about how to set up \ndeliver\n and \nfastlane\n in \nJenkins\n can be found in the \nfastlane README\n.\n\n\nFirewall Issues\n\n\ndeliver\n uses the iTunes Transporter to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol using\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" fastlane deliver\n\n\n\n\nHTTP Proxy\n\n\niTunes Transporter is a Java application bundled with Xcode. In addition to utilizing the \nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\"\n, you need to configure the transporter application to use the proxy independently from the system proxy or any environment proxy settings. You can find the configuration file within Xcode:\n\n\nfor Xcode11 and later\n\n\nTOOLS_PATH=$( xcode-select -p )\nREL_PATH='../SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"\n\n\n\n\nfor Xcode10 or earlier\n\n\nTOOLS_PATH=$( xcode-select -p )\nREL_PATH='../Applications/Application Loader.app/Contents/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"\n\n\n\n\nAdd necessary proxy configuration values to the net.properties according to \nJava Proxy Configuration\n.\n\n\nAs an alternative to editing the properties files, proxy configuration can be specified on the command line directly:\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV -Dhttp.proxyHost=myproxy.com -Dhttp.proxyPort=8080\"\n\n\n\n\nLimit\n\n\nApp Store Connect has a limit of 150 binary uploads per day.\n\n\nEditing the \nDeliverfile\n\n\nChange syntax highlighting to \nRuby\n.\n\n\nProvider Short Name\n\n\nIf you are on multiple App Store Connect teams, \ndeliver\n needs a provider short name to know where to upload your binary. \ndeliver\n will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the \nitc_provider\n option.\n\n\n\n\n\n\n\n\n\n\n\ndeliver\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nupload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\ndeliver   # alias for \"upload_to_app_store\"\n\n\n\n\nappstore  # alias for \"upload_to_app_store\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\napp_version\n\n\nThe version that should be edited or created\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your ipa file\n\n\n*\n\n\n\n\n\n\npkg\n\n\nPath to your pkg file\n\n\n*\n\n\n\n\n\n\nbuild_number\n\n\nIf set the given build number (already uploaded to iTC) will be used instead of the current built one\n\n\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\nedit_live\n\n\nModify live metadata, this option disables ipa upload and screenshot upload\n\n\nfalse\n\n\n\n\n\n\nuse_live_version\n\n\nForce usage of live version rather than edit version\n\n\nfalse\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the folder containing the metadata files\n\n\n\n\n\n\n\n\nscreenshots_path\n\n\nPath to the folder containing the screenshots\n\n\n\n\n\n\n\n\nskip_binary_upload\n\n\nSkip uploading an ipa or pkg to App Store Connect\n\n\nfalse\n\n\n\n\n\n\nskip_screenshots\n\n\nDon't upload the screenshots\n\n\nfalse\n\n\n\n\n\n\nskip_metadata\n\n\nDon't upload the metadata (e.g. title, description). This will still upload screenshots\n\n\nfalse\n\n\n\n\n\n\nskip_app_version_update\n\n\nDon\u2019t create or update the app version that is being prepared for submission\n\n\nfalse\n\n\n\n\n\n\nforce\n\n\nSkip verification of HTML preview file\n\n\nfalse\n\n\n\n\n\n\noverwrite_screenshots\n\n\nClear all previously uploaded screenshots before uploading the new ones\n\n\nfalse\n\n\n\n\n\n\nsubmit_for_review\n\n\nSubmit the new version for Review after uploading everything\n\n\nfalse\n\n\n\n\n\n\nreject_if_possible\n\n\nRejects the previously submitted build if it's in a state where it's possible\n\n\nfalse\n\n\n\n\n\n\nautomatic_release\n\n\nShould the app be automatically released once it's approved? (Can not be used together with \nauto_release_date\n)\n\n\n\n\n\n\n\n\nauto_release_date\n\n\nDate in milliseconds for automatically releasing on pending approval (Can not be used together with \nautomatic_release\n)\n\n\n\n\n\n\n\n\nphased_release\n\n\nEnable the phased release feature of iTC\n\n\nfalse\n\n\n\n\n\n\nreset_ratings\n\n\nReset the summary rating when you release a new version of the application\n\n\nfalse\n\n\n\n\n\n\nprice_tier\n\n\nThe price tier of this application\n\n\n\n\n\n\n\n\napp_rating_config_path\n\n\nPath to the app rating's config\n\n\n\n\n\n\n\n\nsubmission_information\n\n\nExtra information for the submission (e.g. compliance specifications, IDFA settings)\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n\n\n*\n\n\n\n\n\n\ndev_portal_team_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run \npathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off\n. The short names of providers should be listed in the second column\n\n\n*\n\n\n\n\n\n\nrun_precheck_before_submit\n\n\nRun precheck before submitting to app review\n\n\ntrue\n\n\n\n\n\n\nprecheck_default_rule_level\n\n\nThe default precheck rule level unless otherwise configured\n\n\n:warn\n\n\n\n\n\n\nindividual_metadata_items\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - An array of localized metadata items to upload individually by language so that errors can be identified. E.g. ['name', 'keywords', 'description']. Note: slow\n\n\n\n\n\n\n\n\napp_icon\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the app icon\n\n\n\n\n\n\n\n\napple_watch_app_icon\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the Apple Watch app icon\n\n\n\n\n\n\n\n\ncopyright\n\n\nMetadata: The copyright notice\n\n\n\n\n\n\n\n\nprimary_category\n\n\nMetadata: The english name of the primary category (e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\n\n\nsecondary_category\n\n\nMetadata: The english name of the secondary category (e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nMetadata: The english name of the primary first sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nMetadata: The english name of the primary second sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nMetadata: The english name of the secondary first sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nMetadata: The english name of the secondary second sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\ntrade_representative_contact_information\n\n\nMetadata: A hash containing the trade representative contact information\n\n\n\n\n\n\n\n\napp_review_information\n\n\nMetadata: A hash containing the review information\n\n\n\n\n\n\n\n\napp_review_attachment_file\n\n\nMetadata: Path to the app review attachment file\n\n\n\n\n\n\n\n\ndescription\n\n\nMetadata: The localised app description\n\n\n\n\n\n\n\n\nname\n\n\nMetadata: The localised app name\n\n\n\n\n\n\n\n\nsubtitle\n\n\nMetadata: The localised app subtitle\n\n\n\n\n\n\n\n\nkeywords\n\n\nMetadata: An array of localised keywords\n\n\n\n\n\n\n\n\npromotional_text\n\n\nMetadata: An array of localised promotional texts\n\n\n\n\n\n\n\n\nrelease_notes\n\n\nMetadata: Localised release notes for this version\n\n\n\n\n\n\n\n\nprivacy_url\n\n\nMetadata: Localised privacy url\n\n\n\n\n\n\n\n\napple_tv_privacy_policy\n\n\nMetadata: Localised Apple TV privacy policy text\n\n\n\n\n\n\n\n\nsupport_url\n\n\nMetadata: Localised support url\n\n\n\n\n\n\n\n\nmarketing_url\n\n\nMetadata: Localised marketing url\n\n\n\n\n\n\n\n\nlanguages\n\n\nMetadata: List of languages to activate\n\n\n\n\n\n\n\n\nignore_language_directory_validation\n\n\nIgnore errors when invalid languages are found in metadata and screenshot directories\n\n\nfalse\n\n\n\n\n\n\nprecheck_include_in_app_purchases\n\n\nShould precheck check in-app purchases?\n\n\ntrue\n\n\n\n\n\n\napp\n\n\nThe (spaceship) app ID of the app you want to use/modify\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action deliver\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run deliver\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run deliver parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "deliver"
        },
        {
            "location": "/actions/deliver/#deliver",
            "text": "Alias for the  upload_to_app_store  action  \n     deliver  uploads screenshots, metadata and binaries to App Store Connect. Use  deliver  to submit your app for App Store review.   \n     Features  \u2022\n     Quick Start  \u2022\n     Usage  \u2022\n     Tips",
            "title": "deliver"
        },
        {
            "location": "/actions/deliver/#features",
            "text": "Upload hundreds of localized screenshots completely automatically  Upload a new ipa/pkg file to App Store Connect without Xcode from any Mac  Maintain your app metadata locally and push changes back to App Store Connect  Easily implement a real Continuous Deployment process using  fastlane  Store the configuration in git to easily deploy from  any  Mac, including your Continuous Integration server  Get a HTML preview of the fetched metadata before uploading the app metadata and screenshots to iTC  Automatically uses  precheck  to ensure your app has the highest chances of passing app review the first time   To upload builds to TestFlight check out  pilot .",
            "title": "Features"
        },
        {
            "location": "/actions/deliver/#quick-start",
            "text": "The guide will create all the necessary files for you, using the existing app metadata from App Store Connect.   cd [your_project_folder]  fastlane deliver init  Enter your App Store Connect credentials  Enter your app identifier  Enjoy a good drink, while the computer does all the work for you   From now on, you can run  fastlane deliver  to deploy a new update, or just upload new app metadata and screenshots.",
            "title": "Quick Start"
        },
        {
            "location": "/actions/deliver/#usage",
            "text": "Check out your local  ./fastlane/metadata  and  ./fastlane/screenshots  folders (if you don't use  fastlane  it's  ./metadata  instead)   You'll see your metadata from App Store Connect. Feel free to store the metadata in git (not the screenshots). You can now modify it locally and push the changes back to App Store Connect.  Run  fastlane deliver  to upload the app metadata from your local machine  fastlane deliver  Provide the path to an  ipa  file to upload and submit your app for review:  fastlane deliver --ipa \"App.ipa\" --submit_for_review  or you can specify path to  pkg  file for macOS apps:  fastlane deliver --pkg \"MacApp.pkg\"  If you use  fastlane  you don't have to manually specify the path to your  ipa / pkg  file.  This is just a small sub-set of what you can do with  deliver , check out the full documentation in  #more-options  Download existing screenshots from App Store Connect  fastlane deliver download_screenshots  Download existing metadata from App Store Connect  fastlane deliver download_metadata  To get a list of available options run  fastlane action deliver",
            "title": "Usage"
        },
        {
            "location": "/actions/deliver/#use-in-a-fastfile",
            "text": "deliver  deliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)",
            "title": "Use in a Fastfile"
        },
        {
            "location": "/actions/deliver/#more-options",
            "text": "View all available options and their valid values",
            "title": "More options"
        },
        {
            "location": "/actions/deliver/#available-options",
            "text": "All the options below can easily be added to your  Deliverfile . The great thing: if you use  fastlane  you can use all these options from your  Fastfile  too, for example:  deliver(\n  submit_for_review: true,\n  metadata_path: \"../folder\"\n)",
            "title": "Available options"
        },
        {
            "location": "/actions/deliver/#app_identifier",
            "text": "The bundle identifier (e.g. \"com.krausefx.app\")",
            "title": "app_identifier"
        },
        {
            "location": "/actions/deliver/#username",
            "text": "Your Apple ID email address",
            "title": "username"
        },
        {
            "location": "/actions/deliver/#ipa",
            "text": "A path to a signed ipa file, which will be uploaded. If you don't provide this value, only app metadata will be uploaded. If you want to submit the app for review make sure to either use  fastlane deliver --submit_for_review  or add  submit_for_review true  to your  Deliverfile  ipa(\"App.ipa\")  if you use  fastlane  the ipa file will automatically be detected.",
            "title": "ipa"
        },
        {
            "location": "/actions/deliver/#pkg",
            "text": "A path to a signed pkg file, which will be uploaded. Submission logic of ipa applies to pkg files.  pkg(\"MacApp.pkg\")",
            "title": "pkg"
        },
        {
            "location": "/actions/deliver/#app_version",
            "text": "Optional, as it is usually automatically detected. Specify the version that should be created / edited on App Store Connect:  app_version(\"2.0\")",
            "title": "app_version"
        },
        {
            "location": "/actions/deliver/#skip_app_version_update",
            "text": "In the case if  deliver  uploads your application to App Store Connect it will automatically update \"Prepare for submission\" app version (which could be found on App Store Connect->My Apps->App Store page)  The option allows uploading your app without updating \"Prepare for submission\" version.  This could be useful in the case if you are generating a lot of uploads while not submitting the latest build for Apple review.  The default value is false.  skip_app_version_update(true)",
            "title": "skip_app_version_update"
        },
        {
            "location": "/actions/deliver/#submit_for_review",
            "text": "Add this to your  Deliverfile  to automatically submit the app for review after uploading metadata/binary. This will select the latest build.  submit_for_review(true)",
            "title": "submit_for_review"
        },
        {
            "location": "/actions/deliver/#screenshots_path",
            "text": "A path to a folder containing subfolders for each language. This will automatically detect the device type based on the image resolution. Also includes \uf8ff Watch Support.",
            "title": "screenshots_path"
        },
        {
            "location": "/actions/deliver/#metadata_path",
            "text": "Path to the metadata you want to use. The folder has to be structured like this   If you run  deliver init  this will automatically be created for you.",
            "title": "metadata_path"
        },
        {
            "location": "/actions/deliver/#force",
            "text": "force(true)  If set to  true , no HTML report will be generated before the actual upload. You can also pass  --force  when calling  deliver .",
            "title": "force"
        },
        {
            "location": "/actions/deliver/#price_tier",
            "text": "Pass the price tier as number. This will be active from the current day.  price_tier 0",
            "title": "price_tier"
        },
        {
            "location": "/actions/deliver/#trade_representative_contact_information",
            "text": "Trade Representative Contact information for Korean App Store. Available options:  first_name ,  last_name ,  address_line1 ,  address_line2 ,  address_line3 ,  city_name ,  state ,  country ,  postal_code ,  phone_number ,  email_address ,  is_displayed_on_app_store .  trade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)  You can also provide these values by creating files in a  metadata/trade_representative_contact_information/  directory. The file names must match the pattern  <key>.txt  (e.g.  first_name.txt ,  address_line1.txt  etc.). The contents of each file will be used as the value for the matching key. Values provided in the  Deliverfile  or  Fastfile  will be take priority over values from these files.  is_displayed_on_app_store  is the option on App Store Connect described as:  Display Trade Representative Contact Information on the Korean App Store",
            "title": "trade_representative_contact_information"
        },
        {
            "location": "/actions/deliver/#app_review_information",
            "text": "Contact information for the app review team. Available options:  first_name ,  last_name ,  phone_number ,  email_address ,  demo_user ,  demo_password ,  notes .  app_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)  You can also provide these values by creating files in a  metadata/review_information/  directory. The file names must match the pattern  <key>.txt  (e.g.  first_name.txt ,  notes.txt  etc.). The contents of each file will be used as the value for the matching key. Values provided in the  Deliverfile  or  Fastfile  will be take priority over values from these files.",
            "title": "app_review_information"
        },
        {
            "location": "/actions/deliver/#app_review_attachment_file",
            "text": "You can provide additional information to the app review team as a file attachment. As of this writing, Apple supports following file attachment formats: .pdf, .doc, .docx, .rtf, .pages, .xls, .xlsx, .numbers, .zip, .rar, .plist, .crash, .jpg, .png, .mp4, or .avi.  Provide an empty string (i.e. \"\", not null) to remove the existing attachment file (if any) from the review information being edited.  app_review_attachment_file: \"./readme.txt\"",
            "title": "app_review_attachment_file"
        },
        {
            "location": "/actions/deliver/#submission_information",
            "text": "Must be a hash. This is used as the last step for the deployment process, where you define if you use third party content or use encryption.  A list of available options .  submission_information({\n  add_id_info_serves_ads: true,\n  ...\n})",
            "title": "submission_information"
        },
        {
            "location": "/actions/deliver/#automatic_release",
            "text": "Should the app be released to all users once Apple approves it? If set to  false , you'll have to manually release the update once it got approved.  automatic_release(true)\n# or\nautomatic_release(false)",
            "title": "automatic_release"
        },
        {
            "location": "/actions/deliver/#phased_release",
            "text": "Enable or disable the phased releases feature of App Store Connect. If set to  true , the update will be released over a 7 day period. Default behavior is to leave whatever you defined on App Store Connect.  phased_release(true)\n# or\nphased_release(false)",
            "title": "phased_release"
        },
        {
            "location": "/actions/deliver/#reset_ratings",
            "text": "Reset your app's summary rating for all territories. If set to  true , it will reset rating when this version is released. Default behavior is to keep existing rating.  reset_ratings(true)\n# or\nreset_ratings(false)",
            "title": "reset_ratings"
        },
        {
            "location": "/actions/deliver/#app_rating_config_path",
            "text": "You can set the app age ratings using  deliver . You'll have to create and store a  JSON  configuration file. Copy the  template  to your project folder and pass the path to the  JSON  file using the  app_rating_config_path  option.  The keys/values on the top allow values from 0-2, and the items on the bottom allow only 0 or 1. More information in  #reference .",
            "title": "app_rating_config_path"
        },
        {
            "location": "/actions/deliver/#metadata",
            "text": "All options below are useful if you want to specify certain app metadata in your  Deliverfile  or  Fastfile",
            "title": "Metadata"
        },
        {
            "location": "/actions/deliver/#localized",
            "text": "Localized values should be set like this  description({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})",
            "title": "Localized"
        },
        {
            "location": "/actions/deliver/#name",
            "text": "The title/name of the app",
            "title": "name"
        },
        {
            "location": "/actions/deliver/#subtitle",
            "text": "Localized subtitle of the app  subtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)",
            "title": "subtitle"
        },
        {
            "location": "/actions/deliver/#description",
            "text": "The description of the app",
            "title": "description"
        },
        {
            "location": "/actions/deliver/#release_notes",
            "text": "The release_notes (What's new / Changelog) of the latest version",
            "title": "release_notes"
        },
        {
            "location": "/actions/deliver/#support_url-marketing_url-privacy_url",
            "text": "These URLs are shown in the AppStore",
            "title": "support_url, marketing_url, privacy_url"
        },
        {
            "location": "/actions/deliver/#keywords",
            "text": "Keywords separated using a comma.  keywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)",
            "title": "keywords"
        },
        {
            "location": "/actions/deliver/#promotional_text",
            "text": "Localized promotional text  promotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)",
            "title": "promotional_text"
        },
        {
            "location": "/actions/deliver/#app_icon",
            "text": "A path to a new app icon, which must be exactly 1024x1024px  app_icon('./AppIcon.png')",
            "title": "app_icon"
        },
        {
            "location": "/actions/deliver/#apple_watch_app_icon",
            "text": "A path to a new app icon for the \uf8ff Watch, which must be exactly 1024x1024px  apple_watch_app_icon('./AppleWatchAppIcon.png')",
            "title": "apple_watch_app_icon"
        },
        {
            "location": "/actions/deliver/#platform",
            "text": "The platform of your application (a.e. ios, osx).  This option is optional. The default value is \"ios\" and deliver should be able to figure out the platform from your binary.  However, in the case if multiple binaries present, you can specify a platform which you want to deliver explicitly.  The available options:   'ios'  'appletvos'  'osx'",
            "title": "platform"
        },
        {
            "location": "/actions/deliver/#non-localized",
            "text": "",
            "title": "Non-Localized"
        },
        {
            "location": "/actions/deliver/#copyright",
            "text": "The up to date copyright information.  copyright(\"#{Time.now.year} Felix Krause\")",
            "title": "copyright"
        },
        {
            "location": "/actions/deliver/#primary_category",
            "text": "The english name of the category you want to set (e.g.  Business ,  Books )  See  #reference  for a list of available categories",
            "title": "primary_category"
        },
        {
            "location": "/actions/deliver/#secondary_category",
            "text": "The english name of the secondary category you want to set",
            "title": "secondary_category"
        },
        {
            "location": "/actions/deliver/#primary_first_sub_category",
            "text": "The english name of the primary first sub category you want to set",
            "title": "primary_first_sub_category"
        },
        {
            "location": "/actions/deliver/#primary_second_sub_category",
            "text": "The english name of the primary second sub category you want to set",
            "title": "primary_second_sub_category"
        },
        {
            "location": "/actions/deliver/#secondary_first_sub_category",
            "text": "The english name of the secondary first sub category you want to set",
            "title": "secondary_first_sub_category"
        },
        {
            "location": "/actions/deliver/#secondary_second_sub_category",
            "text": "The english name of the secondary second sub category you want to set",
            "title": "secondary_second_sub_category"
        },
        {
            "location": "/actions/deliver/#submit-build",
            "text": "deliver  allows you to promote an existing build to production. Below are examples to select a previously uploaded build and submit it for review.  fastlane deliver submit_build --build_number 830",
            "title": "Submit Build"
        },
        {
            "location": "/actions/deliver/#submit-build-in-a-fastfile",
            "text": "lane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend  Omit  build_number  to let  fastlane  automatically select the latest build number for the current version being edited for release from App Store Connect.",
            "title": "Submit build in a Fastfile"
        },
        {
            "location": "/actions/deliver/#compliance-and-idfa-settings",
            "text": "Use the  submission_information  parameter for additional submission specifiers, including compliance and IDFA settings. Look at the Spaceship's  app_submission.rb  file for options. See  this example .  fastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"",
            "title": "Compliance and IDFA settings"
        },
        {
            "location": "/actions/deliver/#app-privacy-details",
            "text": "Starting on December 8, 2020, Apple announced that developers are required to provide app privacy details that will help users understand an app's privacy practies.  deliver  does not allow for updating of this information but this can be done with the  upload_app_privacy_details_to_app_store  action. More information on  Uploading App Privacy Details",
            "title": "App Privacy Details"
        },
        {
            "location": "/actions/deliver/#credentials",
            "text": "A detailed description about how your credentials are handled is available in a  credentials_manager .",
            "title": "Credentials"
        },
        {
            "location": "/actions/deliver/#how-does-this-thing-even-work-is-magic-involved",
            "text": "Your password will be stored in the macOS keychain, but can also be passed using environment variables. (More information available on  CredentialsManager )  Before actually uploading anything to iTunes,  deliver  will generate a HTML summary of the collected data.  deliver  uses the following techniques under the hood:   The iTMSTransporter tool is used to upload the binary to App Store Connect. iTMSTransporter is a command line tool provided by Apple.  For all metadata related actions  deliver  uses  spaceship",
            "title": "How does this thing even work? Is magic involved? \ud83c\udfa9"
        },
        {
            "location": "/actions/deliver/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/deliver/#available-language-codes",
            "text": "ar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, uk, vi, zh-Hans, zh-Hant",
            "title": "Available language codes"
        },
        {
            "location": "/actions/deliver/#available-metadata-folder-options",
            "text": "deliver  allows for metadata to be set through  .txt  files in the metadata folder. This metadata folder location is defaulted to  ./fastlane/metadata  but can be overridden through the  metadata_path  parameter. Below are all allowed metadata options.",
            "title": "Available Metadata Folder Options"
        },
        {
            "location": "/actions/deliver/#non-localized-metadata",
            "text": "Key  Editable While Live  Directory  Filename      copyright  Yes  <metadata_path>  copyright.txt    primary_category  No  <metadata_path>  primary_category.txt    secondary_category  No  <metadata_path>  secondary_category.txt    primary_first_sub_category  No  <metadata_path>  primary_first_sub_category.txt    primary_second_sub_category  No  <metadata_path>  primary_second_sub_category.txt    secondary_first_sub_category  No  <metadata_path>  secondary_first_sub_category.txt    secondary_second_sub_category  No  <metadata_path>  secondary_second_sub_category.txt",
            "title": "Non-Localized Metadata"
        },
        {
            "location": "/actions/deliver/#localized-metadata",
            "text": "Key  Editable While Live  Directory  Filename      name  No  <metadata_path>/<lang>/  name.txt    subtitle  No  <metadata_path>/<lang>/  subtitle.txt    privacy_url  Yes  <metadata_path>/<lang>/  privacy_url.txt    apple_tv_privacy_policy  No  <metadata_path>/<lang>/  apple_tv_privacy_policy.txt    description  Yes  <metadata_path>/<lang>/  description.txt    keywords  No  <metadata_path>/<lang>/  keywords.txt    release_notes  Yes  <metadata_path>/<lang>/  release_notes.txt    support_url  Yes  <metadata_path>/<lang>/  support_url.txt    marketing_url  Yes  <metadata_path>/<lang>/  marketing_url.txt    promotional_text  Yes  <metadata_path>/<lang>/  promotional_text.txt",
            "title": "Localized Metadata"
        },
        {
            "location": "/actions/deliver/#review-information-metadata",
            "text": "Key  Editable While Live  Directory  Filename  Deprecated Filename      first_name  Yes  <metadata_path>/review_information  first_name.txt  review_first_name.txt    last_name  Yes  <metadata_path>/review_information  last_name.txt  review_last_name.txt    phone_number  Yes  <metadata_path>/review_information  phone_number.txt  review_phone_number.txt    email_address  Yes  <metadata_path>/review_information  email_address.txt  review_email.txt    demo_user  Yes  <metadata_path>/review_information  demo_user.txt  review_demo_user.txt    demo_password  Yes  <metadata_path>/review_information  demo_password.txt  review_demo_password.txt    notes  Yes  <metadata_path>/review_information  notes.txt  review_notes.txt",
            "title": "Review Information Metadata"
        },
        {
            "location": "/actions/deliver/#reference",
            "text": "View all available categories, etc.",
            "title": "Reference"
        },
        {
            "location": "/actions/deliver/#available-categories",
            "text": "FOOD_AND_DRINK  BUSINESS  EDUCATION  SOCIAL_NETWORKING  BOOKS  SPORTS  FINANCE  REFERENCE  GRAPHICS_AND_DESIGN  DEVELOPER_TOOLS  HEALTH_AND_FITNESS  MUSIC  WEATHER  TRAVEL  ENTERTAINMENT  STICKERS  GAMES  LIFESTYLE  MEDICAL  MAGAZINES_AND_NEWSPAPERS  UTILITIES  SHOPPING  PRODUCTIVITY  NEWS  PHOTO_AND_VIDEO  NAVIGATION",
            "title": "Available Categories"
        },
        {
            "location": "/actions/deliver/#available-game-subcategories",
            "text": "MZGenre.Action  MZGenre.Adventure  MZGenre.Arcade  MZGenre.Board  MZGenre.Card  MZGenre.Casino  MZGenre.Dice  MZGenre.Educational  MZGenre.Family  MZGenre.Music  MZGenre.Puzzle  MZGenre.Racing  MZGenre.RolePlaying  MZGenre.Simulation  MZGenre.Sports  MZGenre.Strategy  MZGenre.Trivia  MZGenre.Word    GAMES_SPORTS  GAMES_WORD  GAMES_MUSIC  GAMES_ADVENTURE  GAMES_ACTION  GAMES_ROLE_PLAYING  GAMES_CASUAL  GAMES_BOARD  GAMES_TRIVIA  GAMES_CARD  GAMES_PUZZLE  GAMES_CASINO  GAMES_STRATEGY  GAMES_SIMULATION  GAMES_RACING  GAMES_FAMILY",
            "title": "Available Game Subcategories"
        },
        {
            "location": "/actions/deliver/#available-stickers-subcategories",
            "text": "STICKERS_PLACES_AND_OBJECTS  STICKERS_EMOJI_AND_EXPRESSIONS  STICKERS_CELEBRATIONS  STICKERS_CELEBRITIES  STICKERS_MOVIES_AND_TV  STICKERS_SPORTS_AND_ACTIVITIES  STICKERS_EATING_AND_DRINKING  STICKERS_CHARACTERS  STICKERS_ANIMALS  STICKERS_FASHION  STICKERS_ART  STICKERS_GAMING  STICKERS_KIDS_AND_FAMILY  STICKERS_PEOPLE  STICKERS_MUSIC",
            "title": "Available Stickers Subcategories"
        },
        {
            "location": "/actions/deliver/#available-age-rating-groups",
            "text": "",
            "title": "Available age rating groups"
        },
        {
            "location": "/actions/deliver/#non-boolean",
            "text": "Values   0: None  1: Infrequent/Mild  2: Frequent/Intense    NONE  INFREQUENT_OR_MILD  FREQUENT_OR_INTENSE   Keys   violenceCartoonOrFantasy  violenceRealistic  violenceRealisticProlongedGraphicOrSadistic  profanityOrCrudeHumor  matureOrSuggestiveThemes  horrorOrFearThemes  medicalOrTreatmentInformation  alcoholTobaccoOrDrugUseOrReferences  gamblingSimulated  sexualContentOrNudity  sexualContentGraphicAndNudity",
            "title": "Non Boolean"
        },
        {
            "location": "/actions/deliver/#boolean",
            "text": "Keys   unrestrictedWebAccess  gamblingAndContests",
            "title": "Boolean"
        },
        {
            "location": "/actions/deliver/#default-values",
            "text": "Deliver has a special  default  language code which allows you to provide values that are not localized, and which will be used as defaults when you don\u2019t provide a specific localized value.  In order to use  default , you will need to tell  deliver  which languages your app uses. You can do this in either of two ways:   Create the folders named with the language in the metadata folder (i.e. fastlane/metadata/en-US or fastlane/metadata/de-DE)  Add the following to your  Deliverfile   languages(['en-US','de-DE'])   You can use this either in json within your  Deliverfile  and/or as folders in your metadata folder.  deliver  will take the union of both language sets from the  Deliverfile  and from the metadata folder and create on single set of languages which will be enabled.  Imagine that you have localized data for the following language codes:   en-US, de-DE, el, it  You can set the following in your  Deliverfile  release_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})  Deliver will use \"Shiny and new\" for en-US, el and it.  It will use \"glaenzend und neu\" for de-DE.  You can do the same with folders     default\n      keywords.txt\n      marketing_url.txt\n      name.txt\n      privacy_url.txt\n      support_url.txt\n      release_notes.txt\n   en-US\n      description.txt\n   de-DE\n      description.txt\n   el\n      description.txt\n   it\n      description.txt  In this case, default values for keywords, urls, name and release notes are used in all localizations, but each language has a fully localized description",
            "title": "Default values"
        },
        {
            "location": "/actions/deliver/#uploading-screenshots-for-ipad-pro-129-inch-3rd-generation",
            "text": "Starting March 20, 2019 Apple's App Store  requires 12.9-inch iPad Pro (3rd generation) screenshots additionally to the iPad Pro 2nd generation  screenshots . As fastlane historically uses the screenshot dimensions to determine the \"display family\" of a screenshot, this poses a problem as both use the same dimensions and are recognized as the same device family.  To solve this a screenshot of a 12.9-inch iPad Pro (3rd generation) must contain either the string  iPad Pro (12.9-inch) (3rd generation)  or  ipadPro129  (Apple's internal naming of the display family for the 3rd generation iPad Pro) in its filename to be assigned the correct display family and to be uploaded to the correct screenshot slot in your app's metadata.",
            "title": "Uploading screenshots for \"iPad Pro (12.9-inch) (3rd generation)\""
        },
        {
            "location": "/actions/deliver/#automatically-create-screenshots",
            "text": "If you want to integrate  deliver  with  snapshot , check out  fastlane !",
            "title": "Automatically create screenshots"
        },
        {
            "location": "/actions/deliver/#jenkins-integration",
            "text": "Detailed instructions about how to set up  deliver  and  fastlane  in  Jenkins  can be found in the  fastlane README .",
            "title": "Jenkins integration"
        },
        {
            "location": "/actions/deliver/#firewall-issues",
            "text": "deliver  uses the iTunes Transporter to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol using  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" fastlane deliver",
            "title": "Firewall Issues"
        },
        {
            "location": "/actions/deliver/#http-proxy",
            "text": "iTunes Transporter is a Java application bundled with Xcode. In addition to utilizing the  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" , you need to configure the transporter application to use the proxy independently from the system proxy or any environment proxy settings. You can find the configuration file within Xcode:  for Xcode11 and later  TOOLS_PATH=$( xcode-select -p )\nREL_PATH='../SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"  for Xcode10 or earlier  TOOLS_PATH=$( xcode-select -p )\nREL_PATH='../Applications/Application Loader.app/Contents/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"  Add necessary proxy configuration values to the net.properties according to  Java Proxy Configuration .  As an alternative to editing the properties files, proxy configuration can be specified on the command line directly:  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV -Dhttp.proxyHost=myproxy.com -Dhttp.proxyPort=8080\"",
            "title": "HTTP Proxy"
        },
        {
            "location": "/actions/deliver/#limit",
            "text": "App Store Connect has a limit of 150 binary uploads per day.",
            "title": "Limit"
        },
        {
            "location": "/actions/deliver/#editing-the-deliverfile",
            "text": "Change syntax highlighting to  Ruby .",
            "title": "Editing the Deliverfile"
        },
        {
            "location": "/actions/deliver/#provider-short-name",
            "text": "If you are on multiple App Store Connect teams,  deliver  needs a provider short name to know where to upload your binary.  deliver  will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the  itc_provider  option.      deliver       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Provider Short Name"
        },
        {
            "location": "/actions/deliver/#3-examples",
            "text": "upload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)  deliver   # alias for \"upload_to_app_store\"  appstore  # alias for \"upload_to_app_store\"",
            "title": "3 Examples"
        },
        {
            "location": "/actions/deliver/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    app_identifier  The bundle identifier of your app  *    app_version  The version that should be edited or created     ipa  Path to your ipa file  *    pkg  Path to your pkg file  *    build_number  If set the given build number (already uploaded to iTC) will be used instead of the current built one     platform  The platform to use (optional)  ios    edit_live  Modify live metadata, this option disables ipa upload and screenshot upload  false    use_live_version  Force usage of live version rather than edit version  false    metadata_path  Path to the folder containing the metadata files     screenshots_path  Path to the folder containing the screenshots     skip_binary_upload  Skip uploading an ipa or pkg to App Store Connect  false    skip_screenshots  Don't upload the screenshots  false    skip_metadata  Don't upload the metadata (e.g. title, description). This will still upload screenshots  false    skip_app_version_update  Don\u2019t create or update the app version that is being prepared for submission  false    force  Skip verification of HTML preview file  false    overwrite_screenshots  Clear all previously uploaded screenshots before uploading the new ones  false    submit_for_review  Submit the new version for Review after uploading everything  false    reject_if_possible  Rejects the previously submitted build if it's in a state where it's possible  false    automatic_release  Should the app be automatically released once it's approved? (Can not be used together with  auto_release_date )     auto_release_date  Date in milliseconds for automatically releasing on pending approval (Can not be used together with  automatic_release )     phased_release  Enable the phased release feature of iTC  false    reset_ratings  Reset the summary rating when you release a new version of the application  false    price_tier  The price tier of this application     app_rating_config_path  Path to the app rating's config     submission_information  Extra information for the submission (e.g. compliance specifications, IDFA settings)     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    dev_portal_team_id  The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!  *    dev_portal_team_name  The name of your Developer Portal team if you're in multiple teams  *    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run  pathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off . The short names of providers should be listed in the second column  *    run_precheck_before_submit  Run precheck before submitting to app review  true    precheck_default_rule_level  The default precheck rule level unless otherwise configured  :warn    individual_metadata_items  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - An array of localized metadata items to upload individually by language so that errors can be identified. E.g. ['name', 'keywords', 'description']. Note: slow     app_icon  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the app icon     apple_watch_app_icon  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the Apple Watch app icon     copyright  Metadata: The copyright notice     primary_category  Metadata: The english name of the primary category (e.g.  Business ,  Books )     secondary_category  Metadata: The english name of the secondary category (e.g.  Business ,  Books )     primary_first_sub_category  Metadata: The english name of the primary first sub category (e.g.  Educational ,  Puzzle )     primary_second_sub_category  Metadata: The english name of the primary second sub category (e.g.  Educational ,  Puzzle )     secondary_first_sub_category  Metadata: The english name of the secondary first sub category (e.g.  Educational ,  Puzzle )     secondary_second_sub_category  Metadata: The english name of the secondary second sub category (e.g.  Educational ,  Puzzle )     trade_representative_contact_information  Metadata: A hash containing the trade representative contact information     app_review_information  Metadata: A hash containing the review information     app_review_attachment_file  Metadata: Path to the app review attachment file     description  Metadata: The localised app description     name  Metadata: The localised app name     subtitle  Metadata: The localised app subtitle     keywords  Metadata: An array of localised keywords     promotional_text  Metadata: An array of localised promotional texts     release_notes  Metadata: Localised release notes for this version     privacy_url  Metadata: Localised privacy url     apple_tv_privacy_policy  Metadata: Localised Apple TV privacy policy text     support_url  Metadata: Localised support url     marketing_url  Metadata: Localised marketing url     languages  Metadata: List of languages to activate     ignore_language_directory_validation  Ignore errors when invalid languages are found in metadata and screenshot directories  false    precheck_include_in_app_purchases  Should precheck check in-app purchases?  true    app  The (spaceship) app ID of the app you want to use/modify      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/deliver/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action deliver",
            "title": "Documentation"
        },
        {
            "location": "/actions/deliver/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run deliver  To pass parameters, make use of the  :  symbol, for example  fastlane run deliver parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/deliver/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/deploygate/",
            "text": "deploygate\n\n\nUpload a new build to \nDeployGate\n\n\n\n\nYou can retrieve your username and API token on \nyour settings page\n.\nMore information about the available options can be found in the \nDeployGate Push API document\n.\n\n\n\n\n\n\n\n\n\n\ndeploygate\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@tnj, @tomorrowkey\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndeploygate(\n  api_token: \"...\",\n  user: \"target username or organization name\",\n  ipa: \"./ipa_file.ipa\",\n  message: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n  distribution_key: \"(Optional) Target Distribution Key\",\n  distribution_name: \"(Optional) Target Distribution Name\"\n)\n\n\n\n\ndeploygate(\n  api_token: \"...\",\n  user: \"target username or organization name\",\n  apk: \"./apk_file.apk\",\n  message: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n  distribution_key: \"(Optional) Target Distribution Key\",\n  distribution_name: \"(Optional) Target Distribution Name\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nDeploygate API Token\n\n\n\n\n\n\n\n\nuser\n\n\nTarget username or organization name\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\napk\n\n\nPath to your APK file\n\n\n*\n\n\n\n\n\n\nmessage\n\n\nRelease Notes\n\n\nNo changelog provided\n\n\n\n\n\n\ndistribution_key\n\n\nTarget Distribution Key\n\n\n\n\n\n\n\n\nrelease_note\n\n\nRelease note for distribution page\n\n\n\n\n\n\n\n\ndisable_notify\n\n\nDisables Push notification emails\n\n\nfalse\n\n\n\n\n\n\ndistribution_name\n\n\nTarget Distribution Name\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ndeploygate\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::DEPLOYGATE_URL\n\n\nURL of the newly uploaded build\n\n\n\n\n\n\nSharedValues::DEPLOYGATE_REVISION\n\n\nauto incremented revision number\n\n\n\n\n\n\nSharedValues::DEPLOYGATE_APP_INFO\n\n\nContains app revision, bundle identifier, etc.\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action deploygate\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run deploygate\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run deploygate parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "deploygate"
        },
        {
            "location": "/actions/deploygate/#deploygate",
            "text": "Upload a new build to  DeployGate   You can retrieve your username and API token on  your settings page . More information about the available options can be found in the  DeployGate Push API document .      deploygate       Supported platforms  ios, android    Author  @tnj, @tomorrowkey",
            "title": "deploygate"
        },
        {
            "location": "/actions/deploygate/#2-examples",
            "text": "deploygate(\n  api_token: \"...\",\n  user: \"target username or organization name\",\n  ipa: \"./ipa_file.ipa\",\n  message: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n  distribution_key: \"(Optional) Target Distribution Key\",\n  distribution_name: \"(Optional) Target Distribution Name\"\n)  deploygate(\n  api_token: \"...\",\n  user: \"target username or organization name\",\n  apk: \"./apk_file.apk\",\n  message: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n  distribution_key: \"(Optional) Target Distribution Key\",\n  distribution_name: \"(Optional) Target Distribution Name\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/deploygate/#parameters",
            "text": "Key  Description  Default      api_token  Deploygate API Token     user  Target username or organization name     ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action  *    apk  Path to your APK file  *    message  Release Notes  No changelog provided    distribution_key  Target Distribution Key     release_note  Release note for distribution page     disable_notify  Disables Push notification emails  false    distribution_name  Target Distribution Name      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/deploygate/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  deploygate  action generates the following Lane Variables:     SharedValue  Description      SharedValues::DEPLOYGATE_URL  URL of the newly uploaded build    SharedValues::DEPLOYGATE_REVISION  auto incremented revision number    SharedValues::DEPLOYGATE_APP_INFO  Contains app revision, bundle identifier, etc.     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/deploygate/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action deploygate",
            "title": "Documentation"
        },
        {
            "location": "/actions/deploygate/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run deploygate  To pass parameters, make use of the  :  symbol, for example  fastlane run deploygate parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/deploygate/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/dotgpg_environment/",
            "text": "dotgpg_environment\n\n\nReads in production secrets set in a dotgpg file and puts them in ENV\n\n\n\n\nMore information about dotgpg can be found at \nhttps://github.com/ConradIrwin/dotgpg\n.\n\n\n\n\n\n\n\n\n\n\ndotgpg_environment\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@simonlevy5\n\n\n\n\n\n\n\n\n1 Example\n\n\ndotgpg_environment(dotgpg_file: './path/to/gpgfile')\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndotgpg_file\n\n\nPath to your gpg file\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action dotgpg_environment\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run dotgpg_environment\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run dotgpg_environment parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "dotgpg_environment"
        },
        {
            "location": "/actions/dotgpg_environment/#dotgpg_environment",
            "text": "Reads in production secrets set in a dotgpg file and puts them in ENV   More information about dotgpg can be found at  https://github.com/ConradIrwin/dotgpg .      dotgpg_environment       Supported platforms  ios, android, mac    Author  @simonlevy5",
            "title": "dotgpg_environment"
        },
        {
            "location": "/actions/dotgpg_environment/#1-example",
            "text": "dotgpg_environment(dotgpg_file: './path/to/gpgfile')",
            "title": "1 Example"
        },
        {
            "location": "/actions/dotgpg_environment/#parameters",
            "text": "Key  Description  Default      dotgpg_file  Path to your gpg file  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/dotgpg_environment/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action dotgpg_environment",
            "title": "Documentation"
        },
        {
            "location": "/actions/dotgpg_environment/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run dotgpg_environment  To pass parameters, make use of the  :  symbol, for example  fastlane run dotgpg_environment parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/dotgpg_environment/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/download/",
            "text": "download\n\n\nDownload a file from a remote server (e.g. JSON file)\n\n\n\n\nSpecify the URL to download and get the content as a return value.\nAutomatically parses JSON into a Ruby data structure.\nFor more advanced networking code, use the Ruby functions instead: \nhttp://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html\n.\n\n\n\n\n\n\n\n\n\n\ndownload\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\ndata = download(url: \"https://host.com/api.json\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe URL that should be downloaded\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ndownload\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::DOWNLOAD_CONTENT\n\n\nThe content of the file we just downloaded\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action download\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run download\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run download parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "download"
        },
        {
            "location": "/actions/download/#download",
            "text": "Download a file from a remote server (e.g. JSON file)   Specify the URL to download and get the content as a return value. Automatically parses JSON into a Ruby data structure. For more advanced networking code, use the Ruby functions instead:  http://docs.ruby-lang.org/en/2.0.0/Net/HTTP.html .      download       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "download"
        },
        {
            "location": "/actions/download/#1-example",
            "text": "data = download(url: \"https://host.com/api.json\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/download/#parameters",
            "text": "Key  Description  Default      url  The URL that should be downloaded      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/download/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  download  action generates the following Lane Variables:     SharedValue  Description      SharedValues::DOWNLOAD_CONTENT  The content of the file we just downloaded     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/download/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action download",
            "title": "Documentation"
        },
        {
            "location": "/actions/download/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run download  To pass parameters, make use of the  :  symbol, for example  fastlane run download parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/download/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/",
            "text": "download_app_privacy_details_from_app_store\n\n\nDownload App Privacy Details from an app in App Store Connect\n\n\n\n\nDownload App Privacy Details from an app in App Store Connect. For more detail information, view https://docs.fastlane.tools/uploading-app-privacy-details\n\n\n\n\n\n\n\n\n\n\ndownload_app_privacy_details_from_app_store\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@igor-makarov\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndownload_app_privacy_details_from_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)\n\n\n\n\ndownload_app_privacy_details_from_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  output_json_path: \"fastlane/app_data_usages.json\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username for App Store Connect\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\noutput_json_path\n\n\nPath to the app usage data JSON file generated by interactive questions\n\n\n./fastlane/app_privacy_details.json\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action download_app_privacy_details_from_app_store\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run download_app_privacy_details_from_app_store\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run download_app_privacy_details_from_app_store parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "download_app_privacy_details_from_app_store"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/#download_app_privacy_details_from_app_store",
            "text": "Download App Privacy Details from an app in App Store Connect   Download App Privacy Details from an app in App Store Connect. For more detail information, view https://docs.fastlane.tools/uploading-app-privacy-details      download_app_privacy_details_from_app_store       Supported platforms  ios, mac    Author  @igor-makarov",
            "title": "download_app_privacy_details_from_app_store"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/#2-examples",
            "text": "download_app_privacy_details_from_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)  download_app_privacy_details_from_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  output_json_path: \"fastlane/app_data_usages.json\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/#parameters",
            "text": "Key  Description  Default      username  Your Apple ID Username for App Store Connect  *    app_identifier  The bundle identifier of your app  *    team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    output_json_path  Path to the app usage data JSON file generated by interactive questions  ./fastlane/app_privacy_details.json     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action download_app_privacy_details_from_app_store",
            "title": "Documentation"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run download_app_privacy_details_from_app_store  To pass parameters, make use of the  :  symbol, for example  fastlane run download_app_privacy_details_from_app_store parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/download_app_privacy_details_from_app_store/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/download_dsyms/",
            "text": "download_dsyms\n\n\nDownload dSYM files from App Store Connect for Bitcode apps\n\n\n\n\nThis action downloads dSYM files from App Store Connect after the ipa gets re-compiled by Apple. Useful if you have Bitcode enabled.\n\n\n\n\nlane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend\n\n\n\n\n\n\n\n\n\n\n\n\ndownload_dsyms\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n6 Examples\n\n\ndownload_dsyms\n\n\n\n\ndownload_dsyms(version: \"1.0.0\", build_number: \"345\")\n\n\n\n\ndownload_dsyms(version: \"1.0.1\", build_number: 42)\n\n\n\n\ndownload_dsyms(version: \"live\")\n\n\n\n\ndownload_dsyms(min_version: \"1.2.3\")\n\n\n\n\ndownload_dsyms(after_uploaded_date: \"2020-09-11T19:00:00+01:00\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username for App Store Connect\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe app platform for dSYMs you wish to download (ios, appletvos)\n\n\n:ios\n\n\n\n\n\n\nversion\n\n\nThe app version for dSYMs you wish to download, pass in 'latest' to download only the latest build's dSYMs or 'live' to download only the live version dSYMs\n\n\n\n\n\n\n\n\nbuild_number\n\n\nThe app build_number for dSYMs you wish to download\n\n\n\n\n\n\n\n\nmin_version\n\n\nThe minimum app version for dSYMs you wish to download\n\n\n\n\n\n\n\n\nafter_uploaded_date\n\n\nThe uploaded date after which you wish to download dSYMs\n\n\n\n\n\n\n\n\noutput_directory\n\n\nWhere to save the download dSYMs, defaults to the current path\n\n\n\n\n\n\n\n\nwait_for_dsym_processing\n\n\nWait for dSYMs to process\n\n\nfalse\n\n\n\n\n\n\nwait_timeout\n\n\nNumber of seconds to wait for dSYMs to process\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ndownload_dsyms\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::DSYM_PATHS\n\n\nAn array to all the zipped dSYM files\n\n\n\n\n\n\nSharedValues::DSYM_LATEST_UPLOADED_DATE\n\n\nDate of the most recent uploaded time of successfully downloaded dSYM files\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action download_dsyms\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run download_dsyms\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run download_dsyms parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "download_dsyms"
        },
        {
            "location": "/actions/download_dsyms/#download_dsyms",
            "text": "Download dSYM files from App Store Connect for Bitcode apps   This action downloads dSYM files from App Store Connect after the ipa gets re-compiled by Apple. Useful if you have Bitcode enabled.   lane :refresh_dsyms do\n  download_dsyms                  # Download dSYM files from iTC\n  upload_symbols_to_crashlytics   # Upload them to Crashlytics\n  clean_build_artifacts           # Delete the local dSYM files\nend      download_dsyms       Supported platforms  ios    Author  @KrauseFx",
            "title": "download_dsyms"
        },
        {
            "location": "/actions/download_dsyms/#6-examples",
            "text": "download_dsyms  download_dsyms(version: \"1.0.0\", build_number: \"345\")  download_dsyms(version: \"1.0.1\", build_number: 42)  download_dsyms(version: \"live\")  download_dsyms(min_version: \"1.2.3\")  download_dsyms(after_uploaded_date: \"2020-09-11T19:00:00+01:00\")",
            "title": "6 Examples"
        },
        {
            "location": "/actions/download_dsyms/#parameters",
            "text": "Key  Description  Default      username  Your Apple ID Username for App Store Connect  *    app_identifier  The bundle identifier of your app  *    team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    platform  The app platform for dSYMs you wish to download (ios, appletvos)  :ios    version  The app version for dSYMs you wish to download, pass in 'latest' to download only the latest build's dSYMs or 'live' to download only the live version dSYMs     build_number  The app build_number for dSYMs you wish to download     min_version  The minimum app version for dSYMs you wish to download     after_uploaded_date  The uploaded date after which you wish to download dSYMs     output_directory  Where to save the download dSYMs, defaults to the current path     wait_for_dsym_processing  Wait for dSYMs to process  false    wait_timeout  Number of seconds to wait for dSYMs to process  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/download_dsyms/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  download_dsyms  action generates the following Lane Variables:     SharedValue  Description      SharedValues::DSYM_PATHS  An array to all the zipped dSYM files    SharedValues::DSYM_LATEST_UPLOADED_DATE  Date of the most recent uploaded time of successfully downloaded dSYM files     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/download_dsyms/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action download_dsyms",
            "title": "Documentation"
        },
        {
            "location": "/actions/download_dsyms/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run download_dsyms  To pass parameters, make use of the  :  symbol, for example  fastlane run download_dsyms parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/download_dsyms/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/download_from_play_store/",
            "text": "download_from_play_store\n\n\nDownload metadata and binaries from Google Play (via \nsupply\n)\n\n\n\n\nMore information: https://docs.fastlane.tools/actions/download_from_play_store/\n\n\n\n\n\n\n\n\n\n\ndownload_from_play_store\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@janpio\n\n\n\n\n\n\n\n\n1 Example\n\n\ndownload_from_play_store\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the application to use\n\n\n*\n\n\n\n\n\n\nversion_name\n\n\nVersion name (used when uploading new apks/aabs) - defaults to 'versionName' in build.gradle or AndroidManifest.xml\n\n\n*\n\n\n\n\n\n\ntrack\n\n\nThe track of the application to use. The default available tracks are: production, beta, alpha, internal\n\n\nproduction\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the directory containing the metadata files\n\n\n*\n\n\n\n\n\n\nkey\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The p12 File used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nissuer\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The issuer of the p12 file (email address of the service account)\n\n\n*\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action download_from_play_store\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run download_from_play_store\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run download_from_play_store parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "download_from_play_store"
        },
        {
            "location": "/actions/download_from_play_store/#download_from_play_store",
            "text": "Download metadata and binaries from Google Play (via  supply )   More information: https://docs.fastlane.tools/actions/download_from_play_store/      download_from_play_store       Supported platforms  android    Author  @janpio",
            "title": "download_from_play_store"
        },
        {
            "location": "/actions/download_from_play_store/#1-example",
            "text": "download_from_play_store",
            "title": "1 Example"
        },
        {
            "location": "/actions/download_from_play_store/#parameters",
            "text": "Key  Description  Default      package_name  The package name of the application to use  *    version_name  Version name (used when uploading new apks/aabs) - defaults to 'versionName' in build.gradle or AndroidManifest.xml  *    track  The track of the application to use. The default available tracks are: production, beta, alpha, internal  production    metadata_path  Path to the directory containing the metadata files  *    key  DEPRECATED!  Use  --json_key  instead - The p12 File used to authenticate with Google  *    issuer  DEPRECATED!  Use  --json_key  instead - The issuer of the p12 file (email address of the service account)  *    json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     timeout  Timeout for read, open, and send (in seconds)  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/download_from_play_store/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action download_from_play_store",
            "title": "Documentation"
        },
        {
            "location": "/actions/download_from_play_store/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run download_from_play_store  To pass parameters, make use of the  :  symbol, for example  fastlane run download_from_play_store parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/download_from_play_store/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/dsym_zip/",
            "text": "dsym_zip\n\n\nCreates a zipped dSYM in the project root from the .xcarchive\n\n\n\n\nYou can manually specify the path to the xcarchive (not needed if you use \nxcodebuild\n/\nxcarchive\n to build your archive)\n\n\n\n\n\n\n\n\n\n\ndsym_zip\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n2 Examples\n\n\ndsym_zip\n\n\n\n\ndsym_zip(\n  archive_path: \"MyApp.xcarchive\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\narchive_path\n\n\nPath to your xcarchive file. Optional if you use the \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\ndsym_path\n\n\nPath for generated dsym. Optional, default is your apps root directory\n\n\n\n\n\n\n\n\nall\n\n\nWhether or not all dSYM files are to be included. Optional, default is false in which only your app dSYM is included\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ndsym_zip\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::DSYM_ZIP_PATH\n\n\nThe named of the zipped dSYM\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action dsym_zip\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run dsym_zip\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run dsym_zip parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "dsym_zip"
        },
        {
            "location": "/actions/dsym_zip/#dsym_zip",
            "text": "Creates a zipped dSYM in the project root from the .xcarchive   You can manually specify the path to the xcarchive (not needed if you use  xcodebuild / xcarchive  to build your archive)      dsym_zip       Supported platforms  ios, mac    Author  @lmirosevic",
            "title": "dsym_zip"
        },
        {
            "location": "/actions/dsym_zip/#2-examples",
            "text": "dsym_zip  dsym_zip(\n  archive_path: \"MyApp.xcarchive\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/dsym_zip/#parameters",
            "text": "Key  Description  Default      archive_path  Path to your xcarchive file. Optional if you use the  xcodebuild  action  *    dsym_path  Path for generated dsym. Optional, default is your apps root directory     all  Whether or not all dSYM files are to be included. Optional, default is false in which only your app dSYM is included  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/dsym_zip/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  dsym_zip  action generates the following Lane Variables:     SharedValue  Description      SharedValues::DSYM_ZIP_PATH  The named of the zipped dSYM     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/dsym_zip/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action dsym_zip",
            "title": "Documentation"
        },
        {
            "location": "/actions/dsym_zip/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run dsym_zip  To pass parameters, make use of the  :  symbol, for example  fastlane run dsym_zip parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/dsym_zip/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/echo/",
            "text": "echo\n\n\nAlias for the \nputs\n action\n\n\n\n\n\n\n\n\necho\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nputs \"Hi there\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nMessage to be printed out\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action echo\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run echo\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run echo parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "echo"
        },
        {
            "location": "/actions/echo/#echo",
            "text": "Alias for the  puts  action     echo       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "echo"
        },
        {
            "location": "/actions/echo/#1-example",
            "text": "puts \"Hi there\"",
            "title": "1 Example"
        },
        {
            "location": "/actions/echo/#parameters",
            "text": "Key  Description  Default      message  Message to be printed out      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/echo/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action echo",
            "title": "Documentation"
        },
        {
            "location": "/actions/echo/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run echo  To pass parameters, make use of the  :  symbol, for example  fastlane run echo parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/echo/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ensure_bundle_exec/",
            "text": "ensure_bundle_exec\n\n\nRaises an exception if not using \nbundle exec\n to run fastlane\n\n\n\n\nThis action will check if you are using \nbundle exec\n to run fastlane.\nYou can put it into \nbefore_all\n to make sure that fastlane is ran using the \nbundle exec fastlane\n command.\n\n\n\n\n\n\n\n\n\n\nensure_bundle_exec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@rishabhtayal\n\n\n\n\n\n\n\n\n1 Example\n\n\nensure_bundle_exec\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ensure_bundle_exec\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ensure_bundle_exec\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ensure_bundle_exec parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ensure_bundle_exec"
        },
        {
            "location": "/actions/ensure_bundle_exec/#ensure_bundle_exec",
            "text": "Raises an exception if not using  bundle exec  to run fastlane   This action will check if you are using  bundle exec  to run fastlane. You can put it into  before_all  to make sure that fastlane is ran using the  bundle exec fastlane  command.      ensure_bundle_exec       Supported platforms  ios, android, mac    Author  @rishabhtayal",
            "title": "ensure_bundle_exec"
        },
        {
            "location": "/actions/ensure_bundle_exec/#1-example",
            "text": "ensure_bundle_exec",
            "title": "1 Example"
        },
        {
            "location": "/actions/ensure_bundle_exec/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ensure_bundle_exec",
            "title": "Documentation"
        },
        {
            "location": "/actions/ensure_bundle_exec/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ensure_bundle_exec  To pass parameters, make use of the  :  symbol, for example  fastlane run ensure_bundle_exec parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ensure_bundle_exec/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ensure_env_vars/",
            "text": "ensure_env_vars\n\n\nRaises an exception if the specified env vars are not set\n\n\n\n\nThis action will check if some environment variables are set.\n\n\n\n\n\n\n\n\n\n\nensure_env_vars\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@revolter\n\n\n\n\n\n\n\n\n1 Example\n\n\nensure_env_vars(\n  env_vars: ['GITHUB_USER_NAME', 'GITHUB_API_TOKEN']\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nenv_vars\n\n\nThe environment variables names that should be checked\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ensure_env_vars\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ensure_env_vars\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ensure_env_vars parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ensure_env_vars"
        },
        {
            "location": "/actions/ensure_env_vars/#ensure_env_vars",
            "text": "Raises an exception if the specified env vars are not set   This action will check if some environment variables are set.      ensure_env_vars       Supported platforms  ios, android, mac    Author  @revolter",
            "title": "ensure_env_vars"
        },
        {
            "location": "/actions/ensure_env_vars/#1-example",
            "text": "ensure_env_vars(\n  env_vars: ['GITHUB_USER_NAME', 'GITHUB_API_TOKEN']\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/ensure_env_vars/#parameters",
            "text": "Key  Description  Default      env_vars  The environment variables names that should be checked      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ensure_env_vars/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ensure_env_vars",
            "title": "Documentation"
        },
        {
            "location": "/actions/ensure_env_vars/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ensure_env_vars  To pass parameters, make use of the  :  symbol, for example  fastlane run ensure_env_vars parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ensure_env_vars/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ensure_git_branch/",
            "text": "ensure_git_branch\n\n\nRaises an exception if not on a specific git branch\n\n\n\n\nThis action will check if your git repo is checked out to a specific branch.\nYou may only want to make releases from a specific branch, so \nensure_git_branch\n will stop a lane if it was accidentally executed on an incorrect branch.\n\n\n\n\n\n\n\n\n\n\nensure_git_branch\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@dbachrach, @Liquidsoul\n\n\n\n\n\n\n\n\n2 Examples\n\n\nensure_git_branch # defaults to `master` branch\n\n\n\n\nensure_git_branch(\n  branch: 'develop'\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbranch\n\n\nThe branch that should be checked for. String that can be either the full name of the branch or a regex e.g. \n^feature/.*$\n to match\n\n\nmaster\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ensure_git_branch\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ensure_git_branch\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ensure_git_branch parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ensure_git_branch"
        },
        {
            "location": "/actions/ensure_git_branch/#ensure_git_branch",
            "text": "Raises an exception if not on a specific git branch   This action will check if your git repo is checked out to a specific branch. You may only want to make releases from a specific branch, so  ensure_git_branch  will stop a lane if it was accidentally executed on an incorrect branch.      ensure_git_branch       Supported platforms  ios, android, mac    Author  @dbachrach, @Liquidsoul",
            "title": "ensure_git_branch"
        },
        {
            "location": "/actions/ensure_git_branch/#2-examples",
            "text": "ensure_git_branch # defaults to `master` branch  ensure_git_branch(\n  branch: 'develop'\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/ensure_git_branch/#parameters",
            "text": "Key  Description  Default      branch  The branch that should be checked for. String that can be either the full name of the branch or a regex e.g.  ^feature/.*$  to match  master     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ensure_git_branch/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ensure_git_branch",
            "title": "Documentation"
        },
        {
            "location": "/actions/ensure_git_branch/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ensure_git_branch  To pass parameters, make use of the  :  symbol, for example  fastlane run ensure_git_branch parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ensure_git_branch/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ensure_git_status_clean/",
            "text": "ensure_git_status_clean\n\n\nRaises an exception if there are uncommitted git changes\n\n\n\n\nA sanity check to make sure you are working in a repo that is clean.\nEspecially useful to put at the beginning of your Fastfile in the \nbefore_all\n block, if some of your other actions will touch your filesystem, do things to your git repo, or just as a general reminder to save your work.\nAlso needed as a prerequisite for some other actions like \nreset_git_repo\n.\n\n\n\n\n\n\n\n\n\n\nensure_git_status_clean\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic, @antondomashnev\n\n\n\n\n\n\n\n\n1 Example\n\n\nensure_git_status_clean\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nshow_uncommitted_changes\n\n\nThe flag whether to show uncommitted changes if the repo is dirty\n\n\nfalse\n\n\n\n\n\n\nshow_diff\n\n\nThe flag whether to show the git diff if the repo is dirty\n\n\nfalse\n\n\n\n\n\n\nignored\n\n\nThe flag whether to ignore file the git status if the repo is dirty\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nensure_git_status_clean\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GIT_REPO_WAS_CLEAN_ON_START\n\n\nStores the fact that the git repo was clean at some point\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ensure_git_status_clean\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ensure_git_status_clean\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ensure_git_status_clean parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ensure_git_status_clean"
        },
        {
            "location": "/actions/ensure_git_status_clean/#ensure_git_status_clean",
            "text": "Raises an exception if there are uncommitted git changes   A sanity check to make sure you are working in a repo that is clean. Especially useful to put at the beginning of your Fastfile in the  before_all  block, if some of your other actions will touch your filesystem, do things to your git repo, or just as a general reminder to save your work. Also needed as a prerequisite for some other actions like  reset_git_repo .      ensure_git_status_clean       Supported platforms  ios, android, mac    Author  @lmirosevic, @antondomashnev",
            "title": "ensure_git_status_clean"
        },
        {
            "location": "/actions/ensure_git_status_clean/#1-example",
            "text": "ensure_git_status_clean",
            "title": "1 Example"
        },
        {
            "location": "/actions/ensure_git_status_clean/#parameters",
            "text": "Key  Description  Default      show_uncommitted_changes  The flag whether to show uncommitted changes if the repo is dirty  false    show_diff  The flag whether to show the git diff if the repo is dirty  false    ignored  The flag whether to ignore file the git status if the repo is dirty      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ensure_git_status_clean/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  ensure_git_status_clean  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GIT_REPO_WAS_CLEAN_ON_START  Stores the fact that the git repo was clean at some point     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/ensure_git_status_clean/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ensure_git_status_clean",
            "title": "Documentation"
        },
        {
            "location": "/actions/ensure_git_status_clean/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ensure_git_status_clean  To pass parameters, make use of the  :  symbol, for example  fastlane run ensure_git_status_clean parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ensure_git_status_clean/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ensure_no_debug_code/",
            "text": "ensure_no_debug_code\n\n\nEnsures the given text is nowhere in the code base\n\n\n\n\nYou don't want any debug code to slip into production.\nThis can be used to check if there is any debug code still in your codebase or if you have things like \n// TO DO\n or similar.\n\n\n\n\n\n\n\n\n\n\nensure_no_debug_code\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n5 Examples\n\n\nensure_no_debug_code(text: \"// TODO\")\n\n\n\n\nensure_no_debug_code(text: \"Log.v\",\n      extension: \"java\")\n\n\n\n\nensure_no_debug_code(text: \"NSLog\",\n path: \"./lib\",\n      extension: \"m\")\n\n\n\n\nensure_no_debug_code(text: \"(^#define DEBUG|NSLog)\",\n path: \"./lib\",\n      extension: \"m\")\n\n\n\n\nensure_no_debug_code(text: \"<<<<<<\",\n     extensions: [\"m\", \"swift\", \"java\"])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nThe text that must not be in the code base\n\n\n\n\n\n\n\n\npath\n\n\nThe directory containing all the source files\n\n\n.\n\n\n\n\n\n\nextension\n\n\nThe extension that should be searched for\n\n\n\n\n\n\n\n\nextensions\n\n\nAn array of file extensions that should be searched for\n\n\n\n\n\n\n\n\nexclude\n\n\nExclude a certain pattern from the search\n\n\n\n\n\n\n\n\nexclude_dirs\n\n\nAn array of dirs that should not be included in the search\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ensure_no_debug_code\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ensure_no_debug_code\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ensure_no_debug_code parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ensure_no_debug_code"
        },
        {
            "location": "/actions/ensure_no_debug_code/#ensure_no_debug_code",
            "text": "Ensures the given text is nowhere in the code base   You don't want any debug code to slip into production. This can be used to check if there is any debug code still in your codebase or if you have things like  // TO DO  or similar.      ensure_no_debug_code       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "ensure_no_debug_code"
        },
        {
            "location": "/actions/ensure_no_debug_code/#5-examples",
            "text": "ensure_no_debug_code(text: \"// TODO\")  ensure_no_debug_code(text: \"Log.v\",\n      extension: \"java\")  ensure_no_debug_code(text: \"NSLog\",\n path: \"./lib\",\n      extension: \"m\")  ensure_no_debug_code(text: \"(^#define DEBUG|NSLog)\",\n path: \"./lib\",\n      extension: \"m\")  ensure_no_debug_code(text: \"<<<<<<\",\n     extensions: [\"m\", \"swift\", \"java\"])",
            "title": "5 Examples"
        },
        {
            "location": "/actions/ensure_no_debug_code/#parameters",
            "text": "Key  Description  Default      text  The text that must not be in the code base     path  The directory containing all the source files  .    extension  The extension that should be searched for     extensions  An array of file extensions that should be searched for     exclude  Exclude a certain pattern from the search     exclude_dirs  An array of dirs that should not be included in the search      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ensure_no_debug_code/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ensure_no_debug_code",
            "title": "Documentation"
        },
        {
            "location": "/actions/ensure_no_debug_code/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ensure_no_debug_code  To pass parameters, make use of the  :  symbol, for example  fastlane run ensure_no_debug_code parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ensure_no_debug_code/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ensure_xcode_version/",
            "text": "ensure_xcode_version\n\n\nEnsure the right version of Xcode is used\n\n\n\n\nIf building your app requires a specific version of Xcode, you can invoke this command before using gym.\nFor example, to ensure that a beta version of Xcode is not accidentally selected to build, which would make uploading to TestFlight fail.\nYou can either manually provide a specific version using \nversion:\n or you make use of the \n.xcode-version\n file.\nUsing the \nstrict\n parameter, you can either verify the full set of version numbers strictly (i.e. \n11.3.1\n) or only a subset of them (i.e. \n11.3\n or \n11\n).\n\n\n\n\n\n\n\n\n\n\nensure_xcode_version\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@JaviSoto, @KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nensure_xcode_version(version: \"7.2\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nXcode version to verify that is selected\n\n\n\n\n\n\n\n\nstrict\n\n\nShould the version be verified strictly (all 3 version numbers), or matching only the given version numbers (i.e. \n11.3\n == \n11.3.x\n)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nensure_xcode_version\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::FL_ENSURE_XCODE_VERSION\n\n\nXcode version to verify that is selected\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ensure_xcode_version\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ensure_xcode_version\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ensure_xcode_version parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ensure_xcode_version"
        },
        {
            "location": "/actions/ensure_xcode_version/#ensure_xcode_version",
            "text": "Ensure the right version of Xcode is used   If building your app requires a specific version of Xcode, you can invoke this command before using gym. For example, to ensure that a beta version of Xcode is not accidentally selected to build, which would make uploading to TestFlight fail. You can either manually provide a specific version using  version:  or you make use of the  .xcode-version  file. Using the  strict  parameter, you can either verify the full set of version numbers strictly (i.e.  11.3.1 ) or only a subset of them (i.e.  11.3  or  11 ).      ensure_xcode_version       Supported platforms  ios, mac    Author  @JaviSoto, @KrauseFx",
            "title": "ensure_xcode_version"
        },
        {
            "location": "/actions/ensure_xcode_version/#1-example",
            "text": "ensure_xcode_version(version: \"7.2\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/ensure_xcode_version/#parameters",
            "text": "Key  Description  Default      version  Xcode version to verify that is selected     strict  Should the version be verified strictly (all 3 version numbers), or matching only the given version numbers (i.e.  11.3  ==  11.3.x )  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ensure_xcode_version/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  ensure_xcode_version  action generates the following Lane Variables:     SharedValue  Description      SharedValues::FL_ENSURE_XCODE_VERSION  Xcode version to verify that is selected     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/ensure_xcode_version/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ensure_xcode_version",
            "title": "Documentation"
        },
        {
            "location": "/actions/ensure_xcode_version/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ensure_xcode_version  To pass parameters, make use of the  :  symbol, for example  fastlane run ensure_xcode_version parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ensure_xcode_version/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/environment_variable/",
            "text": "environment_variable\n\n\nSets/gets env vars for Fastlane.swift. Don't use in ruby, use \nENV[key] = val\n\n\n\n\n\n\n\n\nenvironment_variable\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@taquitos\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nset\n\n\nSet the environment variables named\n\n\n\n\n\n\n\n\nget\n\n\nGet the environment variable named\n\n\n\n\n\n\n\n\nremove\n\n\nRemove the environment variable named\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action environment_variable\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run environment_variable\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run environment_variable parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "environment_variable"
        },
        {
            "location": "/actions/environment_variable/#environment_variable",
            "text": "Sets/gets env vars for Fastlane.swift. Don't use in ruby, use  ENV[key] = val     environment_variable       Supported platforms  ios, android, mac    Author  @taquitos",
            "title": "environment_variable"
        },
        {
            "location": "/actions/environment_variable/#parameters",
            "text": "Key  Description  Default      set  Set the environment variables named     get  Get the environment variable named     remove  Remove the environment variable named      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/environment_variable/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action environment_variable",
            "title": "Documentation"
        },
        {
            "location": "/actions/environment_variable/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run environment_variable  To pass parameters, make use of the  :  symbol, for example  fastlane run environment_variable parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/environment_variable/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/erb/",
            "text": "erb\n\n\nAllows to Generate output files based on ERB templates\n\n\n\n\nRenders an ERB template with \n:placeholders\n given as a hash via parameter.\nIf no \n:destination\n is set, it returns the rendered template as string.\n\n\n\n\n\n\n\n\n\n\nerb\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n1 Example\n\n\n# Example `erb` template:\n\n# Variable1 <%= var1 %>\n# Variable2 <%= var2 %>\n# <% for item in var3 %>\n#        <%= item %>\n# <% end %>\n\nerb(\n  template: \"1.erb\",\n  destination: \"/tmp/rendered.out\",\n  placeholders: {\n    :var1 => 123,\n    :var2 => \"string\",\n    :var3 => [\"element1\", \"element2\"]\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntemplate\n\n\nERB Template File\n\n\n\n\n\n\n\n\ndestination\n\n\nDestination file\n\n\n\n\n\n\n\n\nplaceholders\n\n\nPlaceholders given as a hash\n\n\n{}\n\n\n\n\n\n\ntrim_mode\n\n\nTrim mode applied to the ERB\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action erb\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run erb\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run erb parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "erb"
        },
        {
            "location": "/actions/erb/#erb",
            "text": "Allows to Generate output files based on ERB templates   Renders an ERB template with  :placeholders  given as a hash via parameter. If no  :destination  is set, it returns the rendered template as string.      erb       Supported platforms  ios, android, mac    Author  @hjanuschka",
            "title": "erb"
        },
        {
            "location": "/actions/erb/#1-example",
            "text": "# Example `erb` template:\n\n# Variable1 <%= var1 %>\n# Variable2 <%= var2 %>\n# <% for item in var3 %>\n#        <%= item %>\n# <% end %>\n\nerb(\n  template: \"1.erb\",\n  destination: \"/tmp/rendered.out\",\n  placeholders: {\n    :var1 => 123,\n    :var2 => \"string\",\n    :var3 => [\"element1\", \"element2\"]\n  }\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/erb/#parameters",
            "text": "Key  Description  Default      template  ERB Template File     destination  Destination file     placeholders  Placeholders given as a hash  {}    trim_mode  Trim mode applied to the ERB      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/erb/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action erb",
            "title": "Documentation"
        },
        {
            "location": "/actions/erb/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run erb  To pass parameters, make use of the  :  symbol, for example  fastlane run erb parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/erb/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/fastlane_version/",
            "text": "fastlane_version\n\n\nAlias for the \nmin_fastlane_version\n action\n\n\n\n\nAdd this to your \nFastfile\n to require a certain version of \nfastlane\n.\nUse it if you use an action that just recently came out and you need it.\n\n\n\n\n\n\n\n\n\n\nfastlane_version\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nmin_fastlane_version(\"1.50.0\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action fastlane_version\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run fastlane_version\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run fastlane_version parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "fastlane_version"
        },
        {
            "location": "/actions/fastlane_version/#fastlane_version",
            "text": "Alias for the  min_fastlane_version  action   Add this to your  Fastfile  to require a certain version of  fastlane . Use it if you use an action that just recently came out and you need it.      fastlane_version       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "fastlane_version"
        },
        {
            "location": "/actions/fastlane_version/#1-example",
            "text": "min_fastlane_version(\"1.50.0\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/fastlane_version/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action fastlane_version",
            "title": "Documentation"
        },
        {
            "location": "/actions/fastlane_version/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run fastlane_version  To pass parameters, make use of the  :  symbol, for example  fastlane run fastlane_version parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/fastlane_version/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/flock/",
            "text": "flock\n\n\nSend a message to a \nFlock\n group\n\n\n\n\nTo obtain the token, create a new \nincoming message webhook\n in your Flock admin panel.\n\n\n\n\n\n\n\n\n\n\nflock\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@Manav\n\n\n\n\n\n\n\n\n1 Example\n\n\nflock(\n  message: \"Hello\",\n  token: \"xxx\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nMessage text\n\n\n\n\n\n\n\n\ntoken\n\n\nToken for the Flock incoming webhook\n\n\n\n\n\n\n\n\nbase_url\n\n\nBase URL of the Flock incoming message webhook\n\n\nhttps://api.flock.co/hooks/sendMessage\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action flock\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run flock\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run flock parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "flock"
        },
        {
            "location": "/actions/flock/#flock",
            "text": "Send a message to a  Flock  group   To obtain the token, create a new  incoming message webhook  in your Flock admin panel.      flock       Supported platforms  ios, android, mac    Author  @Manav",
            "title": "flock"
        },
        {
            "location": "/actions/flock/#1-example",
            "text": "flock(\n  message: \"Hello\",\n  token: \"xxx\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/flock/#parameters",
            "text": "Key  Description  Default      message  Message text     token  Token for the Flock incoming webhook     base_url  Base URL of the Flock incoming message webhook  https://api.flock.co/hooks/sendMessage     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/flock/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action flock",
            "title": "Documentation"
        },
        {
            "location": "/actions/flock/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run flock  To pass parameters, make use of the  :  symbol, for example  fastlane run flock parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/flock/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/frame_screenshots/",
            "text": "frame_screenshots\n\n\nAdds device frames around all screenshots (via \nframeit\n)\n\n\n\n  \n\n\n\n\n\nEasily put your screenshots into the right device frames\n\n\nframeit\n allows you to put a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Use \nframeit\n to prepare perfect screenshots for the App Store, your website, QA or emails.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\nframeit\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\nFrame screenshot\n\n\nPut a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Support for:\n\n\n\n\niPhone, iPad and Mac\n\n\nSet of Android devices\n\n\nPortrait and Landscape modes\n\n\nSeveral device frame colors\n\n\n\n\nThe complete and updated list of supported devices and colors can be found \nhere\n\n\nHere is a nice gif, that shows \nframeit\n in action:\n\n\n\n\nAdvanced Features\n\n\n\n\nPut framed screenshot on colored background, define padding\n\n\nadd text above or under framed screenshot\n\n\nkeyword + text\n\n\nchoose text font and color\n\n\nmulti line text\n\n\n\"intelligent\" positioning of text that always looks good(ish)\n\n\n\n\n\n\n\n\nResults\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nframeit\n 2.0 update was kindly sponsored by \nMindNode\n, seen in the screenshots above.\n\n\n\nThe first time that \nframeit\n is executed the frames will be downloaded automatically. Originally the frames are coming from \nFacebook frameset\n and they are kept on \nthis repo\n.\n\n\nMore information about this process and how to update the frames can be found \nhere\n\n\nUsage\n\n\nBasic Usage\n\n\nWhy should you have to use Photoshop, just to add a frame around your screenshots?\n\n\nJust navigate to your folder of screenshots and use the following command (iOS and Mac OS are default platforms for backward compatibility):\n\n\nfastlane frameit\n\n\n\n\nTo frame Android screenshots:\n\n\nfastlane frameit android\n\n\n\n\nTo use the silver version of the frames:\n\n\nfastlane frameit silver\n\n\n\n\nTo download the latest frames\n\n\nfastlane frameit download_frames\n\n\n\n\nNote: When using \nframeit\n without titles on top, the screenshots will have the full resolution, which means they can't be uploaded to the App Store directly. They are supposed to be used for websites, print media and emails. Check out the section below to use the screenshots for the App Store.\n\n\nAdvanced Usage (optional)\n\n\nText and Background\n\n\nWith \nframeit\n it's possible to add a custom background and text below or above the framed screenshots in fonts and colors you define.\n\n\nA working example can be found in the \nfastlane examples\n project.\n\n\nFramefile.json\n\n\nThe Framefile allows to define general and screenshot specific information.\nIt has the following general JSON structure:\n\n\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    ...\n  },\n  \"data\": [\n     ...\n  ]\n}\n\n\n\n\nGeneral parameters\n\n\nThe general parameters are defined in the \ndefault\n key and can be:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nbackground\n\n\nThe background that should be used for the framed screenshot. Specify the (relative) path to the image file (e.g. \n*.jpg\n). This parameter is mandatory.\n\n\nNA\n\n\n\n\n\n\nkeyword\n\n\nAn object that contains up to 3 keys to describe the optional keyword. See \ntable\n below.\n\n\nNA\n\n\n\n\n\n\ntitle\n\n\nAn object that contains up to 3 keys to describe the mandatory title. See \ntable\n below.\n\n\nNA\n\n\n\n\n\n\nstack_title\n\n\nSpecifies whether \nframeit\n should display the keyword above the title when both keyword and title are defined. If it is false, the title and keyword will be displayed side by side when both keyword and title are defined.\n\n\nfalse\n\n\n\n\n\n\ntitle_below_image\n\n\nSpecifies whether \nframeit\n should place the title and optional keyword below the device frame. If it is false, it will be placed above the device frame.\n\n\nfalse\n\n\n\n\n\n\nshow_complete_frame\n\n\nSpecifies whether \nframeit\n should shrink the device frame so that it is completely shown in the framed screenshot. If it is false, clipping of the device frame might occur at the bottom (when \ntitle_below_image\n is \nfalse\n) or top (when \ntitle_below_image\n is \ntrue\n) of the framed screenshot.\n\n\nfalse\n\n\n\n\n\n\npadding\n\n\nThe content of the framed screenshot will be resized to match the specified \npadding\n around all edges. The vertical padding is also applied between the text and the top or bottom (depending on \ntitle_below_image\n) of the device frame. \n There are 3 different options of specifying the padding: \n 1. Default: An integer value that defines both horizontal and vertical padding in pixels. \n 2. A string that defines (different) padding values in pixels for horizontal and vertical padding. The syntax is \n\"<horizontal>x<vertical>\"\n, e.g. \n\"30x60\"\n. \n 3. A string that defines (different) padding values in percentage for horizontal and vertical padding. The syntax is \n\"<horizontal>%x<vertical>%\"\n, e.g. \n\"5%x10%\"\n. \n \nNote:\n The percentage is calculated from the smallest image dimension (height or width). \n A combination of option 2 and 3 is possible, e.g. \n\"5%x40\"\n.\n\n\n50\n\n\n\n\n\n\ninterline_spacing\n\n\nSpecifies whether \nframeit\n should add or subtract this many pixels between the individual lines of text. This only applies to a multi-line \ntitle\n and/or \nkeyword\n to expand or squash together the individual lines of text.\n\n\n0\n\n\n\n\n\n\nfont_scale_factor\n\n\nSpecifies whether \nframeit\n should increase or decrease the font size of the text. Is ignored for \nkeyword\n or \ntitle\n, if \nfont_size\n is specified.\n\n\n0.1\n\n\n\n\n\n\nframe\n\n\nOverrides the color of the frame to be used. (Valid values are \nBLACK\n, \nWHITE\n, \nGOLD\n and \nROSE_GOLD\n)\n\n\nNA\n\n\n\n\n\n\ntitle_min_height\n\n\nSpecifies a height always reserved for the title. Value can be a percentage of the height or an absolute value. The device will be placed below (or above) this area. Convenient to ensure the device top (or bottom) will be consistently placed at the same height on the different screenshots.\n\n\nNA\n\n\n\n\n\n\nuse_platform\n\n\nOverrides the platform used for the screenshot. Valid values are \nIOS\n, \nANDROID\n and \nANY\n.\n\n\nIOS\n\n\n\n\n\n\nforce_device_type\n\n\nForces a specific device. Valid values are: Huawei P8, Motorola Moto E, Motorola Moto G, Nexus 4, Nexus 5X, Nexus 6P, Nexus 9, Samsung Galaxy Grand Prime, Samsung Galaxy Note 5, Samsung Galaxy S Duos, Samsung Galaxy S3, Samsung Galaxy S5, Samsung Galaxy S7, Samsung Galaxy S8, Samsung Galaxy S9, iPhone 5s, iPhone 5c, iPhone SE, iPhone 6s, iPhone 6s Plus, iPhone 7, iPhone 7 Plus, iPhone 8, iPhone 8 Plus, iPhone X, iPhone XS, iPhone XR, iPhone XS Max, iPad Air 2, iPad Mini 4, iPad Pro, MacBook, Google Pixel 3, Google Pixel 3 XL, HTC One A9, HTC One M8\n\n\nNA\n\n\n\n\n\n\n\n\nSpecific parameters\n\n\nThe screenshot specific parameters are related to the keyword and title texts.\nThese are defined in the \ndata\n key. This is an array with the following keys for each screenshot:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilter\n\n\nThis is mandatory to link the individual configuration to the screenshot, based on part of the file name. \nExample:\nIf a screenshot is named \niPhone 8-Brainstorming.png\n you can use value \nBrainstorming\n for \nfilter\n.  If there are more than one \nfilter\n matching an entry, they will all be applied in order (which means that the last one has the highest precedence). All other keys from that array element will only be applied on this specific screenshot.\n\n\n\n\n\n\nkeyword\n\n\nSimilar use as in \ndefault\n, except that parameter \ntext\n can be used here because it is screenshot specific.\n\n\n\n\n\n\ntitle\n\n\nSimilar use as in \ndefault\n, except that parameter \ntext\n can be used here because it is screenshot specific.\n\n\n\n\n\n\nframe\n\n\nOverrides the color of the frame to be used. (Valid values are \nBLACK\n, \nWHITE\n, \nGOLD\n and \nROSE_GOLD\n)\n\n\n\n\n\n\nuse_platform\n\n\nOverrides the platform used for the screenshot. Valid values are \nIOS\n, \nANDROID\n and \nANY\n.\n\n\n\n\n\n\nforce_device_type\n\n\nForces a specific device. Valid values are the same as for the general parameter.\n\n\n\n\n\n\n\n\nFramefile \nkeyword\n and \ntitle\n parameters\n\n\nThe \nkeyword\n and \ntitle\n parameters are both used in \ndefault\n and \ndata\n. They both consist of the following optional keys:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nThe font color for the text. Specify a HEX/HTML color code.\n\n\n#000000\n (black)\n\n\n\n\n\n\nfont\n\n\nThe font family for the text. Specify the (relative) path to the font file (e.g. an OpenType Font).\n\n\nThe default \nimagemagick\n font, which is system dependent.\n\n\n\n\n\n\nfont_size\n\n\nThe font size for the text specified in points. If not specified or \n0\n, font will be scaled automatically to fit the available space. \nframeit\n still shrinks the text, if it would not fit.\n\n\nNA\n\n\n\n\n\n\nfont_weight\n\n\nThe \nfont weight for the text\n. Specify an integer value (e.g. 900).\n\n\nNA\n\n\n\n\n\n\ntext\n\n\nThe text that should be used for the \nkeyword\n or \ntitle\n. \n Note: If you want to use localised text, use \n.strings\n files\n.\n\n\nNA\n\n\n\n\n\n\n\n\nExample\n\n\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    \"keyword\": {\n      \"font\": \"./fonts/MyFont-Rg.otf\"\n    },\n    \"title\": {\n      \"font\": \"./fonts/MyFont-Th.otf\",\n      \"font_size\": 128,\n      \"color\": \"#545454\"\n    },\n    \"background\": \"./background.jpg\",\n    \"padding\": 50,\n    \"show_complete_frame\": false,\n    \"stack_title\" : false,\n    \"title_below_image\": true,\n    \"frame\": \"WHITE\",\n    \"use_platform\": \"IOS\"\n  },\n\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    },\n    {\n      \"filter\": \"Organizing\",\n      \"keyword\": {\n        \"color\": \"#feb909\"\n      },\n      \"frame\": \"ROSE_GOLD\"\n    },\n    {\n      \"filter\": \"Sharing\",\n      \"keyword\": {\n        \"color\": \"#aa4dbc\"\n      }\n    },\n    {\n      \"filter\": \"Styling\",\n      \"keyword\": {\n        \"color\": \"#31bb48\"\n      }\n    },\n    {\n      \"filter\": \"Android\",\n      \"use_platform\": \"ANDROID\"\n    }\n  ]\n}\n\n\n\n\nYou can find a more complex \nconfiguration\n to also support Chinese, Japanese and Korean languages.\n\n\nThe \nFramefile.json\n should be in the \nscreenshots\n folder, as seen in the \nexample\n.\n\n\n.strings\n files\n\n\nTo define the title and optionally the keyword, put two \n.strings\n files into the language folder (e.g. \nen-US in the example project\n)\n\n\nThe \nkeyword.strings\n and \ntitle.strings\n are standard \n.strings\n file you already use for your iOS apps, making it easy to use your existing translation service to get localized titles.\n\n\nNotes\n\n\n\n\nThese \n.strings\n files \nMUST\n be utf-8 (UTF-8) or utf-16 encoded (UTF-16 BE with BOM). They also must begin with an empty line. If you are having trouble see \nissue #1740\n\n\nYou \nMUST\n provide a background if you want titles. \nframeit\n will not add the titles if a background is not specified.\n\n\n\n\nScreenshot orientation\n\n\nBy default \nframeit\n adds a frame to your screenshot based on an orientation you took it. For a portrait (vertical orientation) it is going to add portrait frame and for a landscape (horizontal orientation) - landscape left (= \nHome button on the left side\n).\n\n\nOne way to override the default behavior is editing the file name by adding \nforce_landscaperight\n to the end.\n\n\nforce_orientation_block\n\n\nIf the default behavior doesn't fit your needs and you don't want or can't rename your screenshots, you can customize \nframeit\n's orientation behavior by setting a \nforce_orientation_block\n parameter. The valid values are: \n:landscape_left\n (home button on the left side), \n:landscape_right\n (home button on the right side), \n:portrait\n (home button on the bottom), \nnil\n (home button on the right side).\n\n\nExamples\n\n\n# It matches the filename to the framed device orientation\nframeit(\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    case filename\n      when \"iPad Pro (12.9-inch)-01LoginScreen\"\n        :landscape_right\n      when \"iPhone 6 Plus-01LoginScreen\"\n        :portrait\n      # and so on\n    end\n  end\n)\n\n\n\n\n# It frames the screenshots in landscape right whenever the filename contains `landscape` word\nframeit(\n  silver: true,\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    f = filename.downcase\n    if f.include?(\"landscape\")\n      :landscape_right\n    end\n  end\n)\n\n\n\n\nMac\n\n\nWith \nframeit\n it's possible to also frame macOS Application screenshots. You have to provide the following:\n\n\n\n\nA (relative) path to a \nbackground\n image file, which should contain both the background and the Mac.\n\n\nThe \noffset\n information so \nframeit\n knows where to position your screenshot on the \nbackground\n:\n\n\noffset\n : A string that specifies the horizontal and vertical offset in pixels, with respect to the top left corner of the \nbackground\n image. The syntax is \n\"+<horizontal>+<vertical>\"\n, e.g. \n\"+200+150\"\n.\n\n\ntitleHeight\n : The height in pixels that should be used for the title.\n\n\n\n\n\n\n\n\nExample\n\n\n{\n  \"default\": {\n    \"title\": {\n      \"color\": \"#545454\"\n    },\n    \"background\": \"Mac.jpg\",\n    \"offset\": {\n      \"offset\": \"+676+479\",\n      \"titleHeight\": 320\n    }\n  },\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    }\n  ]\n}\n\n\n\n\nCheck out the \nMindNode example project\n.\n\n\nTips\n\n\nGenerate localized screenshots\n\n\nCheck out \nsnapshot\n to automatically generate screenshots using \nUI Automation\n.\n\n\nResume framing\n\n\nFraming screenshots is a slow operation. In case you need to resume framing, or just frame a couple updated screenshots again, you can rely on the \n--resume\n flag. Only screenshots which have not been framed yet \u2013 or for which there isn't an up-to-date framed image \u2013 will be framed. This feature uses the file modification dates and will reframe screenshots if the screenshot is newer than the framed file.\n\n\nUpload screenshots\n\n\nUse \ndeliver\n to upload iOS screenshots to App Store Connect, or \nsupply\n to upload Android screenshots to Play Store completely automatically \ud83d\ude80\n\n\nUse a clean status bar\n\n\nYou can set \noverride_status_bar\n to \ntrue\n in snapshot to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.\n\n\nGray artifacts around text\n\n\nIf you run into any quality issues, like having a border around the font, it usually helps to just re-install \nimagemagick\n. You can do so by running\n\n\nbrew uninstall imagemagick\nbrew install imagemagick\n\n\n\n\nUninstall\n\n\n\n\nsudo gem uninstall fastlane\n\n\nrm -rf ~/.frameit\n\n\n\n\n\n\n\n\n\n\n\n\n\nframe_screenshots\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n6 Examples\n\n\nframe_screenshots\n\n\n\n\nframeit # alias for \"frame_screenshots\"\n\n\n\n\nframe_screenshots(use_platform: \"ANDROID\")\n\n\n\n\nframe_screenshots(silver: true)\n\n\n\n\nframe_screenshots(path: \"/screenshots\")\n\n\n\n\nframe_screenshots(rose_gold: true)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nwhite\n\n\nUse white device frames\n\n\n\n\n\n\n\n\nsilver\n\n\nUse white device frames. Alias for :white\n\n\n\n\n\n\n\n\nrose_gold\n\n\nUse rose gold device frames. Alias for :rose_gold\n\n\n\n\n\n\n\n\ngold\n\n\nUse gold device frames. Alias for :gold\n\n\n\n\n\n\n\n\nforce_device_type\n\n\nForces a given device type, useful for Mac screenshots, as their sizes vary\n\n\n\n\n\n\n\n\nuse_legacy_iphone5s\n\n\nUse iPhone 5s instead of iPhone SE frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphone6s\n\n\nUse iPhone 6s frames instead of iPhone 7 frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphone7\n\n\nUse iPhone 7 frames instead of iPhone 8 frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonex\n\n\nUse iPhone X instead of iPhone XS frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonexr\n\n\nUse iPhone XR instead of iPhone 11 frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonexs\n\n\nUse iPhone XS instead of iPhone 11 Pro frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonexsmax\n\n\nUse iPhone XS Max instead of iPhone 11 Pro Max frames\n\n\nfalse\n\n\n\n\n\n\nforce_orientation_block\n\n\n[Advanced] A block to customize your screenshots' device orientation\n\n\n*\n\n\n\n\n\n\ndebug_mode\n\n\nOutput debug information in framed screenshots\n\n\nfalse\n\n\n\n\n\n\nresume\n\n\nResume frameit instead of reprocessing all screenshots\n\n\nfalse\n\n\n\n\n\n\nuse_platform\n\n\nChoose a platform, the valid options are IOS, ANDROID and ANY (default is either general platform defined in the fastfile or IOS to ensure backward compatibility)\n\n\n*\n\n\n\n\n\n\npath\n\n\nThe path to the directory containing the screenshots\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action frame_screenshots\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run frame_screenshots\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run frame_screenshots parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "frame_screenshots"
        },
        {
            "location": "/actions/frame_screenshots/#frame_screenshots",
            "text": "Adds device frames around all screenshots (via  frameit )",
            "title": "frame_screenshots"
        },
        {
            "location": "/actions/frame_screenshots/#easily-put-your-screenshots-into-the-right-device-frames",
            "text": "frameit  allows you to put a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Use  frameit  to prepare perfect screenshots for the App Store, your website, QA or emails.   \n     Features  \u2022\n     Usage  \u2022\n     Tips",
            "title": "Easily put your screenshots into the right device frames"
        },
        {
            "location": "/actions/frame_screenshots/#features",
            "text": "",
            "title": "Features"
        },
        {
            "location": "/actions/frame_screenshots/#frame-screenshot",
            "text": "Put a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Support for:   iPhone, iPad and Mac  Set of Android devices  Portrait and Landscape modes  Several device frame colors   The complete and updated list of supported devices and colors can be found  here  Here is a nice gif, that shows  frameit  in action:",
            "title": "Frame screenshot"
        },
        {
            "location": "/actions/frame_screenshots/#advanced-features",
            "text": "Put framed screenshot on colored background, define padding  add text above or under framed screenshot  keyword + text  choose text font and color  multi line text  \"intelligent\" positioning of text that always looks good(ish)",
            "title": "Advanced Features"
        },
        {
            "location": "/actions/frame_screenshots/#results",
            "text": "",
            "title": "Results"
        },
        {
            "location": "/actions/frame_screenshots/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/actions/frame_screenshots/#basic-usage",
            "text": "Why should you have to use Photoshop, just to add a frame around your screenshots?  Just navigate to your folder of screenshots and use the following command (iOS and Mac OS are default platforms for backward compatibility):  fastlane frameit  To frame Android screenshots:  fastlane frameit android  To use the silver version of the frames:  fastlane frameit silver  To download the latest frames  fastlane frameit download_frames  Note: When using  frameit  without titles on top, the screenshots will have the full resolution, which means they can't be uploaded to the App Store directly. They are supposed to be used for websites, print media and emails. Check out the section below to use the screenshots for the App Store.",
            "title": "Basic Usage"
        },
        {
            "location": "/actions/frame_screenshots/#advanced-usage-optional",
            "text": "",
            "title": "Advanced Usage (optional)"
        },
        {
            "location": "/actions/frame_screenshots/#text-and-background",
            "text": "With  frameit  it's possible to add a custom background and text below or above the framed screenshots in fonts and colors you define.  A working example can be found in the  fastlane examples  project.",
            "title": "Text and Background"
        },
        {
            "location": "/actions/frame_screenshots/#framefilejson",
            "text": "The Framefile allows to define general and screenshot specific information.\nIt has the following general JSON structure:  {\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    ...\n  },\n  \"data\": [\n     ...\n  ]\n}",
            "title": "Framefile.json"
        },
        {
            "location": "/actions/frame_screenshots/#general-parameters",
            "text": "The general parameters are defined in the  default  key and can be:     Key  Description  Default value      background  The background that should be used for the framed screenshot. Specify the (relative) path to the image file (e.g.  *.jpg ). This parameter is mandatory.  NA    keyword  An object that contains up to 3 keys to describe the optional keyword. See  table  below.  NA    title  An object that contains up to 3 keys to describe the mandatory title. See  table  below.  NA    stack_title  Specifies whether  frameit  should display the keyword above the title when both keyword and title are defined. If it is false, the title and keyword will be displayed side by side when both keyword and title are defined.  false    title_below_image  Specifies whether  frameit  should place the title and optional keyword below the device frame. If it is false, it will be placed above the device frame.  false    show_complete_frame  Specifies whether  frameit  should shrink the device frame so that it is completely shown in the framed screenshot. If it is false, clipping of the device frame might occur at the bottom (when  title_below_image  is  false ) or top (when  title_below_image  is  true ) of the framed screenshot.  false    padding  The content of the framed screenshot will be resized to match the specified  padding  around all edges. The vertical padding is also applied between the text and the top or bottom (depending on  title_below_image ) of the device frame.   There are 3 different options of specifying the padding:   1. Default: An integer value that defines both horizontal and vertical padding in pixels.   2. A string that defines (different) padding values in pixels for horizontal and vertical padding. The syntax is  \"<horizontal>x<vertical>\" , e.g.  \"30x60\" .   3. A string that defines (different) padding values in percentage for horizontal and vertical padding. The syntax is  \"<horizontal>%x<vertical>%\" , e.g.  \"5%x10%\" .    Note:  The percentage is calculated from the smallest image dimension (height or width).   A combination of option 2 and 3 is possible, e.g.  \"5%x40\" .  50    interline_spacing  Specifies whether  frameit  should add or subtract this many pixels between the individual lines of text. This only applies to a multi-line  title  and/or  keyword  to expand or squash together the individual lines of text.  0    font_scale_factor  Specifies whether  frameit  should increase or decrease the font size of the text. Is ignored for  keyword  or  title , if  font_size  is specified.  0.1    frame  Overrides the color of the frame to be used. (Valid values are  BLACK ,  WHITE ,  GOLD  and  ROSE_GOLD )  NA    title_min_height  Specifies a height always reserved for the title. Value can be a percentage of the height or an absolute value. The device will be placed below (or above) this area. Convenient to ensure the device top (or bottom) will be consistently placed at the same height on the different screenshots.  NA    use_platform  Overrides the platform used for the screenshot. Valid values are  IOS ,  ANDROID  and  ANY .  IOS    force_device_type  Forces a specific device. Valid values are: Huawei P8, Motorola Moto E, Motorola Moto G, Nexus 4, Nexus 5X, Nexus 6P, Nexus 9, Samsung Galaxy Grand Prime, Samsung Galaxy Note 5, Samsung Galaxy S Duos, Samsung Galaxy S3, Samsung Galaxy S5, Samsung Galaxy S7, Samsung Galaxy S8, Samsung Galaxy S9, iPhone 5s, iPhone 5c, iPhone SE, iPhone 6s, iPhone 6s Plus, iPhone 7, iPhone 7 Plus, iPhone 8, iPhone 8 Plus, iPhone X, iPhone XS, iPhone XR, iPhone XS Max, iPad Air 2, iPad Mini 4, iPad Pro, MacBook, Google Pixel 3, Google Pixel 3 XL, HTC One A9, HTC One M8  NA",
            "title": "General parameters"
        },
        {
            "location": "/actions/frame_screenshots/#specific-parameters",
            "text": "The screenshot specific parameters are related to the keyword and title texts.\nThese are defined in the  data  key. This is an array with the following keys for each screenshot:     Key  Description      filter  This is mandatory to link the individual configuration to the screenshot, based on part of the file name.  Example: If a screenshot is named  iPhone 8-Brainstorming.png  you can use value  Brainstorming  for  filter .  If there are more than one  filter  matching an entry, they will all be applied in order (which means that the last one has the highest precedence). All other keys from that array element will only be applied on this specific screenshot.    keyword  Similar use as in  default , except that parameter  text  can be used here because it is screenshot specific.    title  Similar use as in  default , except that parameter  text  can be used here because it is screenshot specific.    frame  Overrides the color of the frame to be used. (Valid values are  BLACK ,  WHITE ,  GOLD  and  ROSE_GOLD )    use_platform  Overrides the platform used for the screenshot. Valid values are  IOS ,  ANDROID  and  ANY .    force_device_type  Forces a specific device. Valid values are the same as for the general parameter.",
            "title": "Specific parameters"
        },
        {
            "location": "/actions/frame_screenshots/#example",
            "text": "{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    \"keyword\": {\n      \"font\": \"./fonts/MyFont-Rg.otf\"\n    },\n    \"title\": {\n      \"font\": \"./fonts/MyFont-Th.otf\",\n      \"font_size\": 128,\n      \"color\": \"#545454\"\n    },\n    \"background\": \"./background.jpg\",\n    \"padding\": 50,\n    \"show_complete_frame\": false,\n    \"stack_title\" : false,\n    \"title_below_image\": true,\n    \"frame\": \"WHITE\",\n    \"use_platform\": \"IOS\"\n  },\n\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    },\n    {\n      \"filter\": \"Organizing\",\n      \"keyword\": {\n        \"color\": \"#feb909\"\n      },\n      \"frame\": \"ROSE_GOLD\"\n    },\n    {\n      \"filter\": \"Sharing\",\n      \"keyword\": {\n        \"color\": \"#aa4dbc\"\n      }\n    },\n    {\n      \"filter\": \"Styling\",\n      \"keyword\": {\n        \"color\": \"#31bb48\"\n      }\n    },\n    {\n      \"filter\": \"Android\",\n      \"use_platform\": \"ANDROID\"\n    }\n  ]\n}  You can find a more complex  configuration  to also support Chinese, Japanese and Korean languages.  The  Framefile.json  should be in the  screenshots  folder, as seen in the  example .",
            "title": "Example"
        },
        {
            "location": "/actions/frame_screenshots/#strings-files",
            "text": "To define the title and optionally the keyword, put two  .strings  files into the language folder (e.g.  en-US in the example project )  The  keyword.strings  and  title.strings  are standard  .strings  file you already use for your iOS apps, making it easy to use your existing translation service to get localized titles.  Notes   These  .strings  files  MUST  be utf-8 (UTF-8) or utf-16 encoded (UTF-16 BE with BOM). They also must begin with an empty line. If you are having trouble see  issue #1740  You  MUST  provide a background if you want titles.  frameit  will not add the titles if a background is not specified.",
            "title": ".strings files"
        },
        {
            "location": "/actions/frame_screenshots/#screenshot-orientation",
            "text": "By default  frameit  adds a frame to your screenshot based on an orientation you took it. For a portrait (vertical orientation) it is going to add portrait frame and for a landscape (horizontal orientation) - landscape left (=  Home button on the left side ).  One way to override the default behavior is editing the file name by adding  force_landscaperight  to the end.",
            "title": "Screenshot orientation"
        },
        {
            "location": "/actions/frame_screenshots/#force_orientation_block",
            "text": "If the default behavior doesn't fit your needs and you don't want or can't rename your screenshots, you can customize  frameit 's orientation behavior by setting a  force_orientation_block  parameter. The valid values are:  :landscape_left  (home button on the left side),  :landscape_right  (home button on the right side),  :portrait  (home button on the bottom),  nil  (home button on the right side).",
            "title": "force_orientation_block"
        },
        {
            "location": "/actions/frame_screenshots/#examples",
            "text": "# It matches the filename to the framed device orientation\nframeit(\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    case filename\n      when \"iPad Pro (12.9-inch)-01LoginScreen\"\n        :landscape_right\n      when \"iPhone 6 Plus-01LoginScreen\"\n        :portrait\n      # and so on\n    end\n  end\n)  # It frames the screenshots in landscape right whenever the filename contains `landscape` word\nframeit(\n  silver: true,\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    f = filename.downcase\n    if f.include?(\"landscape\")\n      :landscape_right\n    end\n  end\n)",
            "title": "Examples"
        },
        {
            "location": "/actions/frame_screenshots/#mac",
            "text": "With  frameit  it's possible to also frame macOS Application screenshots. You have to provide the following:   A (relative) path to a  background  image file, which should contain both the background and the Mac.  The  offset  information so  frameit  knows where to position your screenshot on the  background :  offset  : A string that specifies the horizontal and vertical offset in pixels, with respect to the top left corner of the  background  image. The syntax is  \"+<horizontal>+<vertical>\" , e.g.  \"+200+150\" .  titleHeight  : The height in pixels that should be used for the title.",
            "title": "Mac"
        },
        {
            "location": "/actions/frame_screenshots/#example_1",
            "text": "{\n  \"default\": {\n    \"title\": {\n      \"color\": \"#545454\"\n    },\n    \"background\": \"Mac.jpg\",\n    \"offset\": {\n      \"offset\": \"+676+479\",\n      \"titleHeight\": 320\n    }\n  },\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    }\n  ]\n}  Check out the  MindNode example project .",
            "title": "Example"
        },
        {
            "location": "/actions/frame_screenshots/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/frame_screenshots/#generate-localized-screenshots",
            "text": "Check out  snapshot  to automatically generate screenshots using  UI Automation .",
            "title": "Generate localized screenshots"
        },
        {
            "location": "/actions/frame_screenshots/#resume-framing",
            "text": "Framing screenshots is a slow operation. In case you need to resume framing, or just frame a couple updated screenshots again, you can rely on the  --resume  flag. Only screenshots which have not been framed yet \u2013 or for which there isn't an up-to-date framed image \u2013 will be framed. This feature uses the file modification dates and will reframe screenshots if the screenshot is newer than the framed file.",
            "title": "Resume framing"
        },
        {
            "location": "/actions/frame_screenshots/#upload-screenshots",
            "text": "Use  deliver  to upload iOS screenshots to App Store Connect, or  supply  to upload Android screenshots to Play Store completely automatically \ud83d\ude80",
            "title": "Upload screenshots"
        },
        {
            "location": "/actions/frame_screenshots/#use-a-clean-status-bar",
            "text": "You can set  override_status_bar  to  true  in snapshot to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.",
            "title": "Use a clean status bar"
        },
        {
            "location": "/actions/frame_screenshots/#gray-artifacts-around-text",
            "text": "If you run into any quality issues, like having a border around the font, it usually helps to just re-install  imagemagick . You can do so by running  brew uninstall imagemagick\nbrew install imagemagick",
            "title": "Gray artifacts around text"
        },
        {
            "location": "/actions/frame_screenshots/#uninstall",
            "text": "sudo gem uninstall fastlane  rm -rf ~/.frameit       frame_screenshots       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "Uninstall"
        },
        {
            "location": "/actions/frame_screenshots/#6-examples",
            "text": "frame_screenshots  frameit # alias for \"frame_screenshots\"  frame_screenshots(use_platform: \"ANDROID\")  frame_screenshots(silver: true)  frame_screenshots(path: \"/screenshots\")  frame_screenshots(rose_gold: true)",
            "title": "6 Examples"
        },
        {
            "location": "/actions/frame_screenshots/#parameters",
            "text": "Key  Description  Default      white  Use white device frames     silver  Use white device frames. Alias for :white     rose_gold  Use rose gold device frames. Alias for :rose_gold     gold  Use gold device frames. Alias for :gold     force_device_type  Forces a given device type, useful for Mac screenshots, as their sizes vary     use_legacy_iphone5s  Use iPhone 5s instead of iPhone SE frames  false    use_legacy_iphone6s  Use iPhone 6s frames instead of iPhone 7 frames  false    use_legacy_iphone7  Use iPhone 7 frames instead of iPhone 8 frames  false    use_legacy_iphonex  Use iPhone X instead of iPhone XS frames  false    use_legacy_iphonexr  Use iPhone XR instead of iPhone 11 frames  false    use_legacy_iphonexs  Use iPhone XS instead of iPhone 11 Pro frames  false    use_legacy_iphonexsmax  Use iPhone XS Max instead of iPhone 11 Pro Max frames  false    force_orientation_block  [Advanced] A block to customize your screenshots' device orientation  *    debug_mode  Output debug information in framed screenshots  false    resume  Resume frameit instead of reprocessing all screenshots  false    use_platform  Choose a platform, the valid options are IOS, ANDROID and ANY (default is either general platform defined in the fastfile or IOS to ensure backward compatibility)  *    path  The path to the directory containing the screenshots  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/frame_screenshots/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action frame_screenshots",
            "title": "Documentation"
        },
        {
            "location": "/actions/frame_screenshots/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run frame_screenshots  To pass parameters, make use of the  :  symbol, for example  fastlane run frame_screenshots parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/frame_screenshots/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/frameit/",
            "text": "frameit\n\n\nAlias for the \nframe_screenshots\n action\n\n\n\n  \n\n\n\n\n\nEasily put your screenshots into the right device frames\n\n\nframeit\n allows you to put a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Use \nframeit\n to prepare perfect screenshots for the App Store, your website, QA or emails.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\nframeit\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\nFrame screenshot\n\n\nPut a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Support for:\n\n\n\n\niPhone, iPad and Mac\n\n\nSet of Android devices\n\n\nPortrait and Landscape modes\n\n\nSeveral device frame colors\n\n\n\n\nThe complete and updated list of supported devices and colors can be found \nhere\n\n\nHere is a nice gif, that shows \nframeit\n in action:\n\n\n\n\nAdvanced Features\n\n\n\n\nPut framed screenshot on colored background, define padding\n\n\nadd text above or under framed screenshot\n\n\nkeyword + text\n\n\nchoose text font and color\n\n\nmulti line text\n\n\n\"intelligent\" positioning of text that always looks good(ish)\n\n\n\n\n\n\n\n\nResults\n\n\n\n\n\n\n\n\n\n\n\n\nThe \nframeit\n 2.0 update was kindly sponsored by \nMindNode\n, seen in the screenshots above.\n\n\n\nThe first time that \nframeit\n is executed the frames will be downloaded automatically. Originally the frames are coming from \nFacebook frameset\n and they are kept on \nthis repo\n.\n\n\nMore information about this process and how to update the frames can be found \nhere\n\n\nUsage\n\n\nBasic Usage\n\n\nWhy should you have to use Photoshop, just to add a frame around your screenshots?\n\n\nJust navigate to your folder of screenshots and use the following command (iOS and Mac OS are default platforms for backward compatibility):\n\n\nfastlane frameit\n\n\n\n\nTo frame Android screenshots:\n\n\nfastlane frameit android\n\n\n\n\nTo use the silver version of the frames:\n\n\nfastlane frameit silver\n\n\n\n\nTo download the latest frames\n\n\nfastlane frameit download_frames\n\n\n\n\nNote: When using \nframeit\n without titles on top, the screenshots will have the full resolution, which means they can't be uploaded to the App Store directly. They are supposed to be used for websites, print media and emails. Check out the section below to use the screenshots for the App Store.\n\n\nAdvanced Usage (optional)\n\n\nText and Background\n\n\nWith \nframeit\n it's possible to add a custom background and text below or above the framed screenshots in fonts and colors you define.\n\n\nA working example can be found in the \nfastlane examples\n project.\n\n\nFramefile.json\n\n\nThe Framefile allows to define general and screenshot specific information.\nIt has the following general JSON structure:\n\n\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    ...\n  },\n  \"data\": [\n     ...\n  ]\n}\n\n\n\n\nGeneral parameters\n\n\nThe general parameters are defined in the \ndefault\n key and can be:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\nbackground\n\n\nThe background that should be used for the framed screenshot. Specify the (relative) path to the image file (e.g. \n*.jpg\n). This parameter is mandatory.\n\n\nNA\n\n\n\n\n\n\nkeyword\n\n\nAn object that contains up to 3 keys to describe the optional keyword. See \ntable\n below.\n\n\nNA\n\n\n\n\n\n\ntitle\n\n\nAn object that contains up to 3 keys to describe the mandatory title. See \ntable\n below.\n\n\nNA\n\n\n\n\n\n\nstack_title\n\n\nSpecifies whether \nframeit\n should display the keyword above the title when both keyword and title are defined. If it is false, the title and keyword will be displayed side by side when both keyword and title are defined.\n\n\nfalse\n\n\n\n\n\n\ntitle_below_image\n\n\nSpecifies whether \nframeit\n should place the title and optional keyword below the device frame. If it is false, it will be placed above the device frame.\n\n\nfalse\n\n\n\n\n\n\nshow_complete_frame\n\n\nSpecifies whether \nframeit\n should shrink the device frame so that it is completely shown in the framed screenshot. If it is false, clipping of the device frame might occur at the bottom (when \ntitle_below_image\n is \nfalse\n) or top (when \ntitle_below_image\n is \ntrue\n) of the framed screenshot.\n\n\nfalse\n\n\n\n\n\n\npadding\n\n\nThe content of the framed screenshot will be resized to match the specified \npadding\n around all edges. The vertical padding is also applied between the text and the top or bottom (depending on \ntitle_below_image\n) of the device frame. \n There are 3 different options of specifying the padding: \n 1. Default: An integer value that defines both horizontal and vertical padding in pixels. \n 2. A string that defines (different) padding values in pixels for horizontal and vertical padding. The syntax is \n\"<horizontal>x<vertical>\"\n, e.g. \n\"30x60\"\n. \n 3. A string that defines (different) padding values in percentage for horizontal and vertical padding. The syntax is \n\"<horizontal>%x<vertical>%\"\n, e.g. \n\"5%x10%\"\n. \n \nNote:\n The percentage is calculated from the smallest image dimension (height or width). \n A combination of option 2 and 3 is possible, e.g. \n\"5%x40\"\n.\n\n\n50\n\n\n\n\n\n\ninterline_spacing\n\n\nSpecifies whether \nframeit\n should add or subtract this many pixels between the individual lines of text. This only applies to a multi-line \ntitle\n and/or \nkeyword\n to expand or squash together the individual lines of text.\n\n\n0\n\n\n\n\n\n\nfont_scale_factor\n\n\nSpecifies whether \nframeit\n should increase or decrease the font size of the text. Is ignored for \nkeyword\n or \ntitle\n, if \nfont_size\n is specified.\n\n\n0.1\n\n\n\n\n\n\nframe\n\n\nOverrides the color of the frame to be used. (Valid values are \nBLACK\n, \nWHITE\n, \nGOLD\n and \nROSE_GOLD\n)\n\n\nNA\n\n\n\n\n\n\ntitle_min_height\n\n\nSpecifies a height always reserved for the title. Value can be a percentage of the height or an absolute value. The device will be placed below (or above) this area. Convenient to ensure the device top (or bottom) will be consistently placed at the same height on the different screenshots.\n\n\nNA\n\n\n\n\n\n\nuse_platform\n\n\nOverrides the platform used for the screenshot. Valid values are \nIOS\n, \nANDROID\n and \nANY\n.\n\n\nIOS\n\n\n\n\n\n\nforce_device_type\n\n\nForces a specific device. Valid values are: Huawei P8, Motorola Moto E, Motorola Moto G, Nexus 4, Nexus 5X, Nexus 6P, Nexus 9, Samsung Galaxy Grand Prime, Samsung Galaxy Note 5, Samsung Galaxy S Duos, Samsung Galaxy S3, Samsung Galaxy S5, Samsung Galaxy S7, Samsung Galaxy S8, Samsung Galaxy S9, iPhone 5s, iPhone 5c, iPhone SE, iPhone 6s, iPhone 6s Plus, iPhone 7, iPhone 7 Plus, iPhone 8, iPhone 8 Plus, iPhone X, iPhone XS, iPhone XR, iPhone XS Max, iPad Air 2, iPad Mini 4, iPad Pro, MacBook, Google Pixel 3, Google Pixel 3 XL, HTC One A9, HTC One M8\n\n\nNA\n\n\n\n\n\n\n\n\nSpecific parameters\n\n\nThe screenshot specific parameters are related to the keyword and title texts.\nThese are defined in the \ndata\n key. This is an array with the following keys for each screenshot:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfilter\n\n\nThis is mandatory to link the individual configuration to the screenshot, based on part of the file name. \nExample:\nIf a screenshot is named \niPhone 8-Brainstorming.png\n you can use value \nBrainstorming\n for \nfilter\n.  If there are more than one \nfilter\n matching an entry, they will all be applied in order (which means that the last one has the highest precedence). All other keys from that array element will only be applied on this specific screenshot.\n\n\n\n\n\n\nkeyword\n\n\nSimilar use as in \ndefault\n, except that parameter \ntext\n can be used here because it is screenshot specific.\n\n\n\n\n\n\ntitle\n\n\nSimilar use as in \ndefault\n, except that parameter \ntext\n can be used here because it is screenshot specific.\n\n\n\n\n\n\nframe\n\n\nOverrides the color of the frame to be used. (Valid values are \nBLACK\n, \nWHITE\n, \nGOLD\n and \nROSE_GOLD\n)\n\n\n\n\n\n\nuse_platform\n\n\nOverrides the platform used for the screenshot. Valid values are \nIOS\n, \nANDROID\n and \nANY\n.\n\n\n\n\n\n\nforce_device_type\n\n\nForces a specific device. Valid values are the same as for the general parameter.\n\n\n\n\n\n\n\n\nFramefile \nkeyword\n and \ntitle\n parameters\n\n\nThe \nkeyword\n and \ntitle\n parameters are both used in \ndefault\n and \ndata\n. They both consist of the following optional keys:\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\ncolor\n\n\nThe font color for the text. Specify a HEX/HTML color code.\n\n\n#000000\n (black)\n\n\n\n\n\n\nfont\n\n\nThe font family for the text. Specify the (relative) path to the font file (e.g. an OpenType Font).\n\n\nThe default \nimagemagick\n font, which is system dependent.\n\n\n\n\n\n\nfont_size\n\n\nThe font size for the text specified in points. If not specified or \n0\n, font will be scaled automatically to fit the available space. \nframeit\n still shrinks the text, if it would not fit.\n\n\nNA\n\n\n\n\n\n\nfont_weight\n\n\nThe \nfont weight for the text\n. Specify an integer value (e.g. 900).\n\n\nNA\n\n\n\n\n\n\ntext\n\n\nThe text that should be used for the \nkeyword\n or \ntitle\n. \n Note: If you want to use localised text, use \n.strings\n files\n.\n\n\nNA\n\n\n\n\n\n\n\n\nExample\n\n\n{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    \"keyword\": {\n      \"font\": \"./fonts/MyFont-Rg.otf\"\n    },\n    \"title\": {\n      \"font\": \"./fonts/MyFont-Th.otf\",\n      \"font_size\": 128,\n      \"color\": \"#545454\"\n    },\n    \"background\": \"./background.jpg\",\n    \"padding\": 50,\n    \"show_complete_frame\": false,\n    \"stack_title\" : false,\n    \"title_below_image\": true,\n    \"frame\": \"WHITE\",\n    \"use_platform\": \"IOS\"\n  },\n\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    },\n    {\n      \"filter\": \"Organizing\",\n      \"keyword\": {\n        \"color\": \"#feb909\"\n      },\n      \"frame\": \"ROSE_GOLD\"\n    },\n    {\n      \"filter\": \"Sharing\",\n      \"keyword\": {\n        \"color\": \"#aa4dbc\"\n      }\n    },\n    {\n      \"filter\": \"Styling\",\n      \"keyword\": {\n        \"color\": \"#31bb48\"\n      }\n    },\n    {\n      \"filter\": \"Android\",\n      \"use_platform\": \"ANDROID\"\n    }\n  ]\n}\n\n\n\n\nYou can find a more complex \nconfiguration\n to also support Chinese, Japanese and Korean languages.\n\n\nThe \nFramefile.json\n should be in the \nscreenshots\n folder, as seen in the \nexample\n.\n\n\n.strings\n files\n\n\nTo define the title and optionally the keyword, put two \n.strings\n files into the language folder (e.g. \nen-US in the example project\n)\n\n\nThe \nkeyword.strings\n and \ntitle.strings\n are standard \n.strings\n file you already use for your iOS apps, making it easy to use your existing translation service to get localized titles.\n\n\nNotes\n\n\n\n\nThese \n.strings\n files \nMUST\n be utf-8 (UTF-8) or utf-16 encoded (UTF-16 BE with BOM). They also must begin with an empty line. If you are having trouble see \nissue #1740\n\n\nYou \nMUST\n provide a background if you want titles. \nframeit\n will not add the titles if a background is not specified.\n\n\n\n\nScreenshot orientation\n\n\nBy default \nframeit\n adds a frame to your screenshot based on an orientation you took it. For a portrait (vertical orientation) it is going to add portrait frame and for a landscape (horizontal orientation) - landscape left (= \nHome button on the left side\n).\n\n\nOne way to override the default behavior is editing the file name by adding \nforce_landscaperight\n to the end.\n\n\nforce_orientation_block\n\n\nIf the default behavior doesn't fit your needs and you don't want or can't rename your screenshots, you can customize \nframeit\n's orientation behavior by setting a \nforce_orientation_block\n parameter. The valid values are: \n:landscape_left\n (home button on the left side), \n:landscape_right\n (home button on the right side), \n:portrait\n (home button on the bottom), \nnil\n (home button on the right side).\n\n\nExamples\n\n\n# It matches the filename to the framed device orientation\nframeit(\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    case filename\n      when \"iPad Pro (12.9-inch)-01LoginScreen\"\n        :landscape_right\n      when \"iPhone 6 Plus-01LoginScreen\"\n        :portrait\n      # and so on\n    end\n  end\n)\n\n\n\n\n# It frames the screenshots in landscape right whenever the filename contains `landscape` word\nframeit(\n  silver: true,\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    f = filename.downcase\n    if f.include?(\"landscape\")\n      :landscape_right\n    end\n  end\n)\n\n\n\n\nMac\n\n\nWith \nframeit\n it's possible to also frame macOS Application screenshots. You have to provide the following:\n\n\n\n\nA (relative) path to a \nbackground\n image file, which should contain both the background and the Mac.\n\n\nThe \noffset\n information so \nframeit\n knows where to position your screenshot on the \nbackground\n:\n\n\noffset\n : A string that specifies the horizontal and vertical offset in pixels, with respect to the top left corner of the \nbackground\n image. The syntax is \n\"+<horizontal>+<vertical>\"\n, e.g. \n\"+200+150\"\n.\n\n\ntitleHeight\n : The height in pixels that should be used for the title.\n\n\n\n\n\n\n\n\nExample\n\n\n{\n  \"default\": {\n    \"title\": {\n      \"color\": \"#545454\"\n    },\n    \"background\": \"Mac.jpg\",\n    \"offset\": {\n      \"offset\": \"+676+479\",\n      \"titleHeight\": 320\n    }\n  },\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    }\n  ]\n}\n\n\n\n\nCheck out the \nMindNode example project\n.\n\n\nTips\n\n\nGenerate localized screenshots\n\n\nCheck out \nsnapshot\n to automatically generate screenshots using \nUI Automation\n.\n\n\nResume framing\n\n\nFraming screenshots is a slow operation. In case you need to resume framing, or just frame a couple updated screenshots again, you can rely on the \n--resume\n flag. Only screenshots which have not been framed yet \u2013 or for which there isn't an up-to-date framed image \u2013 will be framed. This feature uses the file modification dates and will reframe screenshots if the screenshot is newer than the framed file.\n\n\nUpload screenshots\n\n\nUse \ndeliver\n to upload iOS screenshots to App Store Connect, or \nsupply\n to upload Android screenshots to Play Store completely automatically \ud83d\ude80\n\n\nUse a clean status bar\n\n\nYou can set \noverride_status_bar\n to \ntrue\n in snapshot to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.\n\n\nGray artifacts around text\n\n\nIf you run into any quality issues, like having a border around the font, it usually helps to just re-install \nimagemagick\n. You can do so by running\n\n\nbrew uninstall imagemagick\nbrew install imagemagick\n\n\n\n\nUninstall\n\n\n\n\nsudo gem uninstall fastlane\n\n\nrm -rf ~/.frameit\n\n\n\n\n\n\n\n\n\n\n\n\n\nframeit\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n6 Examples\n\n\nframe_screenshots\n\n\n\n\nframeit # alias for \"frame_screenshots\"\n\n\n\n\nframe_screenshots(use_platform: \"ANDROID\")\n\n\n\n\nframe_screenshots(silver: true)\n\n\n\n\nframe_screenshots(path: \"/screenshots\")\n\n\n\n\nframe_screenshots(rose_gold: true)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nwhite\n\n\nUse white device frames\n\n\n\n\n\n\n\n\nsilver\n\n\nUse white device frames. Alias for :white\n\n\n\n\n\n\n\n\nrose_gold\n\n\nUse rose gold device frames. Alias for :rose_gold\n\n\n\n\n\n\n\n\ngold\n\n\nUse gold device frames. Alias for :gold\n\n\n\n\n\n\n\n\nforce_device_type\n\n\nForces a given device type, useful for Mac screenshots, as their sizes vary\n\n\n\n\n\n\n\n\nuse_legacy_iphone5s\n\n\nUse iPhone 5s instead of iPhone SE frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphone6s\n\n\nUse iPhone 6s frames instead of iPhone 7 frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphone7\n\n\nUse iPhone 7 frames instead of iPhone 8 frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonex\n\n\nUse iPhone X instead of iPhone XS frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonexr\n\n\nUse iPhone XR instead of iPhone 11 frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonexs\n\n\nUse iPhone XS instead of iPhone 11 Pro frames\n\n\nfalse\n\n\n\n\n\n\nuse_legacy_iphonexsmax\n\n\nUse iPhone XS Max instead of iPhone 11 Pro Max frames\n\n\nfalse\n\n\n\n\n\n\nforce_orientation_block\n\n\n[Advanced] A block to customize your screenshots' device orientation\n\n\n*\n\n\n\n\n\n\ndebug_mode\n\n\nOutput debug information in framed screenshots\n\n\nfalse\n\n\n\n\n\n\nresume\n\n\nResume frameit instead of reprocessing all screenshots\n\n\nfalse\n\n\n\n\n\n\nuse_platform\n\n\nChoose a platform, the valid options are IOS, ANDROID and ANY (default is either general platform defined in the fastfile or IOS to ensure backward compatibility)\n\n\n*\n\n\n\n\n\n\npath\n\n\nThe path to the directory containing the screenshots\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action frameit\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run frameit\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run frameit parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "frameit"
        },
        {
            "location": "/actions/frameit/#frameit",
            "text": "Alias for the  frame_screenshots  action",
            "title": "frameit"
        },
        {
            "location": "/actions/frameit/#easily-put-your-screenshots-into-the-right-device-frames",
            "text": "frameit  allows you to put a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Use  frameit  to prepare perfect screenshots for the App Store, your website, QA or emails.   \n     Features  \u2022\n     Usage  \u2022\n     Tips",
            "title": "Easily put your screenshots into the right device frames"
        },
        {
            "location": "/actions/frameit/#features",
            "text": "",
            "title": "Features"
        },
        {
            "location": "/actions/frameit/#frame-screenshot",
            "text": "Put a gorgeous device frame around your iOS, macOS and Android screenshots just by running one simple command. Support for:   iPhone, iPad and Mac  Set of Android devices  Portrait and Landscape modes  Several device frame colors   The complete and updated list of supported devices and colors can be found  here  Here is a nice gif, that shows  frameit  in action:",
            "title": "Frame screenshot"
        },
        {
            "location": "/actions/frameit/#advanced-features",
            "text": "Put framed screenshot on colored background, define padding  add text above or under framed screenshot  keyword + text  choose text font and color  multi line text  \"intelligent\" positioning of text that always looks good(ish)",
            "title": "Advanced Features"
        },
        {
            "location": "/actions/frameit/#results",
            "text": "",
            "title": "Results"
        },
        {
            "location": "/actions/frameit/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/actions/frameit/#basic-usage",
            "text": "Why should you have to use Photoshop, just to add a frame around your screenshots?  Just navigate to your folder of screenshots and use the following command (iOS and Mac OS are default platforms for backward compatibility):  fastlane frameit  To frame Android screenshots:  fastlane frameit android  To use the silver version of the frames:  fastlane frameit silver  To download the latest frames  fastlane frameit download_frames  Note: When using  frameit  without titles on top, the screenshots will have the full resolution, which means they can't be uploaded to the App Store directly. They are supposed to be used for websites, print media and emails. Check out the section below to use the screenshots for the App Store.",
            "title": "Basic Usage"
        },
        {
            "location": "/actions/frameit/#advanced-usage-optional",
            "text": "",
            "title": "Advanced Usage (optional)"
        },
        {
            "location": "/actions/frameit/#text-and-background",
            "text": "With  frameit  it's possible to add a custom background and text below or above the framed screenshots in fonts and colors you define.  A working example can be found in the  fastlane examples  project.",
            "title": "Text and Background"
        },
        {
            "location": "/actions/frameit/#framefilejson",
            "text": "The Framefile allows to define general and screenshot specific information.\nIt has the following general JSON structure:  {\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    ...\n  },\n  \"data\": [\n     ...\n  ]\n}",
            "title": "Framefile.json"
        },
        {
            "location": "/actions/frameit/#general-parameters",
            "text": "The general parameters are defined in the  default  key and can be:     Key  Description  Default value      background  The background that should be used for the framed screenshot. Specify the (relative) path to the image file (e.g.  *.jpg ). This parameter is mandatory.  NA    keyword  An object that contains up to 3 keys to describe the optional keyword. See  table  below.  NA    title  An object that contains up to 3 keys to describe the mandatory title. See  table  below.  NA    stack_title  Specifies whether  frameit  should display the keyword above the title when both keyword and title are defined. If it is false, the title and keyword will be displayed side by side when both keyword and title are defined.  false    title_below_image  Specifies whether  frameit  should place the title and optional keyword below the device frame. If it is false, it will be placed above the device frame.  false    show_complete_frame  Specifies whether  frameit  should shrink the device frame so that it is completely shown in the framed screenshot. If it is false, clipping of the device frame might occur at the bottom (when  title_below_image  is  false ) or top (when  title_below_image  is  true ) of the framed screenshot.  false    padding  The content of the framed screenshot will be resized to match the specified  padding  around all edges. The vertical padding is also applied between the text and the top or bottom (depending on  title_below_image ) of the device frame.   There are 3 different options of specifying the padding:   1. Default: An integer value that defines both horizontal and vertical padding in pixels.   2. A string that defines (different) padding values in pixels for horizontal and vertical padding. The syntax is  \"<horizontal>x<vertical>\" , e.g.  \"30x60\" .   3. A string that defines (different) padding values in percentage for horizontal and vertical padding. The syntax is  \"<horizontal>%x<vertical>%\" , e.g.  \"5%x10%\" .    Note:  The percentage is calculated from the smallest image dimension (height or width).   A combination of option 2 and 3 is possible, e.g.  \"5%x40\" .  50    interline_spacing  Specifies whether  frameit  should add or subtract this many pixels between the individual lines of text. This only applies to a multi-line  title  and/or  keyword  to expand or squash together the individual lines of text.  0    font_scale_factor  Specifies whether  frameit  should increase or decrease the font size of the text. Is ignored for  keyword  or  title , if  font_size  is specified.  0.1    frame  Overrides the color of the frame to be used. (Valid values are  BLACK ,  WHITE ,  GOLD  and  ROSE_GOLD )  NA    title_min_height  Specifies a height always reserved for the title. Value can be a percentage of the height or an absolute value. The device will be placed below (or above) this area. Convenient to ensure the device top (or bottom) will be consistently placed at the same height on the different screenshots.  NA    use_platform  Overrides the platform used for the screenshot. Valid values are  IOS ,  ANDROID  and  ANY .  IOS    force_device_type  Forces a specific device. Valid values are: Huawei P8, Motorola Moto E, Motorola Moto G, Nexus 4, Nexus 5X, Nexus 6P, Nexus 9, Samsung Galaxy Grand Prime, Samsung Galaxy Note 5, Samsung Galaxy S Duos, Samsung Galaxy S3, Samsung Galaxy S5, Samsung Galaxy S7, Samsung Galaxy S8, Samsung Galaxy S9, iPhone 5s, iPhone 5c, iPhone SE, iPhone 6s, iPhone 6s Plus, iPhone 7, iPhone 7 Plus, iPhone 8, iPhone 8 Plus, iPhone X, iPhone XS, iPhone XR, iPhone XS Max, iPad Air 2, iPad Mini 4, iPad Pro, MacBook, Google Pixel 3, Google Pixel 3 XL, HTC One A9, HTC One M8  NA",
            "title": "General parameters"
        },
        {
            "location": "/actions/frameit/#specific-parameters",
            "text": "The screenshot specific parameters are related to the keyword and title texts.\nThese are defined in the  data  key. This is an array with the following keys for each screenshot:     Key  Description      filter  This is mandatory to link the individual configuration to the screenshot, based on part of the file name.  Example: If a screenshot is named  iPhone 8-Brainstorming.png  you can use value  Brainstorming  for  filter .  If there are more than one  filter  matching an entry, they will all be applied in order (which means that the last one has the highest precedence). All other keys from that array element will only be applied on this specific screenshot.    keyword  Similar use as in  default , except that parameter  text  can be used here because it is screenshot specific.    title  Similar use as in  default , except that parameter  text  can be used here because it is screenshot specific.    frame  Overrides the color of the frame to be used. (Valid values are  BLACK ,  WHITE ,  GOLD  and  ROSE_GOLD )    use_platform  Overrides the platform used for the screenshot. Valid values are  IOS ,  ANDROID  and  ANY .    force_device_type  Forces a specific device. Valid values are the same as for the general parameter.",
            "title": "Specific parameters"
        },
        {
            "location": "/actions/frameit/#example",
            "text": "{\n  \"device_frame_version\": \"latest\",\n  \"default\": {\n    \"keyword\": {\n      \"font\": \"./fonts/MyFont-Rg.otf\"\n    },\n    \"title\": {\n      \"font\": \"./fonts/MyFont-Th.otf\",\n      \"font_size\": 128,\n      \"color\": \"#545454\"\n    },\n    \"background\": \"./background.jpg\",\n    \"padding\": 50,\n    \"show_complete_frame\": false,\n    \"stack_title\" : false,\n    \"title_below_image\": true,\n    \"frame\": \"WHITE\",\n    \"use_platform\": \"IOS\"\n  },\n\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    },\n    {\n      \"filter\": \"Organizing\",\n      \"keyword\": {\n        \"color\": \"#feb909\"\n      },\n      \"frame\": \"ROSE_GOLD\"\n    },\n    {\n      \"filter\": \"Sharing\",\n      \"keyword\": {\n        \"color\": \"#aa4dbc\"\n      }\n    },\n    {\n      \"filter\": \"Styling\",\n      \"keyword\": {\n        \"color\": \"#31bb48\"\n      }\n    },\n    {\n      \"filter\": \"Android\",\n      \"use_platform\": \"ANDROID\"\n    }\n  ]\n}  You can find a more complex  configuration  to also support Chinese, Japanese and Korean languages.  The  Framefile.json  should be in the  screenshots  folder, as seen in the  example .",
            "title": "Example"
        },
        {
            "location": "/actions/frameit/#strings-files",
            "text": "To define the title and optionally the keyword, put two  .strings  files into the language folder (e.g.  en-US in the example project )  The  keyword.strings  and  title.strings  are standard  .strings  file you already use for your iOS apps, making it easy to use your existing translation service to get localized titles.  Notes   These  .strings  files  MUST  be utf-8 (UTF-8) or utf-16 encoded (UTF-16 BE with BOM). They also must begin with an empty line. If you are having trouble see  issue #1740  You  MUST  provide a background if you want titles.  frameit  will not add the titles if a background is not specified.",
            "title": ".strings files"
        },
        {
            "location": "/actions/frameit/#screenshot-orientation",
            "text": "By default  frameit  adds a frame to your screenshot based on an orientation you took it. For a portrait (vertical orientation) it is going to add portrait frame and for a landscape (horizontal orientation) - landscape left (=  Home button on the left side ).  One way to override the default behavior is editing the file name by adding  force_landscaperight  to the end.",
            "title": "Screenshot orientation"
        },
        {
            "location": "/actions/frameit/#force_orientation_block",
            "text": "If the default behavior doesn't fit your needs and you don't want or can't rename your screenshots, you can customize  frameit 's orientation behavior by setting a  force_orientation_block  parameter. The valid values are:  :landscape_left  (home button on the left side),  :landscape_right  (home button on the right side),  :portrait  (home button on the bottom),  nil  (home button on the right side).",
            "title": "force_orientation_block"
        },
        {
            "location": "/actions/frameit/#examples",
            "text": "# It matches the filename to the framed device orientation\nframeit(\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    case filename\n      when \"iPad Pro (12.9-inch)-01LoginScreen\"\n        :landscape_right\n      when \"iPhone 6 Plus-01LoginScreen\"\n        :portrait\n      # and so on\n    end\n  end\n)  # It frames the screenshots in landscape right whenever the filename contains `landscape` word\nframeit(\n  silver: true,\n  path: \"./fastlane/screenshots\",\n  force_orientation_block: proc do |filename|\n    f = filename.downcase\n    if f.include?(\"landscape\")\n      :landscape_right\n    end\n  end\n)",
            "title": "Examples"
        },
        {
            "location": "/actions/frameit/#mac",
            "text": "With  frameit  it's possible to also frame macOS Application screenshots. You have to provide the following:   A (relative) path to a  background  image file, which should contain both the background and the Mac.  The  offset  information so  frameit  knows where to position your screenshot on the  background :  offset  : A string that specifies the horizontal and vertical offset in pixels, with respect to the top left corner of the  background  image. The syntax is  \"+<horizontal>+<vertical>\" , e.g.  \"+200+150\" .  titleHeight  : The height in pixels that should be used for the title.",
            "title": "Mac"
        },
        {
            "location": "/actions/frameit/#example_1",
            "text": "{\n  \"default\": {\n    \"title\": {\n      \"color\": \"#545454\"\n    },\n    \"background\": \"Mac.jpg\",\n    \"offset\": {\n      \"offset\": \"+676+479\",\n      \"titleHeight\": 320\n    }\n  },\n  \"data\": [\n    {\n      \"filter\": \"Brainstorming\",\n      \"keyword\": {\n        \"color\": \"#d21559\"\n      }\n    }\n  ]\n}  Check out the  MindNode example project .",
            "title": "Example"
        },
        {
            "location": "/actions/frameit/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/frameit/#generate-localized-screenshots",
            "text": "Check out  snapshot  to automatically generate screenshots using  UI Automation .",
            "title": "Generate localized screenshots"
        },
        {
            "location": "/actions/frameit/#resume-framing",
            "text": "Framing screenshots is a slow operation. In case you need to resume framing, or just frame a couple updated screenshots again, you can rely on the  --resume  flag. Only screenshots which have not been framed yet \u2013 or for which there isn't an up-to-date framed image \u2013 will be framed. This feature uses the file modification dates and will reframe screenshots if the screenshot is newer than the framed file.",
            "title": "Resume framing"
        },
        {
            "location": "/actions/frameit/#upload-screenshots",
            "text": "Use  deliver  to upload iOS screenshots to App Store Connect, or  supply  to upload Android screenshots to Play Store completely automatically \ud83d\ude80",
            "title": "Upload screenshots"
        },
        {
            "location": "/actions/frameit/#use-a-clean-status-bar",
            "text": "You can set  override_status_bar  to  true  in snapshot to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.",
            "title": "Use a clean status bar"
        },
        {
            "location": "/actions/frameit/#gray-artifacts-around-text",
            "text": "If you run into any quality issues, like having a border around the font, it usually helps to just re-install  imagemagick . You can do so by running  brew uninstall imagemagick\nbrew install imagemagick",
            "title": "Gray artifacts around text"
        },
        {
            "location": "/actions/frameit/#uninstall",
            "text": "sudo gem uninstall fastlane  rm -rf ~/.frameit       frameit       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "Uninstall"
        },
        {
            "location": "/actions/frameit/#6-examples",
            "text": "frame_screenshots  frameit # alias for \"frame_screenshots\"  frame_screenshots(use_platform: \"ANDROID\")  frame_screenshots(silver: true)  frame_screenshots(path: \"/screenshots\")  frame_screenshots(rose_gold: true)",
            "title": "6 Examples"
        },
        {
            "location": "/actions/frameit/#parameters",
            "text": "Key  Description  Default      white  Use white device frames     silver  Use white device frames. Alias for :white     rose_gold  Use rose gold device frames. Alias for :rose_gold     gold  Use gold device frames. Alias for :gold     force_device_type  Forces a given device type, useful for Mac screenshots, as their sizes vary     use_legacy_iphone5s  Use iPhone 5s instead of iPhone SE frames  false    use_legacy_iphone6s  Use iPhone 6s frames instead of iPhone 7 frames  false    use_legacy_iphone7  Use iPhone 7 frames instead of iPhone 8 frames  false    use_legacy_iphonex  Use iPhone X instead of iPhone XS frames  false    use_legacy_iphonexr  Use iPhone XR instead of iPhone 11 frames  false    use_legacy_iphonexs  Use iPhone XS instead of iPhone 11 Pro frames  false    use_legacy_iphonexsmax  Use iPhone XS Max instead of iPhone 11 Pro Max frames  false    force_orientation_block  [Advanced] A block to customize your screenshots' device orientation  *    debug_mode  Output debug information in framed screenshots  false    resume  Resume frameit instead of reprocessing all screenshots  false    use_platform  Choose a platform, the valid options are IOS, ANDROID and ANY (default is either general platform defined in the fastfile or IOS to ensure backward compatibility)  *    path  The path to the directory containing the screenshots  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/frameit/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action frameit",
            "title": "Documentation"
        },
        {
            "location": "/actions/frameit/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run frameit  To pass parameters, make use of the  :  symbol, for example  fastlane run frameit parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/frameit/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/gcovr/",
            "text": "gcovr\n\n\nRuns test coverage reports for your Xcode project\n\n\n\n\nGenerate summarized code coverage reports using \ngcovr\n\n\n\n\n\n\n\n\n\n\ngcovr\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\ngcovr(\n  html: true,\n  html_details: true,\n  output: \"./code-coverage/report.html\"\n)\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action gcovr\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run gcovr\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run gcovr parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "gcovr"
        },
        {
            "location": "/actions/gcovr/#gcovr",
            "text": "Runs test coverage reports for your Xcode project   Generate summarized code coverage reports using  gcovr      gcovr       Supported platforms  ios    Author  @dtrenz",
            "title": "gcovr"
        },
        {
            "location": "/actions/gcovr/#1-example",
            "text": "gcovr(\n  html: true,\n  html_details: true,\n  output: \"./code-coverage/report.html\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/gcovr/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action gcovr",
            "title": "Documentation"
        },
        {
            "location": "/actions/gcovr/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run gcovr  To pass parameters, make use of the  :  symbol, for example  fastlane run gcovr parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/gcovr/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_build_number/",
            "text": "get_build_number\n\n\nGet the build number of your project\n\n\n\n\nThis action will return the current build number set on your project.\nYou first have to set up your Xcode project, if you haven't done it already: \nhttps://developer.apple.com/library/ios/qa/qa1827/_index.html\n.\n\n\n\n\n\n\n\n\n\n\nget_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul\n\n\n\n\n\n\n\n\n1 Example\n\n\nbuild_number = get_build_number(xcodeproj: \"Project.xcodeproj\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\nhide_error_when_versioning_disabled\n\n\nUsed during \nfastlane init\n to hide the error message\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_build_number\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::BUILD_NUMBER\n\n\nThe build number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_build_number\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_build_number\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_build_number parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_build_number"
        },
        {
            "location": "/actions/get_build_number/#get_build_number",
            "text": "Get the build number of your project   This action will return the current build number set on your project. You first have to set up your Xcode project, if you haven't done it already:  https://developer.apple.com/library/ios/qa/qa1827/_index.html .      get_build_number       Supported platforms  ios, mac    Author  @Liquidsoul",
            "title": "get_build_number"
        },
        {
            "location": "/actions/get_build_number/#1-example",
            "text": "build_number = get_build_number(xcodeproj: \"Project.xcodeproj\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/get_build_number/#parameters",
            "text": "Key  Description  Default      xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory     hide_error_when_versioning_disabled  Used during  fastlane init  to hide the error message  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_build_number/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_build_number  action generates the following Lane Variables:     SharedValue  Description      SharedValues::BUILD_NUMBER  The build number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_build_number/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_build_number",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_build_number/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_build_number  To pass parameters, make use of the  :  symbol, for example  fastlane run get_build_number parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_build_number/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_build_number_repository/",
            "text": "get_build_number_repository\n\n\nGet the build number from the current repository\n\n\n\n\nThis action will get the \nbuild number\n according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision), git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, \n:use_hg_revision_number\n, which allows to use mercurial revision number instead of hash.\n\n\n\n\n\n\n\n\n\n\nget_build_number_repository\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@bartoszj, @pbrooks, @armadsen\n\n\n\n\n\n\nReturns\n\n\nThe build number from the current repository\n\n\n\n\n\n\n\n\n1 Example\n\n\nget_build_number_repository\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuse_hg_revision_number\n\n\nUse hg revision number instead of hash (ignored for non-hg repos)\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_build_number_repository\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::BUILD_NUMBER_REPOSITORY\n\n\nThe build number from the current repository\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_build_number_repository\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_build_number_repository\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_build_number_repository parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_build_number_repository"
        },
        {
            "location": "/actions/get_build_number_repository/#get_build_number_repository",
            "text": "Get the build number from the current repository   This action will get the  build number  according to what the SCM HEAD reports. Currently supported SCMs are svn (uses root revision), git-svn (uses svn revision), git (uses short hash) and mercurial (uses short hash or revision number). There is an option,  :use_hg_revision_number , which allows to use mercurial revision number instead of hash.      get_build_number_repository       Supported platforms  ios, mac    Author  @bartoszj, @pbrooks, @armadsen    Returns  The build number from the current repository",
            "title": "get_build_number_repository"
        },
        {
            "location": "/actions/get_build_number_repository/#1-example",
            "text": "get_build_number_repository",
            "title": "1 Example"
        },
        {
            "location": "/actions/get_build_number_repository/#parameters",
            "text": "Key  Description  Default      use_hg_revision_number  Use hg revision number instead of hash (ignored for non-hg repos)  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_build_number_repository/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_build_number_repository  action generates the following Lane Variables:     SharedValue  Description      SharedValues::BUILD_NUMBER_REPOSITORY  The build number from the current repository     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_build_number_repository/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_build_number_repository",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_build_number_repository/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_build_number_repository  To pass parameters, make use of the  :  symbol, for example  fastlane run get_build_number_repository parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_build_number_repository/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_certificates/",
            "text": "get_certificates\n\n\nCreate new iOS code signing certificates (via \ncert\n)\n\n\n\n  \n\n\n\n\n\n\n\n\n    \nWhy?\n \u2022\n    \nUsage\n \u2022\n    \nHow does it work?\n \u2022\n    \nTips\n\n\n\n\n\n\ncert\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\n\n\nIn the gif we used \ncert && sigh\n, which will first create an iOS code signing certificate and then a provisioning profile for your app if \ncert\n succeeded.\n\n\nUsage\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your certificates. Use \ncert\n directly only if you want full control over what's going on and know more about codesigning.\n\n\nfastlane cert\n\n\n\n\nThis will check if any of the available signing certificates is installed on your local machine.\n\n\nOnly if a new certificate needs to be created, \ncert\n will\n\n\n\n\nCreate a new private key\n\n\nCreate a new signing request\n\n\nGenerate, downloads and installs the certificate\n\n\nImport all the generated files into your Keychain\n\n\n\n\ncert\n will never revoke your existing certificates. If you can't create any more certificates, \ncert\n will raise an exception, which means, you have to revoke one of the existing certificates to make room for a new one.\n\n\nYou can pass your Apple ID:\n\n\nfastlane cert -u cert@krausefx.com\n\n\n\n\nFor a list of available commands run\n\n\nfastlane action cert\n\n\n\n\nKeep in mind, there is no way for \ncert\n to download existing certificates + private keys from the Apple Developer Portal, as the private key never leaves your computer.\n\n\nEnvironment Variables\n\n\nRun \nfastlane action cert\n to get a list of all available environment variables.\n\n\nUse with \nsigh\n\n\ncert\n becomes really interesting when used in \nfastlane\n in combination with \nsigh\n.\n\n\nUpdate your \nFastfile\n to contain the following code:\n\n\nlane :beta do\n  cert\n  sigh(force: true)\nend\n\n\n\n\nforce: true\n will make sure to re-generate the provisioning profile on each run.\nThis will result in \nsigh\n always using the correct signing certificate, which is installed on the local machine.\n\n\nHow is my password stored?\n\n\ncert\n uses the \npassword manager\n from \nfastlane\n. Take a look the \nCredentialsManager README\n for more information.\n\n\nTips\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nmobileprovision\n files like this:\n\n\n\n\n\n\n\n\n\n\n\n\nget_certificates\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nget_certificates\n\n\n\n\ncert # alias for \"get_certificates\"\n\n\n\n\nget_certificates(\n  development: true,\n  username: \"user@email.com\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndevelopment\n\n\nCreate a development certificate instead of a distribution one\n\n\nfalse\n\n\n\n\n\n\ntype\n\n\nCreate specific certificate type (takes precedence over :development)\n\n\n\n\n\n\n\n\nforce\n\n\nCreate a certificate even if an existing certificate exists\n\n\nfalse\n\n\n\n\n\n\ngenerate_apple_certs\n\n\nCreate a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)\n\n\n*\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nfilename\n\n\nThe filename of certificate to store\n\n\n\n\n\n\n\n\noutput_path\n\n\nThe path to a directory in which all certificates and private keys should be stored\n\n\n.\n\n\n\n\n\n\nkeychain_path\n\n\nPath to a custom keychain\n\n\n*\n\n\n\n\n\n\nkeychain_password\n\n\nThis might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password\n\n\n\n\n\n\n\n\nskip_set_partition_list\n\n\nSkips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing\n\n\nfalse\n\n\n\n\n\n\nplatform\n\n\nSet the provisioning profile's platform (ios, macos, tvos)\n\n\nios\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_certificates\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::CERT_FILE_PATH\n\n\nThe path to the certificate\n\n\n\n\n\n\nSharedValues::CERT_CERTIFICATE_ID\n\n\nThe id of the certificate\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_certificates\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_certificates\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_certificates parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_certificates"
        },
        {
            "location": "/actions/get_certificates/#get_certificates",
            "text": "Create new iOS code signing certificates (via  cert )  \n      \n     Why?  \u2022\n     Usage  \u2022\n     How does it work?  \u2022\n     Tips",
            "title": "get_certificates"
        },
        {
            "location": "/actions/get_certificates/#usage",
            "text": "Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your certificates. Use  cert  directly only if you want full control over what's going on and know more about codesigning.  fastlane cert  This will check if any of the available signing certificates is installed on your local machine.  Only if a new certificate needs to be created,  cert  will   Create a new private key  Create a new signing request  Generate, downloads and installs the certificate  Import all the generated files into your Keychain   cert  will never revoke your existing certificates. If you can't create any more certificates,  cert  will raise an exception, which means, you have to revoke one of the existing certificates to make room for a new one.  You can pass your Apple ID:  fastlane cert -u cert@krausefx.com  For a list of available commands run  fastlane action cert  Keep in mind, there is no way for  cert  to download existing certificates + private keys from the Apple Developer Portal, as the private key never leaves your computer.",
            "title": "Usage"
        },
        {
            "location": "/actions/get_certificates/#environment-variables",
            "text": "Run  fastlane action cert  to get a list of all available environment variables.",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/get_certificates/#use-with-sigh",
            "text": "cert  becomes really interesting when used in  fastlane  in combination with  sigh .  Update your  Fastfile  to contain the following code:  lane :beta do\n  cert\n  sigh(force: true)\nend  force: true  will make sure to re-generate the provisioning profile on each run.\nThis will result in  sigh  always using the correct signing certificate, which is installed on the local machine.",
            "title": "Use with sigh"
        },
        {
            "location": "/actions/get_certificates/#how-is-my-password-stored",
            "text": "cert  uses the  password manager  from  fastlane . Take a look the  CredentialsManager README  for more information.",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/get_certificates/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/get_certificates/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  mobileprovision  files like this:      get_certificates       Supported platforms  ios    Author  @KrauseFx",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/get_certificates/#3-examples",
            "text": "get_certificates  cert # alias for \"get_certificates\"  get_certificates(\n  development: true,\n  username: \"user@email.com\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/get_certificates/#parameters",
            "text": "Key  Description  Default      development  Create a development certificate instead of a distribution one  false    type  Create specific certificate type (takes precedence over :development)     force  Create a certificate even if an existing certificate exists  false    generate_apple_certs  Create a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)  *    api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    filename  The filename of certificate to store     output_path  The path to a directory in which all certificates and private keys should be stored  .    keychain_path  Path to a custom keychain  *    keychain_password  This might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password     skip_set_partition_list  Skips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing  false    platform  Set the provisioning profile's platform (ios, macos, tvos)  ios     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_certificates/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_certificates  action generates the following Lane Variables:     SharedValue  Description      SharedValues::CERT_FILE_PATH  The path to the certificate    SharedValues::CERT_CERTIFICATE_ID  The id of the certificate     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_certificates/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_certificates",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_certificates/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_certificates  To pass parameters, make use of the  :  symbol, for example  fastlane run get_certificates parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_certificates/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_github_release/",
            "text": "get_github_release\n\n\nThis will verify if a given release version is available on GitHub\n\n\n\n\nThis will return all information about a release. For example:\n\n\n\n\n{\n  \"url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n   \"assets_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n   \"upload_url\"=>\"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n   \"html_url\"=>\"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n   \"id\"=>1537713,\n   \"tag_name\"=>\"1.8.0\",\n   \"target_commitish\"=>\"master\",\n   \"name\"=>\"1.8.0 Switch Lanes & Pass Parameters\",\n   \"draft\"=>false,\n   \"author\"=>\n    {\"login\"=>\"KrauseFx\",\n     \"id\"=>869950,\n     \"avatar_url\"=>\"https://avatars.githubusercontent.com/u/869950?v=3\",\n     \"gravatar_id\"=>\"\",\n     \"url\"=>\"https://api.github.com/users/KrauseFx\",\n     \"html_url\"=>\"https://github.com/fastlane\",\n     \"followers_url\"=>\"https://api.github.com/users/KrauseFx/followers\",\n     \"following_url\"=>\"https://api.github.com/users/KrauseFx/following{/other_user}\",\n     \"gists_url\"=>\"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n     \"starred_url\"=>\"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n     \"subscriptions_url\"=>\"https://api.github.com/users/KrauseFx/subscriptions\",\n     \"organizations_url\"=>\"https://api.github.com/users/KrauseFx/orgs\",\n     \"repos_url\"=>\"https://api.github.com/users/KrauseFx/repos\",\n     \"events_url\"=>\"https://api.github.com/users/KrauseFx/events{/privacy}\",\n     \"received_events_url\"=>\"https://api.github.com/users/KrauseFx/received_events\",\n     \"type\"=>\"User\",\n     \"site_admin\"=>false},\n   \"prerelease\"=>false,\n   \"created_at\"=>\"2015-07-14T23:33:01Z\",\n   \"published_at\"=>\"2015-07-14T23:44:10Z\",\n   \"assets\"=>[],\n   \"tarball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n   \"zipball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n   \"body\"=> ...Markdown...\n  \"This is one of the biggest updates of _fastlane_ yet\"\n}\n\n\n\n\n\n\n\n\n\n\n\n\nget_github_release\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @czechboy0, @jaleksynas, @tommeier\n\n\n\n\n\n\n\n\n1 Example\n\n\nrelease = get_github_release(url: \"fastlane/fastlane\", version: \"1.0.0\")\nputs release[\"name\"]\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe path to your repo, e.g. 'KrauseFx/fastlane'\n\n\n\n\n\n\n\n\nserver_url\n\n\nThe server url. e.g. 'https://your.github.server/api/v3' (Default: 'https://api.github.com')\n\n\nhttps://api.github.com\n\n\n\n\n\n\nversion\n\n\nThe version tag of the release to check\n\n\n\n\n\n\n\n\napi_token\n\n\nGitHub Personal Token (required for private repositories)\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_github_release\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GET_GITHUB_RELEASE_INFO\n\n\nContains all the information about this release\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_github_release\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_github_release\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_github_release parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_github_release"
        },
        {
            "location": "/actions/get_github_release/#get_github_release",
            "text": "This will verify if a given release version is available on GitHub   This will return all information about a release. For example:   {\n  \"url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713\",\n   \"assets_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/releases/1537713/assets\",\n   \"upload_url\"=>\"https://uploads.github.com/repos/KrauseFx/fastlane/releases/1537713/assets{?name}\",\n   \"html_url\"=>\"https://github.com/fastlane/fastlane/releases/tag/1.8.0\",\n   \"id\"=>1537713,\n   \"tag_name\"=>\"1.8.0\",\n   \"target_commitish\"=>\"master\",\n   \"name\"=>\"1.8.0 Switch Lanes & Pass Parameters\",\n   \"draft\"=>false,\n   \"author\"=>\n    {\"login\"=>\"KrauseFx\",\n     \"id\"=>869950,\n     \"avatar_url\"=>\"https://avatars.githubusercontent.com/u/869950?v=3\",\n     \"gravatar_id\"=>\"\",\n     \"url\"=>\"https://api.github.com/users/KrauseFx\",\n     \"html_url\"=>\"https://github.com/fastlane\",\n     \"followers_url\"=>\"https://api.github.com/users/KrauseFx/followers\",\n     \"following_url\"=>\"https://api.github.com/users/KrauseFx/following{/other_user}\",\n     \"gists_url\"=>\"https://api.github.com/users/KrauseFx/gists{/gist_id}\",\n     \"starred_url\"=>\"https://api.github.com/users/KrauseFx/starred{/owner}{/repo}\",\n     \"subscriptions_url\"=>\"https://api.github.com/users/KrauseFx/subscriptions\",\n     \"organizations_url\"=>\"https://api.github.com/users/KrauseFx/orgs\",\n     \"repos_url\"=>\"https://api.github.com/users/KrauseFx/repos\",\n     \"events_url\"=>\"https://api.github.com/users/KrauseFx/events{/privacy}\",\n     \"received_events_url\"=>\"https://api.github.com/users/KrauseFx/received_events\",\n     \"type\"=>\"User\",\n     \"site_admin\"=>false},\n   \"prerelease\"=>false,\n   \"created_at\"=>\"2015-07-14T23:33:01Z\",\n   \"published_at\"=>\"2015-07-14T23:44:10Z\",\n   \"assets\"=>[],\n   \"tarball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/tarball/1.8.0\",\n   \"zipball_url\"=>\"https://api.github.com/repos/KrauseFx/fastlane/zipball/1.8.0\",\n   \"body\"=> ...Markdown...\n  \"This is one of the biggest updates of _fastlane_ yet\"\n}      get_github_release       Supported platforms  ios, android, mac    Author  @KrauseFx, @czechboy0, @jaleksynas, @tommeier",
            "title": "get_github_release"
        },
        {
            "location": "/actions/get_github_release/#1-example",
            "text": "release = get_github_release(url: \"fastlane/fastlane\", version: \"1.0.0\")\nputs release[\"name\"]",
            "title": "1 Example"
        },
        {
            "location": "/actions/get_github_release/#parameters",
            "text": "Key  Description  Default      url  The path to your repo, e.g. 'KrauseFx/fastlane'     server_url  The server url. e.g. 'https://your.github.server/api/v3' (Default: 'https://api.github.com')  https://api.github.com    version  The version tag of the release to check     api_token  GitHub Personal Token (required for private repositories)  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_github_release/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_github_release  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GET_GITHUB_RELEASE_INFO  Contains all the information about this release     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_github_release/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_github_release",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_github_release/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_github_release  To pass parameters, make use of the  :  symbol, for example  fastlane run get_github_release parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_github_release/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_info_plist_value/",
            "text": "get_info_plist_value\n\n\nReturns value from Info.plist of your project as native Ruby data structures\n\n\n\n\nGet a value from a plist file, which can be used to fetch the app identifier and more information about your app\n\n\n\n\n\n\n\n\n\n\nget_info_plist_value\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@kohtenko\n\n\n\n\n\n\n\n\n1 Example\n\n\nidentifier = get_info_plist_value(path: \"./Info.plist\", key: \"CFBundleIdentifier\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nName of parameter\n\n\n\n\n\n\n\n\npath\n\n\nPath to plist file you want to read\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_info_plist_value\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GET_INFO_PLIST_VALUE_CUSTOM_VALUE\n\n\nThe value of the last plist file that was parsed\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_info_plist_value\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_info_plist_value\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_info_plist_value parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_info_plist_value"
        },
        {
            "location": "/actions/get_info_plist_value/#get_info_plist_value",
            "text": "Returns value from Info.plist of your project as native Ruby data structures   Get a value from a plist file, which can be used to fetch the app identifier and more information about your app      get_info_plist_value       Supported platforms  ios, mac    Author  @kohtenko",
            "title": "get_info_plist_value"
        },
        {
            "location": "/actions/get_info_plist_value/#1-example",
            "text": "identifier = get_info_plist_value(path: \"./Info.plist\", key: \"CFBundleIdentifier\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/get_info_plist_value/#parameters",
            "text": "Key  Description  Default      key  Name of parameter     path  Path to plist file you want to read      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_info_plist_value/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_info_plist_value  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GET_INFO_PLIST_VALUE_CUSTOM_VALUE  The value of the last plist file that was parsed     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_info_plist_value/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_info_plist_value",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_info_plist_value/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_info_plist_value  To pass parameters, make use of the  :  symbol, for example  fastlane run get_info_plist_value parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_info_plist_value/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/",
            "text": "get_ipa_info_plist_value\n\n\nReturns a value from Info.plist inside a .ipa file\n\n\n\n\nThis is useful for introspecting Info.plist files for \n.ipa\n files that have already been built.\n\n\n\n\n\n\n\n\n\n\nget_ipa_info_plist_value\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@johnboiles\n\n\n\n\n\n\nReturns\n\n\nReturns the value in the .ipa's Info.plist corresponding to the passed in Key\n\n\n\n\n\n\n\n\n1 Example\n\n\nget_ipa_info_plist_value(ipa: \"path.ipa\", key: \"KEY_YOU_READ\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nName of parameter\n\n\n\n\n\n\n\n\nipa\n\n\nPath to IPA\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_ipa_info_plist_value\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GET_IPA_INFO_PLIST_VALUE_CUSTOM_VALUE\n\n\nThe value of the last plist file that was parsed\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_ipa_info_plist_value\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_ipa_info_plist_value\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_ipa_info_plist_value parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_ipa_info_plist_value"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#get_ipa_info_plist_value",
            "text": "Returns a value from Info.plist inside a .ipa file   This is useful for introspecting Info.plist files for  .ipa  files that have already been built.      get_ipa_info_plist_value       Supported platforms  ios, mac    Author  @johnboiles    Returns  Returns the value in the .ipa's Info.plist corresponding to the passed in Key",
            "title": "get_ipa_info_plist_value"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#1-example",
            "text": "get_ipa_info_plist_value(ipa: \"path.ipa\", key: \"KEY_YOU_READ\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#parameters",
            "text": "Key  Description  Default      key  Name of parameter     ipa  Path to IPA  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_ipa_info_plist_value  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GET_IPA_INFO_PLIST_VALUE_CUSTOM_VALUE  The value of the last plist file that was parsed     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_ipa_info_plist_value",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_ipa_info_plist_value  To pass parameters, make use of the  :  symbol, for example  fastlane run get_ipa_info_plist_value parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_ipa_info_plist_value/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/",
            "text": "get_managed_play_store_publishing_rights\n\n\nObtain publishing rights for custom apps on Managed Google Play Store\n\n\n\n\nIf you haven't done so before, start by following the first two steps of Googles \n\"Get started with custom app publishing\"\n -> \n\"Preliminary setup\"\n instructions:\n\"\nEnable the Google Play Custom App Publishing API\n\" and \"\nCreate a service account\n\".\nYou need the \"service account's private key file\" to continue.\nRun the action and supply the \"private key file\" to it as the \njson_key\n parameter. The command will output a URL to visit. After logging in you are redirected to a page that outputs your \"Developer Account ID\" - take note of that, you will need it to be able to use \ncreate_app_on_managed_play_store\n.\n\n\n\n\n\n\n\n\n\n\nget_managed_play_store_publishing_rights\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@janpio\n\n\n\n\n\n\nReturns\n\n\nAn URI to obtain publishing rights for custom apps on Managed Play Store\n\n\n\n\n\n\n\n\n1 Example\n\n\nget_managed_play_store_publishing_rights(\n  json_key: \"path/to/your/json/key/file\"\n)\n# it is probably easier to execute this action directly in the command line:\n# $ fastlane run get_managed_play_store_publishing_rights\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_managed_play_store_publishing_rights\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_managed_play_store_publishing_rights\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_managed_play_store_publishing_rights parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_managed_play_store_publishing_rights"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/#get_managed_play_store_publishing_rights",
            "text": "Obtain publishing rights for custom apps on Managed Google Play Store   If you haven't done so before, start by following the first two steps of Googles  \"Get started with custom app publishing\"  ->  \"Preliminary setup\"  instructions: \" Enable the Google Play Custom App Publishing API \" and \" Create a service account \". You need the \"service account's private key file\" to continue. Run the action and supply the \"private key file\" to it as the  json_key  parameter. The command will output a URL to visit. After logging in you are redirected to a page that outputs your \"Developer Account ID\" - take note of that, you will need it to be able to use  create_app_on_managed_play_store .      get_managed_play_store_publishing_rights       Supported platforms  android    Author  @janpio    Returns  An URI to obtain publishing rights for custom apps on Managed Play Store",
            "title": "get_managed_play_store_publishing_rights"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/#1-example",
            "text": "get_managed_play_store_publishing_rights(\n  json_key: \"path/to/your/json/key/file\"\n)\n# it is probably easier to execute this action directly in the command line:\n# $ fastlane run get_managed_play_store_publishing_rights",
            "title": "1 Example"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/#parameters",
            "text": "Key  Description  Default      json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_managed_play_store_publishing_rights",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_managed_play_store_publishing_rights  To pass parameters, make use of the  :  symbol, for example  fastlane run get_managed_play_store_publishing_rights parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_managed_play_store_publishing_rights/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_provisioning_profile/",
            "text": "get_provisioning_profile\n\n\nGenerates a provisioning profile, saving it in the current folder (via \nsigh\n)\n\n\n\n  \n\n\n\n\n\nBecause you would rather spend your time building stuff than fighting provisioning\n\n\nsigh\n can create, renew, download and repair provisioning profiles (with one command). It supports App Store, Ad Hoc, Development and Enterprise profiles and supports nice features, like auto-adding all test devices.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nResign\n \u2022\n    \nHow does it work?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nDownload\n the latest provisioning profile for your app\n\n\nRenew\n a provisioning profile, when it has expired\n\n\nRepair\n a provisioning profile, when it is broken\n\n\nCreate\n a new provisioning profile, if it doesn't exist already\n\n\nSupports \nApp Store\n, \nAd Hoc\n and \nDevelopment\n profiles\n\n\nSupport for \nmultiple Apple accounts\n, storing your credentials securely in the Keychain\n\n\nSupport for \nmultiple Teams\n\n\nSupport for \nEnterprise Profiles\n\n\n\n\nTo automate iOS Push profiles you can use \npem\n.\n\n\nWhy not let Xcode do the work?\n\n\n\n\nsigh\n can easily be integrated into your CI-server (e.g. Jenkins)\n\n\nXcode sometimes invalidates \nall existing profiles\n\n\nYou have control over what happens\n\n\nYou still get to have the signing files, which you can then use for your build scripts or store in git\n\n\n\n\nSee \nsigh\n in action:\n\n\n\n\nUsage\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your provisioning profiles. Use \nsigh\n directly only if you want full control over what's going on and know more about codesigning.\n\n\nfastlane sigh\n\n\n\n\nYes, that's the whole command!\n\n\nsigh\n will create, repair and download profiles for the App Store by default.\n\n\nYou can pass your bundle identifier and username like this:\n\n\nfastlane sigh -a com.krausefx.app -u username\n\n\n\n\nIf you want to generate an \nAd Hoc\n profile instead of an App Store profile:\n\n\nfastlane sigh --adhoc\n\n\n\n\nIf you want to generate a \nDevelopment\n profile:\n\n\nfastlane sigh --development\n\n\n\n\nTo generate the profile in a specific directory:\n\n\nfastlane sigh -o \"~/Certificates/\"\n\n\n\n\nTo download all your provisioning profiles use\n\n\nfastlane sigh download_all\n\n\n\n\nOptionally, use \nfastlane sigh download_all --download_xcode_profiles\n to also include the Xcode managed provisioning profiles\n\n\nFor a list of available parameters and commands run\n\n\nfastlane action sigh\n\n\n\n\nAdvanced\n\n\nBy default, \nsigh\n will install the downloaded profile on your machine. If you just want to generate the profile and skip the installation, use the following flag:\n\n\nfastlane sigh --skip_install\n\n\n\n\nTo save the provisioning profile under a specific name, use the -q option:\n\n\nfastlane sigh -a com.krausefx.app -u username -q \"myProfile.mobileprovision\"\n\n\n\n\nIf for some reason you don't want \nsigh\n to verify that the code signing identity is installed on your local machine:\n\n\nfastlane sigh --skip_certificate_verification\n\n\n\n\nIf you need the provisioning profile to be renewed regardless of its state use the \n--force\n option. This gives you a profile with the maximum lifetime. \n--force\n will also add all available devices to this profile.\n\n\nfastlane sigh --force\n\n\n\n\nBy default, \nsigh\n will include all certificates on development profiles, and first certificate on other types. If you need to specify which certificate to use you can either use the environment variable \nSIGH_CERTIFICATE\n, or pass the name or expiry date of the certificate as argument:\n\n\nfastlane sigh -c \"SunApps GmbH\"\n\n\n\n\nFor a list of available parameters and commands run\n\n\nfastlane action sigh\n\n\n\n\nUse with \nfastlane\n\n\nsigh\n becomes really interesting when used in \nfastlane\n in combination with \ncert\n.\n\n\nUpdate your \nFastfile\n to contain the following code:\n\n\nlane :beta do\n  cert\n  sigh(force: true)\nend\n\n\n\n\nforce: true\n will make sure to re-generate the provisioning profile on each run.\nThis will result in \nsigh\n always using the correct signing certificate, which is installed on the local machine.\n\n\nRepair\n\n\nsigh\n can automatically repair all your existing provisioning profiles which are expired or just invalid.\n\n\nfastlane sigh repair\n\n\n\n\nResign\n\n\nIf you generated your \nipa\n file but want to apply a different code signing onto the ipa file, you can use \nsigh resign\n:\n\n\nfastlane sigh resign\n\n\n\n\nsigh\n will find the ipa file and the provisioning profile for you if they are located in the current folder.\n\n\nYou can pass more information using the command line:\n\n\nfastlane sigh resign ./path/app.ipa --signing_identity \"iPhone Distribution: Felix Krause\" -p \"my.mobileprovision\"\n\n\n\n\nManage\n\n\nWith \nsigh manage\n you can list all provisioning profiles installed locally.\n\n\nfastlane sigh manage\n\n\n\n\nDelete all expired provisioning profiles\n\n\nfastlane sigh manage -e\n\n\n\n\nOr delete all \niOS Team Provisioning Profile\n by using a regular expression\n\n\nfastlane sigh manage -p \"iOS\\ ?Team Provisioning Profile:\"\n\n\n\n\nEnvironment Variables\n\n\nRun \nfastlane action sigh\n to get a list of all available environment variables.\n\n\nIf you're using \ncert\n in combination with \nfastlane\n the signing certificate will automatically be selected for you. (make sure to run \ncert\n before \nsigh\n)\n\n\nHow does it work?\n\n\nsigh\n will access the \niOS Dev Center\n to download, renew or generate the \n.mobileprovision\n file. It uses \nspaceship\n to communicate with Apple's web services.\n\n\nHow is my password stored?\n\n\nsigh\n uses the \nCredentialsManager\n from \nfastlane\n.\n\n\nTips\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nmobileprovision\n files like this:\n\n\n\nApp Identifier couldn't be found\n\n\nIf you also want to create a new App Identifier on the Apple Developer Portal, check out \nproduce\n, which does exactly that.\n\n\nWhat happens to my Xcode managed profiles?\n\n\nsigh\n will never touch or use the profiles which are created and managed by Xcode. Instead \nsigh\n will manage its own set of provisioning profiles.\n\n\n\n\n\n\n\n\n\n\n\nget_provisioning_profile\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe UUID of the profile sigh just fetched/generated\n\n\n\n\n\n\n\n\n3 Examples\n\n\nget_provisioning_profile\n\n\n\n\nsigh # alias for \"get_provisioning_profile\"\n\n\n\n\nget_provisioning_profile(\n  adhoc: true,\n  force: true,\n  filename: \"myFile.mobileprovision\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadhoc\n\n\nSetting this flag will generate AdHoc profiles instead of App Store Profiles\n\n\nfalse\n\n\n\n\n\n\ndeveloper_id\n\n\nSetting this flag will generate Developer ID profiles instead of App Store Profiles\n\n\nfalse\n\n\n\n\n\n\ndevelopment\n\n\nRenew the development certificate instead of the production one\n\n\nfalse\n\n\n\n\n\n\nskip_install\n\n\nBy default, the certificate will be added to your local machine. Setting this flag will skip this action\n\n\nfalse\n\n\n\n\n\n\nforce\n\n\nRenew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nprovisioning_name\n\n\nThe name of the profile that is used on the Apple Developer Portal\n\n\n\n\n\n\n\n\nignore_profiles_with_different_name\n\n\nUse in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded\n\n\nfalse\n\n\n\n\n\n\noutput_path\n\n\nDirectory in which the profile should be stored\n\n\n.\n\n\n\n\n\n\ncert_id\n\n\nThe ID of the code signing certificate to use (e.g. 78ADL6LVAA)\n\n\n\n\n\n\n\n\ncert_owner_name\n\n\nThe certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")\n\n\n\n\n\n\n\n\nfilename\n\n\nFilename to use for the generated provisioning profile (must include .mobileprovision)\n\n\n\n\n\n\n\n\nskip_fetch_profiles\n\n\nSkips the verification of existing profiles which is useful if you have thousands of profiles\n\n\nfalse\n\n\n\n\n\n\nskip_certificate_verification\n\n\nSkips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine\n\n\nfalse\n\n\n\n\n\n\nplatform\n\n\nSet the provisioning profile's platform (i.e. ios, tvos, macos, catalyst)\n\n\nios\n\n\n\n\n\n\nreadonly\n\n\nOnly fetch existing profile, don't generate new ones\n\n\nfalse\n\n\n\n\n\n\ntemplate_name\n\n\nThe name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")\n\n\n\n\n\n\n\n\nfail_on_name_taken\n\n\nShould the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_provisioning_profile\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_PATH\n\n\nA path in which certificates, key and profile are exported\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_PATHS\n\n\nPaths in which certificates, key and profile are exported\n\n\n\n\n\n\nSharedValues::SIGH_UUID\n\n\nUUID (Universally Unique IDentifier) of a provisioning profile\n\n\n\n\n\n\nSharedValues::SIGH_NAME\n\n\nThe name of the profile\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_TYPE\n\n\nThe profile type, can be appstore, adhoc, development, enterprise\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_provisioning_profile\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_provisioning_profile\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_provisioning_profile parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_provisioning_profile"
        },
        {
            "location": "/actions/get_provisioning_profile/#get_provisioning_profile",
            "text": "Generates a provisioning profile, saving it in the current folder (via  sigh )",
            "title": "get_provisioning_profile"
        },
        {
            "location": "/actions/get_provisioning_profile/#because-you-would-rather-spend-your-time-building-stuff-than-fighting-provisioning",
            "text": "sigh  can create, renew, download and repair provisioning profiles (with one command). It supports App Store, Ad Hoc, Development and Enterprise profiles and supports nice features, like auto-adding all test devices.   \n     Features  \u2022\n     Usage  \u2022\n     Resign  \u2022\n     How does it work?",
            "title": "Because you would rather spend your time building stuff than fighting provisioning"
        },
        {
            "location": "/actions/get_provisioning_profile/#features",
            "text": "Download  the latest provisioning profile for your app  Renew  a provisioning profile, when it has expired  Repair  a provisioning profile, when it is broken  Create  a new provisioning profile, if it doesn't exist already  Supports  App Store ,  Ad Hoc  and  Development  profiles  Support for  multiple Apple accounts , storing your credentials securely in the Keychain  Support for  multiple Teams  Support for  Enterprise Profiles   To automate iOS Push profiles you can use  pem .",
            "title": "Features"
        },
        {
            "location": "/actions/get_provisioning_profile/#why-not-let-xcode-do-the-work",
            "text": "sigh  can easily be integrated into your CI-server (e.g. Jenkins)  Xcode sometimes invalidates  all existing profiles  You have control over what happens  You still get to have the signing files, which you can then use for your build scripts or store in git   See  sigh  in action:",
            "title": "Why not let Xcode do the work?"
        },
        {
            "location": "/actions/get_provisioning_profile/#usage",
            "text": "Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your provisioning profiles. Use  sigh  directly only if you want full control over what's going on and know more about codesigning.  fastlane sigh  Yes, that's the whole command!  sigh  will create, repair and download profiles for the App Store by default.  You can pass your bundle identifier and username like this:  fastlane sigh -a com.krausefx.app -u username  If you want to generate an  Ad Hoc  profile instead of an App Store profile:  fastlane sigh --adhoc  If you want to generate a  Development  profile:  fastlane sigh --development  To generate the profile in a specific directory:  fastlane sigh -o \"~/Certificates/\"  To download all your provisioning profiles use  fastlane sigh download_all  Optionally, use  fastlane sigh download_all --download_xcode_profiles  to also include the Xcode managed provisioning profiles  For a list of available parameters and commands run  fastlane action sigh",
            "title": "Usage"
        },
        {
            "location": "/actions/get_provisioning_profile/#advanced",
            "text": "By default,  sigh  will install the downloaded profile on your machine. If you just want to generate the profile and skip the installation, use the following flag:  fastlane sigh --skip_install  To save the provisioning profile under a specific name, use the -q option:  fastlane sigh -a com.krausefx.app -u username -q \"myProfile.mobileprovision\"  If for some reason you don't want  sigh  to verify that the code signing identity is installed on your local machine:  fastlane sigh --skip_certificate_verification  If you need the provisioning profile to be renewed regardless of its state use the  --force  option. This gives you a profile with the maximum lifetime.  --force  will also add all available devices to this profile.  fastlane sigh --force  By default,  sigh  will include all certificates on development profiles, and first certificate on other types. If you need to specify which certificate to use you can either use the environment variable  SIGH_CERTIFICATE , or pass the name or expiry date of the certificate as argument:  fastlane sigh -c \"SunApps GmbH\"  For a list of available parameters and commands run  fastlane action sigh",
            "title": "Advanced"
        },
        {
            "location": "/actions/get_provisioning_profile/#use-with-fastlane",
            "text": "sigh  becomes really interesting when used in  fastlane  in combination with  cert .  Update your  Fastfile  to contain the following code:  lane :beta do\n  cert\n  sigh(force: true)\nend  force: true  will make sure to re-generate the provisioning profile on each run.\nThis will result in  sigh  always using the correct signing certificate, which is installed on the local machine.",
            "title": "Use with fastlane"
        },
        {
            "location": "/actions/get_provisioning_profile/#repair",
            "text": "sigh  can automatically repair all your existing provisioning profiles which are expired or just invalid.  fastlane sigh repair",
            "title": "Repair"
        },
        {
            "location": "/actions/get_provisioning_profile/#resign",
            "text": "If you generated your  ipa  file but want to apply a different code signing onto the ipa file, you can use  sigh resign :  fastlane sigh resign  sigh  will find the ipa file and the provisioning profile for you if they are located in the current folder.  You can pass more information using the command line:  fastlane sigh resign ./path/app.ipa --signing_identity \"iPhone Distribution: Felix Krause\" -p \"my.mobileprovision\"",
            "title": "Resign"
        },
        {
            "location": "/actions/get_provisioning_profile/#manage",
            "text": "With  sigh manage  you can list all provisioning profiles installed locally.  fastlane sigh manage  Delete all expired provisioning profiles  fastlane sigh manage -e  Or delete all  iOS Team Provisioning Profile  by using a regular expression  fastlane sigh manage -p \"iOS\\ ?Team Provisioning Profile:\"",
            "title": "Manage"
        },
        {
            "location": "/actions/get_provisioning_profile/#environment-variables",
            "text": "Run  fastlane action sigh  to get a list of all available environment variables.  If you're using  cert  in combination with  fastlane  the signing certificate will automatically be selected for you. (make sure to run  cert  before  sigh )",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/get_provisioning_profile/#how-does-it-work",
            "text": "sigh  will access the  iOS Dev Center  to download, renew or generate the  .mobileprovision  file. It uses  spaceship  to communicate with Apple's web services.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/get_provisioning_profile/#how-is-my-password-stored",
            "text": "sigh  uses the  CredentialsManager  from  fastlane .",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/get_provisioning_profile/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/get_provisioning_profile/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  mobileprovision  files like this:",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/get_provisioning_profile/#app-identifier-couldnt-be-found",
            "text": "If you also want to create a new App Identifier on the Apple Developer Portal, check out  produce , which does exactly that.",
            "title": "App Identifier couldn't be found"
        },
        {
            "location": "/actions/get_provisioning_profile/#what-happens-to-my-xcode-managed-profiles",
            "text": "sigh  will never touch or use the profiles which are created and managed by Xcode. Instead  sigh  will manage its own set of provisioning profiles.      get_provisioning_profile       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The UUID of the profile sigh just fetched/generated",
            "title": "What happens to my Xcode managed profiles?"
        },
        {
            "location": "/actions/get_provisioning_profile/#3-examples",
            "text": "get_provisioning_profile  sigh # alias for \"get_provisioning_profile\"  get_provisioning_profile(\n  adhoc: true,\n  force: true,\n  filename: \"myFile.mobileprovision\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/get_provisioning_profile/#parameters",
            "text": "Key  Description  Default      adhoc  Setting this flag will generate AdHoc profiles instead of App Store Profiles  false    developer_id  Setting this flag will generate Developer ID profiles instead of App Store Profiles  false    development  Renew the development certificate instead of the production one  false    skip_install  By default, the certificate will be added to your local machine. Setting this flag will skip this action  false    force  Renew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles  false    app_identifier  The bundle identifier of your app  *    api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    provisioning_name  The name of the profile that is used on the Apple Developer Portal     ignore_profiles_with_different_name  Use in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded  false    output_path  Directory in which the profile should be stored  .    cert_id  The ID of the code signing certificate to use (e.g. 78ADL6LVAA)     cert_owner_name  The certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")     filename  Filename to use for the generated provisioning profile (must include .mobileprovision)     skip_fetch_profiles  Skips the verification of existing profiles which is useful if you have thousands of profiles  false    skip_certificate_verification  Skips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine  false    platform  Set the provisioning profile's platform (i.e. ios, tvos, macos, catalyst)  ios    readonly  Only fetch existing profile, don't generate new ones  false    template_name  The name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")     fail_on_name_taken  Should the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_provisioning_profile/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_provisioning_profile  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SIGH_PROFILE_PATH  A path in which certificates, key and profile are exported    SharedValues::SIGH_PROFILE_PATHS  Paths in which certificates, key and profile are exported    SharedValues::SIGH_UUID  UUID (Universally Unique IDentifier) of a provisioning profile    SharedValues::SIGH_NAME  The name of the profile    SharedValues::SIGH_PROFILE_TYPE  The profile type, can be appstore, adhoc, development, enterprise     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_provisioning_profile/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_provisioning_profile",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_provisioning_profile/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_provisioning_profile  To pass parameters, make use of the  :  symbol, for example  fastlane run get_provisioning_profile parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_provisioning_profile/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_push_certificate/",
            "text": "get_push_certificate\n\n\nEnsure a valid push profile is active, creating a new one if needed (via \npem\n)\n\n\n\n  \n\n\n\n\n\nAutomatically generate and renew your push notification profiles\n\n\nTired of manually creating and maintaining your push notification profiles for your iOS apps? Tired of generating a \npem\n file for your server?\n\n\npem\n does all that for you, just by simply running \npem\n.\n\n\npem\n creates new .pem, .cer, and .p12 files to be uploaded to your push server if a valid push notification profile is needed. \npem\n does not cover uploading the file to your server.\n\n\nTo automate iOS Provisioning profiles you can use \nmatch\n.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nHow does it work?\n \u2022\n    \nTips\n \u2022\n    \nNeed help?\n\n\n\n\n\n\n\npem\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\nWell, it's actually just one: Generate the \npem\n file for your server.\n\n\nCheck out this gif:\n\n\n\n\nUsage\n\n\nfastlane pem\n\n\n\n\nYes, that's the whole command!\n\n\nThis does the following:\n\n\n\n\nCreate a new signing request\n\n\nCreate a new push certification\n\n\nDownloads the certificate\n\n\nGenerates a new \n.pem\n file in the current working directory, which you can upload to your server\n\n\n\n\nNote that \npem\n will never revoke your existing certificates. \npem\n can't download any of your existing push certificates, as the private key is only available on the machine it was created on. \n\n\nIf you already have a push certificate enabled, which is active for at least 30 more days, \npem\n will not create a new certificate. If you still want to create one, use the \nforce\n:\n\n\nfastlane pem --force\n\n\n\n\nYou can pass parameters like this:\n\n\nfastlane pem -a com.krausefx.app -u username\n\n\n\n\nIf you want to generate a development certificate instead:\n\n\nfastlane pem --development\n\n\n\n\nIf you want to generate a Website Push certificate:\n\n\nfastlane pem --website_push\n\n\n\n\nSet a password for your \np12\n file:\n\n\nfastlane pem -p \"MyPass\"\n\n\n\n\nYou can specify a name for the output file:\n\n\nfastlane pem -o my.pem\n\n\n\n\nTo get a list of available options run:\n\n\nfastlane action pem\n\n\n\n\nNote about empty \np12\n passwords and Keychain Access.app\n\n\npem\n will produce a valid \np12\n without specifying a password, or using the empty-string as the password.\nWhile the file is valid, the Mac's Keychain Access will not allow you to open the file without specifying a passphrase.\n\n\nInstead, you may verify the file is valid using OpenSSL:\n\n\nopenssl pkcs12 -info -in my.p12\n\n\n\n\nIf you need the \np12\n in your keychain, perhaps to test push with an app like \nKnuff\n or \nPusher\n, you can use \nopenssl\n to export the \np12\n to \npem\n and back to \np12\n:\n\n\n% openssl pkcs12 -in my.p12 -out my.pem\nEnter Import Password:\n  <hit enter: the p12 has no password>\nMAC verified OK\nEnter PEM pass phrase:\n  <enter a temporary password to encrypt the pem file>\n\n% openssl pkcs12 -export -in my.pem -out my-with-passphrase.p12\nEnter pass phrase for temp.pem:\n  <enter the temporary password to decrypt the pem file>\n\nEnter Export Password:\n  <enter a password for encrypting the new p12 file>\n\n\n\n\nEnvironment Variables\n\n\nRun \nfastlane action pem\n to get a list of available environment variables.\n\n\nHow does it work?\n\n\npem\n uses \nspaceship\n to communicate with the Apple Developer Portal to request a new push certificate for you.\n\n\nHow is my password stored?\n\n\npem\n uses the \npassword manager\n from \nfastlane\n. Take a look the \nCredentialsManager README\n for more information.\n\n\n\n\n\n\n\n\n\n\n\nget_push_certificate\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nget_push_certificate\n\n\n\n\npem # alias for \"get_push_certificate\"\n\n\n\n\nget_push_certificate(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \"net.sunapps.9\", # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndevelopment\n\n\nRenew the development push certificate instead of the production one\n\n\nfalse\n\n\n\n\n\n\nwebsite_push\n\n\nCreate a Website Push certificate\n\n\nfalse\n\n\n\n\n\n\ngenerate_p12\n\n\nGenerate a p12 file additionally to a PEM file\n\n\ntrue\n\n\n\n\n\n\nactive_days_limit\n\n\nIf the current certificate is active for less than this number of days, generate a new one\n\n\n30\n\n\n\n\n\n\nforce\n\n\nCreate a new push certificate, even if the current one is active for 30 (or PEM_ACTIVE_DAYS_LIMIT) more days\n\n\nfalse\n\n\n\n\n\n\nsave_private_key\n\n\nSet to save the private RSA key\n\n\ntrue\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\np12_password\n\n\nThe password that is used for your p12 file\n\n\n''\n\n\n\n\n\n\npem_name\n\n\nThe file name of the generated .pem file\n\n\n\n\n\n\n\n\noutput_path\n\n\nThe path to a directory in which all certificates and private keys should be stored\n\n\n.\n\n\n\n\n\n\nnew_profile\n\n\nBlock that is called if there is a new profile\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_push_certificate\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_push_certificate\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_push_certificate parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_push_certificate"
        },
        {
            "location": "/actions/get_push_certificate/#get_push_certificate",
            "text": "Ensure a valid push profile is active, creating a new one if needed (via  pem )",
            "title": "get_push_certificate"
        },
        {
            "location": "/actions/get_push_certificate/#automatically-generate-and-renew-your-push-notification-profiles",
            "text": "Tired of manually creating and maintaining your push notification profiles for your iOS apps? Tired of generating a  pem  file for your server?  pem  does all that for you, just by simply running  pem .  pem  creates new .pem, .cer, and .p12 files to be uploaded to your push server if a valid push notification profile is needed.  pem  does not cover uploading the file to your server.  To automate iOS Provisioning profiles you can use  match .   \n     Features  \u2022\n     Usage  \u2022\n     How does it work?  \u2022\n     Tips  \u2022\n     Need help?",
            "title": "Automatically generate and renew your push notification profiles"
        },
        {
            "location": "/actions/get_push_certificate/#features",
            "text": "Well, it's actually just one: Generate the  pem  file for your server.  Check out this gif:",
            "title": "Features"
        },
        {
            "location": "/actions/get_push_certificate/#usage",
            "text": "fastlane pem  Yes, that's the whole command!  This does the following:   Create a new signing request  Create a new push certification  Downloads the certificate  Generates a new  .pem  file in the current working directory, which you can upload to your server   Note that  pem  will never revoke your existing certificates.  pem  can't download any of your existing push certificates, as the private key is only available on the machine it was created on.   If you already have a push certificate enabled, which is active for at least 30 more days,  pem  will not create a new certificate. If you still want to create one, use the  force :  fastlane pem --force  You can pass parameters like this:  fastlane pem -a com.krausefx.app -u username  If you want to generate a development certificate instead:  fastlane pem --development  If you want to generate a Website Push certificate:  fastlane pem --website_push  Set a password for your  p12  file:  fastlane pem -p \"MyPass\"  You can specify a name for the output file:  fastlane pem -o my.pem  To get a list of available options run:  fastlane action pem",
            "title": "Usage"
        },
        {
            "location": "/actions/get_push_certificate/#note-about-empty-p12-passwords-and-keychain-accessapp",
            "text": "pem  will produce a valid  p12  without specifying a password, or using the empty-string as the password.\nWhile the file is valid, the Mac's Keychain Access will not allow you to open the file without specifying a passphrase.  Instead, you may verify the file is valid using OpenSSL:  openssl pkcs12 -info -in my.p12  If you need the  p12  in your keychain, perhaps to test push with an app like  Knuff  or  Pusher , you can use  openssl  to export the  p12  to  pem  and back to  p12 :  % openssl pkcs12 -in my.p12 -out my.pem\nEnter Import Password:\n  <hit enter: the p12 has no password>\nMAC verified OK\nEnter PEM pass phrase:\n  <enter a temporary password to encrypt the pem file>\n\n% openssl pkcs12 -export -in my.pem -out my-with-passphrase.p12\nEnter pass phrase for temp.pem:\n  <enter the temporary password to decrypt the pem file>\n\nEnter Export Password:\n  <enter a password for encrypting the new p12 file>",
            "title": "Note about empty p12 passwords and Keychain Access.app"
        },
        {
            "location": "/actions/get_push_certificate/#environment-variables",
            "text": "Run  fastlane action pem  to get a list of available environment variables.",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/get_push_certificate/#how-does-it-work",
            "text": "pem  uses  spaceship  to communicate with the Apple Developer Portal to request a new push certificate for you.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/get_push_certificate/#how-is-my-password-stored",
            "text": "pem  uses the  password manager  from  fastlane . Take a look the  CredentialsManager README  for more information.      get_push_certificate       Supported platforms  ios    Author  @KrauseFx",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/get_push_certificate/#3-examples",
            "text": "get_push_certificate  pem # alias for \"get_push_certificate\"  get_push_certificate(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \"net.sunapps.9\", # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/get_push_certificate/#parameters",
            "text": "Key  Description  Default      development  Renew the development push certificate instead of the production one  false    website_push  Create a Website Push certificate  false    generate_p12  Generate a p12 file additionally to a PEM file  true    active_days_limit  If the current certificate is active for less than this number of days, generate a new one  30    force  Create a new push certificate, even if the current one is active for 30 (or PEM_ACTIVE_DAYS_LIMIT) more days  false    save_private_key  Set to save the private RSA key  true    app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    p12_password  The password that is used for your p12 file  ''    pem_name  The file name of the generated .pem file     output_path  The path to a directory in which all certificates and private keys should be stored  .    new_profile  Block that is called if there is a new profile      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_push_certificate/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_push_certificate",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_push_certificate/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_push_certificate  To pass parameters, make use of the  :  symbol, for example  fastlane run get_push_certificate parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_push_certificate/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/get_version_number/",
            "text": "get_version_number\n\n\nGet the version number of your project\n\n\n\n\nThis action will return the current version number set on your project.\n\n\n\n\n\n\n\n\n\n\nget_version_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul, @joshdholtz\n\n\n\n\n\n\n\n\n2 Examples\n\n\nversion = get_version_number(xcodeproj: \"Project.xcodeproj\")\n\n\n\n\nversion = get_version_number(\n  xcodeproj: \"Project.xcodeproj\",\n  target: \"App\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to the main Xcode project to read version number from, optional. By default will use the first Xcode project found within the project root directory\n\n\n\n\n\n\n\n\ntarget\n\n\nTarget name, optional. Will be needed if you have more than one non-test target to avoid being prompted to select one\n\n\n\n\n\n\n\n\nconfiguration\n\n\nConfiguration name, optional. Will be needed if you have altered the configurations from the default or your version number depends on the configuration selected\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nget_version_number\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::VERSION_NUMBER\n\n\nThe version number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action get_version_number\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run get_version_number\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run get_version_number parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "get_version_number"
        },
        {
            "location": "/actions/get_version_number/#get_version_number",
            "text": "Get the version number of your project   This action will return the current version number set on your project.      get_version_number       Supported platforms  ios, mac    Author  @Liquidsoul, @joshdholtz",
            "title": "get_version_number"
        },
        {
            "location": "/actions/get_version_number/#2-examples",
            "text": "version = get_version_number(xcodeproj: \"Project.xcodeproj\")  version = get_version_number(\n  xcodeproj: \"Project.xcodeproj\",\n  target: \"App\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/get_version_number/#parameters",
            "text": "Key  Description  Default      xcodeproj  Path to the main Xcode project to read version number from, optional. By default will use the first Xcode project found within the project root directory     target  Target name, optional. Will be needed if you have more than one non-test target to avoid being prompted to select one     configuration  Configuration name, optional. Will be needed if you have altered the configurations from the default or your version number depends on the configuration selected      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/get_version_number/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  get_version_number  action generates the following Lane Variables:     SharedValue  Description      SharedValues::VERSION_NUMBER  The version number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/get_version_number/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action get_version_number",
            "title": "Documentation"
        },
        {
            "location": "/actions/get_version_number/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run get_version_number  To pass parameters, make use of the  :  symbol, for example  fastlane run get_version_number parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/get_version_number/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/git_add/",
            "text": "git_add\n\n\nDirectly add the given file or all files\n\n\n\n\n\n\n\n\ngit_add\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@4brunu, @antondomashnev\n\n\n\n\n\n\n\n\n7 Examples\n\n\ngit_add\n\n\n\n\ngit_add(path: \"./version.txt\")\n\n\n\n\ngit_add(path: [\"./version.txt\", \"./changelog.txt\"])\n\n\n\n\ngit_add(path: \"./Frameworks/*\", shell_escape: false)\n\n\n\n\ngit_add(path: [\"*.h\", \"*.m\"], shell_escape: false)\n\n\n\n\ngit_add(path: \"./Frameworks/*\", shell_escape: false)\n\n\n\n\ngit_add(path: \"*.txt\", shell_escape: false)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe file(s) and path(s) you want to add\n\n\n\n\n\n\n\n\nshell_escape\n\n\nShell escapes paths (set to false if using wildcards or manually escaping spaces in :path)\n\n\ntrue\n\n\n\n\n\n\npathspec\n\n\nDEPRECATED!\n Use \n--path\n instead - The pathspec you want to add files from\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action git_add\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run git_add\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run git_add parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "git_add"
        },
        {
            "location": "/actions/git_add/#git_add",
            "text": "Directly add the given file or all files     git_add       Supported platforms  ios, android, mac    Author  @4brunu, @antondomashnev",
            "title": "git_add"
        },
        {
            "location": "/actions/git_add/#7-examples",
            "text": "git_add  git_add(path: \"./version.txt\")  git_add(path: [\"./version.txt\", \"./changelog.txt\"])  git_add(path: \"./Frameworks/*\", shell_escape: false)  git_add(path: [\"*.h\", \"*.m\"], shell_escape: false)  git_add(path: \"./Frameworks/*\", shell_escape: false)  git_add(path: \"*.txt\", shell_escape: false)",
            "title": "7 Examples"
        },
        {
            "location": "/actions/git_add/#parameters",
            "text": "Key  Description  Default      path  The file(s) and path(s) you want to add     shell_escape  Shell escapes paths (set to false if using wildcards or manually escaping spaces in :path)  true    pathspec  DEPRECATED!  Use  --path  instead - The pathspec you want to add files from      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/git_add/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action git_add",
            "title": "Documentation"
        },
        {
            "location": "/actions/git_add/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run git_add  To pass parameters, make use of the  :  symbol, for example  fastlane run git_add parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/git_add/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/git_branch/",
            "text": "git_branch\n\n\nReturns the name of the current git branch, possibly as managed by CI ENV vars\n\n\n\n\nIf no branch could be found, this action will return an empty string\n\n\n\n\n\n\n\n\n\n\ngit_branch\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\ngit_branch\n\n\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ngit_branch\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GIT_BRANCH_ENV_VARS\n\n\nThe git branch environment variables\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action git_branch\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run git_branch\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run git_branch parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "git_branch"
        },
        {
            "location": "/actions/git_branch/#git_branch",
            "text": "Returns the name of the current git branch, possibly as managed by CI ENV vars   If no branch could be found, this action will return an empty string      git_branch       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "git_branch"
        },
        {
            "location": "/actions/git_branch/#1-example",
            "text": "git_branch",
            "title": "1 Example"
        },
        {
            "location": "/actions/git_branch/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  git_branch  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GIT_BRANCH_ENV_VARS  The git branch environment variables     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/git_branch/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action git_branch",
            "title": "Documentation"
        },
        {
            "location": "/actions/git_branch/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run git_branch  To pass parameters, make use of the  :  symbol, for example  fastlane run git_branch parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/git_branch/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/git_commit/",
            "text": "git_commit\n\n\nDirectly commit the given file with the given message\n\n\n\n\n\n\n\n\ngit_commit\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n4 Examples\n\n\ngit_commit(path: \"./version.txt\", message: \"Version Bump\")\n\n\n\n\ngit_commit(path: [\"./version.txt\", \"./changelog.txt\"], message: \"Version Bump\")\n\n\n\n\ngit_commit(path: [\"./*.txt\", \"./*.md\"], message: \"Update documentation\")\n\n\n\n\ngit_commit(path: [\"./*.txt\", \"./*.md\"], message: \"Update documentation\", skip_git_hooks: true)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe file you want to commit\n\n\n\n\n\n\n\n\nmessage\n\n\nThe commit message that should be used\n\n\n\n\n\n\n\n\nskip_git_hooks\n\n\nSet to true to pass --no-verify to git\n\n\n\n\n\n\n\n\nallow_nothing_to_commit\n\n\nSet to true to allow commit without any git changes in the files you want to commit\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action git_commit\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run git_commit\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run git_commit parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "git_commit"
        },
        {
            "location": "/actions/git_commit/#git_commit",
            "text": "Directly commit the given file with the given message     git_commit       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "git_commit"
        },
        {
            "location": "/actions/git_commit/#4-examples",
            "text": "git_commit(path: \"./version.txt\", message: \"Version Bump\")  git_commit(path: [\"./version.txt\", \"./changelog.txt\"], message: \"Version Bump\")  git_commit(path: [\"./*.txt\", \"./*.md\"], message: \"Update documentation\")  git_commit(path: [\"./*.txt\", \"./*.md\"], message: \"Update documentation\", skip_git_hooks: true)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/git_commit/#parameters",
            "text": "Key  Description  Default      path  The file you want to commit     message  The commit message that should be used     skip_git_hooks  Set to true to pass --no-verify to git     allow_nothing_to_commit  Set to true to allow commit without any git changes in the files you want to commit      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/git_commit/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action git_commit",
            "title": "Documentation"
        },
        {
            "location": "/actions/git_commit/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run git_commit  To pass parameters, make use of the  :  symbol, for example  fastlane run git_commit parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/git_commit/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/git_pull/",
            "text": "git_pull\n\n\nExecutes a simple git pull command\n\n\n\n\n\n\n\n\ngit_pull\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @JaviSoto\n\n\n\n\n\n\n\n\n3 Examples\n\n\ngit_pull\n\n\n\n\ngit_pull(only_tags: true) # only the tags, no commits\n\n\n\n\ngit_pull(rebase: true) # use --rebase with pull\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nonly_tags\n\n\nSimply pull the tags, and not bring new commits to the current branch from the remote\n\n\nfalse\n\n\n\n\n\n\nrebase\n\n\nRebase on top of the remote branch instead of merge\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action git_pull\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run git_pull\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run git_pull parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "git_pull"
        },
        {
            "location": "/actions/git_pull/#git_pull",
            "text": "Executes a simple git pull command     git_pull       Supported platforms  ios, android, mac    Author  @KrauseFx, @JaviSoto",
            "title": "git_pull"
        },
        {
            "location": "/actions/git_pull/#3-examples",
            "text": "git_pull  git_pull(only_tags: true) # only the tags, no commits  git_pull(rebase: true) # use --rebase with pull",
            "title": "3 Examples"
        },
        {
            "location": "/actions/git_pull/#parameters",
            "text": "Key  Description  Default      only_tags  Simply pull the tags, and not bring new commits to the current branch from the remote  false    rebase  Rebase on top of the remote branch instead of merge  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/git_pull/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action git_pull",
            "title": "Documentation"
        },
        {
            "location": "/actions/git_pull/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run git_pull  To pass parameters, make use of the  :  symbol, for example  fastlane run git_pull parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/git_pull/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/git_submodule_update/",
            "text": "git_submodule_update\n\n\nExecutes a git submodule command\n\n\n\n\n\n\n\n\ngit_submodule_update\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@braunico\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrecursive\n\n\nShould the submodules be updated recursively\n\n\nfalse\n\n\n\n\n\n\ninit\n\n\nShould the submodules be initiated before update\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action git_submodule_update\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run git_submodule_update\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run git_submodule_update parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "git_submodule_update"
        },
        {
            "location": "/actions/git_submodule_update/#git_submodule_update",
            "text": "Executes a git submodule command     git_submodule_update       Supported platforms  ios, android, mac    Author  @braunico",
            "title": "git_submodule_update"
        },
        {
            "location": "/actions/git_submodule_update/#parameters",
            "text": "Key  Description  Default      recursive  Should the submodules be updated recursively  false    init  Should the submodules be initiated before update  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/git_submodule_update/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action git_submodule_update",
            "title": "Documentation"
        },
        {
            "location": "/actions/git_submodule_update/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run git_submodule_update  To pass parameters, make use of the  :  symbol, for example  fastlane run git_submodule_update parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/git_submodule_update/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/git_tag_exists/",
            "text": "git_tag_exists\n\n\nChecks if the git tag with the given name exists in the current repo\n\n\n\n\n\n\n\n\ngit_tag_exists\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@antondomashnev\n\n\n\n\n\n\nReturns\n\n\nBoolean value whether the tag exists or not\n\n\n\n\n\n\n\n\n1 Example\n\n\nif git_tag_exists(tag: \"1.1.0\")\n  UI.message(\"Found it \ud83d\ude80\")\nend\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nThe tag name that should be checked\n\n\n\n\n\n\n\n\nremote\n\n\nWhether to check remote. Defaults to \nfalse\n\n\nfalse\n\n\n\n\n\n\nremote_name\n\n\nThe remote to check. Defaults to \norigin\n\n\norigin\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action git_tag_exists\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run git_tag_exists\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run git_tag_exists parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "git_tag_exists"
        },
        {
            "location": "/actions/git_tag_exists/#git_tag_exists",
            "text": "Checks if the git tag with the given name exists in the current repo     git_tag_exists       Supported platforms  ios, android, mac    Author  @antondomashnev    Returns  Boolean value whether the tag exists or not",
            "title": "git_tag_exists"
        },
        {
            "location": "/actions/git_tag_exists/#1-example",
            "text": "if git_tag_exists(tag: \"1.1.0\")\n  UI.message(\"Found it \ud83d\ude80\")\nend",
            "title": "1 Example"
        },
        {
            "location": "/actions/git_tag_exists/#parameters",
            "text": "Key  Description  Default      tag  The tag name that should be checked     remote  Whether to check remote. Defaults to  false  false    remote_name  The remote to check. Defaults to  origin  origin     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/git_tag_exists/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action git_tag_exists",
            "title": "Documentation"
        },
        {
            "location": "/actions/git_tag_exists/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run git_tag_exists  To pass parameters, make use of the  :  symbol, for example  fastlane run git_tag_exists parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/git_tag_exists/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/github_api/",
            "text": "github_api\n\n\nCall a GitHub API endpoint and get the resulting JSON response\n\n\n\n\nCalls any GitHub API endpoint. You must provide your GitHub Personal token (get one from \nhttps://github.com/settings/tokens/new\n).\nOut parameters provide the status code and the full response JSON if valid, otherwise the raw response body.\nDocumentation: \nhttps://developer.github.com/v3\n.\n\n\n\n\n\n\n\n\n\n\ngithub_api\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@tommeier\n\n\n\n\n\n\nReturns\n\n\nA hash including the HTTP status code (:status), the response body (:body), and if valid JSON has been returned the parsed JSON (:json).\n\n\n\n\n\n\n\n\n2 Examples\n\n\nresult = github_api(\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  http_method: \"GET\",\n  path: \"/repos/:owner/:repo/readme\",\n  body: { ref: \"master\" }\n)\n\n\n\n\n# Alternatively call directly with optional error handling or block usage\n  GithubApiAction.run(\n    server_url: \"https://api.github.com\",\n    api_token: ENV[\"GITHUB_TOKEN\"],\n    http_method: \"GET\",\n    path: \"/repos/:owner/:repo/readme\",\n    error_handlers: {\n      404 => proc do |result|\n        UI.message(\"Something went wrong - I couldn't find it...\")\n      end,\n      '*' => proc do |result|\n        UI.message(\"Handle all error codes other than 404\")\n      end\n    }\n  ) do |result|\n    UI.message(\"JSON returned: #{result[:json]}\")\n  end\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nserver_url\n\n\nThe server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n\n\nhttps://api.github.com\n\n\n\n\n\n\napi_token\n\n\nPersonal API Token for GitHub - generate one at https://github.com/settings/tokens\n\n\n*\n\n\n\n\n\n\napi_bearer\n\n\nUse a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN environment variable\n\n\n\n\n\n\n\n\nhttp_method\n\n\nThe HTTP method. e.g. GET / POST\n\n\nGET\n\n\n\n\n\n\nbody\n\n\nThe request body in JSON or hash format\n\n\n{}\n\n\n\n\n\n\nraw_body\n\n\nThe request body taken verbatim instead of as JSON, useful for file uploads\n\n\n\n\n\n\n\n\npath\n\n\nThe endpoint path. e.g. '/repos/:owner/:repo/readme'\n\n\n\n\n\n\n\n\nurl\n\n\nThe complete full url - used instead of path. e.g. 'https://uploads.github.com/repos/fastlane...'\n\n\n\n\n\n\n\n\nerror_handlers\n\n\nOptional error handling hash based on status code, or pass '*' to handle all errors\n\n\n{}\n\n\n\n\n\n\nheaders\n\n\nOptional headers to apply\n\n\n{}\n\n\n\n\n\n\nsecure\n\n\nOptionally disable secure requests (ssl_verify_peer)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ngithub_api\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GITHUB_API_STATUS_CODE\n\n\nThe status code returned from the request\n\n\n\n\n\n\nSharedValues::GITHUB_API_RESPONSE\n\n\nThe full response body\n\n\n\n\n\n\nSharedValues::GITHUB_API_JSON\n\n\nThe parsed json returned from GitHub\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action github_api\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run github_api\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run github_api parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "github_api"
        },
        {
            "location": "/actions/github_api/#github_api",
            "text": "Call a GitHub API endpoint and get the resulting JSON response   Calls any GitHub API endpoint. You must provide your GitHub Personal token (get one from  https://github.com/settings/tokens/new ). Out parameters provide the status code and the full response JSON if valid, otherwise the raw response body. Documentation:  https://developer.github.com/v3 .      github_api       Supported platforms  ios, android, mac    Author  @tommeier    Returns  A hash including the HTTP status code (:status), the response body (:body), and if valid JSON has been returned the parsed JSON (:json).",
            "title": "github_api"
        },
        {
            "location": "/actions/github_api/#2-examples",
            "text": "result = github_api(\n  server_url: \"https://api.github.com\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  http_method: \"GET\",\n  path: \"/repos/:owner/:repo/readme\",\n  body: { ref: \"master\" }\n)  # Alternatively call directly with optional error handling or block usage\n  GithubApiAction.run(\n    server_url: \"https://api.github.com\",\n    api_token: ENV[\"GITHUB_TOKEN\"],\n    http_method: \"GET\",\n    path: \"/repos/:owner/:repo/readme\",\n    error_handlers: {\n      404 => proc do |result|\n        UI.message(\"Something went wrong - I couldn't find it...\")\n      end,\n      '*' => proc do |result|\n        UI.message(\"Handle all error codes other than 404\")\n      end\n    }\n  ) do |result|\n    UI.message(\"JSON returned: #{result[:json]}\")\n  end",
            "title": "2 Examples"
        },
        {
            "location": "/actions/github_api/#parameters",
            "text": "Key  Description  Default      server_url  The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')  https://api.github.com    api_token  Personal API Token for GitHub - generate one at https://github.com/settings/tokens  *    api_bearer  Use a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN environment variable     http_method  The HTTP method. e.g. GET / POST  GET    body  The request body in JSON or hash format  {}    raw_body  The request body taken verbatim instead of as JSON, useful for file uploads     path  The endpoint path. e.g. '/repos/:owner/:repo/readme'     url  The complete full url - used instead of path. e.g. 'https://uploads.github.com/repos/fastlane...'     error_handlers  Optional error handling hash based on status code, or pass '*' to handle all errors  {}    headers  Optional headers to apply  {}    secure  Optionally disable secure requests (ssl_verify_peer)  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/github_api/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  github_api  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GITHUB_API_STATUS_CODE  The status code returned from the request    SharedValues::GITHUB_API_RESPONSE  The full response body    SharedValues::GITHUB_API_JSON  The parsed json returned from GitHub     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/github_api/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action github_api",
            "title": "Documentation"
        },
        {
            "location": "/actions/github_api/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run github_api  To pass parameters, make use of the  :  symbol, for example  fastlane run github_api parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/github_api/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/google_play_track_release_names/",
            "text": "google_play_track_release_names\n\n\nRetrieves release names for a Google Play track\n\n\n\n\nMore information: \nhttps://docs.fastlane.tools/actions/supply/\n\n\n\n\n\n\n\n\n\n\ngoogle_play_track_release_names\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@raldred\n\n\n\n\n\n\nReturns\n\n\nArray of strings representing the release names for the given Google Play track\n\n\n\n\n\n\n\n\n1 Example\n\n\ngoogle_play_track_release_names\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the application to use\n\n\n*\n\n\n\n\n\n\ntrack\n\n\nThe track of the application to use. The default available tracks are: production, beta, alpha, internal\n\n\nproduction\n\n\n\n\n\n\nkey\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The p12 File used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nissuer\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The issuer of the p12 file (email address of the service account)\n\n\n*\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action google_play_track_release_names\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run google_play_track_release_names\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run google_play_track_release_names parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "google_play_track_release_names"
        },
        {
            "location": "/actions/google_play_track_release_names/#google_play_track_release_names",
            "text": "Retrieves release names for a Google Play track   More information:  https://docs.fastlane.tools/actions/supply/      google_play_track_release_names       Supported platforms  android    Author  @raldred    Returns  Array of strings representing the release names for the given Google Play track",
            "title": "google_play_track_release_names"
        },
        {
            "location": "/actions/google_play_track_release_names/#1-example",
            "text": "google_play_track_release_names",
            "title": "1 Example"
        },
        {
            "location": "/actions/google_play_track_release_names/#parameters",
            "text": "Key  Description  Default      package_name  The package name of the application to use  *    track  The track of the application to use. The default available tracks are: production, beta, alpha, internal  production    key  DEPRECATED!  Use  --json_key  instead - The p12 File used to authenticate with Google  *    issuer  DEPRECATED!  Use  --json_key  instead - The issuer of the p12 file (email address of the service account)  *    json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     timeout  Timeout for read, open, and send (in seconds)  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/google_play_track_release_names/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action google_play_track_release_names",
            "title": "Documentation"
        },
        {
            "location": "/actions/google_play_track_release_names/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run google_play_track_release_names  To pass parameters, make use of the  :  symbol, for example  fastlane run google_play_track_release_names parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/google_play_track_release_names/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/google_play_track_version_codes/",
            "text": "google_play_track_version_codes\n\n\nRetrieves version codes for a Google Play track\n\n\n\n\nMore information: \nhttps://docs.fastlane.tools/actions/supply/\n\n\n\n\n\n\n\n\n\n\ngoogle_play_track_version_codes\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@panthomakos\n\n\n\n\n\n\nReturns\n\n\nArray of integers representing the version codes for the given Google Play track\n\n\n\n\n\n\n\n\n1 Example\n\n\ngoogle_play_track_version_codes\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the application to use\n\n\n*\n\n\n\n\n\n\ntrack\n\n\nThe track of the application to use. The default available tracks are: production, beta, alpha, internal\n\n\nproduction\n\n\n\n\n\n\nkey\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The p12 File used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nissuer\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The issuer of the p12 file (email address of the service account)\n\n\n*\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action google_play_track_version_codes\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run google_play_track_version_codes\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run google_play_track_version_codes parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "google_play_track_version_codes"
        },
        {
            "location": "/actions/google_play_track_version_codes/#google_play_track_version_codes",
            "text": "Retrieves version codes for a Google Play track   More information:  https://docs.fastlane.tools/actions/supply/      google_play_track_version_codes       Supported platforms  android    Author  @panthomakos    Returns  Array of integers representing the version codes for the given Google Play track",
            "title": "google_play_track_version_codes"
        },
        {
            "location": "/actions/google_play_track_version_codes/#1-example",
            "text": "google_play_track_version_codes",
            "title": "1 Example"
        },
        {
            "location": "/actions/google_play_track_version_codes/#parameters",
            "text": "Key  Description  Default      package_name  The package name of the application to use  *    track  The track of the application to use. The default available tracks are: production, beta, alpha, internal  production    key  DEPRECATED!  Use  --json_key  instead - The p12 File used to authenticate with Google  *    issuer  DEPRECATED!  Use  --json_key  instead - The issuer of the p12 file (email address of the service account)  *    json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     timeout  Timeout for read, open, and send (in seconds)  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/google_play_track_version_codes/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action google_play_track_version_codes",
            "title": "Documentation"
        },
        {
            "location": "/actions/google_play_track_version_codes/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run google_play_track_version_codes  To pass parameters, make use of the  :  symbol, for example  fastlane run google_play_track_version_codes parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/google_play_track_version_codes/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/gradle/",
            "text": "gradle\n\n\nAll gradle related actions, including building and testing your Android app\n\n\n\n\nRun \n./gradlew tasks\n to get a list of all available gradle tasks for your project\n\n\n\n\n\n\n\n\n\n\ngradle\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @lmirosevic\n\n\n\n\n\n\nReturns\n\n\nThe output of running the gradle task\n\n\n\n\n\n\n\n\n1 Example\n\n\ngradle(\n  task: \"assemble\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n\n\n\n\nTo build an AAB use:\n\n\ngradle(\n  task: \"bundle\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)\n\n\n\n\nYou can pass multiple gradle tasks:\n\n\ngradle(\n  tasks: [\"assembleDebug\", \"bundleDebug\"]\n)\n\n\n\n\nYou can pass properties to gradle:\n\n\ngradle(\n  # ...\n\n  properties: {\n    \"versionCode\" => 100,\n    \"versionName\" => \"1.0.0\",\n    # ...\n  }\n)\n\n\n\n\nYou can use this to automatically \nsign and zipalign\n your app:\n\n\ngradle(\n  task: \"assemble\",\n  build_type: \"Release\",\n  print_command: false,\n  properties: {\n    \"android.injected.signing.store.file\" => \"keystore.jks\",\n    \"android.injected.signing.store.password\" => \"store_password\",\n    \"android.injected.signing.key.alias\" => \"key_alias\",\n    \"android.injected.signing.key.password\" => \"key_password\",\n  }\n)\n\n\n\n\nIf you need to pass sensitive information through the \ngradle\n action, and don't want the generated command to be printed before it is run, you can suppress that:\n\n\ngradle(\n  # ...\n  print_command: false\n)\n\n\n\n\nYou can also suppress printing the output generated by running the generated Gradle command:\n\n\ngradle(\n  # ...\n  print_command_output: false\n)\n\n\n\n\nTo pass any other CLI flags to gradle use:\n\n\ngradle(\n  # ...\n\n  flags: \"--exitcode --xml file.xml\"\n)\n\n\n\n\nDelete the build directory, generated APKs and AABs\n\n\ngradle(\n  task: \"clean\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntask\n\n\nThe gradle task you want to execute, e.g. \nassemble\n, \nbundle\n or \ntest\n. For tasks such as \nassembleMyFlavorRelease\n you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')\n\n\n\n\n\n\n\n\nflavor\n\n\nThe flavor that you want the task for, e.g. \nMyFlavor\n. If you are running the \nassemble\n task in a multi-flavor project, and you rely on Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined\n\n\n\n\n\n\n\n\nbuild_type\n\n\nThe build type that you want the task for, e.g. \nRelease\n. Useful for some tasks such as \nassemble\n\n\n\n\n\n\n\n\ntasks\n\n\nThe multiple gradle tasks that you want to execute, e.g. \n[assembleDebug, bundleDebug]\n\n\n\n\n\n\n\n\nflags\n\n\nAll parameter flags you want to pass to the gradle command, e.g. \n--exitcode --xml file.xml\n\n\n\n\n\n\n\n\nproject_dir\n\n\nThe root directory of the gradle project\n\n\n.\n\n\n\n\n\n\ngradle_path\n\n\nThe path to your \ngradlew\n. If you specify a relative path, it is assumed to be relative to the \nproject_dir\n\n\n\n\n\n\n\n\nproperties\n\n\nGradle properties to be exposed to the gradle script\n\n\n\n\n\n\n\n\nsystem_properties\n\n\nGradle system properties to be exposed to the gradle script\n\n\n\n\n\n\n\n\nserial\n\n\nAndroid serial, which device should be used for this command\n\n\n''\n\n\n\n\n\n\nprint_command\n\n\nControl whether the generated Gradle command is printed as output before running it (true/false)\n\n\ntrue\n\n\n\n\n\n\nprint_command_output\n\n\nControl whether the output produced by given Gradle command is printed while running (true/false)\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ngradle\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::GRADLE_APK_OUTPUT_PATH\n\n\nThe path to the newly generated apk file. Undefined in a multi-variant assemble scenario\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_APK_OUTPUT_PATHS\n\n\nWhen running a multi-variant \nassemble\n, the array of signed apk's that were generated\n\n\n\n\n\n\nSharedValues::GRADLE_FLAVOR\n\n\nThe flavor, e.g. \nMyFlavor\n\n\n\n\n\n\nSharedValues::GRADLE_BUILD_TYPE\n\n\nThe build type, e.g. \nRelease\n\n\n\n\n\n\nSharedValues::GRADLE_AAB_OUTPUT_PATH\n\n\nThe path to the most recent Android app bundle\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS\n\n\nThe paths to the most recent Android app bundles\n\n\n\n\n\n\nSharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH\n\n\nThe path to the most recent output.json file\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_OUTPUT_JSON_OUTPUT_PATHS\n\n\nThe path to the newly generated output.json files\n\n\n\n\n\n\nSharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH\n\n\nThe path to the most recent mapping.txt file\n\n\n\n\n\n\nSharedValues::GRADLE_ALL_MAPPING_TXT_OUTPUT_PATHS\n\n\nThe path to the newly generated mapping.txt files\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action gradle\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run gradle\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run gradle parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "gradle"
        },
        {
            "location": "/actions/gradle/#gradle",
            "text": "All gradle related actions, including building and testing your Android app   Run  ./gradlew tasks  to get a list of all available gradle tasks for your project      gradle       Supported platforms  ios, android    Author  @KrauseFx, @lmirosevic    Returns  The output of running the gradle task",
            "title": "gradle"
        },
        {
            "location": "/actions/gradle/#1-example",
            "text": "gradle(\n  task: \"assemble\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)  To build an AAB use:  gradle(\n  task: \"bundle\",\n  flavor: \"WorldDomination\",\n  build_type: \"Release\"\n)  You can pass multiple gradle tasks:  gradle(\n  tasks: [\"assembleDebug\", \"bundleDebug\"]\n)  You can pass properties to gradle:  gradle(\n  # ...\n\n  properties: {\n    \"versionCode\" => 100,\n    \"versionName\" => \"1.0.0\",\n    # ...\n  }\n)  You can use this to automatically  sign and zipalign  your app:  gradle(\n  task: \"assemble\",\n  build_type: \"Release\",\n  print_command: false,\n  properties: {\n    \"android.injected.signing.store.file\" => \"keystore.jks\",\n    \"android.injected.signing.store.password\" => \"store_password\",\n    \"android.injected.signing.key.alias\" => \"key_alias\",\n    \"android.injected.signing.key.password\" => \"key_password\",\n  }\n)  If you need to pass sensitive information through the  gradle  action, and don't want the generated command to be printed before it is run, you can suppress that:  gradle(\n  # ...\n  print_command: false\n)  You can also suppress printing the output generated by running the generated Gradle command:  gradle(\n  # ...\n  print_command_output: false\n)  To pass any other CLI flags to gradle use:  gradle(\n  # ...\n\n  flags: \"--exitcode --xml file.xml\"\n)  Delete the build directory, generated APKs and AABs  gradle(\n  task: \"clean\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/gradle/#parameters",
            "text": "Key  Description  Default      task  The gradle task you want to execute, e.g.  assemble ,  bundle  or  test . For tasks such as  assembleMyFlavorRelease  you should use gradle(task: 'assemble', flavor: 'Myflavor', build_type: 'Release')     flavor  The flavor that you want the task for, e.g.  MyFlavor . If you are running the  assemble  task in a multi-flavor project, and you rely on Actions.lane_context[SharedValues::GRADLE_APK_OUTPUT_PATH] then you must specify a flavor here or else this value will be undefined     build_type  The build type that you want the task for, e.g.  Release . Useful for some tasks such as  assemble     tasks  The multiple gradle tasks that you want to execute, e.g.  [assembleDebug, bundleDebug]     flags  All parameter flags you want to pass to the gradle command, e.g.  --exitcode --xml file.xml     project_dir  The root directory of the gradle project  .    gradle_path  The path to your  gradlew . If you specify a relative path, it is assumed to be relative to the  project_dir     properties  Gradle properties to be exposed to the gradle script     system_properties  Gradle system properties to be exposed to the gradle script     serial  Android serial, which device should be used for this command  ''    print_command  Control whether the generated Gradle command is printed as output before running it (true/false)  true    print_command_output  Control whether the output produced by given Gradle command is printed while running (true/false)  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/gradle/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  gradle  action generates the following Lane Variables:     SharedValue  Description      SharedValues::GRADLE_APK_OUTPUT_PATH  The path to the newly generated apk file. Undefined in a multi-variant assemble scenario    SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS  When running a multi-variant  assemble , the array of signed apk's that were generated    SharedValues::GRADLE_FLAVOR  The flavor, e.g.  MyFlavor    SharedValues::GRADLE_BUILD_TYPE  The build type, e.g.  Release    SharedValues::GRADLE_AAB_OUTPUT_PATH  The path to the most recent Android app bundle    SharedValues::GRADLE_ALL_AAB_OUTPUT_PATHS  The paths to the most recent Android app bundles    SharedValues::GRADLE_OUTPUT_JSON_OUTPUT_PATH  The path to the most recent output.json file    SharedValues::GRADLE_ALL_OUTPUT_JSON_OUTPUT_PATHS  The path to the newly generated output.json files    SharedValues::GRADLE_MAPPING_TXT_OUTPUT_PATH  The path to the most recent mapping.txt file    SharedValues::GRADLE_ALL_MAPPING_TXT_OUTPUT_PATHS  The path to the newly generated mapping.txt files     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/gradle/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action gradle",
            "title": "Documentation"
        },
        {
            "location": "/actions/gradle/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run gradle  To pass parameters, make use of the  :  symbol, for example  fastlane run gradle parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/gradle/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/gym/",
            "text": "gym\n\n\nAlias for the \nbuild_app\n action\n\n\n\n  \n\n\n\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ngym\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nWhat's gym?\n\n\ngym\n builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed \nipa\n or \napp\n file \ud83d\udcaa\n\n\ngym\n is a replacement for \nshenzhen\n.\n\n\nBefore \ngym\n\n\nxcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"\n\n\n\n\nWith \ngym\n\n\nfastlane gym\n\n\n\n\nWhy \ngym\n?\n\n\ngym\n uses the latest APIs to build and sign your application which results in much faster build times.\n\n\n\n\n\n\n\n\n\n\nGym Features\n\n\n\n\n\n\n\n\n\n\n\ud83d\ude80\n\n\ngym\n builds 30% faster than other build tools like \nshenzhen\n\n\n\n\n\n\n\ud83c\udfc1\n\n\nBeautiful inline build output\n\n\n\n\n\n\n\ud83d\udcd6\n\n\nHelps you resolve common build errors like code signing issues\n\n\n\n\n\n\n\ud83d\udea0\n\n\nSensible defaults: Automatically detect the project, its schemes and more\n\n\n\n\n\n\n\ud83d\udd17\n\n\nWorks perfectly with \nfastlane\n and other tools\n\n\n\n\n\n\n\ud83d\udce6\n\n\nAutomatically generates an \nipa\n and a compressed \ndSYM\n file\n\n\n\n\n\n\n\ud83d\ude85\n\n\nDon't remember any complicated build commands, just \ngym\n\n\n\n\n\n\n\ud83d\udd27\n\n\nEasy and dynamic configuration using parameters and environment variables\n\n\n\n\n\n\n\ud83d\udcbe\n\n\nStore common build settings in a \nGymfile\n\n\n\n\n\n\n\ud83d\udce4\n\n\nAll archives are stored and accessible in the Xcode Organizer\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSupports both iOS and Mac applications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\nfastlane gym\n\n\n\n\nThat's all you need to build your application. If you want more control, here are some available parameters:\n\n\nfastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean\n\n\n\n\nIf you need to use a different Xcode installation, use \nxcode-select\n or define \nDEVELOPER_DIR\n:\n\n\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym\n\n\n\n\nFor a list of all available parameters use\n\n\nfastlane action gym\n\n\n\n\nIf you run into any issues, use the \nverbose\n mode to get more information\n\n\nfastlane gym --verbose\n\n\n\n\nSet the right export method if you're not uploading to App Store or TestFlight:\n\n\nfastlane gym --export_method ad-hoc\n\n\n\n\nTo pass boolean parameters make sure to use \ngym\n like this:\n\n\nfastlane gym --include_bitcode true --include_symbols false\n\n\n\n\nTo access the raw \nxcodebuild\n output open \n~/Library/Logs/gym\n\n\nGymfile\n\n\nSince you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called \nGymfile\n.\n\n\nRun \nfastlane gym init\n to create a new configuration file. Example:\n\n\nscheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file\n\n\n\n\nExport options\n\n\nSince Xcode 7, \ngym\n is using new Xcode API which allows us to specify export options using \nplist\n file. By default \ngym\n creates this file for you and you are able to modify some parameters by using \nexport_method\n, \nexport_team_id\n, \ninclude_symbols\n or \ninclude_bitcode\n. If you want to have more options, like creating manifest file for app thinning, you can provide your own \nplist\n file:\n\n\nexport_options(\"./ExportOptions.plist\")\n\n\n\n\nor you can provide hash of values directly in the \nGymfile\n:\n\n\nexport_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})\n\n\n\n\nOptional: If \ngym\n can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:\n\n\nbuild_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)\n\n\n\n\nNote\n: If you use \nfastlane\n with \nmatch\n you don't need to provide those values manually, unless you pass a plist file into \nexport_options\n\n\nFor the list of available options run \nxcodebuild -help\n.\n\n\nSetup code signing\n\n\n\n\nMore information on how to get started with codesigning\n\n\nDocs on how to set up your Xcode project\n\n\n\n\nAutomating the whole process\n\n\ngym\n works great together with \nfastlane\n, which connects all deployment tools into one streamlined workflow.\n\n\nUsing \nfastlane\n you can define a configuration like\n\n\nlane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend\n\n\n\n\nWhen \ngym\n raises an error the \nerror_info\n property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.\n\n\nYou can then easily switch between the beta provider (e.g. \ntestflight\n, \nhockey\n, \ns3\n and more).\n\n\nHow does it work?\n\n\ngym\n uses the latest APIs to build and sign your application. The 2 main components are\n\n\n\n\nxcodebuild\n\n\nxcpretty\n\n\n\n\nWhen you run \ngym\n without the \n--silent\n mode it will print out every command it executes.\n\n\nTo build the archive \ngym\n uses the following command:\n\n\nset -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty\n\n\n\n\nAfter building the archive it is being checked by \ngym\n. If it's valid, it gets packaged up and signed into an \nipa\n file.\n\n\ngym\n automatically chooses a different packaging method depending on the version of Xcode you're using.\n\n\nXcode 7 and above\n\n\n/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'\n\n\n\n\ngym\n makes use of the new Xcode 7 API which allows us to specify the export options using a \nplist\n file. You can find more information about the available options by running \nxcodebuild --help\n.\n\n\nUsing this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.\n\n\nNote: the \nxcbuild-safe.sh script\n wraps around xcodebuild to workaround some incompatibilities.\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nipa\n files like this:\n\n\n\n\n\n\n\n\n\n\n\n\ngym\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe absolute path to the generated ipa file\n\n\n\n\n\n\n\n\n5 Examples\n\n\nbuild_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")\n\n\n\n\nbuild_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)\n\n\n\n\ngym    # alias for \"build_app\"\n\n\n\n\nbuild_ios_app    # alias for \"build_app (only iOS options)\"\n\n\n\n\nbuild_mac_app    # alias for \"build_app (only macOS options)\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath to the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath to the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n.\n\n\n\n\n\n\noutput_name\n\n\nThe name of the resulting ipa file\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nsilent\n\n\nHide all information that's not necessary while building\n\n\nfalse\n\n\n\n\n\n\ncodesigning_identity\n\n\nThe name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'\n\n\n\n\n\n\n\n\nskip_package_ipa\n\n\nShould we skip packaging the ipa?\n\n\nfalse\n\n\n\n\n\n\nskip_package_pkg\n\n\nShould we skip packaging the pkg?\n\n\nfalse\n\n\n\n\n\n\ninclude_symbols\n\n\nShould the ipa file include symbols?\n\n\n\n\n\n\n\n\ninclude_bitcode\n\n\nShould the ipa file include bitcode?\n\n\n\n\n\n\n\n\nexport_method\n\n\nMethod used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application\n\n\n\n\n\n\n\n\nexport_options\n\n\nPath to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options\n\n\n\n\n\n\n\n\nexport_xcargs\n\n\nPass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nskip_build_archive\n\n\nExport ipa from previously built xcarchive. Uses archive_path as source\n\n\n\n\n\n\n\n\nskip_archive\n\n\nAfter building, don't archive, effectively not including -archivePath param\n\n\n\n\n\n\n\n\nskip_codesigning\n\n\nBuild without codesigning\n\n\n\n\n\n\n\n\ncatalyst_platform\n\n\nPlatform to build when using a Catalyst enabled app. Valid values are: ios, macos\n\n\n\n\n\n\n\n\ninstaller_cert_name\n\n\nFull name of 3rd Party Mac Developer Installer or Developer ID Installer certificate. Example: \n3rd Party Mac Developer Installer: Your Company (ABC1234XWYZ)\n\n\n\n\n\n\n\n\nbuild_path\n\n\nThe directory in which the archive should be stored in\n\n\n\n\n\n\n\n\narchive_path\n\n\nThe path to the created archive\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where built products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\nresult_bundle_path\n\n\nPath to the result bundle directory to create. Ignored if \nresult_bundle\n if false\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)\n\n\n\n\n\n\n\n\ndestination\n\n\nUse a custom destination for building the app\n\n\n\n\n\n\n\n\nexport_team_id\n\n\nOptional: Sometimes you need to specify a team id when exporting the ipa file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build output\n\n\n\n\n\n\n\n\nxcpretty_test_format\n\n\nUse the test (RSpec style) format for build output\n\n\n\n\n\n\n\n\nxcpretty_formatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\n\n\nxcpretty_report_junit\n\n\nHave xcpretty create a JUnit-style XML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_html\n\n\nHave xcpretty create a simple HTML report at the provided path\n\n\n\n\n\n\n\n\nxcpretty_report_json\n\n\nHave xcpretty create a JSON compilation database at the provided path\n\n\n\n\n\n\n\n\nanalyze_build_time\n\n\nAnalyze the project build time and store the output in 'culprits.txt' file\n\n\n\n\n\n\n\n\nxcpretty_utf\n\n\nHave xcpretty use unicode encoding when reporting builds\n\n\n\n\n\n\n\n\nskip_profile_detection\n\n\nDo not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ngym\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::IPA_OUTPUT_PATH\n\n\nThe path to the newly generated ipa file\n\n\n\n\n\n\nSharedValues::PKG_OUTPUT_PATH\n\n\nThe path to the newly generated pkg file\n\n\n\n\n\n\nSharedValues::DSYM_OUTPUT_PATH\n\n\nThe path to the dSYM files\n\n\n\n\n\n\nSharedValues::XCODEBUILD_ARCHIVE\n\n\nThe path to the xcodebuild archive\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action gym\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run gym\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run gym parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "gym"
        },
        {
            "location": "/actions/gym/#gym",
            "text": "Alias for the  build_app  action  \n      \n     Features  \u2022\n     Usage  \u2022\n     Tips",
            "title": "gym"
        },
        {
            "location": "/actions/gym/#whats-gym",
            "text": "gym  builds and packages iOS apps for you. It takes care of all the heavy lifting and makes it super easy to generate a signed  ipa  or  app  file \ud83d\udcaa  gym  is a replacement for  shenzhen .",
            "title": "What's gym?"
        },
        {
            "location": "/actions/gym/#before-gym",
            "text": "xcodebuild clean archive -archivePath build/MyApp \\\n                         -scheme MyApp\nxcodebuild -exportArchive \\\n           -exportFormat ipa \\\n           -archivePath \"build/MyApp.xcarchive\" \\\n           -exportPath \"build/MyApp.ipa\" \\\n           -exportProvisioningProfile \"ProvisioningProfileName\"",
            "title": "Before gym"
        },
        {
            "location": "/actions/gym/#with-gym",
            "text": "fastlane gym",
            "title": "With gym"
        },
        {
            "location": "/actions/gym/#why-gym",
            "text": "gym  uses the latest APIs to build and sign your application which results in much faster build times.      Gym Features      \ud83d\ude80  gym  builds 30% faster than other build tools like  shenzhen    \ud83c\udfc1  Beautiful inline build output    \ud83d\udcd6  Helps you resolve common build errors like code signing issues    \ud83d\udea0  Sensible defaults: Automatically detect the project, its schemes and more    \ud83d\udd17  Works perfectly with  fastlane  and other tools    \ud83d\udce6  Automatically generates an  ipa  and a compressed  dSYM  file    \ud83d\ude85  Don't remember any complicated build commands, just  gym    \ud83d\udd27  Easy and dynamic configuration using parameters and environment variables    \ud83d\udcbe  Store common build settings in a  Gymfile    \ud83d\udce4  All archives are stored and accessible in the Xcode Organizer    \ud83d\udcbb  Supports both iOS and Mac applications",
            "title": "Why gym?"
        },
        {
            "location": "/actions/gym/#usage",
            "text": "fastlane gym  That's all you need to build your application. If you want more control, here are some available parameters:  fastlane gym --workspace \"Example.xcworkspace\" --scheme \"AppName\" --clean  If you need to use a different Xcode installation, use  xcode-select  or define  DEVELOPER_DIR :  DEVELOPER_DIR=\"/Applications/Xcode6.2.app\" fastlane gym  For a list of all available parameters use  fastlane action gym  If you run into any issues, use the  verbose  mode to get more information  fastlane gym --verbose  Set the right export method if you're not uploading to App Store or TestFlight:  fastlane gym --export_method ad-hoc  To pass boolean parameters make sure to use  gym  like this:  fastlane gym --include_bitcode true --include_symbols false  To access the raw  xcodebuild  output open  ~/Library/Logs/gym",
            "title": "Usage"
        },
        {
            "location": "/actions/gym/#gymfile",
            "text": "Since you might want to manually trigger a new build but don't want to specify all the parameters every time, you can store your defaults in a so called  Gymfile .  Run  fastlane gym init  to create a new configuration file. Example:  scheme(\"Example\")\n\nsdk(\"iphoneos9.0\")\n\nclean(true)\n\noutput_directory(\"./build\")    # store the ipa in this folder\noutput_name(\"MyApp\")           # the name of the ipa file",
            "title": "Gymfile"
        },
        {
            "location": "/actions/gym/#export-options",
            "text": "Since Xcode 7,  gym  is using new Xcode API which allows us to specify export options using  plist  file. By default  gym  creates this file for you and you are able to modify some parameters by using  export_method ,  export_team_id ,  include_symbols  or  include_bitcode . If you want to have more options, like creating manifest file for app thinning, you can provide your own  plist  file:  export_options(\"./ExportOptions.plist\")  or you can provide hash of values directly in the  Gymfile :  export_options({\n  method: \"ad-hoc\",\n  manifest: {\n    appURL: \"https://example.com/My App.ipa\",\n  },\n  thinning: \"<thin-for-all-variants>\"\n})  Optional: If  gym  can't automatically detect the provisioning profiles to use, you can pass a mapping of bundle identifiers to provisioning profiles:  build_app(\n  scheme: \"Release\",\n  export_options: {\n    method: \"app-store\",\n    provisioningProfiles: { \n      \"com.example.bundleid\" => \"Provisioning Profile Name\",\n      \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n    }\n  }\n)  Note : If you use  fastlane  with  match  you don't need to provide those values manually, unless you pass a plist file into  export_options  For the list of available options run  xcodebuild -help .",
            "title": "Export options"
        },
        {
            "location": "/actions/gym/#setup-code-signing",
            "text": "More information on how to get started with codesigning  Docs on how to set up your Xcode project",
            "title": "Setup code signing"
        },
        {
            "location": "/actions/gym/#automating-the-whole-process",
            "text": "gym  works great together with  fastlane , which connects all deployment tools into one streamlined workflow.  Using  fastlane  you can define a configuration like  lane :beta do\n  scan\n  gym(scheme: \"MyApp\")\n  crashlytics\nend\n\n# error block is executed when a error occurs\nerror do |lane, exception|\n  slack(\n    # message with short human friendly message\n    message: exception.to_s, \n    success: false, \n    # Output containing extended log output\n    payload: { \"Output\" => exception.error_info.to_s } \n  )\nend  When  gym  raises an error the  error_info  property will contain the process output\nin case you want to display the error in 3rd party tools such as Slack.  You can then easily switch between the beta provider (e.g.  testflight ,  hockey ,  s3  and more).",
            "title": "Automating the whole process"
        },
        {
            "location": "/actions/gym/#how-does-it-work",
            "text": "gym  uses the latest APIs to build and sign your application. The 2 main components are   xcodebuild  xcpretty   When you run  gym  without the  --silent  mode it will print out every command it executes.  To build the archive  gym  uses the following command:  set -o pipefail && \\\nxcodebuild -scheme 'Example' \\\n-project './Example.xcodeproj' \\\n-configuration 'Release' \\\n-destination 'generic/platform=iOS' \\\n-archivePath '/Users/felixkrause/Library/Developer/Xcode/Archives/2015-08-11/ExampleProductName 2015-08-11 18.15.30.xcarchive' \\\narchive | xcpretty  After building the archive it is being checked by  gym . If it's valid, it gets packaged up and signed into an  ipa  file.  gym  automatically chooses a different packaging method depending on the version of Xcode you're using.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/gym/#xcode-7-and-above",
            "text": "/usr/bin/xcrun path/to/xcbuild-safe.sh -exportArchive \\\n-exportOptionsPlist '/tmp/gym_config_1442852529.plist' \\\n-archivePath '/Users/fkrause/Library/Developer/Xcode/Archives/2015-09-21/App 2015-09-21 09.21.56.xcarchive' \\\n-exportPath '/tmp/1442852529'  gym  makes use of the new Xcode 7 API which allows us to specify the export options using a  plist  file. You can find more information about the available options by running  xcodebuild --help .  Using this method there are no workarounds for WatchKit or Swift required, as it uses the same technique Xcode uses when exporting your binary.  Note: the  xcbuild-safe.sh script  wraps around xcodebuild to workaround some incompatibilities.",
            "title": "Xcode 7 and above"
        },
        {
            "location": "/actions/gym/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  ipa  files like this:      gym       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The absolute path to the generated ipa file",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/gym/#5-examples",
            "text": "build_app(scheme: \"MyApp\", workspace: \"MyApp.xcworkspace\")  build_app(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  silent: true,\n  clean: true,\n  output_directory: \"path/to/dir\", # Destination directory. Defaults to current directory.\n  output_name: \"my-app.ipa\",       # specify the name of the .ipa file to generate (including file extension)\n  sdk: \"iOS 11.1\"        # use SDK as the name or path of the base SDK when building the project.\n)  gym    # alias for \"build_app\"  build_ios_app    # alias for \"build_app (only iOS options)\"  build_mac_app    # alias for \"build_app (only macOS options)\"",
            "title": "5 Examples"
        },
        {
            "location": "/actions/gym/#parameters",
            "text": "Key  Description  Default      workspace  Path to the workspace file     project  Path to the project file     scheme  The project's scheme. Make sure it's marked as  Shared     clean  Should the project be cleaned before building it?  false    output_directory  The directory in which the ipa file should be stored in  .    output_name  The name of the resulting ipa file     configuration  The configuration to use when building the app. Defaults to 'Release'  *    silent  Hide all information that's not necessary while building  false    codesigning_identity  The name of the code signing identity to use. It has to match the name exactly. e.g. 'iPhone Distribution: SunApps GmbH'     skip_package_ipa  Should we skip packaging the ipa?  false    skip_package_pkg  Should we skip packaging the pkg?  false    include_symbols  Should the ipa file include symbols?     include_bitcode  Should the ipa file include bitcode?     export_method  Method used to export the archive. Valid values are: app-store, validation, ad-hoc, package, enterprise, development, developer-id and mac-application     export_options  Path to an export options plist or a hash with export options. Use 'xcodebuild -help' to print the full set of available options     export_xcargs  Pass additional arguments to xcodebuild for the package phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     skip_build_archive  Export ipa from previously built xcarchive. Uses archive_path as source     skip_archive  After building, don't archive, effectively not including -archivePath param     skip_codesigning  Build without codesigning     catalyst_platform  Platform to build when using a Catalyst enabled app. Valid values are: ios, macos     installer_cert_name  Full name of 3rd Party Mac Developer Installer or Developer ID Installer certificate. Example:  3rd Party Mac Developer Installer: Your Company (ABC1234XWYZ)     build_path  The directory in which the archive should be stored in     archive_path  The path to the created archive     derived_data_path  The directory where built products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    result_bundle_path  Path to the result bundle directory to create. Ignored if  result_bundle  if false     buildlog_path  The directory where to store the build log  *    sdk  The SDK that should be used for building the application     toolchain  The toolchain that should be used for building the application (e.g. com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a)     destination  Use a custom destination for building the app     export_team_id  Optional: Sometimes you need to specify a team id when exporting the ipa file     xcargs  Pass additional arguments to xcodebuild for the build phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     disable_xcpretty  Disable xcpretty formatting of build output     xcpretty_test_format  Use the test (RSpec style) format for build output     xcpretty_formatter  A custom xcpretty formatter to use     xcpretty_report_junit  Have xcpretty create a JUnit-style XML report at the provided path     xcpretty_report_html  Have xcpretty create a simple HTML report at the provided path     xcpretty_report_json  Have xcpretty create a JSON compilation database at the provided path     analyze_build_time  Analyze the project build time and store the output in 'culprits.txt' file     xcpretty_utf  Have xcpretty use unicode encoding when reporting builds     skip_profile_detection  Do not try to build a profile mapping from the xcodeproj. Match or a manually provided mapping should be used  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/gym/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  gym  action generates the following Lane Variables:     SharedValue  Description      SharedValues::IPA_OUTPUT_PATH  The path to the newly generated ipa file    SharedValues::PKG_OUTPUT_PATH  The path to the newly generated pkg file    SharedValues::DSYM_OUTPUT_PATH  The path to the dSYM files    SharedValues::XCODEBUILD_ARCHIVE  The path to the xcodebuild archive     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/gym/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action gym",
            "title": "Documentation"
        },
        {
            "location": "/actions/gym/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run gym  To pass parameters, make use of the  :  symbol, for example  fastlane run gym parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/gym/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/hg_add_tag/",
            "text": "hg_add_tag\n\n\nThis will add a hg tag to the current branch\n\n\n\n\n\n\n\n\nhg_add_tag\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n1 Example\n\n\nhg_add_tag(tag: \"1.3\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nTag to create\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action hg_add_tag\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run hg_add_tag\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run hg_add_tag parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "hg_add_tag"
        },
        {
            "location": "/actions/hg_add_tag/#hg_add_tag",
            "text": "This will add a hg tag to the current branch     hg_add_tag       Supported platforms  ios, android, mac    Author  @sjrmanning",
            "title": "hg_add_tag"
        },
        {
            "location": "/actions/hg_add_tag/#1-example",
            "text": "hg_add_tag(tag: \"1.3\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/hg_add_tag/#parameters",
            "text": "Key  Description  Default      tag  Tag to create      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/hg_add_tag/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action hg_add_tag",
            "title": "Documentation"
        },
        {
            "location": "/actions/hg_add_tag/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run hg_add_tag  To pass parameters, make use of the  :  symbol, for example  fastlane run hg_add_tag parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/hg_add_tag/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/hg_commit_version_bump/",
            "text": "hg_commit_version_bump\n\n\nThis will commit a version bump to the hg repo\n\n\n\n\nThe mercurial equivalent of the \ncommit_version_bump\n git action. Like the git version, it is useful in conjunction with \nincrement_build_number\n.\nIt checks the repo to make sure that only the relevant files have changed, these are the files that \nincrement_build_number\n (\nagvtool\n) touches:\n\n\n\n\nAll \n.plist\n files\n\n\nThe \n.xcodeproj/project.pbxproj\n file\n\n\n\n\nThen commits those files to the repo.\nCustomize the message with the \n:message\n option, defaults to 'Version Bump'\nIf you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the \nipa\n and or \nsigh\n actions, then you can use the \nclean_build_artifacts\n action to clean those temporary files up before running this action.\n\n\n\n\n\n\n\n\n\n\nhg_commit_version_bump\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n2 Examples\n\n\nhg_commit_version_bump\n\n\n\n\nhg_commit_version_bump(\n  message: \"Version Bump\",       # create a commit with a custom message\n  xcodeproj: \"./path/MyProject.xcodeproj\", # optional, if you have multiple Xcode project files, you must specify your main project here\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe commit message when committing the version bump\n\n\nVersion Bump\n\n\n\n\n\n\nxcodeproj\n\n\nThe path to your project file (Not the workspace). If you have only one, this is optional\n\n\n\n\n\n\n\n\nforce\n\n\nForces the commit, even if other files than the ones containing the version number have been modified\n\n\nfalse\n\n\n\n\n\n\ntest_dirty_files\n\n\nA list of dirty files passed in for testing\n\n\nfile1, file2\n\n\n\n\n\n\ntest_expected_files\n\n\nA list of expected changed files passed in for testing\n\n\nfile1, file2\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action hg_commit_version_bump\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run hg_commit_version_bump\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run hg_commit_version_bump parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "hg_commit_version_bump"
        },
        {
            "location": "/actions/hg_commit_version_bump/#hg_commit_version_bump",
            "text": "This will commit a version bump to the hg repo   The mercurial equivalent of the  commit_version_bump  git action. Like the git version, it is useful in conjunction with  increment_build_number . It checks the repo to make sure that only the relevant files have changed, these are the files that  increment_build_number  ( agvtool ) touches:   All  .plist  files  The  .xcodeproj/project.pbxproj  file   Then commits those files to the repo. Customize the message with the  :message  option, defaults to 'Version Bump' If you have other uncommitted changes in your repo, this action will fail. If you started off in a clean repo, and used the  ipa  and or  sigh  actions, then you can use the  clean_build_artifacts  action to clean those temporary files up before running this action.      hg_commit_version_bump       Supported platforms  ios, android, mac    Author  @sjrmanning",
            "title": "hg_commit_version_bump"
        },
        {
            "location": "/actions/hg_commit_version_bump/#2-examples",
            "text": "hg_commit_version_bump  hg_commit_version_bump(\n  message: \"Version Bump\",       # create a commit with a custom message\n  xcodeproj: \"./path/MyProject.xcodeproj\", # optional, if you have multiple Xcode project files, you must specify your main project here\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/hg_commit_version_bump/#parameters",
            "text": "Key  Description  Default      message  The commit message when committing the version bump  Version Bump    xcodeproj  The path to your project file (Not the workspace). If you have only one, this is optional     force  Forces the commit, even if other files than the ones containing the version number have been modified  false    test_dirty_files  A list of dirty files passed in for testing  file1, file2    test_expected_files  A list of expected changed files passed in for testing  file1, file2     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/hg_commit_version_bump/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action hg_commit_version_bump",
            "title": "Documentation"
        },
        {
            "location": "/actions/hg_commit_version_bump/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run hg_commit_version_bump  To pass parameters, make use of the  :  symbol, for example  fastlane run hg_commit_version_bump parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/hg_commit_version_bump/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/hg_ensure_clean_status/",
            "text": "hg_ensure_clean_status\n\n\nRaises an exception if there are uncommitted hg changes\n\n\n\n\nAlong the same lines as the \nensure_git_status_clean\n action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the \nbefore_all\n block.\n\n\n\n\n\n\n\n\n\n\nhg_ensure_clean_status\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n1 Example\n\n\nhg_ensure_clean_status\n\n\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nhg_ensure_clean_status\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::HG_REPO_WAS_CLEAN_ON_START\n\n\nStores the fact that the hg repo was clean at some point\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action hg_ensure_clean_status\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run hg_ensure_clean_status\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run hg_ensure_clean_status parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "hg_ensure_clean_status"
        },
        {
            "location": "/actions/hg_ensure_clean_status/#hg_ensure_clean_status",
            "text": "Raises an exception if there are uncommitted hg changes   Along the same lines as the  ensure_git_status_clean  action, this is a sanity check to ensure the working mercurial repo is clean. Especially useful to put at the beginning of your Fastfile in the  before_all  block.      hg_ensure_clean_status       Supported platforms  ios, android, mac    Author  @sjrmanning",
            "title": "hg_ensure_clean_status"
        },
        {
            "location": "/actions/hg_ensure_clean_status/#1-example",
            "text": "hg_ensure_clean_status",
            "title": "1 Example"
        },
        {
            "location": "/actions/hg_ensure_clean_status/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  hg_ensure_clean_status  action generates the following Lane Variables:     SharedValue  Description      SharedValues::HG_REPO_WAS_CLEAN_ON_START  Stores the fact that the hg repo was clean at some point     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/hg_ensure_clean_status/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action hg_ensure_clean_status",
            "title": "Documentation"
        },
        {
            "location": "/actions/hg_ensure_clean_status/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run hg_ensure_clean_status  To pass parameters, make use of the  :  symbol, for example  fastlane run hg_ensure_clean_status parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/hg_ensure_clean_status/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/hg_push/",
            "text": "hg_push\n\n\nThis will push changes to the remote hg repository\n\n\n\n\nThe mercurial equivalent of \npush_to_git_remote\n. Pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.\n\n\n\n\n\n\n\n\n\n\nhg_push\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sjrmanning\n\n\n\n\n\n\n\n\n2 Examples\n\n\nhg_push\n\n\n\n\nhg_push(\n  destination: \"ssh://hg@repohost.com/owner/repo\",\n  force: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce push to remote\n\n\nfalse\n\n\n\n\n\n\ndestination\n\n\nThe destination to push to\n\n\n''\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action hg_push\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run hg_push\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run hg_push parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "hg_push"
        },
        {
            "location": "/actions/hg_push/#hg_push",
            "text": "This will push changes to the remote hg repository   The mercurial equivalent of  push_to_git_remote . Pushes your local commits to a remote mercurial repo. Useful when local changes such as adding a version bump commit or adding a tag are part of your lane\u2019s actions.      hg_push       Supported platforms  ios, android, mac    Author  @sjrmanning",
            "title": "hg_push"
        },
        {
            "location": "/actions/hg_push/#2-examples",
            "text": "hg_push  hg_push(\n  destination: \"ssh://hg@repohost.com/owner/repo\",\n  force: true\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/hg_push/#parameters",
            "text": "Key  Description  Default      force  Force push to remote  false    destination  The destination to push to  ''     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/hg_push/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action hg_push",
            "title": "Documentation"
        },
        {
            "location": "/actions/hg_push/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run hg_push  To pass parameters, make use of the  :  symbol, for example  fastlane run hg_push parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/hg_push/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/hipchat/",
            "text": "hipchat\n\n\nSend a error/success message to \nHipChat\n\n\n\n\nSend a message to \nroom\n (by default) or a direct message to \n@username\n with success (green) or failure (red) status.\n\n\n\n\n\n\n\n\n\n\nhipchat\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@jingx23\n\n\n\n\n\n\n\n\n1 Example\n\n\nhipchat(\n  message: \"App successfully released!\",\n  message_format: \"html\", # or \"text\", defaults to \"html\"\n  channel: \"Room or @username\",\n  success: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message to post on HipChat\n\n\n''\n\n\n\n\n\n\nchannel\n\n\nThe room or @username\n\n\n\n\n\n\n\n\napi_token\n\n\nHipchat API Token\n\n\n\n\n\n\n\n\ncustom_color\n\n\nSpecify a custom color, this overrides the success boolean. Can be one of 'yellow', 'red', 'green', 'purple', 'gray', or 'random'\n\n\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\ntrue\n\n\n\n\n\n\nversion\n\n\nVersion of the Hipchat API. Must be 1 or 2\n\n\n\n\n\n\n\n\nnotify_room\n\n\nShould the people in the room be notified? (true/false)\n\n\nfalse\n\n\n\n\n\n\napi_host\n\n\nThe host of the HipChat-Server API\n\n\napi.hipchat.com\n\n\n\n\n\n\nmessage_format\n\n\nFormat of the message to post. Must be either 'html' or 'text'\n\n\nhtml\n\n\n\n\n\n\ninclude_html_header\n\n\nShould html formatted messages include a preformatted header? (true/false)\n\n\ntrue\n\n\n\n\n\n\nfrom\n\n\nName the message will appear to be sent from\n\n\nfastlane\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action hipchat\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run hipchat\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run hipchat parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "hipchat"
        },
        {
            "location": "/actions/hipchat/#hipchat",
            "text": "Send a error/success message to  HipChat   Send a message to  room  (by default) or a direct message to  @username  with success (green) or failure (red) status.      hipchat       Supported platforms  ios, android, mac    Author  @jingx23",
            "title": "hipchat"
        },
        {
            "location": "/actions/hipchat/#1-example",
            "text": "hipchat(\n  message: \"App successfully released!\",\n  message_format: \"html\", # or \"text\", defaults to \"html\"\n  channel: \"Room or @username\",\n  success: true\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/hipchat/#parameters",
            "text": "Key  Description  Default      message  The message to post on HipChat  ''    channel  The room or @username     api_token  Hipchat API Token     custom_color  Specify a custom color, this overrides the success boolean. Can be one of 'yellow', 'red', 'green', 'purple', 'gray', or 'random'     success  Was this build successful? (true/false)  true    version  Version of the Hipchat API. Must be 1 or 2     notify_room  Should the people in the room be notified? (true/false)  false    api_host  The host of the HipChat-Server API  api.hipchat.com    message_format  Format of the message to post. Must be either 'html' or 'text'  html    include_html_header  Should html formatted messages include a preformatted header? (true/false)  true    from  Name the message will appear to be sent from  fastlane     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/hipchat/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action hipchat",
            "title": "Documentation"
        },
        {
            "location": "/actions/hipchat/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run hipchat  To pass parameters, make use of the  :  symbol, for example  fastlane run hipchat parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/hipchat/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/hockey/",
            "text": "hockey\n\n\nRefer to \nApp Center\n\n\n\n\nHockeyApp will be no longer supported and will be transitioned into App Center on November 16, 2019.\nPlease migrate over to \nApp Center\n\n\nHockeyApp will be no longer supported and will be transitioned into App Center on November 16, 2019.\nPlease migrate over to \nApp Center\nSymbols will also be uploaded automatically if a \napp.dSYM.zip\n file is found next to \napp.ipa\n. In case it is located in a different place you can specify the path explicitly in the \n:dsym\n parameter.\nMore information about the available options can be found in the \nHockeyApp Docs\n.\n\n\n\n\n\n\n\n\n\n\nhockey\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @modzelewski, @lacostej\n\n\n\n\n\n\n\n\n3 Examples\n\n\nhockey(\n  api_token: \"...\",\n  ipa: \"./app.ipa\",\n  notes: \"Changelog\"\n)\n\n\n\n\nhockey(\n  api_token: \"...\",\n  create_update: true,\n  public_identifier: \"....\",\n  bundle_short_version: \"1.0.2\",\n  bundle_version: \"1.0.2.145\",\n  ipa: \"./my.msi\",\n  notes: \"Changelog\"\n)\n\n\n\n\n# You can bypass the CDN if you are uploading to Hockey and receive an SSL error (which can happen on corporate firewalls)\nhockey(\n  api_token: \"...\",\n  ipa: \"./app.ipa\",\n  notes: \"Changelog\",\n  bypass_cdn: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napk\n\n\nPath to your APK file\n\n\n*\n\n\n\n\n\n\napi_token\n\n\nAPI Token for Hockey Access\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action. For Mac zip the .app. For Android provide path to .apk file. In addition you could use this to upload .msi, .zip, .pkg, etc if you use the 'create_update' mechanism\n\n\n*\n\n\n\n\n\n\ndsym\n\n\nPath to your symbols file. For iOS and Mac provide path to app.dSYM.zip. For Android provide path to mappings.txt file\n\n\n*\n\n\n\n\n\n\ncreate_update\n\n\nSet true if you want to create then update your app as opposed to just upload it. You will need the 'public_identifier', 'bundle_version' and 'bundle_short_version'\n\n\nfalse\n\n\n\n\n\n\nnotes\n\n\nBeta Notes\n\n\n*\n\n\n\n\n\n\nnotify\n\n\nNotify testers? \"1\" for yes\n\n\n1\n\n\n\n\n\n\nstatus\n\n\nDownload status: \"1\" = No user can download; \"2\" = Available for download (only possible with full-access token)\n\n\n2\n\n\n\n\n\n\ncreate_status\n\n\nDownload status for initial version creation when create_update is true: \"1\" = No user can download; \"2\" = Available for download (only possible with full-access token)\n\n\n2\n\n\n\n\n\n\nnotes_type\n\n\nNotes type for your :notes, \"0\" = Textile, \"1\" = Markdown (default)\n\n\n1\n\n\n\n\n\n\nrelease_type\n\n\nRelease type of the app: \"0\" = Beta (default), \"1\" = Store, \"2\" = Alpha, \"3\" = Enterprise\n\n\n0\n\n\n\n\n\n\nmandatory\n\n\nSet to \"1\" to make this update mandatory\n\n\n0\n\n\n\n\n\n\nteams\n\n\nComma separated list of team ID numbers to which this build will be restricted\n\n\n\n\n\n\n\n\nusers\n\n\nComma separated list of user ID numbers to which this build will be restricted\n\n\n\n\n\n\n\n\ntags\n\n\nComma separated list of tags which will receive access to the build\n\n\n\n\n\n\n\n\nbundle_short_version\n\n\nThe bundle_short_version of your application, required when using \ncreate_update\n\n\n\n\n\n\n\n\nbundle_version\n\n\nThe bundle_version of your application, required when using \ncreate_update\n\n\n\n\n\n\n\n\npublic_identifier\n\n\nApp id of the app you are targeting, usually you won't need this value. Required, if \nupload_dsym_only\n set to \ntrue\n\n\n\n\n\n\n\n\ncommit_sha\n\n\nThe Git commit SHA for this build\n\n\n\n\n\n\n\n\nrepository_url\n\n\nThe URL of your source repository\n\n\n\n\n\n\n\n\nbuild_server_url\n\n\nThe URL of the build job on your build server\n\n\n\n\n\n\n\n\nupload_dsym_only\n\n\nFlag to upload only the dSYM file to hockey app\n\n\nfalse\n\n\n\n\n\n\nowner_id\n\n\nID for the owner of the app\n\n\n\n\n\n\n\n\nstrategy\n\n\nStrategy: 'add' = to add the build as a new build even if it has the same build number (default); 'replace' = to replace a build with the same build number\n\n\nadd\n\n\n\n\n\n\ntimeout\n\n\nRequest timeout in seconds\n\n\n\n\n\n\n\n\nbypass_cdn\n\n\nFlag to bypass Hockey CDN when it uploads successfully but reports error\n\n\nfalse\n\n\n\n\n\n\ndsa_signature\n\n\nDSA signature for sparkle updates for macOS\n\n\n''\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nhockey\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::HOCKEY_DOWNLOAD_LINK\n\n\nThe newly generated download link for this build\n\n\n\n\n\n\nSharedValues::HOCKEY_BUILD_INFORMATION\n\n\ncontains all keys/values from the HockeyApp API, like :title, :bundle_identifier\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action hockey\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run hockey\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run hockey parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "hockey"
        },
        {
            "location": "/actions/hockey/#hockey",
            "text": "Refer to  App Center   HockeyApp will be no longer supported and will be transitioned into App Center on November 16, 2019. Please migrate over to  App Center  HockeyApp will be no longer supported and will be transitioned into App Center on November 16, 2019. Please migrate over to  App Center Symbols will also be uploaded automatically if a  app.dSYM.zip  file is found next to  app.ipa . In case it is located in a different place you can specify the path explicitly in the  :dsym  parameter. More information about the available options can be found in the  HockeyApp Docs .      hockey       Supported platforms  ios, android, mac    Author  @KrauseFx, @modzelewski, @lacostej",
            "title": "hockey"
        },
        {
            "location": "/actions/hockey/#3-examples",
            "text": "hockey(\n  api_token: \"...\",\n  ipa: \"./app.ipa\",\n  notes: \"Changelog\"\n)  hockey(\n  api_token: \"...\",\n  create_update: true,\n  public_identifier: \"....\",\n  bundle_short_version: \"1.0.2\",\n  bundle_version: \"1.0.2.145\",\n  ipa: \"./my.msi\",\n  notes: \"Changelog\"\n)  # You can bypass the CDN if you are uploading to Hockey and receive an SSL error (which can happen on corporate firewalls)\nhockey(\n  api_token: \"...\",\n  ipa: \"./app.ipa\",\n  notes: \"Changelog\",\n  bypass_cdn: true\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/hockey/#parameters",
            "text": "Key  Description  Default      apk  Path to your APK file  *    api_token  API Token for Hockey Access     ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action. For Mac zip the .app. For Android provide path to .apk file. In addition you could use this to upload .msi, .zip, .pkg, etc if you use the 'create_update' mechanism  *    dsym  Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip. For Android provide path to mappings.txt file  *    create_update  Set true if you want to create then update your app as opposed to just upload it. You will need the 'public_identifier', 'bundle_version' and 'bundle_short_version'  false    notes  Beta Notes  *    notify  Notify testers? \"1\" for yes  1    status  Download status: \"1\" = No user can download; \"2\" = Available for download (only possible with full-access token)  2    create_status  Download status for initial version creation when create_update is true: \"1\" = No user can download; \"2\" = Available for download (only possible with full-access token)  2    notes_type  Notes type for your :notes, \"0\" = Textile, \"1\" = Markdown (default)  1    release_type  Release type of the app: \"0\" = Beta (default), \"1\" = Store, \"2\" = Alpha, \"3\" = Enterprise  0    mandatory  Set to \"1\" to make this update mandatory  0    teams  Comma separated list of team ID numbers to which this build will be restricted     users  Comma separated list of user ID numbers to which this build will be restricted     tags  Comma separated list of tags which will receive access to the build     bundle_short_version  The bundle_short_version of your application, required when using  create_update     bundle_version  The bundle_version of your application, required when using  create_update     public_identifier  App id of the app you are targeting, usually you won't need this value. Required, if  upload_dsym_only  set to  true     commit_sha  The Git commit SHA for this build     repository_url  The URL of your source repository     build_server_url  The URL of the build job on your build server     upload_dsym_only  Flag to upload only the dSYM file to hockey app  false    owner_id  ID for the owner of the app     strategy  Strategy: 'add' = to add the build as a new build even if it has the same build number (default); 'replace' = to replace a build with the same build number  add    timeout  Request timeout in seconds     bypass_cdn  Flag to bypass Hockey CDN when it uploads successfully but reports error  false    dsa_signature  DSA signature for sparkle updates for macOS  ''     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/hockey/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  hockey  action generates the following Lane Variables:     SharedValue  Description      SharedValues::HOCKEY_DOWNLOAD_LINK  The newly generated download link for this build    SharedValues::HOCKEY_BUILD_INFORMATION  contains all keys/values from the HockeyApp API, like :title, :bundle_identifier     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/hockey/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action hockey",
            "title": "Documentation"
        },
        {
            "location": "/actions/hockey/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run hockey  To pass parameters, make use of the  :  symbol, for example  fastlane run hockey parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/hockey/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ifttt/",
            "text": "ifttt\n\n\nConnect to the \nIFTTT Maker Channel\n\n\n\n\nConnect to the IFTTT \nMaker Channel\n. An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this \nfastlane\n action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.\n\n\n\n\n\n\n\n\n\n\nifttt\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@vpolouchkine\n\n\n\n\n\n\n\n\n1 Example\n\n\nifttt(\n  api_key: \"...\",\n  event_name: \"...\",\n  value1: \"foo\",\n  value2: \"bar\",\n  value3: \"baz\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key\n\n\nAPI key\n\n\n\n\n\n\n\n\nevent_name\n\n\nThe name of the event that will be triggered\n\n\n\n\n\n\n\n\nvalue1\n\n\nExtra data sent with the event\n\n\n\n\n\n\n\n\nvalue2\n\n\nExtra data sent with the event\n\n\n\n\n\n\n\n\nvalue3\n\n\nExtra data sent with the event\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ifttt\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ifttt\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ifttt parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ifttt"
        },
        {
            "location": "/actions/ifttt/#ifttt",
            "text": "Connect to the  IFTTT Maker Channel   Connect to the IFTTT  Maker Channel . An IFTTT Recipe has two components: a Trigger and an Action. In this case, the Trigger will fire every time the Maker Channel receives a web request (made by this  fastlane  action) to notify it of an event. The Action can be anything that IFTTT supports: email, SMS, etc.      ifttt       Supported platforms  ios, android, mac    Author  @vpolouchkine",
            "title": "ifttt"
        },
        {
            "location": "/actions/ifttt/#1-example",
            "text": "ifttt(\n  api_key: \"...\",\n  event_name: \"...\",\n  value1: \"foo\",\n  value2: \"bar\",\n  value3: \"baz\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/ifttt/#parameters",
            "text": "Key  Description  Default      api_key  API key     event_name  The name of the event that will be triggered     value1  Extra data sent with the event     value2  Extra data sent with the event     value3  Extra data sent with the event      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ifttt/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ifttt",
            "title": "Documentation"
        },
        {
            "location": "/actions/ifttt/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ifttt  To pass parameters, make use of the  :  symbol, for example  fastlane run ifttt parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ifttt/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/import/",
            "text": "import\n\n\nImport another Fastfile to use its lanes\n\n\n\n\nThis is useful if you have shared lanes across multiple apps and you want to store a Fastfile in a separate folder.\nThe path must be relative to the Fastfile this is called from.\n\n\n\n\n\n\n\n\n\n\nimport\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nimport(\"./path/to/other/Fastfile\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action import\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run import\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run import parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "import"
        },
        {
            "location": "/actions/import/#import",
            "text": "Import another Fastfile to use its lanes   This is useful if you have shared lanes across multiple apps and you want to store a Fastfile in a separate folder. The path must be relative to the Fastfile this is called from.      import       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "import"
        },
        {
            "location": "/actions/import/#1-example",
            "text": "import(\"./path/to/other/Fastfile\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/import/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action import",
            "title": "Documentation"
        },
        {
            "location": "/actions/import/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run import  To pass parameters, make use of the  :  symbol, for example  fastlane run import parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/import/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/import_certificate/",
            "text": "import_certificate\n\n\nImport certificate from inputfile into a keychain\n\n\n\n\nImport certificates (and private keys) into the current default keychain. Use the \ncreate_keychain\n action to create a new keychain.\n\n\n\n\n\n\n\n\n\n\nimport_certificate\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n3 Examples\n\n\nimport_certificate(certificate_path: \"certs/AppleWWDRCA.cer\")\n\n\n\n\nimport_certificate(\n  certificate_path: \"certs/dist.p12\",\n  certificate_password: ENV[\"CERTIFICATE_PASSWORD\"] || \"default\"\n)\n\n\n\n\nimport_certificate(\n  certificate_path: \"certs/development.cer\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncertificate_path\n\n\nPath to certificate\n\n\n\n\n\n\n\n\ncertificate_password\n\n\nCertificate password\n\n\n''\n\n\n\n\n\n\nkeychain_name\n\n\nKeychain the items should be imported to\n\n\n\n\n\n\n\n\nkeychain_path\n\n\nPath to the Keychain file to which the items should be imported\n\n\n\n\n\n\n\n\nkeychain_password\n\n\nThe password for the keychain. Note that for the login keychain this is your user's password\n\n\n\n\n\n\n\n\nlog_output\n\n\nIf output should be logged to the console\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action import_certificate\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run import_certificate\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run import_certificate parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "import_certificate"
        },
        {
            "location": "/actions/import_certificate/#import_certificate",
            "text": "Import certificate from inputfile into a keychain   Import certificates (and private keys) into the current default keychain. Use the  create_keychain  action to create a new keychain.      import_certificate       Supported platforms  ios, android, mac    Author  @gin0606",
            "title": "import_certificate"
        },
        {
            "location": "/actions/import_certificate/#3-examples",
            "text": "import_certificate(certificate_path: \"certs/AppleWWDRCA.cer\")  import_certificate(\n  certificate_path: \"certs/dist.p12\",\n  certificate_password: ENV[\"CERTIFICATE_PASSWORD\"] || \"default\"\n)  import_certificate(\n  certificate_path: \"certs/development.cer\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/import_certificate/#parameters",
            "text": "Key  Description  Default      certificate_path  Path to certificate     certificate_password  Certificate password  ''    keychain_name  Keychain the items should be imported to     keychain_path  Path to the Keychain file to which the items should be imported     keychain_password  The password for the keychain. Note that for the login keychain this is your user's password     log_output  If output should be logged to the console  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/import_certificate/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action import_certificate",
            "title": "Documentation"
        },
        {
            "location": "/actions/import_certificate/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run import_certificate  To pass parameters, make use of the  :  symbol, for example  fastlane run import_certificate parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/import_certificate/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/import_from_git/",
            "text": "import_from_git\n\n\nImport another Fastfile from a remote git repository to use its lanes\n\n\n\n\nThis is useful if you have shared lanes across multiple apps and you want to store the Fastfile in a remote git repository.\n\n\n\n\n\n\n\n\n\n\nimport_from_git\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@fabiomassimo, @KrauseFx, @Liquidsoul\n\n\n\n\n\n\n\n\n2 Examples\n\n\nimport_from_git(\n  url: \"git@github.com:fastlane/fastlane.git\", # The URL of the repository to import the Fastfile from.\n  branch: \"HEAD\", # The branch to checkout on the repository\n  path: \"fastlane/Fastfile\", # The path of the Fastfile in the repository\n  version: \"~> 1.0.0\" # The version to checkout on the repository. Optimistic match operator can be used to select the latest version within constraints.\n)\n\n\n\n\nimport_from_git(\n  url: \"git@github.com:fastlane/fastlane.git\", # The URL of the repository to import the Fastfile from.\n  branch: \"HEAD\", # The branch to checkout on the repository\n  path: \"fastlane/Fastfile\", # The path of the Fastfile in the repository\n  version: [\">= 1.1.0\", \"< 2.0.0\"], # The version to checkout on the repository. Multiple conditions can be used to select the latest version within constraints.\n  cache_path: \"~/.cache/fastlane/imported\" # A directory in which the repository will be added, which means that it will not be cloned again on subsequent calls.\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nThe URL of the repository to import the Fastfile from\n\n\n\n\n\n\n\n\nbranch\n\n\nThe branch or tag to check-out on the repository\n\n\nHEAD\n\n\n\n\n\n\ndependencies\n\n\nThe array of additional Fastfiles in the repository\n\n\n[]\n\n\n\n\n\n\npath\n\n\nThe path of the Fastfile in the repository\n\n\nfastlane/Fastfile\n\n\n\n\n\n\nversion\n\n\nThe version to checkout on the repository. Optimistic match operator or multiple conditions can be used to select the latest version within constraints\n\n\n\n\n\n\n\n\ncache_path\n\n\nThe path to a directory where the repository should be cloned into. This is ignored if \nversion\n is not specified. Defaults to \nnil\n, which causes the repository to be cloned on every call, to a temporary directory\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action import_from_git\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run import_from_git\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run import_from_git parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "import_from_git"
        },
        {
            "location": "/actions/import_from_git/#import_from_git",
            "text": "Import another Fastfile from a remote git repository to use its lanes   This is useful if you have shared lanes across multiple apps and you want to store the Fastfile in a remote git repository.      import_from_git       Supported platforms  ios, android, mac    Author  @fabiomassimo, @KrauseFx, @Liquidsoul",
            "title": "import_from_git"
        },
        {
            "location": "/actions/import_from_git/#2-examples",
            "text": "import_from_git(\n  url: \"git@github.com:fastlane/fastlane.git\", # The URL of the repository to import the Fastfile from.\n  branch: \"HEAD\", # The branch to checkout on the repository\n  path: \"fastlane/Fastfile\", # The path of the Fastfile in the repository\n  version: \"~> 1.0.0\" # The version to checkout on the repository. Optimistic match operator can be used to select the latest version within constraints.\n)  import_from_git(\n  url: \"git@github.com:fastlane/fastlane.git\", # The URL of the repository to import the Fastfile from.\n  branch: \"HEAD\", # The branch to checkout on the repository\n  path: \"fastlane/Fastfile\", # The path of the Fastfile in the repository\n  version: [\">= 1.1.0\", \"< 2.0.0\"], # The version to checkout on the repository. Multiple conditions can be used to select the latest version within constraints.\n  cache_path: \"~/.cache/fastlane/imported\" # A directory in which the repository will be added, which means that it will not be cloned again on subsequent calls.\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/import_from_git/#parameters",
            "text": "Key  Description  Default      url  The URL of the repository to import the Fastfile from     branch  The branch or tag to check-out on the repository  HEAD    dependencies  The array of additional Fastfiles in the repository  []    path  The path of the Fastfile in the repository  fastlane/Fastfile    version  The version to checkout on the repository. Optimistic match operator or multiple conditions can be used to select the latest version within constraints     cache_path  The path to a directory where the repository should be cloned into. This is ignored if  version  is not specified. Defaults to  nil , which causes the repository to be cloned on every call, to a temporary directory      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/import_from_git/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action import_from_git",
            "title": "Documentation"
        },
        {
            "location": "/actions/import_from_git/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run import_from_git  To pass parameters, make use of the  :  symbol, for example  fastlane run import_from_git parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/import_from_git/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/increment_build_number/",
            "text": "increment_build_number\n\n\nIncrement the build number of your project\n\n\n\n\n\n\n\n\nincrement_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe new build number\n\n\n\n\n\n\n\n\n4 Examples\n\n\nincrement_build_number # automatically increment by one\n\n\n\n\nincrement_build_number(\n  build_number: \"75\" # set a specific number\n)\n\n\n\n\nincrement_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj: \"./path/to/MyApp.xcodeproj\" # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n\n\n\n\nbuild_number = increment_build_number\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbuild_number\n\n\nChange to a specific version. When you provide this parameter, Apple Generic Versioning does not have to be enabled\n\n\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nincrement_build_number\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::BUILD_NUMBER\n\n\nThe new build number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action increment_build_number\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run increment_build_number\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run increment_build_number parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "increment_build_number"
        },
        {
            "location": "/actions/increment_build_number/#increment_build_number",
            "text": "Increment the build number of your project     increment_build_number       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The new build number",
            "title": "increment_build_number"
        },
        {
            "location": "/actions/increment_build_number/#4-examples",
            "text": "increment_build_number # automatically increment by one  increment_build_number(\n  build_number: \"75\" # set a specific number\n)  increment_build_number(\n  build_number: 75, # specify specific build number (optional, omitting it increments by one)\n  xcodeproj: \"./path/to/MyApp.xcodeproj\" # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)  build_number = increment_build_number",
            "title": "4 Examples"
        },
        {
            "location": "/actions/increment_build_number/#parameters",
            "text": "Key  Description  Default      build_number  Change to a specific version. When you provide this parameter, Apple Generic Versioning does not have to be enabled     xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/increment_build_number/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  increment_build_number  action generates the following Lane Variables:     SharedValue  Description      SharedValues::BUILD_NUMBER  The new build number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/increment_build_number/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action increment_build_number",
            "title": "Documentation"
        },
        {
            "location": "/actions/increment_build_number/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run increment_build_number  To pass parameters, make use of the  :  symbol, for example  fastlane run increment_build_number parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/increment_build_number/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/increment_version_number/",
            "text": "increment_version_number\n\n\nIncrement the version number of your project\n\n\n\n\nThis action will increment the version number.\nYou first have to set up your Xcode project, if you haven't done it already: \nhttps://developer.apple.com/library/ios/qa/qa1827/_index.html\n.\n\n\n\n\n\n\n\n\n\n\nincrement_version_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@serluca\n\n\n\n\n\n\nReturns\n\n\nThe new version number\n\n\n\n\n\n\n\n\n7 Examples\n\n\nincrement_version_number # Automatically increment version number\n\n\n\n\nincrement_version_number(\n  bump_type: \"patch\" # Automatically increment patch version number\n)\n\n\n\n\nincrement_version_number(\n  bump_type: \"minor\" # Automatically increment minor version number\n)\n\n\n\n\nincrement_version_number(\n  bump_type: \"major\" # Automatically increment major version number\n)\n\n\n\n\nincrement_version_number(\n  version_number: \"2.1.1\" # Set a specific version number\n)\n\n\n\n\nincrement_version_number(\n  version_number: \"2.1.1\",      # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj: \"./path/to/MyApp.xcodeproj\"  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)\n\n\n\n\nversion = increment_version_number\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbump_type\n\n\nThe type of this version bump. Available: patch, minor, major\n\n\nbump\n\n\n\n\n\n\nversion_number\n\n\nChange to a specific version. This will replace the bump type value\n\n\n\n\n\n\n\n\nxcodeproj\n\n\noptional, you must specify the path to your main Xcode project if it is not in the project root directory\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nincrement_version_number\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::VERSION_NUMBER\n\n\nThe new version number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action increment_version_number\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run increment_version_number\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run increment_version_number parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "increment_version_number"
        },
        {
            "location": "/actions/increment_version_number/#increment_version_number",
            "text": "Increment the version number of your project   This action will increment the version number. You first have to set up your Xcode project, if you haven't done it already:  https://developer.apple.com/library/ios/qa/qa1827/_index.html .      increment_version_number       Supported platforms  ios, mac    Author  @serluca    Returns  The new version number",
            "title": "increment_version_number"
        },
        {
            "location": "/actions/increment_version_number/#7-examples",
            "text": "increment_version_number # Automatically increment version number  increment_version_number(\n  bump_type: \"patch\" # Automatically increment patch version number\n)  increment_version_number(\n  bump_type: \"minor\" # Automatically increment minor version number\n)  increment_version_number(\n  bump_type: \"major\" # Automatically increment major version number\n)  increment_version_number(\n  version_number: \"2.1.1\" # Set a specific version number\n)  increment_version_number(\n  version_number: \"2.1.1\",      # specify specific version number (optional, omitting it increments patch version number)\n  xcodeproj: \"./path/to/MyApp.xcodeproj\"  # (optional, you must specify the path to your main Xcode project if it is not in the project root directory)\n)  version = increment_version_number",
            "title": "7 Examples"
        },
        {
            "location": "/actions/increment_version_number/#parameters",
            "text": "Key  Description  Default      bump_type  The type of this version bump. Available: patch, minor, major  bump    version_number  Change to a specific version. This will replace the bump type value     xcodeproj  optional, you must specify the path to your main Xcode project if it is not in the project root directory      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/increment_version_number/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  increment_version_number  action generates the following Lane Variables:     SharedValue  Description      SharedValues::VERSION_NUMBER  The new version number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/increment_version_number/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action increment_version_number",
            "title": "Documentation"
        },
        {
            "location": "/actions/increment_version_number/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run increment_version_number  To pass parameters, make use of the  :  symbol, for example  fastlane run increment_version_number parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/increment_version_number/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/install_on_device/",
            "text": "install_on_device\n\n\nInstalls an .ipa file on a connected iOS-device via usb or wifi\n\n\n\n\nInstalls the ipa on the device. If no id is given, the first found iOS device will be used. Works via USB or Wi-Fi. This requires \nios-deploy\n to be installed. Please have a look at \nios-deploy\n. To quickly install it, use \nnpm -g i ios-deploy\n\n\n\n\n\n\n\n\n\n\ninstall_on_device\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n1 Example\n\n\ninstall_on_device(\n  device_id: \"a3be6c9ff7e5c3c6028597513243b0f933b876d4\",\n  ipa: \"./app.ipa\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nextra\n\n\nExtra Commandline arguments passed to ios-deploy\n\n\n\n\n\n\n\n\ndevice_id\n\n\nid of the device / if not set defaults to first found device\n\n\n\n\n\n\n\n\nskip_wifi\n\n\nDo not search for devices via WiFi\n\n\n\n\n\n\n\n\nipa\n\n\nThe IPA file to put on the device\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action install_on_device\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run install_on_device\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run install_on_device parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "install_on_device"
        },
        {
            "location": "/actions/install_on_device/#install_on_device",
            "text": "Installs an .ipa file on a connected iOS-device via usb or wifi   Installs the ipa on the device. If no id is given, the first found iOS device will be used. Works via USB or Wi-Fi. This requires  ios-deploy  to be installed. Please have a look at  ios-deploy . To quickly install it, use  npm -g i ios-deploy      install_on_device       Supported platforms  ios    Author  @hjanuschka",
            "title": "install_on_device"
        },
        {
            "location": "/actions/install_on_device/#1-example",
            "text": "install_on_device(\n  device_id: \"a3be6c9ff7e5c3c6028597513243b0f933b876d4\",\n  ipa: \"./app.ipa\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/install_on_device/#parameters",
            "text": "Key  Description  Default      extra  Extra Commandline arguments passed to ios-deploy     device_id  id of the device / if not set defaults to first found device     skip_wifi  Do not search for devices via WiFi     ipa  The IPA file to put on the device  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/install_on_device/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action install_on_device",
            "title": "Documentation"
        },
        {
            "location": "/actions/install_on_device/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run install_on_device  To pass parameters, make use of the  :  symbol, for example  fastlane run install_on_device parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/install_on_device/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/install_provisioning_profile/",
            "text": "install_provisioning_profile\n\n\nInstall provisioning profile from path\n\n\n\n\nInstall provisioning profile from path for current user\n\n\n\n\n\n\n\n\n\n\ninstall_provisioning_profile\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@SofteqDG\n\n\n\n\n\n\nReturns\n\n\nThe absolute path to the installed provisioning profile\n\n\n\n\n\n\n\n\n1 Example\n\n\ninstall_provisioning_profile(path: \"profiles/profile.mobileprovision\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to provisioning profile\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action install_provisioning_profile\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run install_provisioning_profile\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run install_provisioning_profile parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "install_provisioning_profile"
        },
        {
            "location": "/actions/install_provisioning_profile/#install_provisioning_profile",
            "text": "Install provisioning profile from path   Install provisioning profile from path for current user      install_provisioning_profile       Supported platforms  ios, mac    Author  @SofteqDG    Returns  The absolute path to the installed provisioning profile",
            "title": "install_provisioning_profile"
        },
        {
            "location": "/actions/install_provisioning_profile/#1-example",
            "text": "install_provisioning_profile(path: \"profiles/profile.mobileprovision\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/install_provisioning_profile/#parameters",
            "text": "Key  Description  Default      path  Path to provisioning profile      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/install_provisioning_profile/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action install_provisioning_profile",
            "title": "Documentation"
        },
        {
            "location": "/actions/install_provisioning_profile/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run install_provisioning_profile  To pass parameters, make use of the  :  symbol, for example  fastlane run install_provisioning_profile parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/install_provisioning_profile/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/install_xcode_plugin/",
            "text": "install_xcode_plugin\n\n\nInstall an Xcode plugin for the current user\n\n\n\n\n\n\n\n\ninstall_xcode_plugin\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@NeoNachoSoto, @tommeier\n\n\n\n\n\n\n\n\n2 Examples\n\n\ninstall_xcode_plugin(url: \"https://example.com/clubmate/plugin.zip\")\n\n\n\n\ninstall_xcode_plugin(github: \"https://github.com/contentful/ContentfulXcodePlugin\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nURL for Xcode plugin ZIP file\n\n\n\n\n\n\n\n\ngithub\n\n\nGitHub repository URL for Xcode plugin\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action install_xcode_plugin\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run install_xcode_plugin\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run install_xcode_plugin parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "install_xcode_plugin"
        },
        {
            "location": "/actions/install_xcode_plugin/#install_xcode_plugin",
            "text": "Install an Xcode plugin for the current user     install_xcode_plugin       Supported platforms  ios, mac    Author  @NeoNachoSoto, @tommeier",
            "title": "install_xcode_plugin"
        },
        {
            "location": "/actions/install_xcode_plugin/#2-examples",
            "text": "install_xcode_plugin(url: \"https://example.com/clubmate/plugin.zip\")  install_xcode_plugin(github: \"https://github.com/contentful/ContentfulXcodePlugin\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/install_xcode_plugin/#parameters",
            "text": "Key  Description  Default      url  URL for Xcode plugin ZIP file     github  GitHub repository URL for Xcode plugin      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/install_xcode_plugin/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action install_xcode_plugin",
            "title": "Documentation"
        },
        {
            "location": "/actions/install_xcode_plugin/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run install_xcode_plugin  To pass parameters, make use of the  :  symbol, for example  fastlane run install_xcode_plugin parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/install_xcode_plugin/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/installr/",
            "text": "installr\n\n\nUpload a new build to \nInstallr\n\n\n\n\n\n\n\n\ninstallr\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@scottrhoyt\n\n\n\n\n\n\n\n\n1 Example\n\n\ninstallr(\n  api_token: \"...\",\n  ipa: \"test.ipa\",\n  notes: \"The next great version of the app!\",\n  notify: \"dev,qa\",\n  add: \"exec,ops\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_token\n\n\nAPI Token for Installr Access\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\nnotes\n\n\nRelease notes\n\n\n\n\n\n\n\n\nnotify\n\n\nGroups to notify (e.g. 'dev,qa')\n\n\n\n\n\n\n\n\nadd\n\n\nGroups to add (e.g. 'exec,ops')\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ninstallr\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::INSTALLR_BUILD_INFORMATION\n\n\nContains release info like :appData. See http://help.installrapp.com/api/\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action installr\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run installr\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run installr parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "installr"
        },
        {
            "location": "/actions/installr/#installr",
            "text": "Upload a new build to  Installr     installr       Supported platforms  ios    Author  @scottrhoyt",
            "title": "installr"
        },
        {
            "location": "/actions/installr/#1-example",
            "text": "installr(\n  api_token: \"...\",\n  ipa: \"test.ipa\",\n  notes: \"The next great version of the app!\",\n  notify: \"dev,qa\",\n  add: \"exec,ops\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/installr/#parameters",
            "text": "Key  Description  Default      api_token  API Token for Installr Access     ipa  Path to your IPA file. Optional if you use the  gym  or  xcodebuild  action  *    notes  Release notes     notify  Groups to notify (e.g. 'dev,qa')     add  Groups to add (e.g. 'exec,ops')      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/installr/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  installr  action generates the following Lane Variables:     SharedValue  Description      SharedValues::INSTALLR_BUILD_INFORMATION  Contains release info like :appData. See http://help.installrapp.com/api/     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/installr/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action installr",
            "title": "Documentation"
        },
        {
            "location": "/actions/installr/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run installr  To pass parameters, make use of the  :  symbol, for example  fastlane run installr parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/installr/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ipa/",
            "text": "ipa\n\n\nEasily build and sign your app using shenzhen\n\n\n\n\nYou are using legacy \nshenzhen\n to build your app, which will be removed soon!\nIt is recommended to upgrade to \ngym\n.\nTo do so, just replace \nipa(...)\n with \ngym(...)\n in your Fastfile.\nTo make code signing work, follow \nhttps://docs.fastlane.tools/codesigning/xcode-project/\n.\n\n\n\n\n\n\n\n\n\n\nipa\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n1 Example\n\n\nipa(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  # (optionals)\n  clean: true, # This means \"Do Clean\". Cleans project before building (the default if not specified).\n  destination: \"path/to/dir\",      # Destination directory. Defaults to current directory.\n  ipa: \"my-app.ipa\",     # specify the name of the .ipa file to generate (including file extension)\n  xcargs: \"MY_ADHOC=0\",  # pass additional arguments to xcodebuild when building the app.\n  embed: \"my.mobileprovision\",     # Sign .ipa file with .mobileprovision\n  identity: \"MyIdentity\",# Identity to be used along with --embed\n  sdk: \"10.0\", # use SDK as the name or path of the base SDK when building the project.\n  archive: true# this means \"Do Archive\". Archive project after building (the default if not specified).\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nWORKSPACE Workspace (.xcworkspace) file to use to build app (automatically detected in current directory)\n\n\n\n\n\n\n\n\nproject\n\n\nProject (.xcodeproj) file to use to build app (automatically detected in current directory, overridden by --workspace option, if passed)\n\n\n\n\n\n\n\n\nconfiguration\n\n\nConfiguration used to build\n\n\n\n\n\n\n\n\nscheme\n\n\nScheme used to build app\n\n\n\n\n\n\n\n\nclean\n\n\nClean project before building\n\n\n\n\n\n\n\n\narchive\n\n\nArchive project after building\n\n\n\n\n\n\n\n\ndestination\n\n\nBuild destination. Defaults to current directory\n\n\n*\n\n\n\n\n\n\nembed\n\n\nSign .ipa file with .mobileprovision\n\n\n\n\n\n\n\n\nidentity\n\n\nIdentity to be used along with --embed\n\n\n\n\n\n\n\n\nsdk\n\n\nUse SDK as the name or path of the base SDK when building the project\n\n\n\n\n\n\n\n\nipa\n\n\nSpecify the name of the .ipa file to generate (including file extension)\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build the app\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild when building the app. Be sure to quote multiple args\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nipa\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::IPA_OUTPUT_PATH\n\n\nThe path to the newly generated ipa file\n\n\n\n\n\n\nSharedValues::DSYM_OUTPUT_PATH\n\n\nThe path to the dsym file\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ipa\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ipa\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ipa parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ipa"
        },
        {
            "location": "/actions/ipa/#ipa",
            "text": "Easily build and sign your app using shenzhen   You are using legacy  shenzhen  to build your app, which will be removed soon! It is recommended to upgrade to  gym . To do so, just replace  ipa(...)  with  gym(...)  in your Fastfile. To make code signing work, follow  https://docs.fastlane.tools/codesigning/xcode-project/ .      ipa       Supported platforms  ios    Author  @joshdholtz",
            "title": "ipa"
        },
        {
            "location": "/actions/ipa/#1-example",
            "text": "ipa(\n  workspace: \"MyApp.xcworkspace\",\n  configuration: \"Debug\",\n  scheme: \"MyApp\",\n  # (optionals)\n  clean: true, # This means \"Do Clean\". Cleans project before building (the default if not specified).\n  destination: \"path/to/dir\",      # Destination directory. Defaults to current directory.\n  ipa: \"my-app.ipa\",     # specify the name of the .ipa file to generate (including file extension)\n  xcargs: \"MY_ADHOC=0\",  # pass additional arguments to xcodebuild when building the app.\n  embed: \"my.mobileprovision\",     # Sign .ipa file with .mobileprovision\n  identity: \"MyIdentity\",# Identity to be used along with --embed\n  sdk: \"10.0\", # use SDK as the name or path of the base SDK when building the project.\n  archive: true# this means \"Do Archive\". Archive project after building (the default if not specified).\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/ipa/#parameters",
            "text": "Key  Description  Default      workspace  WORKSPACE Workspace (.xcworkspace) file to use to build app (automatically detected in current directory)     project  Project (.xcodeproj) file to use to build app (automatically detected in current directory, overridden by --workspace option, if passed)     configuration  Configuration used to build     scheme  Scheme used to build app     clean  Clean project before building     archive  Archive project after building     destination  Build destination. Defaults to current directory  *    embed  Sign .ipa file with .mobileprovision     identity  Identity to be used along with --embed     sdk  Use SDK as the name or path of the base SDK when building the project     ipa  Specify the name of the .ipa file to generate (including file extension)     xcconfig  Use an extra XCCONFIG file to build the app     xcargs  Pass additional arguments to xcodebuild when building the app. Be sure to quote multiple args      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ipa/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  ipa  action generates the following Lane Variables:     SharedValue  Description      SharedValues::IPA_OUTPUT_PATH  The path to the newly generated ipa file    SharedValues::DSYM_OUTPUT_PATH  The path to the dsym file     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/ipa/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ipa",
            "title": "Documentation"
        },
        {
            "location": "/actions/ipa/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ipa  To pass parameters, make use of the  :  symbol, for example  fastlane run ipa parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ipa/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/is_ci/",
            "text": "is_ci\n\n\nIs the current run being executed on a CI system, like Jenkins or Travis\n\n\n\n\nThe return value of this method is true if fastlane is currently executed on Travis, Jenkins, Circle or a similar CI service\n\n\n\n\n\n\n\n\n\n\nis_ci\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nif is_ci\n  puts \"I'm a computer\"\nelse\n  say \"Hi Human!\"\nend\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action is_ci\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run is_ci\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run is_ci parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "is_ci"
        },
        {
            "location": "/actions/is_ci/#is_ci",
            "text": "Is the current run being executed on a CI system, like Jenkins or Travis   The return value of this method is true if fastlane is currently executed on Travis, Jenkins, Circle or a similar CI service      is_ci       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "is_ci"
        },
        {
            "location": "/actions/is_ci/#1-example",
            "text": "if is_ci\n  puts \"I'm a computer\"\nelse\n  say \"Hi Human!\"\nend",
            "title": "1 Example"
        },
        {
            "location": "/actions/is_ci/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action is_ci",
            "title": "Documentation"
        },
        {
            "location": "/actions/is_ci/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run is_ci  To pass parameters, make use of the  :  symbol, for example  fastlane run is_ci parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/is_ci/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/jazzy/",
            "text": "jazzy\n\n\nGenerate docs using Jazzy\n\n\n\n\n\n\n\n\njazzy\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\njazzy\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nconfig\n\n\nPath to jazzy config file\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action jazzy\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run jazzy\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run jazzy parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "jazzy"
        },
        {
            "location": "/actions/jazzy/#jazzy",
            "text": "Generate docs using Jazzy     jazzy       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "jazzy"
        },
        {
            "location": "/actions/jazzy/#1-example",
            "text": "jazzy",
            "title": "1 Example"
        },
        {
            "location": "/actions/jazzy/#parameters",
            "text": "Key  Description  Default      config  Path to jazzy config file      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/jazzy/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action jazzy",
            "title": "Documentation"
        },
        {
            "location": "/actions/jazzy/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run jazzy  To pass parameters, make use of the  :  symbol, for example  fastlane run jazzy parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/jazzy/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/jira/",
            "text": "jira\n\n\nLeave a comment on JIRA tickets\n\n\n\n\n\n\n\n\njira\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@iAmChrisTruman\n\n\n\n\n\n\n\n\n2 Examples\n\n\njira(\n  url: \"https://bugs.yourdomain.com\",\n  username: \"Your username\",\n  password: \"Your password\",\n  ticket_id: \"Ticket ID, i.e. IOS-123\",\n  comment_text: \"Text to post as a comment\"\n)\n\n\n\n\njira(\n  url: \"https://yourserverdomain.com\",\n  context_path: \"/jira\",\n  username: \"Your username\",\n  password: \"Your password\",\n  ticket_id: \"Ticket ID, i.e. IOS-123\",\n  comment_text: \"Text to post as a comment\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nurl\n\n\nURL for Jira instance\n\n\n\n\n\n\n\n\ncontext_path\n\n\nAppends to the url (ex: \"/jira\")\n\n\n''\n\n\n\n\n\n\nusername\n\n\nUsername for JIRA instance\n\n\n\n\n\n\n\n\npassword\n\n\nPassword for Jira\n\n\n\n\n\n\n\n\nticket_id\n\n\nTicket ID for Jira, i.e. IOS-123\n\n\n\n\n\n\n\n\ncomment_text\n\n\nText to add to the ticket as a comment\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action jira\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run jira\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run jira parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "jira"
        },
        {
            "location": "/actions/jira/#jira",
            "text": "Leave a comment on JIRA tickets     jira       Supported platforms  ios, android, mac    Author  @iAmChrisTruman",
            "title": "jira"
        },
        {
            "location": "/actions/jira/#2-examples",
            "text": "jira(\n  url: \"https://bugs.yourdomain.com\",\n  username: \"Your username\",\n  password: \"Your password\",\n  ticket_id: \"Ticket ID, i.e. IOS-123\",\n  comment_text: \"Text to post as a comment\"\n)  jira(\n  url: \"https://yourserverdomain.com\",\n  context_path: \"/jira\",\n  username: \"Your username\",\n  password: \"Your password\",\n  ticket_id: \"Ticket ID, i.e. IOS-123\",\n  comment_text: \"Text to post as a comment\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/jira/#parameters",
            "text": "Key  Description  Default      url  URL for Jira instance     context_path  Appends to the url (ex: \"/jira\")  ''    username  Username for JIRA instance     password  Password for Jira     ticket_id  Ticket ID for Jira, i.e. IOS-123     comment_text  Text to add to the ticket as a comment      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/jira/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action jira",
            "title": "Documentation"
        },
        {
            "location": "/actions/jira/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run jira  To pass parameters, make use of the  :  symbol, for example  fastlane run jira parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/jira/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/lane_context/",
            "text": "lane_context\n\n\nAccess lane context values\n\n\n\n\nAccess the fastlane lane context values.\nMore information about how the lane context works: \nhttps://docs.fastlane.tools/advanced/#lane-context\n.\n\n\n\n\n\n\n\n\n\n\nlane_context\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nlane_context[SharedValues::BUILD_NUMBER]\n\n\n\n\nlane_context[SharedValues::IPA_OUTPUT_PATH]\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action lane_context\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run lane_context\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run lane_context parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "lane_context"
        },
        {
            "location": "/actions/lane_context/#lane_context",
            "text": "Access lane context values   Access the fastlane lane context values. More information about how the lane context works:  https://docs.fastlane.tools/advanced/#lane-context .      lane_context       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "lane_context"
        },
        {
            "location": "/actions/lane_context/#2-examples",
            "text": "lane_context[SharedValues::BUILD_NUMBER]  lane_context[SharedValues::IPA_OUTPUT_PATH]",
            "title": "2 Examples"
        },
        {
            "location": "/actions/lane_context/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action lane_context",
            "title": "Documentation"
        },
        {
            "location": "/actions/lane_context/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run lane_context  To pass parameters, make use of the  :  symbol, for example  fastlane run lane_context parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/lane_context/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/last_git_commit/",
            "text": "last_git_commit\n\n\nReturn last git commit hash, abbreviated commit hash, commit message and author\n\n\n\n\n\n\n\n\nlast_git_commit\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@ngutman\n\n\n\n\n\n\nReturns\n\n\nReturns the following dict: \n\n\n\n\n\n\n\n\n1 Example\n\n\ncommit = last_git_commit\ncrashlytics(notes: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nauthor_email = commit[:author_email] # email of the author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action last_git_commit\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run last_git_commit\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run last_git_commit parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "last_git_commit"
        },
        {
            "location": "/actions/last_git_commit/#last_git_commit",
            "text": "Return last git commit hash, abbreviated commit hash, commit message and author     last_git_commit       Supported platforms  ios, android, mac    Author  @ngutman    Returns  Returns the following dict:",
            "title": "last_git_commit"
        },
        {
            "location": "/actions/last_git_commit/#1-example",
            "text": "commit = last_git_commit\ncrashlytics(notes: commit[:message]) # message of commit\nauthor = commit[:author] # author of the commit\nauthor_email = commit[:author_email] # email of the author of the commit\nhash = commit[:commit_hash] # long sha of commit\nshort_hash = commit[:abbreviated_commit_hash] # short sha of commit",
            "title": "1 Example"
        },
        {
            "location": "/actions/last_git_commit/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action last_git_commit",
            "title": "Documentation"
        },
        {
            "location": "/actions/last_git_commit/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run last_git_commit  To pass parameters, make use of the  :  symbol, for example  fastlane run last_git_commit parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/last_git_commit/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/last_git_tag/",
            "text": "last_git_tag\n\n\nGet the most recent git tag\n\n\n\n\nIf you are using this action on a \nshallow clone\n, \nthe default with some CI systems like Bamboo\n, you need to ensure that you have also pulled all the git tags appropriately. Assuming your git repo has the correct remote set you can issue \nsh('git fetch --tags')\n.\nPattern parameter allows you to filter to a subset of tags.\n\n\n\n\n\n\n\n\n\n\nlast_git_tag\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx, @wedkarz\n\n\n\n\n\n\n\n\n2 Examples\n\n\nlast_git_tag\n\n\n\n\nlast_git_tag(pattern: \"release/v1.0/\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npattern\n\n\nPattern to filter tags when looking for last one. Limit tags to ones matching given shell glob. If pattern lacks ?, *, or [, * at the end is implied\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action last_git_tag\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run last_git_tag\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run last_git_tag parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "last_git_tag"
        },
        {
            "location": "/actions/last_git_tag/#last_git_tag",
            "text": "Get the most recent git tag   If you are using this action on a  shallow clone ,  the default with some CI systems like Bamboo , you need to ensure that you have also pulled all the git tags appropriately. Assuming your git repo has the correct remote set you can issue  sh('git fetch --tags') . Pattern parameter allows you to filter to a subset of tags.      last_git_tag       Supported platforms  ios, android, mac    Author  @KrauseFx, @wedkarz",
            "title": "last_git_tag"
        },
        {
            "location": "/actions/last_git_tag/#2-examples",
            "text": "last_git_tag  last_git_tag(pattern: \"release/v1.0/\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/last_git_tag/#parameters",
            "text": "Key  Description  Default      pattern  Pattern to filter tags when looking for last one. Limit tags to ones matching given shell glob. If pattern lacks ?, *, or [, * at the end is implied      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/last_git_tag/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action last_git_tag",
            "title": "Documentation"
        },
        {
            "location": "/actions/last_git_tag/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run last_git_tag  To pass parameters, make use of the  :  symbol, for example  fastlane run last_git_tag parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/last_git_tag/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/latest_testflight_build_number/",
            "text": "latest_testflight_build_number\n\n\nFetches most recent build number from TestFlight\n\n\n\n\nProvides a way to have \nincrement_build_number\n be based on the latest build you uploaded to iTC.\nFetches the most recent build number from TestFlight based on the version number. Provides a way to have \nincrement_build_number\n be based on the latest build you uploaded to iTC.\n\n\n\n\n\n\n\n\n\n\nlatest_testflight_build_number\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@daveanderson\n\n\n\n\n\n\nReturns\n\n\nInteger representation of the latest build number uploaded to TestFlight\n\n\n\n\n\n\n\n\n2 Examples\n\n\nlatest_testflight_build_number(version: \"1.3\")\n\n\n\n\nincrement_build_number({\n  build_number: latest_testflight_build_number + 1\n})\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nlive\n\n\nQuery the live version (ready-for-sale)\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nversion\n\n\nThe version number whose latest build number we want\n\n\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\ninitial_build_number\n\n\nsets the build number to given value if no build is in current train\n\n\n1\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nlatest_testflight_build_number\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER\n\n\nThe latest build number of the latest version of the app uploaded to TestFlight\n\n\n\n\n\n\nSharedValues::LATEST_TESTFLIGHT_VERSION\n\n\nThe version of the latest build number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action latest_testflight_build_number\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run latest_testflight_build_number\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run latest_testflight_build_number parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "latest_testflight_build_number"
        },
        {
            "location": "/actions/latest_testflight_build_number/#latest_testflight_build_number",
            "text": "Fetches most recent build number from TestFlight   Provides a way to have  increment_build_number  be based on the latest build you uploaded to iTC. Fetches the most recent build number from TestFlight based on the version number. Provides a way to have  increment_build_number  be based on the latest build you uploaded to iTC.      latest_testflight_build_number       Supported platforms  ios, mac    Author  @daveanderson    Returns  Integer representation of the latest build number uploaded to TestFlight",
            "title": "latest_testflight_build_number"
        },
        {
            "location": "/actions/latest_testflight_build_number/#2-examples",
            "text": "latest_testflight_build_number(version: \"1.3\")  increment_build_number({\n  build_number: latest_testflight_build_number + 1\n})",
            "title": "2 Examples"
        },
        {
            "location": "/actions/latest_testflight_build_number/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     live  Query the live version (ready-for-sale)  false    app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    version  The version number whose latest build number we want     platform  The platform to use (optional)  ios    initial_build_number  sets the build number to given value if no build is in current train  1    team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/latest_testflight_build_number/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  latest_testflight_build_number  action generates the following Lane Variables:     SharedValue  Description      SharedValues::LATEST_TESTFLIGHT_BUILD_NUMBER  The latest build number of the latest version of the app uploaded to TestFlight    SharedValues::LATEST_TESTFLIGHT_VERSION  The version of the latest build number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/latest_testflight_build_number/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action latest_testflight_build_number",
            "title": "Documentation"
        },
        {
            "location": "/actions/latest_testflight_build_number/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run latest_testflight_build_number  To pass parameters, make use of the  :  symbol, for example  fastlane run latest_testflight_build_number parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/latest_testflight_build_number/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/lcov/",
            "text": "lcov\n\n\nGenerates coverage data using lcov\n\n\n\n\n\n\n\n\nlcov\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@thiagolioy\n\n\n\n\n\n\n\n\n1 Example\n\n\nlcov(\n  project_name: \"ProjectName\",\n  scheme: \"yourScheme\",\n  output_dir: \"cov_reports\" # This value is optional. Default is coverage_reports\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nproject_name\n\n\nName of the project\n\n\n\n\n\n\n\n\nscheme\n\n\nScheme of the project\n\n\n\n\n\n\n\n\narch\n\n\nThe build arch where will search .gcda files\n\n\ni386\n\n\n\n\n\n\noutput_dir\n\n\nThe output directory that coverage data will be stored. If not passed will use coverage_reports as default value\n\n\ncoverage_reports\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action lcov\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run lcov\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run lcov parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "lcov"
        },
        {
            "location": "/actions/lcov/#lcov",
            "text": "Generates coverage data using lcov     lcov       Supported platforms  ios, mac    Author  @thiagolioy",
            "title": "lcov"
        },
        {
            "location": "/actions/lcov/#1-example",
            "text": "lcov(\n  project_name: \"ProjectName\",\n  scheme: \"yourScheme\",\n  output_dir: \"cov_reports\" # This value is optional. Default is coverage_reports\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/lcov/#parameters",
            "text": "Key  Description  Default      project_name  Name of the project     scheme  Scheme of the project     arch  The build arch where will search .gcda files  i386    output_dir  The output directory that coverage data will be stored. If not passed will use coverage_reports as default value  coverage_reports     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/lcov/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action lcov",
            "title": "Documentation"
        },
        {
            "location": "/actions/lcov/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run lcov  To pass parameters, make use of the  :  symbol, for example  fastlane run lcov parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/lcov/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/mailgun/",
            "text": "mailgun\n\n\nSend a success/error message to an email group\n\n\n\n\n\n\n\n\nmailgun\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@thiagolioy\n\n\n\n\n\n\n\n\n2 Examples\n\n\nmailgun(\n  to: \"fastlane@krausefx.com\",\n  success: true,\n  message: \"This is the mail's content\"\n)\n\n\n\n\nmailgun(\n  postmaster: \"MY_POSTMASTER\",\n  apikey: \"MY_API_KEY\",\n  to: \"DESTINATION_EMAIL\",\n  from: \"EMAIL_FROM_NAME\",\n  reply_to: \"EMAIL_REPLY_TO\",\n  success: true,\n  message: \"Mail Body\",\n  app_link: \"http://www.myapplink.com\",\n  ci_build_link: \"http://www.mycibuildlink.com\",\n  template_path: \"HTML_TEMPLATE_PATH\",\n  custom_placeholders: {\n    :var1 => 123,\n    :var2 => \"string\"\n  },\n  attachment: \"dirname/filename.ext\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmailgun_sandbox_domain\n\n\nMailgun sandbox domain postmaster for your mail. Please use postmaster instead\n\n\n\n\n\n\n\n\nmailgun_sandbox_postmaster\n\n\nMailgun sandbox domain postmaster for your mail. Please use postmaster instead\n\n\n\n\n\n\n\n\nmailgun_apikey\n\n\nMailgun apikey for your mail. Please use postmaster instead\n\n\n\n\n\n\n\n\npostmaster\n\n\nMailgun sandbox domain postmaster for your mail\n\n\n\n\n\n\n\n\napikey\n\n\nMailgun apikey for your mail\n\n\n\n\n\n\n\n\nto\n\n\nDestination of your mail\n\n\n\n\n\n\n\n\nfrom\n\n\nMailgun sender name\n\n\nMailgun Sandbox\n\n\n\n\n\n\nmessage\n\n\nMessage of your mail\n\n\n\n\n\n\n\n\nsubject\n\n\nSubject of your mail\n\n\nfastlane build\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\ntrue\n\n\n\n\n\n\napp_link\n\n\nApp Release link\n\n\n\n\n\n\n\n\nci_build_link\n\n\nCI Build Link\n\n\n\n\n\n\n\n\ntemplate_path\n\n\nMail HTML template\n\n\n\n\n\n\n\n\nreply_to\n\n\nMail Reply to\n\n\n\n\n\n\n\n\nattachment\n\n\nMail Attachment filenames, either an array or just one string\n\n\n\n\n\n\n\n\ncustom_placeholders\n\n\nPlaceholders for template given as a hash\n\n\n{}\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action mailgun\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run mailgun\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run mailgun parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "mailgun"
        },
        {
            "location": "/actions/mailgun/#mailgun",
            "text": "Send a success/error message to an email group     mailgun       Supported platforms  ios, android, mac    Author  @thiagolioy",
            "title": "mailgun"
        },
        {
            "location": "/actions/mailgun/#2-examples",
            "text": "mailgun(\n  to: \"fastlane@krausefx.com\",\n  success: true,\n  message: \"This is the mail's content\"\n)  mailgun(\n  postmaster: \"MY_POSTMASTER\",\n  apikey: \"MY_API_KEY\",\n  to: \"DESTINATION_EMAIL\",\n  from: \"EMAIL_FROM_NAME\",\n  reply_to: \"EMAIL_REPLY_TO\",\n  success: true,\n  message: \"Mail Body\",\n  app_link: \"http://www.myapplink.com\",\n  ci_build_link: \"http://www.mycibuildlink.com\",\n  template_path: \"HTML_TEMPLATE_PATH\",\n  custom_placeholders: {\n    :var1 => 123,\n    :var2 => \"string\"\n  },\n  attachment: \"dirname/filename.ext\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/mailgun/#parameters",
            "text": "Key  Description  Default      mailgun_sandbox_domain  Mailgun sandbox domain postmaster for your mail. Please use postmaster instead     mailgun_sandbox_postmaster  Mailgun sandbox domain postmaster for your mail. Please use postmaster instead     mailgun_apikey  Mailgun apikey for your mail. Please use postmaster instead     postmaster  Mailgun sandbox domain postmaster for your mail     apikey  Mailgun apikey for your mail     to  Destination of your mail     from  Mailgun sender name  Mailgun Sandbox    message  Message of your mail     subject  Subject of your mail  fastlane build    success  Was this build successful? (true/false)  true    app_link  App Release link     ci_build_link  CI Build Link     template_path  Mail HTML template     reply_to  Mail Reply to     attachment  Mail Attachment filenames, either an array or just one string     custom_placeholders  Placeholders for template given as a hash  {}     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/mailgun/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action mailgun",
            "title": "Documentation"
        },
        {
            "location": "/actions/mailgun/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run mailgun  To pass parameters, make use of the  :  symbol, for example  fastlane run mailgun parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/mailgun/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/",
            "text": "make_changelog_from_jenkins\n\n\nGenerate a changelog using the Changes section from the current Jenkins build\n\n\n\n\nThis is useful when deploying automated builds. The changelog from Jenkins lists all the commit messages since the last build.\n\n\n\n\n\n\n\n\n\n\nmake_changelog_from_jenkins\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@mandrizzle\n\n\n\n\n\n\n\n\n1 Example\n\n\nmake_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog: \"Bug fixes and performance enhancements\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfallback_changelog\n\n\nFallback changelog if there is not one on Jenkins, or it couldn't be read\n\n\n''\n\n\n\n\n\n\ninclude_commit_body\n\n\nInclude the commit body along with the summary\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nmake_changelog_from_jenkins\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::FL_CHANGELOG\n\n\nThe changelog generated by Jenkins\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action make_changelog_from_jenkins\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run make_changelog_from_jenkins\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run make_changelog_from_jenkins parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "make_changelog_from_jenkins"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#make_changelog_from_jenkins",
            "text": "Generate a changelog using the Changes section from the current Jenkins build   This is useful when deploying automated builds. The changelog from Jenkins lists all the commit messages since the last build.      make_changelog_from_jenkins       Supported platforms  ios, android, mac    Author  @mandrizzle",
            "title": "make_changelog_from_jenkins"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#1-example",
            "text": "make_changelog_from_jenkins(\n  # Optional, lets you set a changelog in the case is not generated on Jenkins or if ran outside of Jenkins\n  fallback_changelog: \"Bug fixes and performance enhancements\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#parameters",
            "text": "Key  Description  Default      fallback_changelog  Fallback changelog if there is not one on Jenkins, or it couldn't be read  ''    include_commit_body  Include the commit body along with the summary  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  make_changelog_from_jenkins  action generates the following Lane Variables:     SharedValue  Description      SharedValues::FL_CHANGELOG  The changelog generated by Jenkins     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action make_changelog_from_jenkins",
            "title": "Documentation"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run make_changelog_from_jenkins  To pass parameters, make use of the  :  symbol, for example  fastlane run make_changelog_from_jenkins parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/make_changelog_from_jenkins/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/match/",
            "text": "match\n\n\nAlias for the \nsync_code_signing\n action\n\n\n\n  \n\n\n\n\n\nEasily sync your certificates and profiles across your team\n\n\nA new approach to iOS and macOS code signing: Share one code signing identity across your development team to simplify your codesigning setup and prevent code signing issues.\n\n\nmatch\n is the implementation of the \ncodesigning.guide concept\n. \nmatch\n creates all required certificates & provisioning profiles and stores them in a separate git repository, Google Cloud, or Amazon S3. Every team member with access to the selected storage can use those credentials for code signing. \nmatch\n also automatically repairs broken and expired credentials. It's the easiest way to share signing credentials across teams\n\n\nMore information on how to get started with codesigning\n\n\n\n\n\n    \nWhy?\n \u2022\n    \nUsage\n \u2022\n    \nIs this secure?\n\n\n\n\n\n\n\nmatch\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nWhy match?\n\n\nBefore starting to use \nmatch\n, make sure to read the \ncodesigning.guide\n:\n\n\n\n\nWhen deploying an app to the App Store, beta testing service or even installing it on a device, most development teams have separate code signing identities for every member. This results in dozens of profiles including a lot of duplicates.\n\n\nYou have to manually renew and download the latest set of provisioning profiles every time you add a new device or a certificate expires. Additionally this requires spending a lot of time when setting up a new machine that will build your app.\n\n\n\n\nA new approach\n\n\n\n\nShare one code signing identity across your development team to simplify your setup and prevent code signing issues. What if there was a central place where your code signing identity and profiles are kept, so anyone in the team can access them during the build process?\n\n\n\n\nFor more information about the concept, visit \ncodesigning.guide\n.\n\n\nWhy not let Xcode handle all this?\n\n\n\n\nYou have full control over what happens\n\n\nYou have access to all the certificates and profiles, which are all securely stored in git\n\n\nYou share one code signing identity across the team to have fewer certificates and profiles\n\n\nXcode sometimes revokes certificates which breaks your setup causing failed builds\n\n\nMore predictable builds by settings profiles in an explicit way instead of using the \nAutomatic\n setting\n\n\nIt just works\u2122\n\n\n\n\nWhat does \nmatch\n do for you?\n\n\n\n\n\n\n\n\n\n\nmatch\n\n\n\n\n\n\n\n\n\n\n\ud83d\udd04\n\n\nAutomatically sync your iOS and macOS keys and profiles across all your team members using git\n\n\n\n\n\n\n\ud83d\udce6\n\n\nHandle all the heavy lifting of creating and storing your certificates and profiles\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSetup codesigning on a new machine in under a minute\n\n\n\n\n\n\n\ud83c\udfaf\n\n\nDesigned to work with apps with multiple targets and bundle identifiers\n\n\n\n\n\n\n\ud83d\udd12\n\n\nYou have full control over your files and Git repo, no third party service involved\n\n\n\n\n\n\n\u2728\n\n\nProvisioning profile will always match the correct certificate\n\n\n\n\n\n\n\ud83d\udca5\n\n\nEasily reset your existing profiles and certificates if your current account has expired or invalid profiles\n\n\n\n\n\n\n\u267b\ufe0f\n\n\nAutomatically renew your provisioning profiles to include all your devices using the \n--force\n option\n\n\n\n\n\n\n\ud83d\udc65\n\n\nSupport for multiple Apple accounts and multiple teams\n\n\n\n\n\n\n\u2728\n\n\nTightly integrated with \nfastlane\n to work seamlessly with \ngym\n and other build tools\n\n\n\n\n\n\n\n\nUsage\n\n\nSetup\n\n\n\n\nOptional: Create a \nnew, shared Apple Developer Portal account\n, something like \noffice@company.com\n, that will be shared across your team from now on (for more information visit \ncodesigning.guide\n)\n\n\nRun the following in your project folder to start using \nmatch\n:\n\n\n\n\nfastlane match init\n\n\n\n\n\n\nYou'll be asked if you want to store your code signing identities inside a \nGit repo\n, \nGoogle Cloud\n or \nAmazon S3\n.\n\n\nGit Storage\n\n\nUse Git Storage to store all code signing identities in a private git repo, owned and operated by you. The files will be encrypted using OpenSSL.\n\n\nFirst, enter the URL to your private (!) Git repo (You can create one for free on e.g. \nGitHub\n or \nBitBucket\n). The URL you enter can be either a \nhttps://\n or a \ngit\n URL. \nfastlane match init\n won't read or modify your certificates or profiles yet, and also won't validate your git URL.\n\n\nThis will create a \nMatchfile\n in your current directory (or in your \n./fastlane/\n folder).\n\n\nExample content (for more advanced setups check out the \nfastlane section\n):\n\n\ngit_url(\"https://github.com/fastlane/certificates\")\n\napp_identifier(\"tools.fastlane.app\")\nusername(\"user@fastlane.tools\")\n\n\n\n\nGit Storage on GitHub\n\n\nIf your machine is currently using SSH to authenticate with GitHub, you'll want to use a \ngit\n URL, otherwise, you may see an authentication error when you attempt to use match. Alternatively, you can set a basic authorization for \nmatch\n:\n\n\nUsing parameter:\n\n\nmatch(git_basic_authorization: '<YOUR KEY>')\n\n\n\n\nUsing environment variable:\n\n\nENV['MATCH_GIT_BASIC_AUTHORIZATION'] = '<YOUR KEY>'\nmatch\n\n\n\n\nYou can find more information about GitHub basic authentication and personal token generation here: \nhttps://developer.github.com/v3/auth/#basic-authentication\n\n\nGit Storage on GitHub - Deploy keys\n\n\nIf your machine does not have a private key set up for your certificates repository, you can give \nmatch\n a path for one:\n\n\nUsing parameter:\n\n\nmatch(git_private_key: '<PATH TO YOUR KEY>')\n\n\n\n\nUsing environment variable:\n\n\nENV['MATCH_GIT_PRIVATE_KEY'] = '<PATH TO YOUR KEY>'\nmatch\n\n\n\n\nYou can find more information about GitHub basic authentication and personal token generation here: \nhttps://developer.github.com/v3/auth/#basic-authentication\n\n\nGit Storage on Azure DevOps\n\n\nIf you're running a pipeline on Azure DevOps and using git storage in a another repository on the same project, you might want to use \nbearer\n token authentication.\n\n\nUsing parameter:\n\n\nmatch(git_bearer_authorization: '<YOUR TOKEN>')\n\n\n\n\nUsing environment variable:\n\n\nENV['MATCH_GIT_BEARER_AUTHORIZATION'] = '<YOUR TOKEN>'\nmatch\n\n\n\n\nYou can find more information about this use case here: \nhttps://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#authorize-access-to-your-repositories\n\n\nGoogle Cloud Storage\n\n\nUse \nGoogle Cloud Storage\n for a fully hosted solution for your code signing identities. Certificates are stored on Google Cloud, encrypted using Google managed keys. Everything will be stored on your Google account, inside a storage bucket you provide. You can also directly access the files using the web console.\n\n\nThis will create a \nMatchfile\n in your current directory (or in your \n./fastlane/\n folder).\n\n\nExample content (for more advanced setups check out the \nfastlane section\n):\n\n\ngoogle_cloud_bucket_name(\"major-key-certificates\")\n\n\n\n\nAmazon S3\n\n\nUse \nAmazon S3\n for a fully hosted solution for your code signing identities. Certificates are stored on S3, inside a storage bucket you provide. You can also directly access the files using the web console.\n\n\nThis will create a \nMatchfile\n in your current directory (or in your \n./fastlane/\n folder).\n\n\nExample content (for more advanced setups check out the \nfastlane section\n):\n\n\ns3_bucket(\"ios-certificates\")\n\n\n\n\nMultiple teams\n\n\nmatch\n can store the codesigning files for multiple development teams:\n\n\nGit Storage\n\n\nUse one git branch per team. \nmatch\n also supports storing certificates of multiple teams in one repo, by using separate git branches. If you work in multiple teams, make sure to set the \ngit_branch\n parameter to a unique value per team. From there, \nmatch\n will automatically create and use the specified branch for you.\n\n\nmatch(git_branch: \"team1\", username: \"user@team1.com\")\nmatch(git_branch: \"team2\", username: \"user@team2.com\")\n\n\n\n\nGoogle Cloud or Amazon S3 Storage\n\n\nIf you use Google Cloud or Amazon S3 Storage, you don't need to do anything manually. Just use Google Cloud or Amazon S3 Storage, and the top level folder will be the team ID.\n\n\nRun\n\n\n\n\nBefore running \nmatch\n for the first time, you should consider clearing your existing profiles and certificates using the \nmatch nuke command\n.\n\n\n\n\nAfter running \nfastlane match init\n you can run the following to generate new certificates and profiles:\n\n\nfastlane match appstore\n\n\n\n\nfastlane match development\n\n\n\n\n\n\nThis will create a new certificate and provisioning profile (if required) and store them in your selected storage.\n\nIf you previously ran \nmatch\n with the configured storage it will automatically install the existing profiles from your storage.\n\n\nThe provisioning profiles are installed in \n~/Library/MobileDevice/Provisioning Profiles\n while the certificates and private keys are installed in your Keychain.\n\n\nTo get a more detailed output of what \nmatch\n is doing use\n\n\nfastlane match --verbose\n\n\n\n\nFor a list of all available options run\n\n\nfastlane action match\n\n\n\n\nHandle multiple targets\n\n\nmatch\n can use the same one Git repository, Google Cloud, or Amazon S3 Storage for all bundle identifiers.\n\n\nIf you have several targets with different bundle identifiers, supply them as a comma-separated list:\n\n\nfastlane match appstore -a tools.fastlane.app,tools.fastlane.app.watchkitapp\n\n\n\n\nYou can make this even easier using \nfastlane\n by creating a \ncertificates\n lane like this:\n\n\nlane :certificates do\n  match(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.app.watchkitapp\"])\nend\n\n\n\n\nThen all your team has to do is run \nfastlane certificates\n and the keys, certificates and profiles for all targets will be synced.\n\n\nHandle multiple apps per developer/distribution certificate\n\n\nIf you want to use a single developer and/or distribution certificate for multiple apps belonging to the same development team, you may use the same signing identities repository and branch to store the signing identities for your apps:\n\n\nMatchfile\n example for both App #1 and #2:\n\n\ngit_url(\"https://github.com/example/example-repo.git\")\ngit_branch(\"master\")\n\n\n\n\nmatch\n will reuse certificates and will create separate provisioning profiles for each app.\n\n\nPassphrase\n\n\nGit Repo storage only\n\n\nWhen running \nmatch\n for the first time on a new machine, it will ask you for the passphrase for the Git repository. This is an additional layer of security: each of the files will be encrypted using \nopenssl\n. Make sure to remember the password, as you'll need it when you run match on a different machine.\n\n\nTo set the passphrase to decrypt your profiles using an environment variable (and avoid the prompt) use \nMATCH_PASSWORD\n.\n\n\nMigrate from Git Repo to Google Cloud\n\n\nIf you're already using a Git Repo, but would like to switch to using Google Cloud Storage, run the following command to automatically migrate all your existing code signing identities and provisioning profiles\n\n\nfastlane match migrate\n\n\n\n\nAfter a successful migration you can safely delete your Git repo.\n\n\nGoogle Cloud access control\n\n\nGoogle Cloud Storage only\n\n\nThere are two cases for reading and writing certificates stored in a Google Cloud storage bucket:\n\n\n\n\nContinuous integration jobs. These will authenticate to your Google Cloud project via a service account, and use a \ngc_keys.json\n file as credentials.\n\n\nDevelopers on a local workstation. In this case, you should choose whether everyone on your team will create their own \ngc_keys.json\n file, or whether you want to manage access to the bucket directly using your developers' Google accounts.\n\n\n\n\nWhen running \nfastlane match init\n the first time, the setup process will give you the option to create your \ngc_keys.json\n file. This file contains the authentication credentials needed to access your Google Cloud storage bucket. Make sure to keep that file secret and never add it to version control. We recommend adding \ngc_keys.json\n to your \n.gitignore\n\n\nManaging developer access via keys\n\n\nIf you want to manage developer access to your certificates via authentication keys, every developer should create their own \ngc_keys.json\n and add the file to all their work machines. This will give the admin full control over who has read/write access to the given Storage bucket. At the same time it allows your team to revoke a single key if a file gets compromised.\n\n\nManaging developer access via Google accounts\n\n\nIf your developers already have Google accounts and access to your Google Cloud project, you can also manage access to the storage bucket via \nCloud Identity and Access Management (IAM)\n. Just \nset up\n individual developer accounts or an entire Google Group containing your team as readers and writers on your storage bucket.\n\n\nYou can then specify the Google Cloud project id containing your storage bucket in your \nMatchfile\n:\n\n\nstorage_mode(\"google_cloud\")\ngoogle_cloud_bucket_name(\"my-app-certificates\")\ngoogle_cloud_project_id(\"my-app-project\")\n\n\n\n\nThis lets developers on your team use \nApplication Default Credentials\n when accessing your storage bucket. After installing the \nGoogle Cloud SDK\n, they only need to run the following command once:\n\n\ngcloud auth application-default login\n\n\n\n\n... and log in with their Google account. Then, when they run \nfastlane match\n, \nmatch\n will use these credentials to read from and write to the storage bucket.\n\n\nNew machine\n\n\nTo set up the certificates and provisioning profiles on a new machine, you just run the same command using:\n\n\nfastlane match development\n\n\n\n\nYou can also run \nmatch\n in a \nreadonly\n mode to be sure it won't create any new certificates or profiles.\n\n\nfastlane match development --readonly\n\n\n\n\nWe recommend to always use \nreadonly\n mode when running \nfastlane\n on CI systems. This can be done using\n\n\nlane :beta do\n  match(type: \"appstore\", readonly: is_ci)\n\n  gym(scheme: \"Release\")\nend\n\n\n\n\nAccess Control\n\n\nA benefit of using \nmatch\n is that it enables you to give the developers of your team access to the code signing certificates without having to give everyone access to the Developer Portal:\n\n\n\n\nRun \nmatch\n to store the certificates in a Git repo or Google Cloud Storage\n\n\nGrant access to the Git repo / Google Cloud Storage Bucket to your developers and give them the passphrase (for git storage)\n\n\nThe developers can now run \nmatch\n which will install the latest code signing profiles so they can build and sign the application without having to have access to the Apple Developer Portal\n\n\nEvery time you run \nmatch\n to update the profiles (e.g. add a new device), all your developers will automatically get the latest profiles when running \nmatch\n\n\n\n\nIf you decide to run \nmatch\n without access to the Developer Portal, make sure to use the \n--readonly\n option so that the commands don't ask you for the password to the Developer Portal.\n\n\nThe advantage of this approach is that no one in your team will revoke a certificate by mistake, while having all code signing secrets in one location.\n\n\nFolder structure\n\n\nAfter running \nmatch\n for the first time, your Git repo or Google Cloud bucket will contain 2 directories:\n\n\n\n\nThe \ncerts\n folder contains all certificates with their private keys\n\n\nThe \nprofiles\n folder contains all provisioning profiles\n\n\n\n\nAdditionally, \nmatch\n creates a nice repo \nREADME.md\n for you, making it easy to onboard new team members:\n\n\n\n  \n\n\n\n\n\nIn the case of Google Cloud, the top level folder will be the team ID.\n\n\nfastlane\n\n\nAdd \nmatch\n to your \nFastfile\n to automatically fetch the latest code signing certificates with \nfastlane\n.\n\n\nmatch(type: \"appstore\")\n\nmatch(type: \"development\")\n\nmatch(type: \"adhoc\",\n      app_identifier: \"tools.fastlane.app\")\n\nmatch(type: \"enterprise\",\n      app_identifier: \"tools.fastlane.app\")\n\n# _match_ should be called before building the app with _gym_\ngym\n# ...\n\n\n\n\nRegistering new devices\n\n\nBy using \nmatch\n, you'll save a lot of time every time you add new device to your Ad Hoc or Development profiles. Use \nmatch\n in combination with the \nregister_devices\n action.\n\n\nlane :beta do\n  register_devices(devices_file: \"./devices.txt\")\n  match(type: \"adhoc\", force_for_new_devices: true)\nend\n\n\n\n\nBy using the \nforce_for_new_devices\n parameter, \nmatch\n will check if the (enabled) device count has changed since the last time you ran \nmatch\n, and automatically re-generate the provisioning profile if necessary. You can also use \nforce: true\n to re-generate the provisioning profile on each run.\n\n\nImportant:\n The \nforce_for_new_devices\n parameter is ignored for App Store provisioning profiles since they don't contain any device information.\n\n\nIf you're not using \nfastlane\n, you can also use the \nforce_for_new_devices\n option from the command line:\n\n\nfastlane match adhoc --force_for_new_devices\n\n\n\n\nTemplates (aka: custom entitlements)\n\n\nMatch can generate profiles that contain custom entitlements by passing in the entitlement's name with the \ntemplate_name\n parameter.\n\n\nmatch(type: \"development\",\n      template_name: \"Apple Pay Pass Suppression Development\")\n\n\n\n\nSetup Xcode project\n\n\nDocs on how to set up your Xcode project\n\n\nTo build from the command line using \nfastlane\n\n\nmatch\n automatically pre-fills environment variables with the UUIDs of the correct provisioning profiles, ready to be used in your Xcode project.\n\n\nMore information about how to setup your Xcode project can be found \nhere\n\n\nTo build from Xcode manually\n\n\nThis is useful when installing your application on your device using the Development profile.\n\n\nYou can statically select the right provisioning profile in your Xcode project (the name will be \nmatch Development tools.fastlane.app\n).\n\n\nDocs on how to set up your Xcode project\n\n\nContinuous Integration\n\n\nGit repo access\n\n\nThere is one tricky part of setting up a CI system to work with \nmatch\n, which is enabling the CI to access the repo. Usually you'd just add your CI's public ssh key as a deploy key to your \nmatch\n repo, but since your CI will already likely be using its public ssh key to access the codebase repo, \nyou won't be able to do that\n.\n\n\nSome repo hosts might allow you to use the same deploy key for different repos, but GitHub will not. If your host does, you don't need to worry about this, just add your CI's public ssh key as a deploy key for your \nmatch\n repo and scroll down to \"\nEncryption password\n\".\n\n\nThere are a few ways around this:\n\n\n\n\nCreate a new account on your repo host with read-only access to your \nmatch\n repo. Bitrise have a good description of this \nhere\n.\n\n\nSome CIs allow you to upload your signing credentials manually, but obviously this means that you'll have to re-upload the profiles/keys/certs each time they change.\n\n\n\n\nNeither solution is pretty. It's one of those \ntrade-off\n things. Do you care more about \nnot\n having an extra account sitting around, or do you care more about having the :sparkles: of auto-syncing of credentials.\n\n\nGit repo encryption password\n\n\nOnce you've decided which approach to take, all that's left to do is to set your encryption password as secret environment variable named \nMATCH_PASSWORD\n. \nmatch\n will pick this up when it's run.\n\n\nGoogle Cloud Storage access\n\n\nAccessing Google Cloud Storage from your CI system requires you to provide the \ngc_keys.json\n file as part of your build. How you implement this is your decision. You can inject that file during build time.\n\n\nAmazon S3 Storage access\n\n\nAccessing Amazon S3 Storage from your CI system requires you to provide the \ns3_region\n, \ns3_access_key\n, \ns3_secret_access_key\n and \ns3_bucket\n options (or environment variables), with keys that has read access to the bucket.\n\n\nNuke\n\n\nIf you never really cared about code signing and have a messy Apple Developer account with a lot of invalid, expired or Xcode managed profiles/certificates, you can use the \nmatch nuke\n command to revoke your certificates and provisioning profiles. Don't worry, apps that are already available in the App Store / TestFlight will still work. Builds distributed via Ad Hoc or Enterprise will be disabled after nuking your account, so you'll have to re-upload a new build. After clearing your account you'll start from a clean state, and you can run \nmatch\n to generate your certificates and profiles again.\n\n\nTo revoke all certificates and provisioning profiles for a specific environment:\n\n\nfastlane match nuke development\nfastlane match nuke distribution\nfastlane match nuke enterprise\n\n\n\n\n\n\nYou'll have to confirm a list of profiles / certificates that will be deleted.\n\n\nAdvanced Git Storage features\n\n\nChange Password\n\n\nTo change the password of your repo and therefore decrypting and encrypting all files run:\n\n\nfastlane match change_password\n\n\n\n\nYou'll be asked for the new password on all your machines on the next run.\n\n\nImport\n\n\nTo import and encrypt a certificate (\n.cer\n), the private key (\n.p12\n) and the provisioning profiles (\n.mobileprovision\n or \n.provisionprofile\n) into the \nmatch\n repo run:\n\n\nfastlane match import\n\n\n\n\nYou'll be prompted for the certificate (\n.cer\n), the private key (\n.p12\n) and the provisioning profiles (\n.mobileprovision\n or \n.provisionprofile\n) paths. \nmatch\n will first validate the certificate (\n.cer\n) against the Developer Portal before importing the certificate, the private key and the provisioning profiles into the specified \nmatch\n repository.\n\n\nHowever if there is no access to the developer portal but there are certificates, private keys and profiles provided, you can use the \nskip_certificate_matching\n option to tell \nmatch\n not to verify the certificates. Like this:\n\n\nfastlane match import --skip_certificate_matching true\n\n\n\n\nThis will skip login to Apple Developer Portal and will import the provided certificate, private key and profile directly to the certificates repo.\n\n\nPlease be careful when using this option and ensure the certificates and profiles match the type (development, adhoc, appstore, enterprise, developer_id) and are not revoked or expired.\n\n\nManual Decrypt\n\n\nIf you want to manually decrypt a file you can.\n\n\nopenssl aes-256-cbc -k \"<password>\" -in \"<fileYouWantToDecryptPath>\" -out \"<decryptedFilePath>\" -a -d\n\n\n\n\nExport Distribution Certificate and Private Key as Single .p12 File\n\n\nmatch\n stores the certificate (\n.cer\n) and the private key (\n.p12\n) files separately. The following steps will repackage the separate certificate and private key into a single \n.p12\n file.\n\n\nDecrypt your cert found in \ncerts/<type>/<unique-id>.cer\n as a pem file:\n\n\nopenssl aes-256-cbc -k \"<password>\" -in \"certs/<type>/<unique-id>.cer\" -out \"cert.der\" -a -d -md [md5|sha256]\nopenssl x509 -inform der -in cert.der -out cert.pem\n\n\n\n\nDecrypt your private key found in \ncerts/<type>/<unique-id>.p12\n as a pem file:\n\n\nopenssl aes-256-cbc -k \"<password>\" -in \"certs/distribution/<unique-id>.p12\" -out \"key.pem\" -a -d -md [md5|sha256]\n\n\n\n\nGenerate an encrypted p12 file with the same or new password:\n\n\nopenssl pkcs12 -export -out \"cert.p12\" -inkey \"key.pem\" -in \"cert.pem\" -password pass:<password>\n\n\n\n\nIs this secure?\n\n\nGit\n\n\nBoth your keys and provisioning profiles are encrypted using OpenSSL using a passphrase.\n\n\nStoring your private keys in a Git repo may sound off-putting at first. We did an analysis of potential security issues, see section below.\n\n\nGoogle Cloud Storage\n\n\nAll your keys and provisioning profiles are encrypted using Google managed keys.\n\n\nWhat could happen if someone stole a private key?\n\n\nIf attackers would have your certificate and provisioning profile, they could codesign an application with the same bundle identifier.\n\n\nWhat's the worst that could happen for each of the profile types?\n\n\nApp Store Profiles\n\n\nAn App Store profile can't be used for anything as long as it's not re-signed by Apple. The only way to get an app resigned is to submit an app for review which could take anywhere from 24 hours to a few days (checkout \nappreviewtimes.com\n for up-to-date expectations). Attackers could only submit an app for review, if they also got access to your App Store Connect credentials (which are not stored in git, but in your local keychain). Additionally you get an email notification every time a build gets uploaded to cancel the submission even before your app gets into the review stage.\n\n\nDevelopment and Ad Hoc Profiles\n\n\nIn general those profiles are harmless as they can only be used to install a signed application on a small subset of devices. To add new devices, the attacker would also need your Apple Developer Portal credentials (which are not stored in git, but in your local keychain).\n\n\nEnterprise Profiles\n\n\nAttackers could use an In-House profile to distribute signed application to a potentially unlimited number of devices. All this would run under your company name and it could eventually lead to Apple revoking your In-House account. However it is very easy to revoke a certificate to remotely break the app on all devices.\n\n\nBecause of the potentially dangerous nature of In-House profiles please use \nmatch\n with enterprise profiles with caution, ensure your git repository is private and use a secure password.\n\n\nTo sum up\n\n\n\n\nYou have full control over the access list of your Git repo, no third party service involved\n\n\nEven if your certificates are leaked, they can't be used to cause any harm without your App Store Connect login credentials\n\n\nUse In-House enterprise profile with \nmatch\n with caution\n\n\nIf you use GitHub or Bitbucket we encourage enabling 2 factor authentication for all accounts that have access to the certificates repo\n\n\nThe complete source code of \nmatch\n is fully open source on \nGitHub\n\n\n\n\n\n\n\n\n\n\n\n\n\nmatch\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n4 Examples\n\n\nsync_code_signing(type: \"appstore\", app_identifier: \"tools.fastlane.app\")\n\n\n\n\nsync_code_signing(type: \"development\", readonly: true)\n\n\n\n\nsync_code_signing(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.sleepy\"])\n\n\n\n\nmatch   # alias for \"sync_code_signing\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nDefine the profile type, can be appstore, adhoc, development, enterprise, developer_id, mac_installer_distribution\n\n\ndevelopment\n\n\n\n\n\n\nadditional_cert_types\n\n\nCreate additional cert types needed for macOS installers (valid values: mac_installer_distribution, developer_id_installer)\n\n\n\n\n\n\n\n\nreadonly\n\n\nOnly fetch existing certificates and profiles, don't generate new ones\n\n\nfalse\n\n\n\n\n\n\ngenerate_apple_certs\n\n\nCreate a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)\n\n\n*\n\n\n\n\n\n\nskip_provisioning_profiles\n\n\nSkip syncing provisioning profiles\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier(s) of your app (comma-separated string or array of strings)\n\n\n*\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nstorage_mode\n\n\nDefine where you want to store your certificates\n\n\ngit\n\n\n\n\n\n\ngit_url\n\n\nURL to the git repo containing all the certificates\n\n\n\n\n\n\n\n\ngit_branch\n\n\nSpecific git branch to use\n\n\nmaster\n\n\n\n\n\n\ngit_full_name\n\n\ngit user full name to commit\n\n\n\n\n\n\n\n\ngit_user_email\n\n\ngit user email to commit\n\n\n\n\n\n\n\n\nshallow_clone\n\n\nMake a shallow clone of the repository (truncate the history to 1 revision)\n\n\nfalse\n\n\n\n\n\n\nclone_branch_directly\n\n\nClone just the branch specified, instead of the whole repo. This requires that the branch already exists. Otherwise the command will fail\n\n\nfalse\n\n\n\n\n\n\ngit_basic_authorization\n\n\nUse a basic authorization header to access the git repo (e.g.: access via HTTPS, GitHub Actions, etc), usually a string in Base64\n\n\n\n\n\n\n\n\ngit_bearer_authorization\n\n\nUse a bearer authorization header to access the git repo (e.g.: access to an Azure DevOps repository), usually a string in Base64\n\n\n\n\n\n\n\n\ngit_private_key\n\n\nUse a private key to access the git repo (e.g.: access to GitHub repository via Deploy keys), usually a id_rsa named file or the contents hereof\n\n\n\n\n\n\n\n\ngoogle_cloud_bucket_name\n\n\nName of the Google Cloud Storage bucket to use\n\n\n\n\n\n\n\n\ngoogle_cloud_keys_file\n\n\nPath to the gc_keys.json file\n\n\n\n\n\n\n\n\ngoogle_cloud_project_id\n\n\nID of the Google Cloud project to use for authentication\n\n\n\n\n\n\n\n\ns3_region\n\n\nName of the S3 region\n\n\n\n\n\n\n\n\ns3_access_key\n\n\nS3 access key\n\n\n\n\n\n\n\n\ns3_secret_access_key\n\n\nS3 secret access key\n\n\n\n\n\n\n\n\ns3_bucket\n\n\nName of the S3 bucket\n\n\n\n\n\n\n\n\ns3_object_prefix\n\n\nPrefix to be used on all objects uploaded to S3\n\n\n\n\n\n\n\n\nkeychain_name\n\n\nKeychain the items should be imported to\n\n\nlogin.keychain\n\n\n\n\n\n\nkeychain_password\n\n\nThis might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password\n\n\n\n\n\n\n\n\nforce\n\n\nRenew the provisioning profiles every time you run match\n\n\nfalse\n\n\n\n\n\n\nforce_for_new_devices\n\n\nRenew the provisioning profiles if the device count on the developer portal has changed. Ignored for profile type 'appstore'\n\n\nfalse\n\n\n\n\n\n\nskip_confirmation\n\n\nDisables confirmation prompts during nuke, answering them with yes\n\n\nfalse\n\n\n\n\n\n\nskip_docs\n\n\nSkip generation of a README.md for the created git repository\n\n\nfalse\n\n\n\n\n\n\nplatform\n\n\nSet the provisioning profile's platform to work with (i.e. ios, tvos, macos, catalyst)\n\n\n*\n\n\n\n\n\n\nderive_catalyst_app_identifier\n\n\nEnable this if you have the Mac Catalyst capability enabled and your project was created with Xcode 11.3 or earlier. Prepends 'maccatalyst.' to the app identifier for the provisioning profile mapping\n\n\nfalse\n\n\n\n\n\n\ntemplate_name\n\n\nThe name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")\n\n\n\n\n\n\n\n\nprofile_name\n\n\nA custom name for the provisioning profile. This will replace the default provisioning profile name if specified\n\n\n\n\n\n\n\n\nfail_on_name_taken\n\n\nShould the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first\n\n\nfalse\n\n\n\n\n\n\nskip_certificate_matching\n\n\nSet to true if there is no access to Apple developer portal but there are certificates, keys and profiles provided. Only works with match import action\n\n\nfalse\n\n\n\n\n\n\noutput_path\n\n\nPath in which to export certificates, key and profile\n\n\n\n\n\n\n\n\nskip_set_partition_list\n\n\nSkips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing\n\n\nfalse\n\n\n\n\n\n\nverbose\n\n\nPrint out extra information and all commands\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nmatch\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::MATCH_PROVISIONING_PROFILE_MAPPING\n\n\nThe match provisioning profile mapping\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_TYPE\n\n\nThe profile type, can be appstore, adhoc, development, enterprise\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action match\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run match\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run match parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "match"
        },
        {
            "location": "/actions/match/#match",
            "text": "Alias for the  sync_code_signing  action",
            "title": "match"
        },
        {
            "location": "/actions/match/#easily-sync-your-certificates-and-profiles-across-your-team",
            "text": "A new approach to iOS and macOS code signing: Share one code signing identity across your development team to simplify your codesigning setup and prevent code signing issues.  match  is the implementation of the  codesigning.guide concept .  match  creates all required certificates & provisioning profiles and stores them in a separate git repository, Google Cloud, or Amazon S3. Every team member with access to the selected storage can use those credentials for code signing.  match  also automatically repairs broken and expired credentials. It's the easiest way to share signing credentials across teams  More information on how to get started with codesigning   \n     Why?  \u2022\n     Usage  \u2022\n     Is this secure?",
            "title": "Easily sync your certificates and profiles across your team"
        },
        {
            "location": "/actions/match/#why-match",
            "text": "Before starting to use  match , make sure to read the  codesigning.guide :   When deploying an app to the App Store, beta testing service or even installing it on a device, most development teams have separate code signing identities for every member. This results in dozens of profiles including a lot of duplicates.  You have to manually renew and download the latest set of provisioning profiles every time you add a new device or a certificate expires. Additionally this requires spending a lot of time when setting up a new machine that will build your app.   A new approach   Share one code signing identity across your development team to simplify your setup and prevent code signing issues. What if there was a central place where your code signing identity and profiles are kept, so anyone in the team can access them during the build process?   For more information about the concept, visit  codesigning.guide .",
            "title": "Why match?"
        },
        {
            "location": "/actions/match/#why-not-let-xcode-handle-all-this",
            "text": "You have full control over what happens  You have access to all the certificates and profiles, which are all securely stored in git  You share one code signing identity across the team to have fewer certificates and profiles  Xcode sometimes revokes certificates which breaks your setup causing failed builds  More predictable builds by settings profiles in an explicit way instead of using the  Automatic  setting  It just works\u2122",
            "title": "Why not let Xcode handle all this?"
        },
        {
            "location": "/actions/match/#what-does-match-do-for-you",
            "text": "match      \ud83d\udd04  Automatically sync your iOS and macOS keys and profiles across all your team members using git    \ud83d\udce6  Handle all the heavy lifting of creating and storing your certificates and profiles    \ud83d\udcbb  Setup codesigning on a new machine in under a minute    \ud83c\udfaf  Designed to work with apps with multiple targets and bundle identifiers    \ud83d\udd12  You have full control over your files and Git repo, no third party service involved    \u2728  Provisioning profile will always match the correct certificate    \ud83d\udca5  Easily reset your existing profiles and certificates if your current account has expired or invalid profiles    \u267b\ufe0f  Automatically renew your provisioning profiles to include all your devices using the  --force  option    \ud83d\udc65  Support for multiple Apple accounts and multiple teams    \u2728  Tightly integrated with  fastlane  to work seamlessly with  gym  and other build tools",
            "title": "What does match do for you?"
        },
        {
            "location": "/actions/match/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/actions/match/#setup",
            "text": "Optional: Create a  new, shared Apple Developer Portal account , something like  office@company.com , that will be shared across your team from now on (for more information visit  codesigning.guide )  Run the following in your project folder to start using  match :   fastlane match init   You'll be asked if you want to store your code signing identities inside a  Git repo ,  Google Cloud  or  Amazon S3 .",
            "title": "Setup"
        },
        {
            "location": "/actions/match/#git-storage",
            "text": "Use Git Storage to store all code signing identities in a private git repo, owned and operated by you. The files will be encrypted using OpenSSL.  First, enter the URL to your private (!) Git repo (You can create one for free on e.g.  GitHub  or  BitBucket ). The URL you enter can be either a  https://  or a  git  URL.  fastlane match init  won't read or modify your certificates or profiles yet, and also won't validate your git URL.  This will create a  Matchfile  in your current directory (or in your  ./fastlane/  folder).  Example content (for more advanced setups check out the  fastlane section ):  git_url(\"https://github.com/fastlane/certificates\")\n\napp_identifier(\"tools.fastlane.app\")\nusername(\"user@fastlane.tools\")",
            "title": "Git Storage"
        },
        {
            "location": "/actions/match/#git-storage-on-github",
            "text": "If your machine is currently using SSH to authenticate with GitHub, you'll want to use a  git  URL, otherwise, you may see an authentication error when you attempt to use match. Alternatively, you can set a basic authorization for  match :  Using parameter:  match(git_basic_authorization: '<YOUR KEY>')  Using environment variable:  ENV['MATCH_GIT_BASIC_AUTHORIZATION'] = '<YOUR KEY>'\nmatch  You can find more information about GitHub basic authentication and personal token generation here:  https://developer.github.com/v3/auth/#basic-authentication",
            "title": "Git Storage on GitHub"
        },
        {
            "location": "/actions/match/#git-storage-on-github-deploy-keys",
            "text": "If your machine does not have a private key set up for your certificates repository, you can give  match  a path for one:  Using parameter:  match(git_private_key: '<PATH TO YOUR KEY>')  Using environment variable:  ENV['MATCH_GIT_PRIVATE_KEY'] = '<PATH TO YOUR KEY>'\nmatch  You can find more information about GitHub basic authentication and personal token generation here:  https://developer.github.com/v3/auth/#basic-authentication",
            "title": "Git Storage on GitHub - Deploy keys"
        },
        {
            "location": "/actions/match/#git-storage-on-azure-devops",
            "text": "If you're running a pipeline on Azure DevOps and using git storage in a another repository on the same project, you might want to use  bearer  token authentication.  Using parameter:  match(git_bearer_authorization: '<YOUR TOKEN>')  Using environment variable:  ENV['MATCH_GIT_BEARER_AUTHORIZATION'] = '<YOUR TOKEN>'\nmatch  You can find more information about this use case here:  https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#authorize-access-to-your-repositories",
            "title": "Git Storage on Azure DevOps"
        },
        {
            "location": "/actions/match/#google-cloud-storage",
            "text": "Use  Google Cloud Storage  for a fully hosted solution for your code signing identities. Certificates are stored on Google Cloud, encrypted using Google managed keys. Everything will be stored on your Google account, inside a storage bucket you provide. You can also directly access the files using the web console.  This will create a  Matchfile  in your current directory (or in your  ./fastlane/  folder).  Example content (for more advanced setups check out the  fastlane section ):  google_cloud_bucket_name(\"major-key-certificates\")",
            "title": "Google Cloud Storage"
        },
        {
            "location": "/actions/match/#amazon-s3",
            "text": "Use  Amazon S3  for a fully hosted solution for your code signing identities. Certificates are stored on S3, inside a storage bucket you provide. You can also directly access the files using the web console.  This will create a  Matchfile  in your current directory (or in your  ./fastlane/  folder).  Example content (for more advanced setups check out the  fastlane section ):  s3_bucket(\"ios-certificates\")",
            "title": "Amazon S3"
        },
        {
            "location": "/actions/match/#multiple-teams",
            "text": "match  can store the codesigning files for multiple development teams:",
            "title": "Multiple teams"
        },
        {
            "location": "/actions/match/#git-storage_1",
            "text": "Use one git branch per team.  match  also supports storing certificates of multiple teams in one repo, by using separate git branches. If you work in multiple teams, make sure to set the  git_branch  parameter to a unique value per team. From there,  match  will automatically create and use the specified branch for you.  match(git_branch: \"team1\", username: \"user@team1.com\")\nmatch(git_branch: \"team2\", username: \"user@team2.com\")",
            "title": "Git Storage"
        },
        {
            "location": "/actions/match/#google-cloud-or-amazon-s3-storage",
            "text": "If you use Google Cloud or Amazon S3 Storage, you don't need to do anything manually. Just use Google Cloud or Amazon S3 Storage, and the top level folder will be the team ID.",
            "title": "Google Cloud or Amazon S3 Storage"
        },
        {
            "location": "/actions/match/#run",
            "text": "Before running  match  for the first time, you should consider clearing your existing profiles and certificates using the  match nuke command .   After running  fastlane match init  you can run the following to generate new certificates and profiles:  fastlane match appstore  fastlane match development   This will create a new certificate and provisioning profile (if required) and store them in your selected storage. \nIf you previously ran  match  with the configured storage it will automatically install the existing profiles from your storage.  The provisioning profiles are installed in  ~/Library/MobileDevice/Provisioning Profiles  while the certificates and private keys are installed in your Keychain.  To get a more detailed output of what  match  is doing use  fastlane match --verbose  For a list of all available options run  fastlane action match",
            "title": "Run"
        },
        {
            "location": "/actions/match/#handle-multiple-targets",
            "text": "match  can use the same one Git repository, Google Cloud, or Amazon S3 Storage for all bundle identifiers.  If you have several targets with different bundle identifiers, supply them as a comma-separated list:  fastlane match appstore -a tools.fastlane.app,tools.fastlane.app.watchkitapp  You can make this even easier using  fastlane  by creating a  certificates  lane like this:  lane :certificates do\n  match(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.app.watchkitapp\"])\nend  Then all your team has to do is run  fastlane certificates  and the keys, certificates and profiles for all targets will be synced.",
            "title": "Handle multiple targets"
        },
        {
            "location": "/actions/match/#handle-multiple-apps-per-developerdistribution-certificate",
            "text": "If you want to use a single developer and/or distribution certificate for multiple apps belonging to the same development team, you may use the same signing identities repository and branch to store the signing identities for your apps:  Matchfile  example for both App #1 and #2:  git_url(\"https://github.com/example/example-repo.git\")\ngit_branch(\"master\")  match  will reuse certificates and will create separate provisioning profiles for each app.",
            "title": "Handle multiple apps per developer/distribution certificate"
        },
        {
            "location": "/actions/match/#passphrase",
            "text": "Git Repo storage only  When running  match  for the first time on a new machine, it will ask you for the passphrase for the Git repository. This is an additional layer of security: each of the files will be encrypted using  openssl . Make sure to remember the password, as you'll need it when you run match on a different machine.  To set the passphrase to decrypt your profiles using an environment variable (and avoid the prompt) use  MATCH_PASSWORD .",
            "title": "Passphrase"
        },
        {
            "location": "/actions/match/#migrate-from-git-repo-to-google-cloud",
            "text": "If you're already using a Git Repo, but would like to switch to using Google Cloud Storage, run the following command to automatically migrate all your existing code signing identities and provisioning profiles  fastlane match migrate  After a successful migration you can safely delete your Git repo.",
            "title": "Migrate from Git Repo to Google Cloud"
        },
        {
            "location": "/actions/match/#google-cloud-access-control",
            "text": "Google Cloud Storage only  There are two cases for reading and writing certificates stored in a Google Cloud storage bucket:   Continuous integration jobs. These will authenticate to your Google Cloud project via a service account, and use a  gc_keys.json  file as credentials.  Developers on a local workstation. In this case, you should choose whether everyone on your team will create their own  gc_keys.json  file, or whether you want to manage access to the bucket directly using your developers' Google accounts.   When running  fastlane match init  the first time, the setup process will give you the option to create your  gc_keys.json  file. This file contains the authentication credentials needed to access your Google Cloud storage bucket. Make sure to keep that file secret and never add it to version control. We recommend adding  gc_keys.json  to your  .gitignore",
            "title": "Google Cloud access control"
        },
        {
            "location": "/actions/match/#managing-developer-access-via-keys",
            "text": "If you want to manage developer access to your certificates via authentication keys, every developer should create their own  gc_keys.json  and add the file to all their work machines. This will give the admin full control over who has read/write access to the given Storage bucket. At the same time it allows your team to revoke a single key if a file gets compromised.",
            "title": "Managing developer access via keys"
        },
        {
            "location": "/actions/match/#managing-developer-access-via-google-accounts",
            "text": "If your developers already have Google accounts and access to your Google Cloud project, you can also manage access to the storage bucket via  Cloud Identity and Access Management (IAM) . Just  set up  individual developer accounts or an entire Google Group containing your team as readers and writers on your storage bucket.  You can then specify the Google Cloud project id containing your storage bucket in your  Matchfile :  storage_mode(\"google_cloud\")\ngoogle_cloud_bucket_name(\"my-app-certificates\")\ngoogle_cloud_project_id(\"my-app-project\")  This lets developers on your team use  Application Default Credentials  when accessing your storage bucket. After installing the  Google Cloud SDK , they only need to run the following command once:  gcloud auth application-default login  ... and log in with their Google account. Then, when they run  fastlane match ,  match  will use these credentials to read from and write to the storage bucket.",
            "title": "Managing developer access via Google accounts"
        },
        {
            "location": "/actions/match/#new-machine",
            "text": "To set up the certificates and provisioning profiles on a new machine, you just run the same command using:  fastlane match development  You can also run  match  in a  readonly  mode to be sure it won't create any new certificates or profiles.  fastlane match development --readonly  We recommend to always use  readonly  mode when running  fastlane  on CI systems. This can be done using  lane :beta do\n  match(type: \"appstore\", readonly: is_ci)\n\n  gym(scheme: \"Release\")\nend",
            "title": "New machine"
        },
        {
            "location": "/actions/match/#access-control",
            "text": "A benefit of using  match  is that it enables you to give the developers of your team access to the code signing certificates without having to give everyone access to the Developer Portal:   Run  match  to store the certificates in a Git repo or Google Cloud Storage  Grant access to the Git repo / Google Cloud Storage Bucket to your developers and give them the passphrase (for git storage)  The developers can now run  match  which will install the latest code signing profiles so they can build and sign the application without having to have access to the Apple Developer Portal  Every time you run  match  to update the profiles (e.g. add a new device), all your developers will automatically get the latest profiles when running  match   If you decide to run  match  without access to the Developer Portal, make sure to use the  --readonly  option so that the commands don't ask you for the password to the Developer Portal.  The advantage of this approach is that no one in your team will revoke a certificate by mistake, while having all code signing secrets in one location.",
            "title": "Access Control"
        },
        {
            "location": "/actions/match/#folder-structure",
            "text": "After running  match  for the first time, your Git repo or Google Cloud bucket will contain 2 directories:   The  certs  folder contains all certificates with their private keys  The  profiles  folder contains all provisioning profiles   Additionally,  match  creates a nice repo  README.md  for you, making it easy to onboard new team members:  \n     In the case of Google Cloud, the top level folder will be the team ID.",
            "title": "Folder structure"
        },
        {
            "location": "/actions/match/#fastlane",
            "text": "Add  match  to your  Fastfile  to automatically fetch the latest code signing certificates with  fastlane .  match(type: \"appstore\")\n\nmatch(type: \"development\")\n\nmatch(type: \"adhoc\",\n      app_identifier: \"tools.fastlane.app\")\n\nmatch(type: \"enterprise\",\n      app_identifier: \"tools.fastlane.app\")\n\n# _match_ should be called before building the app with _gym_\ngym\n# ...",
            "title": "fastlane"
        },
        {
            "location": "/actions/match/#registering-new-devices",
            "text": "By using  match , you'll save a lot of time every time you add new device to your Ad Hoc or Development profiles. Use  match  in combination with the  register_devices  action.  lane :beta do\n  register_devices(devices_file: \"./devices.txt\")\n  match(type: \"adhoc\", force_for_new_devices: true)\nend  By using the  force_for_new_devices  parameter,  match  will check if the (enabled) device count has changed since the last time you ran  match , and automatically re-generate the provisioning profile if necessary. You can also use  force: true  to re-generate the provisioning profile on each run.  Important:  The  force_for_new_devices  parameter is ignored for App Store provisioning profiles since they don't contain any device information.  If you're not using  fastlane , you can also use the  force_for_new_devices  option from the command line:  fastlane match adhoc --force_for_new_devices",
            "title": "Registering new devices"
        },
        {
            "location": "/actions/match/#templates-aka-custom-entitlements",
            "text": "Match can generate profiles that contain custom entitlements by passing in the entitlement's name with the  template_name  parameter.  match(type: \"development\",\n      template_name: \"Apple Pay Pass Suppression Development\")",
            "title": "Templates (aka: custom entitlements)"
        },
        {
            "location": "/actions/match/#setup-xcode-project",
            "text": "Docs on how to set up your Xcode project",
            "title": "Setup Xcode project"
        },
        {
            "location": "/actions/match/#to-build-from-the-command-line-using-fastlane",
            "text": "match  automatically pre-fills environment variables with the UUIDs of the correct provisioning profiles, ready to be used in your Xcode project.  More information about how to setup your Xcode project can be found  here",
            "title": "To build from the command line using fastlane"
        },
        {
            "location": "/actions/match/#to-build-from-xcode-manually",
            "text": "This is useful when installing your application on your device using the Development profile.  You can statically select the right provisioning profile in your Xcode project (the name will be  match Development tools.fastlane.app ).  Docs on how to set up your Xcode project",
            "title": "To build from Xcode manually"
        },
        {
            "location": "/actions/match/#continuous-integration",
            "text": "",
            "title": "Continuous Integration"
        },
        {
            "location": "/actions/match/#git-repo-access",
            "text": "There is one tricky part of setting up a CI system to work with  match , which is enabling the CI to access the repo. Usually you'd just add your CI's public ssh key as a deploy key to your  match  repo, but since your CI will already likely be using its public ssh key to access the codebase repo,  you won't be able to do that .  Some repo hosts might allow you to use the same deploy key for different repos, but GitHub will not. If your host does, you don't need to worry about this, just add your CI's public ssh key as a deploy key for your  match  repo and scroll down to \" Encryption password \".  There are a few ways around this:   Create a new account on your repo host with read-only access to your  match  repo. Bitrise have a good description of this  here .  Some CIs allow you to upload your signing credentials manually, but obviously this means that you'll have to re-upload the profiles/keys/certs each time they change.   Neither solution is pretty. It's one of those  trade-off  things. Do you care more about  not  having an extra account sitting around, or do you care more about having the :sparkles: of auto-syncing of credentials.",
            "title": "Git repo access"
        },
        {
            "location": "/actions/match/#git-repo-encryption-password",
            "text": "Once you've decided which approach to take, all that's left to do is to set your encryption password as secret environment variable named  MATCH_PASSWORD .  match  will pick this up when it's run.",
            "title": "Git repo encryption password"
        },
        {
            "location": "/actions/match/#google-cloud-storage-access",
            "text": "Accessing Google Cloud Storage from your CI system requires you to provide the  gc_keys.json  file as part of your build. How you implement this is your decision. You can inject that file during build time.",
            "title": "Google Cloud Storage access"
        },
        {
            "location": "/actions/match/#amazon-s3-storage-access",
            "text": "Accessing Amazon S3 Storage from your CI system requires you to provide the  s3_region ,  s3_access_key ,  s3_secret_access_key  and  s3_bucket  options (or environment variables), with keys that has read access to the bucket.",
            "title": "Amazon S3 Storage access"
        },
        {
            "location": "/actions/match/#nuke",
            "text": "If you never really cared about code signing and have a messy Apple Developer account with a lot of invalid, expired or Xcode managed profiles/certificates, you can use the  match nuke  command to revoke your certificates and provisioning profiles. Don't worry, apps that are already available in the App Store / TestFlight will still work. Builds distributed via Ad Hoc or Enterprise will be disabled after nuking your account, so you'll have to re-upload a new build. After clearing your account you'll start from a clean state, and you can run  match  to generate your certificates and profiles again.  To revoke all certificates and provisioning profiles for a specific environment:  fastlane match nuke development\nfastlane match nuke distribution\nfastlane match nuke enterprise   You'll have to confirm a list of profiles / certificates that will be deleted.",
            "title": "Nuke"
        },
        {
            "location": "/actions/match/#advanced-git-storage-features",
            "text": "",
            "title": "Advanced Git Storage features"
        },
        {
            "location": "/actions/match/#change-password",
            "text": "To change the password of your repo and therefore decrypting and encrypting all files run:  fastlane match change_password  You'll be asked for the new password on all your machines on the next run.",
            "title": "Change Password"
        },
        {
            "location": "/actions/match/#import",
            "text": "To import and encrypt a certificate ( .cer ), the private key ( .p12 ) and the provisioning profiles ( .mobileprovision  or  .provisionprofile ) into the  match  repo run:  fastlane match import  You'll be prompted for the certificate ( .cer ), the private key ( .p12 ) and the provisioning profiles ( .mobileprovision  or  .provisionprofile ) paths.  match  will first validate the certificate ( .cer ) against the Developer Portal before importing the certificate, the private key and the provisioning profiles into the specified  match  repository.  However if there is no access to the developer portal but there are certificates, private keys and profiles provided, you can use the  skip_certificate_matching  option to tell  match  not to verify the certificates. Like this:  fastlane match import --skip_certificate_matching true  This will skip login to Apple Developer Portal and will import the provided certificate, private key and profile directly to the certificates repo.  Please be careful when using this option and ensure the certificates and profiles match the type (development, adhoc, appstore, enterprise, developer_id) and are not revoked or expired.",
            "title": "Import"
        },
        {
            "location": "/actions/match/#manual-decrypt",
            "text": "If you want to manually decrypt a file you can.  openssl aes-256-cbc -k \"<password>\" -in \"<fileYouWantToDecryptPath>\" -out \"<decryptedFilePath>\" -a -d",
            "title": "Manual Decrypt"
        },
        {
            "location": "/actions/match/#export-distribution-certificate-and-private-key-as-single-p12-file",
            "text": "match  stores the certificate ( .cer ) and the private key ( .p12 ) files separately. The following steps will repackage the separate certificate and private key into a single  .p12  file.  Decrypt your cert found in  certs/<type>/<unique-id>.cer  as a pem file:  openssl aes-256-cbc -k \"<password>\" -in \"certs/<type>/<unique-id>.cer\" -out \"cert.der\" -a -d -md [md5|sha256]\nopenssl x509 -inform der -in cert.der -out cert.pem  Decrypt your private key found in  certs/<type>/<unique-id>.p12  as a pem file:  openssl aes-256-cbc -k \"<password>\" -in \"certs/distribution/<unique-id>.p12\" -out \"key.pem\" -a -d -md [md5|sha256]  Generate an encrypted p12 file with the same or new password:  openssl pkcs12 -export -out \"cert.p12\" -inkey \"key.pem\" -in \"cert.pem\" -password pass:<password>",
            "title": "Export Distribution Certificate and Private Key as Single .p12 File"
        },
        {
            "location": "/actions/match/#is-this-secure",
            "text": "",
            "title": "Is this secure?"
        },
        {
            "location": "/actions/match/#git",
            "text": "Both your keys and provisioning profiles are encrypted using OpenSSL using a passphrase.  Storing your private keys in a Git repo may sound off-putting at first. We did an analysis of potential security issues, see section below.",
            "title": "Git"
        },
        {
            "location": "/actions/match/#google-cloud-storage_1",
            "text": "All your keys and provisioning profiles are encrypted using Google managed keys.",
            "title": "Google Cloud Storage"
        },
        {
            "location": "/actions/match/#what-could-happen-if-someone-stole-a-private-key",
            "text": "If attackers would have your certificate and provisioning profile, they could codesign an application with the same bundle identifier.  What's the worst that could happen for each of the profile types?",
            "title": "What could happen if someone stole a private key?"
        },
        {
            "location": "/actions/match/#app-store-profiles",
            "text": "An App Store profile can't be used for anything as long as it's not re-signed by Apple. The only way to get an app resigned is to submit an app for review which could take anywhere from 24 hours to a few days (checkout  appreviewtimes.com  for up-to-date expectations). Attackers could only submit an app for review, if they also got access to your App Store Connect credentials (which are not stored in git, but in your local keychain). Additionally you get an email notification every time a build gets uploaded to cancel the submission even before your app gets into the review stage.",
            "title": "App Store Profiles"
        },
        {
            "location": "/actions/match/#development-and-ad-hoc-profiles",
            "text": "In general those profiles are harmless as they can only be used to install a signed application on a small subset of devices. To add new devices, the attacker would also need your Apple Developer Portal credentials (which are not stored in git, but in your local keychain).",
            "title": "Development and Ad Hoc Profiles"
        },
        {
            "location": "/actions/match/#enterprise-profiles",
            "text": "Attackers could use an In-House profile to distribute signed application to a potentially unlimited number of devices. All this would run under your company name and it could eventually lead to Apple revoking your In-House account. However it is very easy to revoke a certificate to remotely break the app on all devices.  Because of the potentially dangerous nature of In-House profiles please use  match  with enterprise profiles with caution, ensure your git repository is private and use a secure password.",
            "title": "Enterprise Profiles"
        },
        {
            "location": "/actions/match/#to-sum-up",
            "text": "You have full control over the access list of your Git repo, no third party service involved  Even if your certificates are leaked, they can't be used to cause any harm without your App Store Connect login credentials  Use In-House enterprise profile with  match  with caution  If you use GitHub or Bitbucket we encourage enabling 2 factor authentication for all accounts that have access to the certificates repo  The complete source code of  match  is fully open source on  GitHub       match       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "To sum up"
        },
        {
            "location": "/actions/match/#4-examples",
            "text": "sync_code_signing(type: \"appstore\", app_identifier: \"tools.fastlane.app\")  sync_code_signing(type: \"development\", readonly: true)  sync_code_signing(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.sleepy\"])  match   # alias for \"sync_code_signing\"",
            "title": "4 Examples"
        },
        {
            "location": "/actions/match/#parameters",
            "text": "Key  Description  Default      type  Define the profile type, can be appstore, adhoc, development, enterprise, developer_id, mac_installer_distribution  development    additional_cert_types  Create additional cert types needed for macOS installers (valid values: mac_installer_distribution, developer_id_installer)     readonly  Only fetch existing certificates and profiles, don't generate new ones  false    generate_apple_certs  Create a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)  *    skip_provisioning_profiles  Skip syncing provisioning profiles  false    app_identifier  The bundle identifier(s) of your app (comma-separated string or array of strings)  *    api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    storage_mode  Define where you want to store your certificates  git    git_url  URL to the git repo containing all the certificates     git_branch  Specific git branch to use  master    git_full_name  git user full name to commit     git_user_email  git user email to commit     shallow_clone  Make a shallow clone of the repository (truncate the history to 1 revision)  false    clone_branch_directly  Clone just the branch specified, instead of the whole repo. This requires that the branch already exists. Otherwise the command will fail  false    git_basic_authorization  Use a basic authorization header to access the git repo (e.g.: access via HTTPS, GitHub Actions, etc), usually a string in Base64     git_bearer_authorization  Use a bearer authorization header to access the git repo (e.g.: access to an Azure DevOps repository), usually a string in Base64     git_private_key  Use a private key to access the git repo (e.g.: access to GitHub repository via Deploy keys), usually a id_rsa named file or the contents hereof     google_cloud_bucket_name  Name of the Google Cloud Storage bucket to use     google_cloud_keys_file  Path to the gc_keys.json file     google_cloud_project_id  ID of the Google Cloud project to use for authentication     s3_region  Name of the S3 region     s3_access_key  S3 access key     s3_secret_access_key  S3 secret access key     s3_bucket  Name of the S3 bucket     s3_object_prefix  Prefix to be used on all objects uploaded to S3     keychain_name  Keychain the items should be imported to  login.keychain    keychain_password  This might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password     force  Renew the provisioning profiles every time you run match  false    force_for_new_devices  Renew the provisioning profiles if the device count on the developer portal has changed. Ignored for profile type 'appstore'  false    skip_confirmation  Disables confirmation prompts during nuke, answering them with yes  false    skip_docs  Skip generation of a README.md for the created git repository  false    platform  Set the provisioning profile's platform to work with (i.e. ios, tvos, macos, catalyst)  *    derive_catalyst_app_identifier  Enable this if you have the Mac Catalyst capability enabled and your project was created with Xcode 11.3 or earlier. Prepends 'maccatalyst.' to the app identifier for the provisioning profile mapping  false    template_name  The name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")     profile_name  A custom name for the provisioning profile. This will replace the default provisioning profile name if specified     fail_on_name_taken  Should the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first  false    skip_certificate_matching  Set to true if there is no access to Apple developer portal but there are certificates, keys and profiles provided. Only works with match import action  false    output_path  Path in which to export certificates, key and profile     skip_set_partition_list  Skips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing  false    verbose  Print out extra information and all commands  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/match/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  match  action generates the following Lane Variables:     SharedValue  Description      SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING  The match provisioning profile mapping    SharedValues::SIGH_PROFILE_TYPE  The profile type, can be appstore, adhoc, development, enterprise     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/match/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action match",
            "title": "Documentation"
        },
        {
            "location": "/actions/match/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run match  To pass parameters, make use of the  :  symbol, for example  fastlane run match parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/match/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/min_fastlane_version/",
            "text": "min_fastlane_version\n\n\nVerifies the minimum fastlane version required\n\n\n\n\nAdd this to your \nFastfile\n to require a certain version of \nfastlane\n.\nUse it if you use an action that just recently came out and you need it.\n\n\n\n\n\n\n\n\n\n\nmin_fastlane_version\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nmin_fastlane_version(\"1.50.0\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action min_fastlane_version\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run min_fastlane_version\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run min_fastlane_version parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "min_fastlane_version"
        },
        {
            "location": "/actions/min_fastlane_version/#min_fastlane_version",
            "text": "Verifies the minimum fastlane version required   Add this to your  Fastfile  to require a certain version of  fastlane . Use it if you use an action that just recently came out and you need it.      min_fastlane_version       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "min_fastlane_version"
        },
        {
            "location": "/actions/min_fastlane_version/#1-example",
            "text": "min_fastlane_version(\"1.50.0\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/min_fastlane_version/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action min_fastlane_version",
            "title": "Documentation"
        },
        {
            "location": "/actions/min_fastlane_version/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run min_fastlane_version  To pass parameters, make use of the  :  symbol, for example  fastlane run min_fastlane_version parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/min_fastlane_version/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/modify_services/",
            "text": "modify_services\n\n\nModifies the services of the app created on Developer Portal\n\n\n\n\nThe options are the same as \n:enable_services\n in the \nproduce action\n\n\n\n\n\n\n\n\n\n\nmodify_services\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@bhimsenpadalkar\n\n\n\n\n\n\n\n\n1 Example\n\n\nmodify_services(\n  username: \"test.account@gmail.com\",\n  app_identifier: \"com.someorg.app\",\n  services: {\n    push_notification: \"on\",\n    associated_domains: \"off\",\n    wallet: :on,\n    apple_pay: :off,\n    data_protection: true,\n    multipath: false\n  })\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nApp Identifier (Bundle ID, e.g. com.krausefx.app)\n\n\n*\n\n\n\n\n\n\nservices\n\n\nArray with Spaceship App Services (e.g. access_wifi: (on|off)(:on|:off)(true|false), app_group: (on|off)(:on|:off)(true|false), apple_pay: (on|off)(:on|:off)(true|false), associated_domains: (on|off)(:on|:off)(true|false), auto_fill_credential: (on|off)(:on|:off)(true|false), data_protection: (complete|unlessopen|untilfirstauth)(:on|:off)(true|false), game_center: (on|off)(:on|:off)(true|false), health_kit: (on|off)(:on|:off)(true|false), home_kit: (on|off)(:on|:off)(true|false), hotspot: (on|off)(:on|:off)(true|false), icloud: (legacy|cloudkit)(:on|:off)(true|false), in_app_purchase: (on|off)(:on|:off)(true|false), inter_app_audio: (on|off)(:on|:off)(true|false), multipath: (on|off)(:on|:off)(true|false), network_extension: (on|off)(:on|:off)(true|false), nfc_tag_reading: (on|off)(:on|:off)(true|false), personal_vpn: (on|off)(:on|:off)(true|false), passbook: (on|off)(:on|:off)(true|false), push_notification: (on|off)(:on|:off)(true|false), siri_kit: (on|off)(:on|:off)(true|false), vpn_configuration: (on|off)(:on|:off)(true|false), wallet: (on|off)(:on|:off)(true|false), wireless_accessory: (on|off)(:on|:off)(true|false))\n\n\n{}\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action modify_services\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run modify_services\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run modify_services parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "modify_services"
        },
        {
            "location": "/actions/modify_services/#modify_services",
            "text": "Modifies the services of the app created on Developer Portal   The options are the same as  :enable_services  in the  produce action      modify_services       Supported platforms  ios    Author  @bhimsenpadalkar",
            "title": "modify_services"
        },
        {
            "location": "/actions/modify_services/#1-example",
            "text": "modify_services(\n  username: \"test.account@gmail.com\",\n  app_identifier: \"com.someorg.app\",\n  services: {\n    push_notification: \"on\",\n    associated_domains: \"off\",\n    wallet: :on,\n    apple_pay: :off,\n    data_protection: true,\n    multipath: false\n  })",
            "title": "1 Example"
        },
        {
            "location": "/actions/modify_services/#parameters",
            "text": "Key  Description  Default      username  Your Apple ID Username  *    app_identifier  App Identifier (Bundle ID, e.g. com.krausefx.app)  *    services  Array with Spaceship App Services (e.g. access_wifi: (on|off)(:on|:off)(true|false), app_group: (on|off)(:on|:off)(true|false), apple_pay: (on|off)(:on|:off)(true|false), associated_domains: (on|off)(:on|:off)(true|false), auto_fill_credential: (on|off)(:on|:off)(true|false), data_protection: (complete|unlessopen|untilfirstauth)(:on|:off)(true|false), game_center: (on|off)(:on|:off)(true|false), health_kit: (on|off)(:on|:off)(true|false), home_kit: (on|off)(:on|:off)(true|false), hotspot: (on|off)(:on|:off)(true|false), icloud: (legacy|cloudkit)(:on|:off)(true|false), in_app_purchase: (on|off)(:on|:off)(true|false), inter_app_audio: (on|off)(:on|:off)(true|false), multipath: (on|off)(:on|:off)(true|false), network_extension: (on|off)(:on|:off)(true|false), nfc_tag_reading: (on|off)(:on|:off)(true|false), personal_vpn: (on|off)(:on|:off)(true|false), passbook: (on|off)(:on|:off)(true|false), push_notification: (on|off)(:on|:off)(true|false), siri_kit: (on|off)(:on|:off)(true|false), vpn_configuration: (on|off)(:on|:off)(true|false), wallet: (on|off)(:on|:off)(true|false), wireless_accessory: (on|off)(:on|:off)(true|false))  {}    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/modify_services/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action modify_services",
            "title": "Documentation"
        },
        {
            "location": "/actions/modify_services/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run modify_services  To pass parameters, make use of the  :  symbol, for example  fastlane run modify_services parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/modify_services/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/nexus_upload/",
            "text": "nexus_upload\n\n\nUpload a file to \nSonatype Nexus platform\n\n\n\n\n\n\n\n\nnexus_upload\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@xfreebird, @mdio\n\n\n\n\n\n\n\n\n2 Examples\n\n\n# for Nexus 2\nnexus_upload(\n  file: \"/path/to/file.ipa\",\n  repo_id: \"artefacts\",\n  repo_group_id: \"com.fastlane\",\n  repo_project_name: \"ipa\",\n  repo_project_version: \"1.13\",\n  repo_classifier: \"dSYM\", # Optional\n  endpoint: \"http://localhost:8081\",\n  username: \"admin\",\n  password: \"admin123\"\n)\n\n\n\n\n# for Nexus 3\nnexus_upload(\n  nexus_version: 3,\n  mount_path: \"\",\n  file: \"/path/to/file.ipa\",\n  repo_id: \"artefacts\",\n  repo_group_id: \"com.fastlane\",\n  repo_project_name: \"ipa\",\n  repo_project_version: \"1.13\",\n  repo_classifier: \"dSYM\", # Optional\n  endpoint: \"http://localhost:8081\",\n  username: \"admin\",\n  password: \"admin123\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfile\n\n\nFile to be uploaded to Nexus\n\n\n\n\n\n\n\n\nrepo_id\n\n\nNexus repository id e.g. artefacts\n\n\n\n\n\n\n\n\nrepo_group_id\n\n\nNexus repository group id e.g. com.company\n\n\n\n\n\n\n\n\nrepo_project_name\n\n\nNexus repository commandect name. Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed\n\n\n\n\n\n\n\n\nrepo_project_version\n\n\nNexus repository commandect version\n\n\n\n\n\n\n\n\nrepo_classifier\n\n\nNexus repository artifact classifier (optional)\n\n\n\n\n\n\n\n\nendpoint\n\n\nNexus endpoint e.g. http://nexus:8081\n\n\n\n\n\n\n\n\nmount_path\n\n\nNexus mount path (Nexus 3 instances have this configured as empty by default)\n\n\n/nexus\n\n\n\n\n\n\nusername\n\n\nNexus username\n\n\n\n\n\n\n\n\npassword\n\n\nNexus password\n\n\n\n\n\n\n\n\nssl_verify\n\n\nVerify SSL\n\n\ntrue\n\n\n\n\n\n\nnexus_version\n\n\nNexus major version\n\n\n2\n\n\n\n\n\n\nverbose\n\n\nMake detailed output\n\n\nfalse\n\n\n\n\n\n\nproxy_username\n\n\nProxy username\n\n\n\n\n\n\n\n\nproxy_password\n\n\nProxy password\n\n\n\n\n\n\n\n\nproxy_address\n\n\nProxy address\n\n\n\n\n\n\n\n\nproxy_port\n\n\nProxy port\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action nexus_upload\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run nexus_upload\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run nexus_upload parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "nexus_upload"
        },
        {
            "location": "/actions/nexus_upload/#nexus_upload",
            "text": "Upload a file to  Sonatype Nexus platform     nexus_upload       Supported platforms  ios, android, mac    Author  @xfreebird, @mdio",
            "title": "nexus_upload"
        },
        {
            "location": "/actions/nexus_upload/#2-examples",
            "text": "# for Nexus 2\nnexus_upload(\n  file: \"/path/to/file.ipa\",\n  repo_id: \"artefacts\",\n  repo_group_id: \"com.fastlane\",\n  repo_project_name: \"ipa\",\n  repo_project_version: \"1.13\",\n  repo_classifier: \"dSYM\", # Optional\n  endpoint: \"http://localhost:8081\",\n  username: \"admin\",\n  password: \"admin123\"\n)  # for Nexus 3\nnexus_upload(\n  nexus_version: 3,\n  mount_path: \"\",\n  file: \"/path/to/file.ipa\",\n  repo_id: \"artefacts\",\n  repo_group_id: \"com.fastlane\",\n  repo_project_name: \"ipa\",\n  repo_project_version: \"1.13\",\n  repo_classifier: \"dSYM\", # Optional\n  endpoint: \"http://localhost:8081\",\n  username: \"admin\",\n  password: \"admin123\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/nexus_upload/#parameters",
            "text": "Key  Description  Default      file  File to be uploaded to Nexus     repo_id  Nexus repository id e.g. artefacts     repo_group_id  Nexus repository group id e.g. com.company     repo_project_name  Nexus repository commandect name. Only letters, digits, underscores(_), hyphens(-), and dots(.) are allowed     repo_project_version  Nexus repository commandect version     repo_classifier  Nexus repository artifact classifier (optional)     endpoint  Nexus endpoint e.g. http://nexus:8081     mount_path  Nexus mount path (Nexus 3 instances have this configured as empty by default)  /nexus    username  Nexus username     password  Nexus password     ssl_verify  Verify SSL  true    nexus_version  Nexus major version  2    verbose  Make detailed output  false    proxy_username  Proxy username     proxy_password  Proxy password     proxy_address  Proxy address     proxy_port  Proxy port      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/nexus_upload/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action nexus_upload",
            "title": "Documentation"
        },
        {
            "location": "/actions/nexus_upload/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run nexus_upload  To pass parameters, make use of the  :  symbol, for example  fastlane run nexus_upload parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/nexus_upload/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/notarize/",
            "text": "notarize\n\n\nNotarizes a macOS app\n\n\n\n\n\n\n\n\nnotarize\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nmac\n\n\n\n\n\n\nAuthor\n\n\n@zeplin\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage\n\n\nPath to package to notarize, e.g. .app bundle or disk image\n\n\n\n\n\n\n\n\ntry_early_stapling\n\n\nWhether to try early stapling while the notarization request is in progress\n\n\nfalse\n\n\n\n\n\n\nbundle_id\n\n\nBundle identifier to uniquely identify the package\n\n\n\n\n\n\n\n\nusername\n\n\nApple ID username\n\n\n*\n\n\n\n\n\n\nasc_provider\n\n\nProvider short name for accounts associated with multiple providers\n\n\n\n\n\n\n\n\nprint_log\n\n\nWhether to print notarization log file, listing issues on failure and warnings on success\n\n\nfalse\n\n\n\n\n\n\nverbose\n\n\nWhether to log requests\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action notarize\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run notarize\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run notarize parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "notarize"
        },
        {
            "location": "/actions/notarize/#notarize",
            "text": "Notarizes a macOS app     notarize       Supported platforms  mac    Author  @zeplin",
            "title": "notarize"
        },
        {
            "location": "/actions/notarize/#parameters",
            "text": "Key  Description  Default      package  Path to package to notarize, e.g. .app bundle or disk image     try_early_stapling  Whether to try early stapling while the notarization request is in progress  false    bundle_id  Bundle identifier to uniquely identify the package     username  Apple ID username  *    asc_provider  Provider short name for accounts associated with multiple providers     print_log  Whether to print notarization log file, listing issues on failure and warnings on success  false    verbose  Whether to log requests  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/notarize/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action notarize",
            "title": "Documentation"
        },
        {
            "location": "/actions/notarize/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run notarize  To pass parameters, make use of the  :  symbol, for example  fastlane run notarize parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/notarize/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/notification/",
            "text": "notification\n\n\nDisplay a macOS notification with custom message and title\n\n\n\n\n\n\n\n\nnotification\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@champo, @cbowns, @KrauseFx, @amarcadet, @dusek\n\n\n\n\n\n\n\n\n1 Example\n\n\nnotification(subtitle: \"Finished Building\", message: \"Ready to upload...\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nThe title to display in the notification\n\n\nfastlane\n\n\n\n\n\n\nsubtitle\n\n\nA subtitle to display in the notification\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message to display in the notification\n\n\n\n\n\n\n\n\nsound\n\n\nThe name of a sound to play when the notification appears (names are listed in Sound Preferences)\n\n\n\n\n\n\n\n\nactivate\n\n\nBundle identifier of application to be opened when the notification is clicked\n\n\n\n\n\n\n\n\napp_icon\n\n\nThe URL of an image to display instead of the application icon (Mavericks+ only)\n\n\n\n\n\n\n\n\ncontent_image\n\n\nThe URL of an image to display attached to the notification (Mavericks+ only)\n\n\n\n\n\n\n\n\nopen\n\n\nURL of the resource to be opened when the notification is clicked\n\n\n\n\n\n\n\n\nexecute\n\n\nShell command to run when the notification is clicked\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action notification\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run notification\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run notification parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "notification"
        },
        {
            "location": "/actions/notification/#notification",
            "text": "Display a macOS notification with custom message and title     notification       Supported platforms  ios, android, mac    Author  @champo, @cbowns, @KrauseFx, @amarcadet, @dusek",
            "title": "notification"
        },
        {
            "location": "/actions/notification/#1-example",
            "text": "notification(subtitle: \"Finished Building\", message: \"Ready to upload...\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/notification/#parameters",
            "text": "Key  Description  Default      title  The title to display in the notification  fastlane    subtitle  A subtitle to display in the notification     message  The message to display in the notification     sound  The name of a sound to play when the notification appears (names are listed in Sound Preferences)     activate  Bundle identifier of application to be opened when the notification is clicked     app_icon  The URL of an image to display instead of the application icon (Mavericks+ only)     content_image  The URL of an image to display attached to the notification (Mavericks+ only)     open  URL of the resource to be opened when the notification is clicked     execute  Shell command to run when the notification is clicked      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/notification/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action notification",
            "title": "Documentation"
        },
        {
            "location": "/actions/notification/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run notification  To pass parameters, make use of the  :  symbol, for example  fastlane run notification parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/notification/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/notify/",
            "text": "notify\n\n\nShows a macOS notification - use \nnotification\n instead\n\n\n\n\nIt's recommended to use the new \nnotification\n action instead of \nnotify\n\n\n\n\n\n\n\n\n\n\nnotify\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@champo, @KrauseFx\n\n\n\n\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action notify\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run notify\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run notify parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "notify"
        },
        {
            "location": "/actions/notify/#notify",
            "text": "Shows a macOS notification - use  notification  instead   It's recommended to use the new  notification  action instead of  notify      notify       Supported platforms  ios, android, mac    Author  @champo, @KrauseFx",
            "title": "notify"
        },
        {
            "location": "/actions/notify/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action notify",
            "title": "Documentation"
        },
        {
            "location": "/actions/notify/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run notify  To pass parameters, make use of the  :  symbol, for example  fastlane run notify parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/notify/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/number_of_commits/",
            "text": "number_of_commits\n\n\nReturn the number of commits in current git branch\n\n\n\n\nYou can use this action to get the number of commits of this branch. This is useful if you want to set the build number to the number of commits. See \nfastlane actions number_of_commits\n for more details.\n\n\n\n\n\n\n\n\n\n\nnumber_of_commits\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@onevcat, @samuelbeek\n\n\n\n\n\n\nReturns\n\n\nThe total number of all commits in current git branch\n\n\n\n\n\n\n\n\n2 Examples\n\n\nincrement_build_number(build_number: number_of_commits)\n\n\n\n\nbuild_number = number_of_commits(all: true)\nincrement_build_number(build_number: build_number)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nall\n\n\nReturns number of all commits instead of current branch\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action number_of_commits\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run number_of_commits\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run number_of_commits parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "number_of_commits"
        },
        {
            "location": "/actions/number_of_commits/#number_of_commits",
            "text": "Return the number of commits in current git branch   You can use this action to get the number of commits of this branch. This is useful if you want to set the build number to the number of commits. See  fastlane actions number_of_commits  for more details.      number_of_commits       Supported platforms  ios, android, mac    Author  @onevcat, @samuelbeek    Returns  The total number of all commits in current git branch",
            "title": "number_of_commits"
        },
        {
            "location": "/actions/number_of_commits/#2-examples",
            "text": "increment_build_number(build_number: number_of_commits)  build_number = number_of_commits(all: true)\nincrement_build_number(build_number: build_number)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/number_of_commits/#parameters",
            "text": "Key  Description  Default      all  Returns number of all commits instead of current branch      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/number_of_commits/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action number_of_commits",
            "title": "Documentation"
        },
        {
            "location": "/actions/number_of_commits/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run number_of_commits  To pass parameters, make use of the  :  symbol, for example  fastlane run number_of_commits parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/number_of_commits/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/oclint/",
            "text": "oclint\n\n\nLints implementation files with OCLint\n\n\n\n\nRun the static analyzer tool \nOCLint\n for your project. You need to have a \ncompile_commands.json\n file in your \nfastlane\n directory or pass a path to your file.\n\n\n\n\n\n\n\n\n\n\noclint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@HeEAaD\n\n\n\n\n\n\n\n\n1 Example\n\n\noclint(\n  compile_commands: \"commands.json\",    # The JSON compilation database, use xctool reporter \"json-compilation-database\"\n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,    # Exclude all files matching this regex\n  report_type: \"pmd\",         # The type of the report (default: html)\n  max_priority_1: 10,         # The max allowed number of priority 1 violations\n  max_priority_2: 100,        # The max allowed number of priority 2 violations\n  max_priority_3: 1000,       # The max allowed number of priority 3 violations\n  thresholds: [     # Override the default behavior of rules\n    \"LONG_LINE=200\",\n    \"LONG_METHOD=200\"\n  ],\n  enable_rules: [   # List of rules to pick explicitly\n    \"DoubleNegative\",\n    \"SwitchStatementsDon'TNeedDefaultWhenFullyCovered\"\n  ],\n  disable_rules: [\"GotoStatement\"],     # List of rules to disable\n  list_enabled_rules: true,   # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true,    # Allow duplicated violations in the OCLint report\n  extra_arg: \"-Wno-everything\"# Additional argument to append to the compiler command line\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\noclint_path\n\n\nThe path to oclint binary\n\n\noclint\n\n\n\n\n\n\ncompile_commands\n\n\nThe json compilation database, use xctool reporter 'json-compilation-database'\n\n\ncompile_commands.json\n\n\n\n\n\n\nselect_reqex\n\n\nSelect all files matching this reqex\n\n\n\n\n\n\n\n\nselect_regex\n\n\nSelect all files matching this regex\n\n\n\n\n\n\n\n\nexclude_regex\n\n\nExclude all files matching this regex\n\n\n\n\n\n\n\n\nreport_type\n\n\nThe type of the report (default: html)\n\n\nhtml\n\n\n\n\n\n\nreport_path\n\n\nThe reports file path\n\n\n\n\n\n\n\n\nlist_enabled_rules\n\n\nList enabled rules\n\n\nfalse\n\n\n\n\n\n\nrc\n\n\nOverride the default behavior of rules\n\n\n\n\n\n\n\n\nthresholds\n\n\nList of rule thresholds to override the default behavior of rules\n\n\n\n\n\n\n\n\nenable_rules\n\n\nList of rules to pick explicitly\n\n\n\n\n\n\n\n\ndisable_rules\n\n\nList of rules to disable\n\n\n\n\n\n\n\n\nmax_priority_1\n\n\nThe max allowed number of priority 1 violations\n\n\n\n\n\n\n\n\nmax_priority_2\n\n\nThe max allowed number of priority 2 violations\n\n\n\n\n\n\n\n\nmax_priority_3\n\n\nThe max allowed number of priority 3 violations\n\n\n\n\n\n\n\n\nenable_clang_static_analyzer\n\n\nEnable Clang Static Analyzer, and integrate results into OCLint report\n\n\nfalse\n\n\n\n\n\n\nenable_global_analysis\n\n\nCompile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n\n\nfalse\n\n\n\n\n\n\nallow_duplicated_violations\n\n\nAllow duplicated violations in the OCLint report\n\n\nfalse\n\n\n\n\n\n\nextra_arg\n\n\nAdditional argument to append to the compiler command line\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \noclint\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::FL_OCLINT_REPORT_PATH\n\n\nThe reports file path\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action oclint\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run oclint\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run oclint parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "oclint"
        },
        {
            "location": "/actions/oclint/#oclint",
            "text": "Lints implementation files with OCLint   Run the static analyzer tool  OCLint  for your project. You need to have a  compile_commands.json  file in your  fastlane  directory or pass a path to your file.      oclint       Supported platforms  ios, android, mac    Author  @HeEAaD",
            "title": "oclint"
        },
        {
            "location": "/actions/oclint/#1-example",
            "text": "oclint(\n  compile_commands: \"commands.json\",    # The JSON compilation database, use xctool reporter \"json-compilation-database\"\n  select_regex: /ViewController.m/,     # Select all files matching this regex\n  exclude_regex: /Test.m/,    # Exclude all files matching this regex\n  report_type: \"pmd\",         # The type of the report (default: html)\n  max_priority_1: 10,         # The max allowed number of priority 1 violations\n  max_priority_2: 100,        # The max allowed number of priority 2 violations\n  max_priority_3: 1000,       # The max allowed number of priority 3 violations\n  thresholds: [     # Override the default behavior of rules\n    \"LONG_LINE=200\",\n    \"LONG_METHOD=200\"\n  ],\n  enable_rules: [   # List of rules to pick explicitly\n    \"DoubleNegative\",\n    \"SwitchStatementsDon'TNeedDefaultWhenFullyCovered\"\n  ],\n  disable_rules: [\"GotoStatement\"],     # List of rules to disable\n  list_enabled_rules: true,   # List enabled rules\n  enable_clang_static_analyzer: true,   # Enable Clang Static Analyzer, and integrate results into OCLint report\n  enable_global_analysis: true,         # Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)\n  allow_duplicated_violations: true,    # Allow duplicated violations in the OCLint report\n  extra_arg: \"-Wno-everything\"# Additional argument to append to the compiler command line\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/oclint/#parameters",
            "text": "Key  Description  Default      oclint_path  The path to oclint binary  oclint    compile_commands  The json compilation database, use xctool reporter 'json-compilation-database'  compile_commands.json    select_reqex  Select all files matching this reqex     select_regex  Select all files matching this regex     exclude_regex  Exclude all files matching this regex     report_type  The type of the report (default: html)  html    report_path  The reports file path     list_enabled_rules  List enabled rules  false    rc  Override the default behavior of rules     thresholds  List of rule thresholds to override the default behavior of rules     enable_rules  List of rules to pick explicitly     disable_rules  List of rules to disable     max_priority_1  The max allowed number of priority 1 violations     max_priority_2  The max allowed number of priority 2 violations     max_priority_3  The max allowed number of priority 3 violations     enable_clang_static_analyzer  Enable Clang Static Analyzer, and integrate results into OCLint report  false    enable_global_analysis  Compile every source, and analyze across global contexts (depends on number of source files, could results in high memory load)  false    allow_duplicated_violations  Allow duplicated violations in the OCLint report  false    extra_arg  Additional argument to append to the compiler command line      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/oclint/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  oclint  action generates the following Lane Variables:     SharedValue  Description      SharedValues::FL_OCLINT_REPORT_PATH  The reports file path     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/oclint/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action oclint",
            "title": "Documentation"
        },
        {
            "location": "/actions/oclint/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run oclint  To pass parameters, make use of the  :  symbol, for example  fastlane run oclint parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/oclint/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/onesignal/",
            "text": "onesignal\n\n\nCreate or update a new \nOneSignal\n application\n\n\n\n\nYou can use this action to automatically create or update a OneSignal application. You can also upload a \n.p12\n with password, a GCM key, or both.\n\n\n\n\n\n\n\n\n\n\nonesignal\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@timothybarraclough, @smartshowltd\n\n\n\n\n\n\n\n\n2 Examples\n\n\nonesignal(\n  auth_token: \"Your OneSignal Auth Token\",\n  app_name: \"Name for OneSignal App\",\n  android_token: \"Your Android GCM key (optional)\",\n  android_gcm_sender_id: \"Your Android GCM Sender ID (optional)\",\n  apns_p12: \"Path to Apple .p12 file (optional)\",\n  apns_p12_password: \"Password for .p12 file (optional)\",\n  apns_env: \"production/sandbox (defaults to production)\",\n  organization_id: \"Onesignal organization id (optional)\"\n)\n\n\n\n\nonesignal(\n  app_id: \"Your OneSignal App ID\",\n  auth_token: \"Your OneSignal Auth Token\",\n  app_name: \"New Name for OneSignal App\",\n  android_token: \"Your Android GCM key (optional)\",\n  android_gcm_sender_id: \"Your Android GCM Sender ID (optional)\",\n  apns_p12: \"Path to Apple .p12 file (optional)\",\n  apns_p12_password: \"Password for .p12 file (optional)\",\n  apns_env: \"production/sandbox (defaults to production)\",\n  organization_id: \"Onesignal organization id (optional)\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napp_id\n\n\nOneSignal App ID. Setting this updates an existing app\n\n\n\n\n\n\n\n\nauth_token\n\n\nOneSignal Authorization Key\n\n\n\n\n\n\n\n\napp_name\n\n\nOneSignal App Name. This is required when creating an app (in other words, when \n:app_id\n is not set, and optional when updating an app\n\n\n\n\n\n\n\n\nandroid_token\n\n\nANDROID GCM KEY\n\n\n\n\n\n\n\n\nandroid_gcm_sender_id\n\n\nGCM SENDER ID\n\n\n\n\n\n\n\n\napns_p12\n\n\nAPNS P12 File (in .p12 format)\n\n\n\n\n\n\n\n\napns_p12_password\n\n\nAPNS P12 password\n\n\n\n\n\n\n\n\napns_env\n\n\nAPNS environment\n\n\nproduction\n\n\n\n\n\n\norganization_id\n\n\nOneSignal Organization ID\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nonesignal\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::ONE_SIGNAL_APP_ID\n\n\nThe app ID of the newly created or updated app\n\n\n\n\n\n\nSharedValues::ONE_SIGNAL_APP_AUTH_KEY\n\n\nThe auth token for the newly created or updated app\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action onesignal\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run onesignal\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run onesignal parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "onesignal"
        },
        {
            "location": "/actions/onesignal/#onesignal",
            "text": "Create or update a new  OneSignal  application   You can use this action to automatically create or update a OneSignal application. You can also upload a  .p12  with password, a GCM key, or both.      onesignal       Supported platforms  ios, android    Author  @timothybarraclough, @smartshowltd",
            "title": "onesignal"
        },
        {
            "location": "/actions/onesignal/#2-examples",
            "text": "onesignal(\n  auth_token: \"Your OneSignal Auth Token\",\n  app_name: \"Name for OneSignal App\",\n  android_token: \"Your Android GCM key (optional)\",\n  android_gcm_sender_id: \"Your Android GCM Sender ID (optional)\",\n  apns_p12: \"Path to Apple .p12 file (optional)\",\n  apns_p12_password: \"Password for .p12 file (optional)\",\n  apns_env: \"production/sandbox (defaults to production)\",\n  organization_id: \"Onesignal organization id (optional)\"\n)  onesignal(\n  app_id: \"Your OneSignal App ID\",\n  auth_token: \"Your OneSignal Auth Token\",\n  app_name: \"New Name for OneSignal App\",\n  android_token: \"Your Android GCM key (optional)\",\n  android_gcm_sender_id: \"Your Android GCM Sender ID (optional)\",\n  apns_p12: \"Path to Apple .p12 file (optional)\",\n  apns_p12_password: \"Password for .p12 file (optional)\",\n  apns_env: \"production/sandbox (defaults to production)\",\n  organization_id: \"Onesignal organization id (optional)\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/onesignal/#parameters",
            "text": "Key  Description  Default      app_id  OneSignal App ID. Setting this updates an existing app     auth_token  OneSignal Authorization Key     app_name  OneSignal App Name. This is required when creating an app (in other words, when  :app_id  is not set, and optional when updating an app     android_token  ANDROID GCM KEY     android_gcm_sender_id  GCM SENDER ID     apns_p12  APNS P12 File (in .p12 format)     apns_p12_password  APNS P12 password     apns_env  APNS environment  production    organization_id  OneSignal Organization ID      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/onesignal/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  onesignal  action generates the following Lane Variables:     SharedValue  Description      SharedValues::ONE_SIGNAL_APP_ID  The app ID of the newly created or updated app    SharedValues::ONE_SIGNAL_APP_AUTH_KEY  The auth token for the newly created or updated app     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/onesignal/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action onesignal",
            "title": "Documentation"
        },
        {
            "location": "/actions/onesignal/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run onesignal  To pass parameters, make use of the  :  symbol, for example  fastlane run onesignal parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/onesignal/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/opt_out_crash_reporting/",
            "text": "opt_out_crash_reporting\n\n\nThis will prevent reports from being uploaded when \nfastlane\n crashes\n\n\n\n\nfastlane\n doesn't have crash reporting any more. Feel free to remove \nopt_out_crash_reporting\n from your Fastfile.\n\n\n\n\n\n\n\n\n\n\nopt_out_crash_reporting\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@mpirri, @ohayon\n\n\n\n\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action opt_out_crash_reporting\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run opt_out_crash_reporting\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run opt_out_crash_reporting parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "opt_out_crash_reporting"
        },
        {
            "location": "/actions/opt_out_crash_reporting/#opt_out_crash_reporting",
            "text": "This will prevent reports from being uploaded when  fastlane  crashes   fastlane  doesn't have crash reporting any more. Feel free to remove  opt_out_crash_reporting  from your Fastfile.      opt_out_crash_reporting       Supported platforms  ios, android, mac    Author  @mpirri, @ohayon",
            "title": "opt_out_crash_reporting"
        },
        {
            "location": "/actions/opt_out_crash_reporting/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action opt_out_crash_reporting",
            "title": "Documentation"
        },
        {
            "location": "/actions/opt_out_crash_reporting/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run opt_out_crash_reporting  To pass parameters, make use of the  :  symbol, for example  fastlane run opt_out_crash_reporting parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/opt_out_crash_reporting/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/opt_out_usage/",
            "text": "opt_out_usage\n\n\nThis will stop uploading the information which actions were run\n\n\n\n\nBy default, \nfastlane\n will track what actions are being used. No personal/sensitive information is recorded.\nLearn more at \nhttps://docs.fastlane.tools/#metrics\n.\nAdd \nopt_out_usage\n at the top of your Fastfile to disable metrics collection.\n\n\n\n\n\n\n\n\n\n\nopt_out_usage\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nopt_out_usage # add this to the top of your Fastfile\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action opt_out_usage\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run opt_out_usage\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run opt_out_usage parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "opt_out_usage"
        },
        {
            "location": "/actions/opt_out_usage/#opt_out_usage",
            "text": "This will stop uploading the information which actions were run   By default,  fastlane  will track what actions are being used. No personal/sensitive information is recorded. Learn more at  https://docs.fastlane.tools/#metrics . Add  opt_out_usage  at the top of your Fastfile to disable metrics collection.      opt_out_usage       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "opt_out_usage"
        },
        {
            "location": "/actions/opt_out_usage/#1-example",
            "text": "opt_out_usage # add this to the top of your Fastfile",
            "title": "1 Example"
        },
        {
            "location": "/actions/opt_out_usage/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action opt_out_usage",
            "title": "Documentation"
        },
        {
            "location": "/actions/opt_out_usage/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run opt_out_usage  To pass parameters, make use of the  :  symbol, for example  fastlane run opt_out_usage parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/opt_out_usage/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/pem/",
            "text": "pem\n\n\nAlias for the \nget_push_certificate\n action\n\n\n\n  \n\n\n\n\n\nAutomatically generate and renew your push notification profiles\n\n\nTired of manually creating and maintaining your push notification profiles for your iOS apps? Tired of generating a \npem\n file for your server?\n\n\npem\n does all that for you, just by simply running \npem\n.\n\n\npem\n creates new .pem, .cer, and .p12 files to be uploaded to your push server if a valid push notification profile is needed. \npem\n does not cover uploading the file to your server.\n\n\nTo automate iOS Provisioning profiles you can use \nmatch\n.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nHow does it work?\n \u2022\n    \nTips\n \u2022\n    \nNeed help?\n\n\n\n\n\n\n\npem\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\nWell, it's actually just one: Generate the \npem\n file for your server.\n\n\nCheck out this gif:\n\n\n\n\nUsage\n\n\nfastlane pem\n\n\n\n\nYes, that's the whole command!\n\n\nThis does the following:\n\n\n\n\nCreate a new signing request\n\n\nCreate a new push certification\n\n\nDownloads the certificate\n\n\nGenerates a new \n.pem\n file in the current working directory, which you can upload to your server\n\n\n\n\nNote that \npem\n will never revoke your existing certificates. \npem\n can't download any of your existing push certificates, as the private key is only available on the machine it was created on. \n\n\nIf you already have a push certificate enabled, which is active for at least 30 more days, \npem\n will not create a new certificate. If you still want to create one, use the \nforce\n:\n\n\nfastlane pem --force\n\n\n\n\nYou can pass parameters like this:\n\n\nfastlane pem -a com.krausefx.app -u username\n\n\n\n\nIf you want to generate a development certificate instead:\n\n\nfastlane pem --development\n\n\n\n\nIf you want to generate a Website Push certificate:\n\n\nfastlane pem --website_push\n\n\n\n\nSet a password for your \np12\n file:\n\n\nfastlane pem -p \"MyPass\"\n\n\n\n\nYou can specify a name for the output file:\n\n\nfastlane pem -o my.pem\n\n\n\n\nTo get a list of available options run:\n\n\nfastlane action pem\n\n\n\n\nNote about empty \np12\n passwords and Keychain Access.app\n\n\npem\n will produce a valid \np12\n without specifying a password, or using the empty-string as the password.\nWhile the file is valid, the Mac's Keychain Access will not allow you to open the file without specifying a passphrase.\n\n\nInstead, you may verify the file is valid using OpenSSL:\n\n\nopenssl pkcs12 -info -in my.p12\n\n\n\n\nIf you need the \np12\n in your keychain, perhaps to test push with an app like \nKnuff\n or \nPusher\n, you can use \nopenssl\n to export the \np12\n to \npem\n and back to \np12\n:\n\n\n% openssl pkcs12 -in my.p12 -out my.pem\nEnter Import Password:\n  <hit enter: the p12 has no password>\nMAC verified OK\nEnter PEM pass phrase:\n  <enter a temporary password to encrypt the pem file>\n\n% openssl pkcs12 -export -in my.pem -out my-with-passphrase.p12\nEnter pass phrase for temp.pem:\n  <enter the temporary password to decrypt the pem file>\n\nEnter Export Password:\n  <enter a password for encrypting the new p12 file>\n\n\n\n\nEnvironment Variables\n\n\nRun \nfastlane action pem\n to get a list of available environment variables.\n\n\nHow does it work?\n\n\npem\n uses \nspaceship\n to communicate with the Apple Developer Portal to request a new push certificate for you.\n\n\nHow is my password stored?\n\n\npem\n uses the \npassword manager\n from \nfastlane\n. Take a look the \nCredentialsManager README\n for more information.\n\n\n\n\n\n\n\n\n\n\n\npem\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nget_push_certificate\n\n\n\n\npem # alias for \"get_push_certificate\"\n\n\n\n\nget_push_certificate(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \"net.sunapps.9\", # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndevelopment\n\n\nRenew the development push certificate instead of the production one\n\n\nfalse\n\n\n\n\n\n\nwebsite_push\n\n\nCreate a Website Push certificate\n\n\nfalse\n\n\n\n\n\n\ngenerate_p12\n\n\nGenerate a p12 file additionally to a PEM file\n\n\ntrue\n\n\n\n\n\n\nactive_days_limit\n\n\nIf the current certificate is active for less than this number of days, generate a new one\n\n\n30\n\n\n\n\n\n\nforce\n\n\nCreate a new push certificate, even if the current one is active for 30 (or PEM_ACTIVE_DAYS_LIMIT) more days\n\n\nfalse\n\n\n\n\n\n\nsave_private_key\n\n\nSet to save the private RSA key\n\n\ntrue\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\np12_password\n\n\nThe password that is used for your p12 file\n\n\n''\n\n\n\n\n\n\npem_name\n\n\nThe file name of the generated .pem file\n\n\n\n\n\n\n\n\noutput_path\n\n\nThe path to a directory in which all certificates and private keys should be stored\n\n\n.\n\n\n\n\n\n\nnew_profile\n\n\nBlock that is called if there is a new profile\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action pem\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run pem\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run pem parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "pem"
        },
        {
            "location": "/actions/pem/#pem",
            "text": "Alias for the  get_push_certificate  action",
            "title": "pem"
        },
        {
            "location": "/actions/pem/#automatically-generate-and-renew-your-push-notification-profiles",
            "text": "Tired of manually creating and maintaining your push notification profiles for your iOS apps? Tired of generating a  pem  file for your server?  pem  does all that for you, just by simply running  pem .  pem  creates new .pem, .cer, and .p12 files to be uploaded to your push server if a valid push notification profile is needed.  pem  does not cover uploading the file to your server.  To automate iOS Provisioning profiles you can use  match .   \n     Features  \u2022\n     Usage  \u2022\n     How does it work?  \u2022\n     Tips  \u2022\n     Need help?",
            "title": "Automatically generate and renew your push notification profiles"
        },
        {
            "location": "/actions/pem/#features",
            "text": "Well, it's actually just one: Generate the  pem  file for your server.  Check out this gif:",
            "title": "Features"
        },
        {
            "location": "/actions/pem/#usage",
            "text": "fastlane pem  Yes, that's the whole command!  This does the following:   Create a new signing request  Create a new push certification  Downloads the certificate  Generates a new  .pem  file in the current working directory, which you can upload to your server   Note that  pem  will never revoke your existing certificates.  pem  can't download any of your existing push certificates, as the private key is only available on the machine it was created on.   If you already have a push certificate enabled, which is active for at least 30 more days,  pem  will not create a new certificate. If you still want to create one, use the  force :  fastlane pem --force  You can pass parameters like this:  fastlane pem -a com.krausefx.app -u username  If you want to generate a development certificate instead:  fastlane pem --development  If you want to generate a Website Push certificate:  fastlane pem --website_push  Set a password for your  p12  file:  fastlane pem -p \"MyPass\"  You can specify a name for the output file:  fastlane pem -o my.pem  To get a list of available options run:  fastlane action pem",
            "title": "Usage"
        },
        {
            "location": "/actions/pem/#note-about-empty-p12-passwords-and-keychain-accessapp",
            "text": "pem  will produce a valid  p12  without specifying a password, or using the empty-string as the password.\nWhile the file is valid, the Mac's Keychain Access will not allow you to open the file without specifying a passphrase.  Instead, you may verify the file is valid using OpenSSL:  openssl pkcs12 -info -in my.p12  If you need the  p12  in your keychain, perhaps to test push with an app like  Knuff  or  Pusher , you can use  openssl  to export the  p12  to  pem  and back to  p12 :  % openssl pkcs12 -in my.p12 -out my.pem\nEnter Import Password:\n  <hit enter: the p12 has no password>\nMAC verified OK\nEnter PEM pass phrase:\n  <enter a temporary password to encrypt the pem file>\n\n% openssl pkcs12 -export -in my.pem -out my-with-passphrase.p12\nEnter pass phrase for temp.pem:\n  <enter the temporary password to decrypt the pem file>\n\nEnter Export Password:\n  <enter a password for encrypting the new p12 file>",
            "title": "Note about empty p12 passwords and Keychain Access.app"
        },
        {
            "location": "/actions/pem/#environment-variables",
            "text": "Run  fastlane action pem  to get a list of available environment variables.",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/pem/#how-does-it-work",
            "text": "pem  uses  spaceship  to communicate with the Apple Developer Portal to request a new push certificate for you.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/pem/#how-is-my-password-stored",
            "text": "pem  uses the  password manager  from  fastlane . Take a look the  CredentialsManager README  for more information.      pem       Supported platforms  ios    Author  @KrauseFx",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/pem/#3-examples",
            "text": "get_push_certificate  pem # alias for \"get_push_certificate\"  get_push_certificate(\n  force: true, # create a new profile, even if the old one is still valid\n  app_identifier: \"net.sunapps.9\", # optional app identifier,\n  save_private_key: true,\n  new_profile: proc do |profile_path| # this block gets called when a new profile was generated\n    puts profile_path # the absolute path to the new PEM file\n    # insert the code to upload the PEM file to the server\n  end\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/pem/#parameters",
            "text": "Key  Description  Default      development  Renew the development push certificate instead of the production one  false    website_push  Create a Website Push certificate  false    generate_p12  Generate a p12 file additionally to a PEM file  true    active_days_limit  If the current certificate is active for less than this number of days, generate a new one  30    force  Create a new push certificate, even if the current one is active for 30 (or PEM_ACTIVE_DAYS_LIMIT) more days  false    save_private_key  Set to save the private RSA key  true    app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    p12_password  The password that is used for your p12 file  ''    pem_name  The file name of the generated .pem file     output_path  The path to a directory in which all certificates and private keys should be stored  .    new_profile  Block that is called if there is a new profile      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/pem/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action pem",
            "title": "Documentation"
        },
        {
            "location": "/actions/pem/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run pem  To pass parameters, make use of the  :  symbol, for example  fastlane run pem parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/pem/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/pilot/",
            "text": "pilot\n\n\nAlias for the \nupload_to_testflight\n action\n\n\n\n  \n\n\n\n\n\nThe best way to manage your TestFlight testers and builds from your terminal\n\n\nPilot makes it easier to manage your app on Apple\u2019s TestFlight. You can:\n\n\n\n\nUpload & distribute builds\n\n\nAdd & remove testers\n\n\nRetrieve information about testers & devices\n\n\nImport/export all available testers\n\n\n\n\npilot\n uses \nspaceship.airforce\n to interact with App Store Connect \ud83d\ude80\n\n\n\n\n\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\npilot\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nUsage\n\n\nFor all commands, you can either use an \nAPI Key\n or your \nApple ID\n.\n\n\nApp Store Connect API Key\n\n\nThe App Store Connect API Key is the preferred authentication method (if you are able to use it).\n\n\n\n\nUses official App Store Connect API\n\n\nNo need for 2FA\n\n\nBetter performance over Apple ID\n\n\n\n\nSpecify the API key using \n--api_key_path ./path/to/api_key_info.json\n or \n--api_key \"{\\\"key_id\\\": \\\"D83848D23\\\", \\\"issuer_id\\\": \\\"227b0bbf-ada8-458c-9d62-3d8022b7d07f\\\", \\\"key_filepath\\\": \\\"D83848D23.p8\\\"}\"\n\n\nGo to \nUsing App Store Connect API\n for information on obtaining an API key, the \nfastlane\n \napi_key_info.json\n format, and other API key usage.\n\n\nApple ID\n\n\nSpecify the Apple ID to use using \n-u felix@krausefx.com\n. If you execute \npilot\n in a project already using \nfastlane\n the username and app identifier will automatically be determined.\n\n\nUploading builds\n\n\nTo upload a new build, just run\n\n\nfastlane pilot upload\n\n\n\n\nThis will automatically look for an \nipa\n in your current directory and tries to fetch the login credentials from your \nfastlane setup\n.\n\n\nYou'll be asked for any missing information. Additionally, you can pass all kinds of parameters:\n\n\nfastlane action pilot\n\n\n\n\nYou can pass a changelog using\n\n\nfastlane pilot upload --changelog \"Something that is new here\"\n\n\n\n\nYou can also skip the submission of the binary, which means, the \nipa\n file will only be uploaded and not distributed to testers:\n\n\nfastlane pilot upload --skip_submission\n\n\n\n\npilot\n does all kinds of magic for you:\n\n\n\n\nAutomatically detects the bundle identifier from your \nipa\n file\n\n\nAutomatically fetch the AppID of your app based on the bundle identifier\n\n\n\n\npilot\n uses \nspaceship\n to submit the build metadata and the iTunes Transporter to upload the binary. Because iTunes Transporter's upload capability is only supported on OS X, \npilot upload\n does not work on Linux, as described \nin this issue\n\n\nList builds\n\n\nTo list all builds for specific application use\n\n\nfastlane pilot builds\n\n\n\n\nThe result lists all active builds and processing builds:\n\n\n+-----------+---------+----------+\n|      Great App Builds          |\n+-----------+---------+----------+\n| Version # | Build # | Installs |\n+-----------+---------+----------+\n| 0.9.13    | 1       | 0        |\n| 0.9.13    | 2       | 0        |\n| 0.9.20    | 3       | 0        |\n| 0.9.20    | 4       | 3        |\n+-----------+---------+----------+\n\n\n\n\nManaging beta testers\n\n\nList of Testers\n\n\nThis command will list all your testers, both internal and external.\n\n\nfastlane pilot list\n\n\n\n\nThe output will look like this:\n\n\n+--------+--------+--------------------------+-----------+\n|                    Internal Testers                    |\n+--------+--------+--------------------------+-----------+\n| First  | Last   | Email                    | # Devices |\n+--------+--------+--------------------------+-----------+\n| Felix  | Krause | felix@krausefx.com       | 2         |\n+--------+--------+--------------------------+-----------+\n\n+-----------+---------+----------------------------+-----------+\n|                       External Testers                       |\n+-----------+---------+----------------------------+-----------+\n| First     | Last    | Email                      | # Devices |\n+-----------+---------+----------------------------+-----------+\n| Max       | Manfred | email@email.com            | 0         |\n| Detlef    | M\u00fcller  | detlef@krausefx.com        | 1         |\n+-----------+---------+----------------------------+-----------+\n\n\n\n\nAdd a new tester\n\n\nTo add a new tester to both your App Store Connect account and to your app (if given), use the \npilot add\n command. This will create a new tester (if necessary) or add an existing tester to the app to test.\n\n\nfastlane pilot add email@invite.com\n\n\n\n\nAdditionally you can specify the app identifier (if necessary):\n\n\nfastlane pilot add email@email.com -a com.krausefx.app\n\n\n\n\nFind a tester\n\n\nTo find a specific tester use\n\n\nfastlane pilot find felix@krausefx.com\n\n\n\n\nThe resulting output will look like this:\n\n\n+---------------------+---------------------+\n|            felix@krausefx.com             |\n+---------------------+---------------------+\n| First name          | Felix               |\n| Last name           | Krause              |\n| Email               | felix@krausefx.com  |\n| Latest Version      | 0.9.14 (23          |\n| Latest Install Date | 03/28/15 19:00      |\n| 2 Devices           | \u2022 iPhone 6, iOS 8.3 |\n|                     | \u2022 iPhone 5, iOS 7.0 |\n+---------------------+---------------------+\n\n\n\n\nRemove a tester\n\n\nThis command will only remove external beta testers.\n\n\nfastlane pilot remove felix@krausefx.com\n\n\n\n\nExport testers\n\n\nTo export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.\n\n\nfastlane pilot export\n\n\n\n\nImport testers\n\n\nAdd external testers from a CSV file. Create a file (ex: \ntesters.csv\n) and fill it with the following format:\n\n\nJohn,Appleseed,appleseed_john@mac.com,group-1;group-2\n\n\n\n\nfastlane pilot import\n\n\n\n\nYou can also specify the directory using\n\n\nfastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv\n\n\n\n\nTips\n\n\nDebug information\n\n\nIf you run into any issues you can use the \nverbose\n mode to get a more detailed output:\n\n\nfastlane pilot upload --verbose\n\n\n\n\nFirewall Issues\n\n\npilot\n uses the iTunes \nTransporter\n to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol from the command line using\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...\n\n\n\n\nIf you are using \npilot\n via the \nfastlane action\n, add the following to your \nFastfile\n\n\nENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...\n\n\n\n\nNote, however, that Apple recommends you don\u2019t specify the \n-t transport\n and instead allow Transporter to use automatic transport discovery to determine the best transport mode for your packages. For this reason, if the \nt\n option is passed, we will raise a warning.\n\n\nAlso note that \n-t\n is not the only additional parameter that can be used. The string specified in the \nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\n environment variable will be forwarded to Transporter. For all the available options, check \nApple's Transporter User Guide\n.\n\n\nCredentials Issues\n\n\nIf your password contains special characters, \npilot\n may throw a confusing error saying your \"Your Apple ID or password was entered incorrectly\". The easiest way to fix this error is to change your password to something that \ndoes not\n contains special characters.\n\n\nHow is my password stored?\n\n\npilot\n uses the \nCredentialsManager\n from \nfastlane\n.\n\n\nProvider Short Name\n\n\nIf you are on multiple App Store Connect teams, iTunes Transporter may need a provider short name to know where to upload your binary. \npilot\n will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the \nitc_provider\n option.\n\n\nUse an Application Specific Password to upload\n\n\npilot\n/\nupload_to_testflight\n can use an \nApplication Specific Password via the \nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\n environment variable\n to upload a binary if both the \nskip_waiting_for_build_processing\n and \napple_id\n options are set. (If any of those are not set, it will use the normal Apple login process that might require 2FA authentication.)\n\n\nRole for App Store Connect User\n\n\npilot\n/\nupload_to_testflight\n updates build information and testers after the build has finished processing. App Store Connect requires the  \"App Manager\" or \"Admin\" role for your Apple account to update this information. The \"Developer\" role will allow builds to be uploaded but \nwill not\n allow updating of build information and testers.\n\n\n\n\n\n\n\n\n\n\n\npilot\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n7 Examples\n\n\nupload_to_testflight\n\n\n\n\ntestflight # alias for \"upload_to_testflight\"\n\n\n\n\npilot # alias for \"upload_to_testflight\"\n\n\n\n\nupload_to_testflight(skip_submission: true) # to only upload the build\n\n\n\n\nupload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\nupload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)\n\n\n\n\nupload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-defafult\",\n      privacy_policy_url: \"https://example.com/privacy-defafult\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to upload or manage testers (optional)\n\n\n*\n\n\n\n\n\n\napp_platform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\napple_id\n\n\nApple ID property in the App Information section in App Store Connect\n\n\n*\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to upload\n\n\n*\n\n\n\n\n\n\ndemo_account_required\n\n\nDo you need a demo account when Apple does review?\n\n\nfalse\n\n\n\n\n\n\nbeta_app_review_info\n\n\nBeta app review information for contact info and demo account\n\n\n\n\n\n\n\n\nlocalized_app_info\n\n\nLocalized beta app test info for description, feedback email, marketing url, and privacy policy\n\n\n\n\n\n\n\n\nbeta_app_description\n\n\nProvide the 'Beta App Description' when uploading a new build\n\n\n\n\n\n\n\n\nbeta_app_feedback_email\n\n\nProvide the beta app email when uploading a new build\n\n\n\n\n\n\n\n\nlocalized_build_info\n\n\nLocalized beta app test info for what's new\n\n\n\n\n\n\n\n\nchangelog\n\n\nProvide the 'What to Test' text when uploading a new build\n\n\n\n\n\n\n\n\nskip_submission\n\n\nSkip the distributing action of pilot and only upload the ipa file\n\n\nfalse\n\n\n\n\n\n\nskip_waiting_for_build_processing\n\n\nIf set to true, the \ndistribute_external\n option won't work and no build will be distributed to testers. (You might want to use this option if you are using this action on CI and have to pay for 'minutes used' on your CI plan). If set to \ntrue\n and a changelog is provided, it will partially wait for the build to appear on AppStore Connect so the changelog can be set, and skip the remaining processing steps\n\n\nfalse\n\n\n\n\n\n\nupdate_build_info_on_upload\n\n\nDEPRECATED!\n Update build info immediately after validation. This is deprecated and will be removed in a future release. App Store Connect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n\n\nfalse\n\n\n\n\n\n\ndistribute_only\n\n\nDistribute a previously uploaded build (equivalent to the \nfastlane pilot distribute\n command)\n\n\nfalse\n\n\n\n\n\n\nuses_non_exempt_encryption\n\n\nProvide the 'Uses Non-Exempt Encryption' for export compliance. This is used if there is 'ITSAppUsesNonExemptEncryption' is not set in the Info.plist\n\n\nfalse\n\n\n\n\n\n\ndistribute_external\n\n\nShould the build be distributed to external testers?\n\n\nfalse\n\n\n\n\n\n\nnotify_external_testers\n\n\nShould notify external testers?\n\n\ntrue\n\n\n\n\n\n\napp_version\n\n\nThe version number of the application build to distribute. If the version number is not specified, then the most recent build uploaded to TestFlight will be distributed. If specified, the most recent build for the version number will be distributed\n\n\n\n\n\n\n\n\nbuild_number\n\n\nThe build number of the application build to distribute. If the build number is not specified, the most recent build is distributed\n\n\n\n\n\n\n\n\nexpire_previous_builds\n\n\nShould expire previous builds?\n\n\nfalse\n\n\n\n\n\n\nfirst_name\n\n\nThe tester's first name\n\n\n\n\n\n\n\n\nlast_name\n\n\nThe tester's last name\n\n\n\n\n\n\n\n\nemail\n\n\nThe tester's email\n\n\n\n\n\n\n\n\ntesters_file_path\n\n\nPath to a CSV file of testers\n\n\n./testers.csv\n\n\n\n\n\n\ngroups\n\n\nAssociate tester to one group or more by group name / group id. E.g. \n-g \"Team 1\",\"Team 2\"\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n\n\n*\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run \npathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off\n. The short names of providers should be listed in the second column\n\n\n\n\n\n\n\n\nwait_processing_interval\n\n\nInterval in seconds to wait for App Store Connect processing\n\n\n30\n\n\n\n\n\n\nwait_for_uploaded_build\n\n\nDEPRECATED!\n No longer needed with the transition over to the App Store Connect API - Use version info from uploaded ipa file to determine what build to use for distribution. If set to false, latest processing or any latest build will be used\n\n\nfalse\n\n\n\n\n\n\nreject_build_waiting_for_review\n\n\nExpire previous if it's 'waiting for review'\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action pilot\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run pilot\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run pilot parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "pilot"
        },
        {
            "location": "/actions/pilot/#pilot",
            "text": "Alias for the  upload_to_testflight  action",
            "title": "pilot"
        },
        {
            "location": "/actions/pilot/#the-best-way-to-manage-your-testflight-testers-and-builds-from-your-terminal",
            "text": "Pilot makes it easier to manage your app on Apple\u2019s TestFlight. You can:   Upload & distribute builds  Add & remove testers  Retrieve information about testers & devices  Import/export all available testers   pilot  uses  spaceship.airforce  to interact with App Store Connect \ud83d\ude80   \n     Usage  \u2022\n     Tips",
            "title": "The best way to manage your TestFlight testers and builds from your terminal"
        },
        {
            "location": "/actions/pilot/#usage",
            "text": "For all commands, you can either use an  API Key  or your  Apple ID .",
            "title": "Usage"
        },
        {
            "location": "/actions/pilot/#app-store-connect-api-key",
            "text": "The App Store Connect API Key is the preferred authentication method (if you are able to use it).   Uses official App Store Connect API  No need for 2FA  Better performance over Apple ID   Specify the API key using  --api_key_path ./path/to/api_key_info.json  or  --api_key \"{\\\"key_id\\\": \\\"D83848D23\\\", \\\"issuer_id\\\": \\\"227b0bbf-ada8-458c-9d62-3d8022b7d07f\\\", \\\"key_filepath\\\": \\\"D83848D23.p8\\\"}\"  Go to  Using App Store Connect API  for information on obtaining an API key, the  fastlane   api_key_info.json  format, and other API key usage.",
            "title": "App Store Connect API Key"
        },
        {
            "location": "/actions/pilot/#apple-id",
            "text": "Specify the Apple ID to use using  -u felix@krausefx.com . If you execute  pilot  in a project already using  fastlane  the username and app identifier will automatically be determined.",
            "title": "Apple ID"
        },
        {
            "location": "/actions/pilot/#uploading-builds",
            "text": "To upload a new build, just run  fastlane pilot upload  This will automatically look for an  ipa  in your current directory and tries to fetch the login credentials from your  fastlane setup .  You'll be asked for any missing information. Additionally, you can pass all kinds of parameters:  fastlane action pilot  You can pass a changelog using  fastlane pilot upload --changelog \"Something that is new here\"  You can also skip the submission of the binary, which means, the  ipa  file will only be uploaded and not distributed to testers:  fastlane pilot upload --skip_submission  pilot  does all kinds of magic for you:   Automatically detects the bundle identifier from your  ipa  file  Automatically fetch the AppID of your app based on the bundle identifier   pilot  uses  spaceship  to submit the build metadata and the iTunes Transporter to upload the binary. Because iTunes Transporter's upload capability is only supported on OS X,  pilot upload  does not work on Linux, as described  in this issue",
            "title": "Uploading builds"
        },
        {
            "location": "/actions/pilot/#list-builds",
            "text": "To list all builds for specific application use  fastlane pilot builds  The result lists all active builds and processing builds:  +-----------+---------+----------+\n|      Great App Builds          |\n+-----------+---------+----------+\n| Version # | Build # | Installs |\n+-----------+---------+----------+\n| 0.9.13    | 1       | 0        |\n| 0.9.13    | 2       | 0        |\n| 0.9.20    | 3       | 0        |\n| 0.9.20    | 4       | 3        |\n+-----------+---------+----------+",
            "title": "List builds"
        },
        {
            "location": "/actions/pilot/#managing-beta-testers",
            "text": "",
            "title": "Managing beta testers"
        },
        {
            "location": "/actions/pilot/#list-of-testers",
            "text": "This command will list all your testers, both internal and external.  fastlane pilot list  The output will look like this:  +--------+--------+--------------------------+-----------+\n|                    Internal Testers                    |\n+--------+--------+--------------------------+-----------+\n| First  | Last   | Email                    | # Devices |\n+--------+--------+--------------------------+-----------+\n| Felix  | Krause | felix@krausefx.com       | 2         |\n+--------+--------+--------------------------+-----------+\n\n+-----------+---------+----------------------------+-----------+\n|                       External Testers                       |\n+-----------+---------+----------------------------+-----------+\n| First     | Last    | Email                      | # Devices |\n+-----------+---------+----------------------------+-----------+\n| Max       | Manfred | email@email.com            | 0         |\n| Detlef    | M\u00fcller  | detlef@krausefx.com        | 1         |\n+-----------+---------+----------------------------+-----------+",
            "title": "List of Testers"
        },
        {
            "location": "/actions/pilot/#add-a-new-tester",
            "text": "To add a new tester to both your App Store Connect account and to your app (if given), use the  pilot add  command. This will create a new tester (if necessary) or add an existing tester to the app to test.  fastlane pilot add email@invite.com  Additionally you can specify the app identifier (if necessary):  fastlane pilot add email@email.com -a com.krausefx.app",
            "title": "Add a new tester"
        },
        {
            "location": "/actions/pilot/#find-a-tester",
            "text": "To find a specific tester use  fastlane pilot find felix@krausefx.com  The resulting output will look like this:  +---------------------+---------------------+\n|            felix@krausefx.com             |\n+---------------------+---------------------+\n| First name          | Felix               |\n| Last name           | Krause              |\n| Email               | felix@krausefx.com  |\n| Latest Version      | 0.9.14 (23          |\n| Latest Install Date | 03/28/15 19:00      |\n| 2 Devices           | \u2022 iPhone 6, iOS 8.3 |\n|                     | \u2022 iPhone 5, iOS 7.0 |\n+---------------------+---------------------+",
            "title": "Find a tester"
        },
        {
            "location": "/actions/pilot/#remove-a-tester",
            "text": "This command will only remove external beta testers.  fastlane pilot remove felix@krausefx.com",
            "title": "Remove a tester"
        },
        {
            "location": "/actions/pilot/#export-testers",
            "text": "To export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.  fastlane pilot export",
            "title": "Export testers"
        },
        {
            "location": "/actions/pilot/#import-testers",
            "text": "Add external testers from a CSV file. Create a file (ex:  testers.csv ) and fill it with the following format:  John,Appleseed,appleseed_john@mac.com,group-1;group-2  fastlane pilot import  You can also specify the directory using  fastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv",
            "title": "Import testers"
        },
        {
            "location": "/actions/pilot/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/pilot/#debug-information",
            "text": "If you run into any issues you can use the  verbose  mode to get a more detailed output:  fastlane pilot upload --verbose",
            "title": "Debug information"
        },
        {
            "location": "/actions/pilot/#firewall-issues",
            "text": "pilot  uses the iTunes  Transporter  to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol from the command line using  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...  If you are using  pilot  via the  fastlane action , add the following to your  Fastfile  ENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...  Note, however, that Apple recommends you don\u2019t specify the  -t transport  and instead allow Transporter to use automatic transport discovery to determine the best transport mode for your packages. For this reason, if the  t  option is passed, we will raise a warning.  Also note that  -t  is not the only additional parameter that can be used. The string specified in the  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS  environment variable will be forwarded to Transporter. For all the available options, check  Apple's Transporter User Guide .",
            "title": "Firewall Issues"
        },
        {
            "location": "/actions/pilot/#credentials-issues",
            "text": "If your password contains special characters,  pilot  may throw a confusing error saying your \"Your Apple ID or password was entered incorrectly\". The easiest way to fix this error is to change your password to something that  does not  contains special characters.",
            "title": "Credentials Issues"
        },
        {
            "location": "/actions/pilot/#how-is-my-password-stored",
            "text": "pilot  uses the  CredentialsManager  from  fastlane .",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/pilot/#provider-short-name",
            "text": "If you are on multiple App Store Connect teams, iTunes Transporter may need a provider short name to know where to upload your binary.  pilot  will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the  itc_provider  option.",
            "title": "Provider Short Name"
        },
        {
            "location": "/actions/pilot/#use-an-application-specific-password-to-upload",
            "text": "pilot / upload_to_testflight  can use an  Application Specific Password via the  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD  environment variable  to upload a binary if both the  skip_waiting_for_build_processing  and  apple_id  options are set. (If any of those are not set, it will use the normal Apple login process that might require 2FA authentication.)",
            "title": "Use an Application Specific Password to upload"
        },
        {
            "location": "/actions/pilot/#role-for-app-store-connect-user",
            "text": "pilot / upload_to_testflight  updates build information and testers after the build has finished processing. App Store Connect requires the  \"App Manager\" or \"Admin\" role for your Apple account to update this information. The \"Developer\" role will allow builds to be uploaded but  will not  allow updating of build information and testers.      pilot       Supported platforms  ios    Author  @KrauseFx",
            "title": "Role for App Store Connect User"
        },
        {
            "location": "/actions/pilot/#7-examples",
            "text": "upload_to_testflight  testflight # alias for \"upload_to_testflight\"  pilot # alias for \"upload_to_testflight\"  upload_to_testflight(skip_submission: true) # to only upload the build  upload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)  upload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)  upload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-defafult\",\n      privacy_policy_url: \"https://example.com/privacy-defafult\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)",
            "title": "7 Examples"
        },
        {
            "location": "/actions/pilot/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    app_identifier  The bundle identifier of the app to upload or manage testers (optional)  *    app_platform  The platform to use (optional)  ios    apple_id  Apple ID property in the App Information section in App Store Connect  *    ipa  Path to the ipa file to upload  *    demo_account_required  Do you need a demo account when Apple does review?  false    beta_app_review_info  Beta app review information for contact info and demo account     localized_app_info  Localized beta app test info for description, feedback email, marketing url, and privacy policy     beta_app_description  Provide the 'Beta App Description' when uploading a new build     beta_app_feedback_email  Provide the beta app email when uploading a new build     localized_build_info  Localized beta app test info for what's new     changelog  Provide the 'What to Test' text when uploading a new build     skip_submission  Skip the distributing action of pilot and only upload the ipa file  false    skip_waiting_for_build_processing  If set to true, the  distribute_external  option won't work and no build will be distributed to testers. (You might want to use this option if you are using this action on CI and have to pay for 'minutes used' on your CI plan). If set to  true  and a changelog is provided, it will partially wait for the build to appear on AppStore Connect so the changelog can be set, and skip the remaining processing steps  false    update_build_info_on_upload  DEPRECATED!  Update build info immediately after validation. This is deprecated and will be removed in a future release. App Store Connect no longer supports setting build info until after build processing has completed, which is when build info is updated by default  false    distribute_only  Distribute a previously uploaded build (equivalent to the  fastlane pilot distribute  command)  false    uses_non_exempt_encryption  Provide the 'Uses Non-Exempt Encryption' for export compliance. This is used if there is 'ITSAppUsesNonExemptEncryption' is not set in the Info.plist  false    distribute_external  Should the build be distributed to external testers?  false    notify_external_testers  Should notify external testers?  true    app_version  The version number of the application build to distribute. If the version number is not specified, then the most recent build uploaded to TestFlight will be distributed. If specified, the most recent build for the version number will be distributed     build_number  The build number of the application build to distribute. If the build number is not specified, the most recent build is distributed     expire_previous_builds  Should expire previous builds?  false    first_name  The tester's first name     last_name  The tester's last name     email  The tester's email     testers_file_path  Path to a CSV file of testers  ./testers.csv    groups  Associate tester to one group or more by group name / group id. E.g.  -g \"Team 1\",\"Team 2\"     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    dev_portal_team_id  The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!  *    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run  pathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off . The short names of providers should be listed in the second column     wait_processing_interval  Interval in seconds to wait for App Store Connect processing  30    wait_for_uploaded_build  DEPRECATED!  No longer needed with the transition over to the App Store Connect API - Use version info from uploaded ipa file to determine what build to use for distribution. If set to false, latest processing or any latest build will be used  false    reject_build_waiting_for_review  Expire previous if it's 'waiting for review'  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/pilot/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action pilot",
            "title": "Documentation"
        },
        {
            "location": "/actions/pilot/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run pilot  To pass parameters, make use of the  :  symbol, for example  fastlane run pilot parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/pilot/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/pod_lib_lint/",
            "text": "pod_lib_lint\n\n\nPod lib lint\n\n\n\n\nTest the syntax of your Podfile by linting the pod against the files of its directory\n\n\n\n\n\n\n\n\n\n\npod_lib_lint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@thierryxing\n\n\n\n\n\n\n\n\n4 Examples\n\n\npod_lib_lint\n\n\n\n\n# Allow output detail in console\npod_lib_lint(verbose: true)\n\n\n\n\n# Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)\n\n\n\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: [\"https://github.com/username/Specs\", \"https://github.com/CocoaPods/Specs\"])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\ntrue\n\n\n\n\n\n\npodspec\n\n\nPath of spec to lint\n\n\n\n\n\n\n\n\nverbose\n\n\nAllow output detail in console\n\n\n\n\n\n\n\n\nallow_warnings\n\n\nAllow warnings during pod lint\n\n\n\n\n\n\n\n\nsources\n\n\nThe sources of repos you want the pod spec to lint with, separated by commas\n\n\n\n\n\n\n\n\nsubspec\n\n\nA specific subspec to lint instead of the entire spec\n\n\n\n\n\n\n\n\ninclude_podspecs\n\n\nA Glob of additional ancillary podspecs which are used for linting via :path (available since cocoapods >= 1.7)\n\n\n\n\n\n\n\n\nexternal_podspecs\n\n\nA Glob of additional ancillary podspecs which are used for linting via :podspec. If there are --include-podspecs, then these are removed from them (available since cocoapods >= 1.7)\n\n\n\n\n\n\n\n\nswift_version\n\n\nThe SWIFT_VERSION that should be used to lint the spec. This takes precedence over a .swift-version file\n\n\n\n\n\n\n\n\nuse_libraries\n\n\nLint uses static libraries to install the spec\n\n\nfalse\n\n\n\n\n\n\nuse_modular_headers\n\n\nLint using modular libraries (available since cocoapods >= 1.6)\n\n\nfalse\n\n\n\n\n\n\nfail_fast\n\n\nLint stops on the first failing platform or subspec\n\n\nfalse\n\n\n\n\n\n\nprivate\n\n\nLint skips checks that apply only to public specs\n\n\nfalse\n\n\n\n\n\n\nquick\n\n\nLint skips checks that would require to download and build the spec\n\n\nfalse\n\n\n\n\n\n\nno_clean\n\n\nLint leaves the build directory intact for inspection\n\n\nfalse\n\n\n\n\n\n\nno_subspecs\n\n\nLint skips validation of subspecs\n\n\nfalse\n\n\n\n\n\n\nplatforms\n\n\nLint against specific platforms (defaults to all platforms supported by the podspec). Multiple platforms must be comma-delimited (available since cocoapods >= 1.6)\n\n\n\n\n\n\n\n\nskip_import_validation\n\n\nLint skips validating that the pod can be imported (available since cocoapods >= 1.3)\n\n\nfalse\n\n\n\n\n\n\nskip_tests\n\n\nLint skips building and running tests during validation (available since cocoapods >= 1.3)\n\n\nfalse\n\n\n\n\n\n\nanalyze\n\n\nValidate with the Xcode Static Analysis tool (available since cocoapods >= 1.6.1)\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action pod_lib_lint\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run pod_lib_lint\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run pod_lib_lint parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "pod_lib_lint"
        },
        {
            "location": "/actions/pod_lib_lint/#pod_lib_lint",
            "text": "Pod lib lint   Test the syntax of your Podfile by linting the pod against the files of its directory      pod_lib_lint       Supported platforms  ios, mac    Author  @thierryxing",
            "title": "pod_lib_lint"
        },
        {
            "location": "/actions/pod_lib_lint/#4-examples",
            "text": "pod_lib_lint  # Allow output detail in console\npod_lib_lint(verbose: true)  # Allow warnings during pod lint\npod_lib_lint(allow_warnings: true)  # If the podspec has a dependency on another private pod, then you will have to supply the sources\npod_lib_lint(sources: [\"https://github.com/username/Specs\", \"https://github.com/CocoaPods/Specs\"])",
            "title": "4 Examples"
        },
        {
            "location": "/actions/pod_lib_lint/#parameters",
            "text": "Key  Description  Default      use_bundle_exec  Use bundle exec when there is a Gemfile presented  true    podspec  Path of spec to lint     verbose  Allow output detail in console     allow_warnings  Allow warnings during pod lint     sources  The sources of repos you want the pod spec to lint with, separated by commas     subspec  A specific subspec to lint instead of the entire spec     include_podspecs  A Glob of additional ancillary podspecs which are used for linting via :path (available since cocoapods >= 1.7)     external_podspecs  A Glob of additional ancillary podspecs which are used for linting via :podspec. If there are --include-podspecs, then these are removed from them (available since cocoapods >= 1.7)     swift_version  The SWIFT_VERSION that should be used to lint the spec. This takes precedence over a .swift-version file     use_libraries  Lint uses static libraries to install the spec  false    use_modular_headers  Lint using modular libraries (available since cocoapods >= 1.6)  false    fail_fast  Lint stops on the first failing platform or subspec  false    private  Lint skips checks that apply only to public specs  false    quick  Lint skips checks that would require to download and build the spec  false    no_clean  Lint leaves the build directory intact for inspection  false    no_subspecs  Lint skips validation of subspecs  false    platforms  Lint against specific platforms (defaults to all platforms supported by the podspec). Multiple platforms must be comma-delimited (available since cocoapods >= 1.6)     skip_import_validation  Lint skips validating that the pod can be imported (available since cocoapods >= 1.3)  false    skip_tests  Lint skips building and running tests during validation (available since cocoapods >= 1.3)  false    analyze  Validate with the Xcode Static Analysis tool (available since cocoapods >= 1.6.1)  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/pod_lib_lint/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action pod_lib_lint",
            "title": "Documentation"
        },
        {
            "location": "/actions/pod_lib_lint/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run pod_lib_lint  To pass parameters, make use of the  :  symbol, for example  fastlane run pod_lib_lint parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/pod_lib_lint/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/pod_push/",
            "text": "pod_push\n\n\nPush a Podspec to Trunk or a private repository\n\n\n\n\n\n\n\n\npod_push\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@squarefrog\n\n\n\n\n\n\n\n\n4 Examples\n\n\n# If no path is supplied then Trunk will attempt to find the first Podspec in the current directory.\npod_push\n\n\n\n\n# Alternatively, supply the Podspec file path\npod_push(path: \"TSMessages.podspec\")\n\n\n\n\n# You may also push to a private repo instead of Trunk\npod_push(path: \"TSMessages.podspec\", repo: \"MyRepo\")\n\n\n\n\n# If the podspec has a dependency on another private pod, then you will have to supply the sources you want the podspec to lint with for pod_push to succeed. Read more here - https://github.com/CocoaPods/CocoaPods/issues/2543.\npod_push(path: \"TMessages.podspec\", repo: \"MyRepo\", sources: [\"https://github.com/username/Specs\", \"https://github.com/CocoaPods/Specs\"])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\nfalse\n\n\n\n\n\n\npath\n\n\nThe Podspec you want to push\n\n\n\n\n\n\n\n\nrepo\n\n\nThe repo you want to push. Pushes to Trunk by default\n\n\n\n\n\n\n\n\nallow_warnings\n\n\nAllow warnings during pod push\n\n\n\n\n\n\n\n\nuse_libraries\n\n\nAllow lint to use static libraries to install the spec\n\n\n\n\n\n\n\n\nsources\n\n\nThe sources of repos you want the pod spec to lint with, separated by commas\n\n\n\n\n\n\n\n\nswift_version\n\n\nThe SWIFT_VERSION that should be used to lint the spec. This takes precedence over a .swift-version file\n\n\n\n\n\n\n\n\nskip_import_validation\n\n\nLint skips validating that the pod can be imported\n\n\n\n\n\n\n\n\nskip_tests\n\n\nLint skips building and running tests during validation\n\n\n\n\n\n\n\n\nuse_json\n\n\nConvert the podspec to JSON before pushing it to the repo\n\n\n\n\n\n\n\n\nverbose\n\n\nShow more debugging information\n\n\nfalse\n\n\n\n\n\n\nuse_modular_headers\n\n\nUse modular headers option during validation\n\n\n\n\n\n\n\n\nsynchronous\n\n\nIf validation depends on other recently pushed pods, synchronize\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action pod_push\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run pod_push\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run pod_push parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "pod_push"
        },
        {
            "location": "/actions/pod_push/#pod_push",
            "text": "Push a Podspec to Trunk or a private repository     pod_push       Supported platforms  ios, mac    Author  @squarefrog",
            "title": "pod_push"
        },
        {
            "location": "/actions/pod_push/#4-examples",
            "text": "# If no path is supplied then Trunk will attempt to find the first Podspec in the current directory.\npod_push  # Alternatively, supply the Podspec file path\npod_push(path: \"TSMessages.podspec\")  # You may also push to a private repo instead of Trunk\npod_push(path: \"TSMessages.podspec\", repo: \"MyRepo\")  # If the podspec has a dependency on another private pod, then you will have to supply the sources you want the podspec to lint with for pod_push to succeed. Read more here - https://github.com/CocoaPods/CocoaPods/issues/2543.\npod_push(path: \"TMessages.podspec\", repo: \"MyRepo\", sources: [\"https://github.com/username/Specs\", \"https://github.com/CocoaPods/Specs\"])",
            "title": "4 Examples"
        },
        {
            "location": "/actions/pod_push/#parameters",
            "text": "Key  Description  Default      use_bundle_exec  Use bundle exec when there is a Gemfile presented  false    path  The Podspec you want to push     repo  The repo you want to push. Pushes to Trunk by default     allow_warnings  Allow warnings during pod push     use_libraries  Allow lint to use static libraries to install the spec     sources  The sources of repos you want the pod spec to lint with, separated by commas     swift_version  The SWIFT_VERSION that should be used to lint the spec. This takes precedence over a .swift-version file     skip_import_validation  Lint skips validating that the pod can be imported     skip_tests  Lint skips building and running tests during validation     use_json  Convert the podspec to JSON before pushing it to the repo     verbose  Show more debugging information  false    use_modular_headers  Use modular headers option during validation     synchronous  If validation depends on other recently pushed pods, synchronize      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/pod_push/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action pod_push",
            "title": "Documentation"
        },
        {
            "location": "/actions/pod_push/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run pod_push  To pass parameters, make use of the  :  symbol, for example  fastlane run pod_push parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/pod_push/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/podio_item/",
            "text": "podio_item\n\n\nCreates or updates an item within your Podio app\n\n\n\n\nUse this action to create or update an item within your Podio app (see \nhttps://help.podio.com/hc/en-us/articles/201019278-Creating-apps-\n).\nPass in dictionary with field keys and their values.\nField key is located under \nModify app\n -> \nAdvanced\n -> \nDeveloper\n -> \nExternal ID\n (see \nhttps://developers.podio.com/examples/items\n).\n\n\n\n\n\n\n\n\n\n\npodio_item\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@pprochazka72, @laugejepsen\n\n\n\n\n\n\n\n\n1 Example\n\n\npodio_item(\n  identifying_value: \"Your unique value\",\n  other_fields: {\n    \"field1\" => \"fieldValue\",\n    \"field2\" => \"fieldValue2\"\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nclient_id\n\n\nClient ID for Podio API (see https://developers.podio.com/api-key)\n\n\n\n\n\n\n\n\nclient_secret\n\n\nClient secret for Podio API (see https://developers.podio.com/api-key)\n\n\n\n\n\n\n\n\napp_id\n\n\nApp ID of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n\n\n\n\n\n\n\n\napp_token\n\n\nApp token of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)\n\n\n\n\n\n\n\n\nidentifying_field\n\n\nString specifying the field key used for identification of an item\n\n\n\n\n\n\n\n\nidentifying_value\n\n\nString uniquely specifying an item within the app\n\n\n\n\n\n\n\n\nother_fields\n\n\nDictionary of your app fields. Podio supports several field types, see https://developers.podio.com/doc/items\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \npodio_item\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::PODIO_ITEM_URL\n\n\nURL to newly created (or updated) Podio item\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action podio_item\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run podio_item\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run podio_item parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "podio_item"
        },
        {
            "location": "/actions/podio_item/#podio_item",
            "text": "Creates or updates an item within your Podio app   Use this action to create or update an item within your Podio app (see  https://help.podio.com/hc/en-us/articles/201019278-Creating-apps- ). Pass in dictionary with field keys and their values. Field key is located under  Modify app  ->  Advanced  ->  Developer  ->  External ID  (see  https://developers.podio.com/examples/items ).      podio_item       Supported platforms  ios, android, mac    Author  @pprochazka72, @laugejepsen",
            "title": "podio_item"
        },
        {
            "location": "/actions/podio_item/#1-example",
            "text": "podio_item(\n  identifying_value: \"Your unique value\",\n  other_fields: {\n    \"field1\" => \"fieldValue\",\n    \"field2\" => \"fieldValue2\"\n  }\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/podio_item/#parameters",
            "text": "Key  Description  Default      client_id  Client ID for Podio API (see https://developers.podio.com/api-key)     client_secret  Client secret for Podio API (see https://developers.podio.com/api-key)     app_id  App ID of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)     app_token  App token of the app you intend to authenticate with (see https://developers.podio.com/authentication/app_auth)     identifying_field  String specifying the field key used for identification of an item     identifying_value  String uniquely specifying an item within the app     other_fields  Dictionary of your app fields. Podio supports several field types, see https://developers.podio.com/doc/items      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/podio_item/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  podio_item  action generates the following Lane Variables:     SharedValue  Description      SharedValues::PODIO_ITEM_URL  URL to newly created (or updated) Podio item     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/podio_item/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action podio_item",
            "title": "Documentation"
        },
        {
            "location": "/actions/podio_item/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run podio_item  To pass parameters, make use of the  :  symbol, for example  fastlane run podio_item parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/podio_item/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/precheck/",
            "text": "precheck\n\n\nAlias for the \ncheck_app_store_metadata\n action\n\n\n\n  \n\n\n\n\n\nPrecheck\n\n\nCheck your app using a community driven set of App Store review rules to avoid being rejected\n\n\nApple rejects builds for many avoidable metadata issues like including swear words \ud83d\ude2e, other companies\u2019 trademarks, or even mentioning an iOS bug \ud83d\udc1b. \nfastlane precheck\n takes a lot of the guess work out by scanning your app\u2019s details in App Store Connect for avoidable problems. fastlane precheck helps you get your app through app review without rejections so you can ship faster \ud83d\ude80\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nExample\n \u2022\n    \nHow does it work?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\n\n\n\n\n\n\nprecheck Features\n\n\n\n\n\n\n\n\n\n\n\ud83d\udc1b\n\n\n\uf8ff product bug mentions\n\n\n\n\n\n\n\ud83d\ude45\n\n\nSwear word checker\n\n\n\n\n\n\n\ud83e\udd16\n\n\nMentioning other platforms\n\n\n\n\n\n\n\ud83d\ude35\n\n\nURL reachability checker\n\n\n\n\n\n\n\ud83d\udcdd\n\n\nPlaceholder/test words/mentioning future features\n\n\n\n\n\n\n\ud83d\udcc5\n\n\nCopyright date checking\n\n\n\n\n\n\n\ud83d\ude48\n\n\nCustomizable word list checking\n\n\n\n\n\n\n\ud83d\udce2\n\n\nYou can decide if you want to warn about potential problems and continue or have \nfastlane\n show an error and stop after all scans are done\n\n\n\n\n\n\n\n\nUsage\n\n\nRun \nfastlane precheck\n to check the app metadata from App Store Connect\n\n\nfastlane precheck\n\n\n\n\nTo get a list of available options run\n\n\nfastlane action precheck\n\n\n\n\n\n\nExample\n\n\nSince you might want to manually trigger \nprecheck\n but don't want to specify all the parameters every time, you can store your defaults in a so called \nPrecheckfile\n.\n\n\nRun \nfastlane precheck init\n to create a new configuration file. Example:\n\n\n# indicates that your metadata will not be checked by this rule\nnegative_apple_sentiment(level: :skip)\n\n# when triggered, this rule will warn you of a potential problem\ncurse_words(level: :warn)\n\n# show error and prevent any further commands from running after fastlane precheck finishes\nunreachable_urls(level: :error)\n\n# pass in whatever words you want to check for\ncustom_text(data: [\"chrome\", \"webos\"], \n           level: :warn)\n\n\n\n\nUse with \nfastlane\n\n\nprecheck\n is fully integrated with \ndeliver\n another \nfastlane\n tool.\n\n\nUpdate your \nFastfile\n to contain the following code:\n\n\nlane :production do\n  # ...\n\n  # by default deliver will call precheck and warn you of any problems\n  # if you want precheck to halt submitting to app review, you can pass\n  # precheck_default_rule_level: :error\n  deliver(precheck_default_rule_level: :error)\n\n  # ...\nend\n\n# or if you prefer, you can run precheck alone\nlane :check_metadata do\n  precheck\nend\n\n\n\n\n\nHow does it work?\n\n\nprecheck\n will access \nApp Store Connect\n to download your app's metadata. It uses \nspaceship\n to communicate with Apple's web services.\n\n\nWant to improve precheck's rules?\n\n\nPlease submit an issue on GitHub and provide information about your App Store rejection! Make sure you scrub out any personally identifiable information since this will be public.\n\n\n\n\n\n\n\n\n\n\n\nprecheck\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@taquitos\n\n\n\n\n\n\nReturns\n\n\ntrue if precheck passes, else, false\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncheck_app_store_metadata(\n  negative_apple_sentiment: [level: :skip], # Set to skip to not run the `negative_apple_sentiment` rule\n  curse_words: [level: :warn] # Set to warn to only warn on curse word check failures\n)\n\n\n\n\nprecheck   # alias for \"check_app_store_metadata\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\ndefault_rule_level\n\n\nThe default rule level unless otherwise configured\n\n\n:error\n\n\n\n\n\n\ninclude_in_app_purchases\n\n\nShould check in-app purchases?\n\n\ntrue\n\n\n\n\n\n\nuse_live\n\n\nShould force check live app?\n\n\nfalse\n\n\n\n\n\n\nnegative_apple_sentiment\n\n\nmentioning \uf8ff in a way that could be considered negative\n\n\n\n\n\n\n\n\nplaceholder_text\n\n\nusing placeholder text (e.g.:\"lorem ipsum\", \"text here\", etc...)\n\n\n\n\n\n\n\n\nother_platforms\n\n\nmentioning other platforms, like Android or Blackberry\n\n\n\n\n\n\n\n\nfuture_functionality\n\n\nmentioning features or content that is not currently available in your app\n\n\n\n\n\n\n\n\ntest_words\n\n\nusing text indicating this release is a test\n\n\n\n\n\n\n\n\ncurse_words\n\n\nincluding words that might be considered objectionable\n\n\n\n\n\n\n\n\nfree_stuff_in_iap\n\n\nusing text indicating that your IAP is free\n\n\n\n\n\n\n\n\ncustom_text\n\n\nmentioning any of the user-specified words passed to custom_text(data: [words])\n\n\n\n\n\n\n\n\ncopyright_date\n\n\nusing a copyright date that is any different from this current year, or missing a date\n\n\n\n\n\n\n\n\nunreachable_urls\n\n\nunreachable URLs in app metadata\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action precheck\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run precheck\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run precheck parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "precheck"
        },
        {
            "location": "/actions/precheck/#precheck",
            "text": "Alias for the  check_app_store_metadata  action",
            "title": "precheck"
        },
        {
            "location": "/actions/precheck/#precheck_1",
            "text": "",
            "title": "Precheck"
        },
        {
            "location": "/actions/precheck/#check-your-app-using-a-community-driven-set-of-app-store-review-rules-to-avoid-being-rejected",
            "text": "Apple rejects builds for many avoidable metadata issues like including swear words \ud83d\ude2e, other companies\u2019 trademarks, or even mentioning an iOS bug \ud83d\udc1b.  fastlane precheck  takes a lot of the guess work out by scanning your app\u2019s details in App Store Connect for avoidable problems. fastlane precheck helps you get your app through app review without rejections so you can ship faster \ud83d\ude80   \n     Features  \u2022\n     Usage  \u2022\n     Example  \u2022\n     How does it work?",
            "title": "Check your app using a community driven set of App Store review rules to avoid being rejected"
        },
        {
            "location": "/actions/precheck/#features",
            "text": "precheck Features      \ud83d\udc1b  \uf8ff product bug mentions    \ud83d\ude45  Swear word checker    \ud83e\udd16  Mentioning other platforms    \ud83d\ude35  URL reachability checker    \ud83d\udcdd  Placeholder/test words/mentioning future features    \ud83d\udcc5  Copyright date checking    \ud83d\ude48  Customizable word list checking    \ud83d\udce2  You can decide if you want to warn about potential problems and continue or have  fastlane  show an error and stop after all scans are done",
            "title": "Features"
        },
        {
            "location": "/actions/precheck/#usage",
            "text": "Run  fastlane precheck  to check the app metadata from App Store Connect  fastlane precheck  To get a list of available options run  fastlane action precheck",
            "title": "Usage"
        },
        {
            "location": "/actions/precheck/#example",
            "text": "Since you might want to manually trigger  precheck  but don't want to specify all the parameters every time, you can store your defaults in a so called  Precheckfile .  Run  fastlane precheck init  to create a new configuration file. Example:  # indicates that your metadata will not be checked by this rule\nnegative_apple_sentiment(level: :skip)\n\n# when triggered, this rule will warn you of a potential problem\ncurse_words(level: :warn)\n\n# show error and prevent any further commands from running after fastlane precheck finishes\nunreachable_urls(level: :error)\n\n# pass in whatever words you want to check for\ncustom_text(data: [\"chrome\", \"webos\"], \n           level: :warn)",
            "title": "Example"
        },
        {
            "location": "/actions/precheck/#use-with-fastlane",
            "text": "precheck  is fully integrated with  deliver  another  fastlane  tool.  Update your  Fastfile  to contain the following code:  lane :production do\n  # ...\n\n  # by default deliver will call precheck and warn you of any problems\n  # if you want precheck to halt submitting to app review, you can pass\n  # precheck_default_rule_level: :error\n  deliver(precheck_default_rule_level: :error)\n\n  # ...\nend\n\n# or if you prefer, you can run precheck alone\nlane :check_metadata do\n  precheck\nend",
            "title": "Use with fastlane"
        },
        {
            "location": "/actions/precheck/#how-does-it-work",
            "text": "precheck  will access  App Store Connect  to download your app's metadata. It uses  spaceship  to communicate with Apple's web services.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/precheck/#want-to-improve-prechecks-rules",
            "text": "Please submit an issue on GitHub and provide information about your App Store rejection! Make sure you scrub out any personally identifiable information since this will be public.      precheck       Supported platforms  ios    Author  @taquitos    Returns  true if precheck passes, else, false",
            "title": "Want to improve precheck's rules?"
        },
        {
            "location": "/actions/precheck/#2-examples",
            "text": "check_app_store_metadata(\n  negative_apple_sentiment: [level: :skip], # Set to skip to not run the `negative_apple_sentiment` rule\n  curse_words: [level: :warn] # Set to warn to only warn on curse word check failures\n)  precheck   # alias for \"check_app_store_metadata\"",
            "title": "2 Examples"
        },
        {
            "location": "/actions/precheck/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    platform  The platform to use (optional)  ios    default_rule_level  The default rule level unless otherwise configured  :error    include_in_app_purchases  Should check in-app purchases?  true    use_live  Should force check live app?  false    negative_apple_sentiment  mentioning \uf8ff in a way that could be considered negative     placeholder_text  using placeholder text (e.g.:\"lorem ipsum\", \"text here\", etc...)     other_platforms  mentioning other platforms, like Android or Blackberry     future_functionality  mentioning features or content that is not currently available in your app     test_words  using text indicating this release is a test     curse_words  including words that might be considered objectionable     free_stuff_in_iap  using text indicating that your IAP is free     custom_text  mentioning any of the user-specified words passed to custom_text(data: [words])     copyright_date  using a copyright date that is any different from this current year, or missing a date     unreachable_urls  unreachable URLs in app metadata      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/precheck/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action precheck",
            "title": "Documentation"
        },
        {
            "location": "/actions/precheck/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run precheck  To pass parameters, make use of the  :  symbol, for example  fastlane run precheck parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/precheck/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/println/",
            "text": "println\n\n\nAlias for the \nputs\n action\n\n\n\n\n\n\n\n\nprintln\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nputs \"Hi there\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nMessage to be printed out\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action println\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run println\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run println parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "println"
        },
        {
            "location": "/actions/println/#println",
            "text": "Alias for the  puts  action     println       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "println"
        },
        {
            "location": "/actions/println/#1-example",
            "text": "puts \"Hi there\"",
            "title": "1 Example"
        },
        {
            "location": "/actions/println/#parameters",
            "text": "Key  Description  Default      message  Message to be printed out      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/println/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action println",
            "title": "Documentation"
        },
        {
            "location": "/actions/println/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run println  To pass parameters, make use of the  :  symbol, for example  fastlane run println parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/println/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/produce/",
            "text": "produce\n\n\nAlias for the \ncreate_app_online\n action\n\n\n\n  \n\n\n\n\n\nCreate new iOS apps on App Store Connect and Apple Developer Portal using your command line\n\n\nproduce\n creates new iOS apps on both the Apple Developer Portal and App Store Connect with the minimum required information.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nHow does it work?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nCreate\n new apps on both App Store Connect and the Apple Developer Portal\n\n\nModify\n Application Services on the Apple Developer Portal\n\n\nCreate\n App Groups on the Apple Developer Portal\n\n\nAssociate\n apps with App Groups on the Apple Developer Portal\n\n\nCreate\n iCloud Containers on the Apple Developer Portal\n\n\nAssociate\n apps with iCloud Containers on the Apple Developer Portal\n\n\nCreate\n Merchant Identifiers on the Apple Developer Portal\n\n\nAssociate\n apps with Merchant Identifiers on the Apple Developer Portal\n\n\nSupport for \nmultiple Apple accounts\n, storing your credentials securely in the Keychain\n\n\n\n\nUsage\n\n\nCreating a new application\n\n\nfastlane produce\n\n\n\n\nTo get a list of all available parameters:\n\n\nfastlane produce --help\n\n\n\n\nCommands: (* default)\n  associate_group      Associate with a group, which is created if needed or simply located otherwise\n  associate_merchant   Associate with a merchant for use with Apple Pay. Apple Pay will be enabled for this app\n  create             * Creates a new app on App Store Connect and the Apple Developer Portal\n  disable_services     Disable specific Application Services for a specific app on the Apple Developer Portal\n  enable_services      Enable specific Application Services for a specific app on the Apple Developer Portal\n  group                Ensure that a specific App Group exists\n  cloud_container      Ensure that a specific iCloud Container exists\n  help                 Display global or [command] help documentation\n  merchant             Ensure that a specific Merchant exists\n\nGlobal Options:\n  --verbose\n  -h, --help           Display help documentation\n  -v, --version        Display version information\n\nOptions for create:\n  -u, --username STRING Your Apple ID Username (PRODUCE_USERNAME)\n  -a, --app_identifier STRING App Identifier (Bundle ID, e.g. com.krausefx.app) (PRODUCE_APP_IDENTIFIER)\n  -e, --bundle_identifier_suffix STRING App Identifier Suffix (Ignored if App Identifier does not ends with .*) (PRODUCE_APP_IDENTIFIER_SUFFIX)\n  -q, --app_name STRING App Name (PRODUCE_APP_NAME)\n  -z, --app_version STRING Initial version number (e.g. '1.0') (PRODUCE_VERSION)\n  -y, --sku STRING     SKU Number (e.g. '1234') (PRODUCE_SKU)\n  -j, --platform STRING The platform to use (optional) (PRODUCE_PLATFORM)\n  -m, --language STRING Primary Language (e.g. 'English', 'German') (PRODUCE_LANGUAGE)\n  -c, --company_name STRING The name of your company. Only required if it's the first app you create (PRODUCE_COMPANY_NAME)\n  -i, --skip_itc [VALUE] Skip the creation of the app on App Store Connect (PRODUCE_SKIP_ITC)\n  -d, --skip_devcenter [VALUE] Skip the creation of the app on the Apple Developer Portal (PRODUCE_SKIP_DEVCENTER)\n  -s, --itc_users ARRAY Array of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles (ITC_USERS)\n  -b, --team_id STRING The ID of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_ID)\n  -l, --team_name STRING The name of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_NAME)\n  -k, --itc_team_id [VALUE] The ID of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_ID)\n  -p, --itc_team_name STRING The name of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_NAME)\n\n\n\n\nEnabling / Disabling Application Services\n\n\nIf you want to enable Application Services for an App ID (HomeKit and HealthKit in this example):\n\n\nfastlane produce enable_services --homekit --healthkit\n\n\n\n\nIf you want to disable Application Services for an App ID (iCloud in this case):\n\n\nfastlane produce disable_services --icloud\n\n\n\n\nIf you want to create a new App Group:\n\n\nfastlane produce group -g group.krausefx -n \"Example App Group\"\n\n\n\n\nIf you want to associate an app with an App Group:\n\n\nfastlane produce associate_group -a com.krausefx.app group.krausefx\n\n\n\n\nIf you want to create a new iCloud Container:\n\n\nfastlane produce cloud_container -g iCloud.com.krausefx.app -n \"Example iCloud Container\"\n\n\n\n\nIf you want to associate an app with an iCloud Container:\n\n\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app\n\n\n\n\nIf you want to associate an app with multiple iCloud Containers:\n\n\nfastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app1 iCloud.com.krausefx.app2\n\n\n\n\nParameters\n\n\nGet a list of all available options using\n\n\nfastlane produce enable_services --help\n\n\n\n\n--app-group          Enable App Groups\n--apple-pay          Enable Apple Pay\n--associated-domains Enable Associated Domains\n--data-protection STRING Enable Data Protection, suitable values are \"complete\", \"unlessopen\" and \"untilfirstauth\"\n--game-center        Enable Game Center\n--healthkit          Enable HealthKit\n--homekit            Enable HomeKit\n--hotspot            Enable Hotspot\n--icloud STRING      Enable iCloud, suitable values are \"legacy\" and \"cloudkit\"\n--in-app-purchase    Enable In-App Purchase\n--inter-app-audio    Enable Inter-App-Audio\n--multipath          Enable Multipath\n--network-extension  Enable Network Extensions\n--nfc-tag-reading    Enable NFC Tag Reading\n--personal-vpn       Enable Personal VPN\n--passbook           Enable Passbook (deprecated)\n--push-notification  Enable Push notification (only enables the service, does not configure certificates)\n--sirikit            Enable SiriKit\n--vpn-conf           Enable VPN Configuration (deprecated)\n--wallet             Enable Wallet\n--wireless-conf      Enable Wireless Accessory Configuration\n\n\n\n\nfastlane produce disable_services --help\n\n\n\n\n--app-group          Disable App Groups\n--apple-pay          Disable Apple Pay\n--associated-domains Disable Associated Domains\n--data-protection    Disable Data Protection\n--game-center        Disable Game Center\n--healthkit          Disable HealthKit\n--homekit            Disable HomeKit\n--hotspot            Disable Hotspot\n--icloud             Disable iCloud\n--in-app-purchase    Disable In-App Purchase\n--inter-app-audio    Disable Inter-App-Audio\n--multipath          Disable Multipath\n--network-extension  Disable Network Extensions\n--nfc-tag-reading    Disable NFC Tag Reading\n--personal-vpn       Disable Personal VPN\n--passbook           Disable Passbook (deprecated)\n--push-notification  Disable Push notifications\n--sirikit            Disable SiriKit\n--vpn-conf           Disable VPN Configuration (deprecated)\n--wallet             Disable Wallet\n--wireless-conf      Disable Wireless Accessory Configuration\n\n\n\n\nCreating Apple Pay merchants and associating them with an App ID\n\n\nIf you want to create a new Apple Pay Merchant Identifier:\n\n\nfastlane produce merchant -o merchant.com.example.production -r \"Example Merchant Production\"\n\n\n\n\nUse \n--help\n for more information about all available parameters\n\n\nfastlane produce merchant --help\n\n\n\n\nIf you want to associate an app with a Merchant Identifier:\n\n\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production\n\n\n\n\nIf you want to associate an app with multiple Merchant Identifiers:\n\n\nfastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production merchant.com.example.sandbox\n\n\n\n\nUse --help for more information about all available parameters\n\n\nfastlane produce associate_merchant --help\n\n\n\n\nEnvironment Variables\n\n\nAll available values can also be passed using environment variables, run \nfastlane produce --help\n to get a list of all available parameters.\n\n\nfastlane\n Integration\n\n\nYour \nFastfile\n should look like this\n\n\nlane :release do\n  produce(\n    username: 'felix@krausefx.com',\n    app_identifier: 'com.krausefx.app',\n    app_name: 'MyApp',\n    language: 'English',\n    app_version: '1.0',\n    sku: '123',\n    team_name: 'SunApps GmbH', # only necessary when in multiple teams\n\n    # Optional\n    # App services can be enabled during app creation\n    enable_services: {\n      access_wifi: \"on\",             # Valid values: \"on\", \"off\"\n      app_group: \"on\",               # Valid values: \"on\", \"off\"\n      apple_pay: \"on\",               # Valid values: \"on\", \"off\"\n      associated_domains: \"on\",      # Valid values: \"on\", \"off\"\n      auto_fill_credential: \"on\",    # Valid values: \"on\", \"off\"\n      data_protection: \"complete\",   # Valid values: \"complete\", \"unlessopen\", \"untilfirstauth\",\n      game_center: \"on\",             # Valid values: \"on\", \"off\"\n      health_kit: \"on\",              # Valid values: \"on\", \"off\"\n      home_kit: \"on\",                # Valid values: \"on\", \"off\"\n      hotspot: \"on\",                 # Valid values: \"on\", \"off\"\n      icloud: \"cloudkit\",            # Valid values: \"legacy\", \"cloudkit\"\n      in_app_purchase: \"on\",         # Valid values: \"on\", \"off\"\n      inter_app_audio: \"on\",         # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\"\n      multipath: \"on\",               # Valid values: \"on\", \"off\"\n      network_extension: \"on\",       # Valid values: \"on\", \"off\"\n      nfc_tag_reading: \"on\",         # Valid values: \"on\", \"off\"\n      personal_vpn: \"on\",            # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\" (deprecated)\n      push_notification: \"on\",       # Valid values: \"on\", \"off\"\n      siri_kit: \"on\",                # Valid values: \"on\", \"off\"\n      vpn_configuration: \"on\",       # Valid values: \"on\", \"off\" (deprecated)\n      wallet: \"on\",                  # Valid values: \"on\", \"off\"\n      wireless_accessory: \"on\",      # Valid values: \"on\", \"off\"\n    }\n  )\n\n  deliver\nend\n\n\n\n\nTo use the newly generated app in \ndeliver\n, you need to add this line to your \nDeliverfile\n:\n\n\napple_id(ENV['PRODUCE_APPLE_ID'])\n\n\n\n\nThis will tell \ndeliver\n, which \nApp ID\n to use, since the app is not yet available in the App Store.\n\n\nYou'll still have to fill out the remaining information (like screenshots, app description and pricing). You can use \ndeliver\n to upload your app metadata using a CLI\n\n\nHow is my password stored?\n\n\nproduce\n uses the \npassword manager\n from \nfastlane\n. Take a look the \nCredentialsManager README\n for more information.\n\n\n\n\n\n\n\n\n\n\n\nproduce\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\ncreate_app_online(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  app_name: \"MyApp\",\n  language: \"English\",\n  app_version: \"1.0\",\n  sku: \"123\",\n  team_name: \"SunApps GmbH\" # Only necessary when in multiple teams.\n)\n\n\n\n\nproduce   # alias for \"create_app_online\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nApp Identifier (Bundle ID, e.g. com.krausefx.app)\n\n\n*\n\n\n\n\n\n\nbundle_identifier_suffix\n\n\nApp Identifier Suffix (Ignored if App Identifier does not end with .*)\n\n\n\n\n\n\n\n\napp_name\n\n\nApp Name\n\n\n\n\n\n\n\n\napp_version\n\n\nInitial version number (e.g. '1.0')\n\n\n\n\n\n\n\n\nsku\n\n\nSKU Number (e.g. '1234')\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\nplatforms\n\n\nThe platforms to use (optional)\n\n\n\n\n\n\n\n\nlanguage\n\n\nPrimary Language (e.g. 'en-US', 'fr-FR')\n\n\nEnglish\n\n\n\n\n\n\ncompany_name\n\n\nThe name of your company. Only required if it's the first app you create\n\n\n\n\n\n\n\n\nskip_itc\n\n\nSkip the creation of the app on App Store Connect\n\n\nfalse\n\n\n\n\n\n\nitc_users\n\n\nArray of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles\n\n\n\n\n\n\n\n\nenabled_features\n\n\nDEPRECATED!\n Please use \nenable_services\n instead - Array with Spaceship App Services\n\n\n{}\n\n\n\n\n\n\nenable_services\n\n\nArray with Spaceship App Services (e.g. access_wifi: (on|off), app_group: (on|off), apple_pay: (on|off), associated_domains: (on|off), auto_fill_credential: (on|off), data_protection: (complete|unlessopen|untilfirstauth), game_center: (on|off), health_kit: (on|off), home_kit: (on|off), hotspot: (on|off), icloud: (legacy|cloudkit), in_app_purchase: (on|off), inter_app_audio: (on|off), multipath: (on|off), network_extension: (on|off), nfc_tag_reading: (on|off), personal_vpn: (on|off), passbook: (on|off), push_notification: (on|off), siri_kit: (on|off), vpn_configuration: (on|off), wallet: (on|off), wireless_accessory: (on|off))\n\n\n{}\n\n\n\n\n\n\nskip_devcenter\n\n\nSkip the creation of the app on the Apple Developer Portal\n\n\nfalse\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_team_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_team_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nproduce\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::PRODUCE_APPLE_ID\n\n\nThe Apple ID of the newly created app. You probably need it for \ndeliver\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action produce\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run produce\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run produce parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "produce"
        },
        {
            "location": "/actions/produce/#produce",
            "text": "Alias for the  create_app_online  action",
            "title": "produce"
        },
        {
            "location": "/actions/produce/#create-new-ios-apps-on-app-store-connect-and-apple-developer-portal-using-your-command-line",
            "text": "produce  creates new iOS apps on both the Apple Developer Portal and App Store Connect with the minimum required information.   \n     Features  \u2022\n     Usage  \u2022\n     How does it work?",
            "title": "Create new iOS apps on App Store Connect and Apple Developer Portal using your command line"
        },
        {
            "location": "/actions/produce/#features",
            "text": "Create  new apps on both App Store Connect and the Apple Developer Portal  Modify  Application Services on the Apple Developer Portal  Create  App Groups on the Apple Developer Portal  Associate  apps with App Groups on the Apple Developer Portal  Create  iCloud Containers on the Apple Developer Portal  Associate  apps with iCloud Containers on the Apple Developer Portal  Create  Merchant Identifiers on the Apple Developer Portal  Associate  apps with Merchant Identifiers on the Apple Developer Portal  Support for  multiple Apple accounts , storing your credentials securely in the Keychain",
            "title": "Features"
        },
        {
            "location": "/actions/produce/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/actions/produce/#creating-a-new-application",
            "text": "fastlane produce  To get a list of all available parameters:  fastlane produce --help  Commands: (* default)\n  associate_group      Associate with a group, which is created if needed or simply located otherwise\n  associate_merchant   Associate with a merchant for use with Apple Pay. Apple Pay will be enabled for this app\n  create             * Creates a new app on App Store Connect and the Apple Developer Portal\n  disable_services     Disable specific Application Services for a specific app on the Apple Developer Portal\n  enable_services      Enable specific Application Services for a specific app on the Apple Developer Portal\n  group                Ensure that a specific App Group exists\n  cloud_container      Ensure that a specific iCloud Container exists\n  help                 Display global or [command] help documentation\n  merchant             Ensure that a specific Merchant exists\n\nGlobal Options:\n  --verbose\n  -h, --help           Display help documentation\n  -v, --version        Display version information\n\nOptions for create:\n  -u, --username STRING Your Apple ID Username (PRODUCE_USERNAME)\n  -a, --app_identifier STRING App Identifier (Bundle ID, e.g. com.krausefx.app) (PRODUCE_APP_IDENTIFIER)\n  -e, --bundle_identifier_suffix STRING App Identifier Suffix (Ignored if App Identifier does not ends with .*) (PRODUCE_APP_IDENTIFIER_SUFFIX)\n  -q, --app_name STRING App Name (PRODUCE_APP_NAME)\n  -z, --app_version STRING Initial version number (e.g. '1.0') (PRODUCE_VERSION)\n  -y, --sku STRING     SKU Number (e.g. '1234') (PRODUCE_SKU)\n  -j, --platform STRING The platform to use (optional) (PRODUCE_PLATFORM)\n  -m, --language STRING Primary Language (e.g. 'English', 'German') (PRODUCE_LANGUAGE)\n  -c, --company_name STRING The name of your company. Only required if it's the first app you create (PRODUCE_COMPANY_NAME)\n  -i, --skip_itc [VALUE] Skip the creation of the app on App Store Connect (PRODUCE_SKIP_ITC)\n  -d, --skip_devcenter [VALUE] Skip the creation of the app on the Apple Developer Portal (PRODUCE_SKIP_DEVCENTER)\n  -s, --itc_users ARRAY Array of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles (ITC_USERS)\n  -b, --team_id STRING The ID of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_ID)\n  -l, --team_name STRING The name of your Developer Portal team if you're in multiple teams (PRODUCE_TEAM_NAME)\n  -k, --itc_team_id [VALUE] The ID of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_ID)\n  -p, --itc_team_name STRING The name of your App Store Connect team if you're in multiple teams (PRODUCE_ITC_TEAM_NAME)",
            "title": "Creating a new application"
        },
        {
            "location": "/actions/produce/#enabling-disabling-application-services",
            "text": "If you want to enable Application Services for an App ID (HomeKit and HealthKit in this example):  fastlane produce enable_services --homekit --healthkit  If you want to disable Application Services for an App ID (iCloud in this case):  fastlane produce disable_services --icloud  If you want to create a new App Group:  fastlane produce group -g group.krausefx -n \"Example App Group\"  If you want to associate an app with an App Group:  fastlane produce associate_group -a com.krausefx.app group.krausefx  If you want to create a new iCloud Container:  fastlane produce cloud_container -g iCloud.com.krausefx.app -n \"Example iCloud Container\"  If you want to associate an app with an iCloud Container:  fastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app  If you want to associate an app with multiple iCloud Containers:  fastlane produce associate_cloud_container -a com.krausefx.app iCloud.com.krausefx.app1 iCloud.com.krausefx.app2",
            "title": "Enabling / Disabling Application Services"
        },
        {
            "location": "/actions/produce/#parameters",
            "text": "Get a list of all available options using  fastlane produce enable_services --help  --app-group          Enable App Groups\n--apple-pay          Enable Apple Pay\n--associated-domains Enable Associated Domains\n--data-protection STRING Enable Data Protection, suitable values are \"complete\", \"unlessopen\" and \"untilfirstauth\"\n--game-center        Enable Game Center\n--healthkit          Enable HealthKit\n--homekit            Enable HomeKit\n--hotspot            Enable Hotspot\n--icloud STRING      Enable iCloud, suitable values are \"legacy\" and \"cloudkit\"\n--in-app-purchase    Enable In-App Purchase\n--inter-app-audio    Enable Inter-App-Audio\n--multipath          Enable Multipath\n--network-extension  Enable Network Extensions\n--nfc-tag-reading    Enable NFC Tag Reading\n--personal-vpn       Enable Personal VPN\n--passbook           Enable Passbook (deprecated)\n--push-notification  Enable Push notification (only enables the service, does not configure certificates)\n--sirikit            Enable SiriKit\n--vpn-conf           Enable VPN Configuration (deprecated)\n--wallet             Enable Wallet\n--wireless-conf      Enable Wireless Accessory Configuration  fastlane produce disable_services --help  --app-group          Disable App Groups\n--apple-pay          Disable Apple Pay\n--associated-domains Disable Associated Domains\n--data-protection    Disable Data Protection\n--game-center        Disable Game Center\n--healthkit          Disable HealthKit\n--homekit            Disable HomeKit\n--hotspot            Disable Hotspot\n--icloud             Disable iCloud\n--in-app-purchase    Disable In-App Purchase\n--inter-app-audio    Disable Inter-App-Audio\n--multipath          Disable Multipath\n--network-extension  Disable Network Extensions\n--nfc-tag-reading    Disable NFC Tag Reading\n--personal-vpn       Disable Personal VPN\n--passbook           Disable Passbook (deprecated)\n--push-notification  Disable Push notifications\n--sirikit            Disable SiriKit\n--vpn-conf           Disable VPN Configuration (deprecated)\n--wallet             Disable Wallet\n--wireless-conf      Disable Wireless Accessory Configuration",
            "title": "Parameters"
        },
        {
            "location": "/actions/produce/#creating-apple-pay-merchants-and-associating-them-with-an-app-id",
            "text": "If you want to create a new Apple Pay Merchant Identifier:  fastlane produce merchant -o merchant.com.example.production -r \"Example Merchant Production\"  Use  --help  for more information about all available parameters  fastlane produce merchant --help  If you want to associate an app with a Merchant Identifier:  fastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production  If you want to associate an app with multiple Merchant Identifiers:  fastlane produce associate_merchant -a com.krausefx.app merchant.com.example.production merchant.com.example.sandbox  Use --help for more information about all available parameters  fastlane produce associate_merchant --help",
            "title": "Creating Apple Pay merchants and associating them with an App ID"
        },
        {
            "location": "/actions/produce/#environment-variables",
            "text": "All available values can also be passed using environment variables, run  fastlane produce --help  to get a list of all available parameters.",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/produce/#fastlane-integration",
            "text": "Your  Fastfile  should look like this  lane :release do\n  produce(\n    username: 'felix@krausefx.com',\n    app_identifier: 'com.krausefx.app',\n    app_name: 'MyApp',\n    language: 'English',\n    app_version: '1.0',\n    sku: '123',\n    team_name: 'SunApps GmbH', # only necessary when in multiple teams\n\n    # Optional\n    # App services can be enabled during app creation\n    enable_services: {\n      access_wifi: \"on\",             # Valid values: \"on\", \"off\"\n      app_group: \"on\",               # Valid values: \"on\", \"off\"\n      apple_pay: \"on\",               # Valid values: \"on\", \"off\"\n      associated_domains: \"on\",      # Valid values: \"on\", \"off\"\n      auto_fill_credential: \"on\",    # Valid values: \"on\", \"off\"\n      data_protection: \"complete\",   # Valid values: \"complete\", \"unlessopen\", \"untilfirstauth\",\n      game_center: \"on\",             # Valid values: \"on\", \"off\"\n      health_kit: \"on\",              # Valid values: \"on\", \"off\"\n      home_kit: \"on\",                # Valid values: \"on\", \"off\"\n      hotspot: \"on\",                 # Valid values: \"on\", \"off\"\n      icloud: \"cloudkit\",            # Valid values: \"legacy\", \"cloudkit\"\n      in_app_purchase: \"on\",         # Valid values: \"on\", \"off\"\n      inter_app_audio: \"on\",         # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\"\n      multipath: \"on\",               # Valid values: \"on\", \"off\"\n      network_extension: \"on\",       # Valid values: \"on\", \"off\"\n      nfc_tag_reading: \"on\",         # Valid values: \"on\", \"off\"\n      personal_vpn: \"on\",            # Valid values: \"on\", \"off\"\n      passbook: \"on\",                # Valid values: \"on\", \"off\" (deprecated)\n      push_notification: \"on\",       # Valid values: \"on\", \"off\"\n      siri_kit: \"on\",                # Valid values: \"on\", \"off\"\n      vpn_configuration: \"on\",       # Valid values: \"on\", \"off\" (deprecated)\n      wallet: \"on\",                  # Valid values: \"on\", \"off\"\n      wireless_accessory: \"on\",      # Valid values: \"on\", \"off\"\n    }\n  )\n\n  deliver\nend  To use the newly generated app in  deliver , you need to add this line to your  Deliverfile :  apple_id(ENV['PRODUCE_APPLE_ID'])  This will tell  deliver , which  App ID  to use, since the app is not yet available in the App Store.  You'll still have to fill out the remaining information (like screenshots, app description and pricing). You can use  deliver  to upload your app metadata using a CLI",
            "title": "fastlane Integration"
        },
        {
            "location": "/actions/produce/#how-is-my-password-stored",
            "text": "produce  uses the  password manager  from  fastlane . Take a look the  CredentialsManager README  for more information.      produce       Supported platforms  ios    Author  @KrauseFx",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/produce/#2-examples",
            "text": "create_app_online(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  app_name: \"MyApp\",\n  language: \"English\",\n  app_version: \"1.0\",\n  sku: \"123\",\n  team_name: \"SunApps GmbH\" # Only necessary when in multiple teams.\n)  produce   # alias for \"create_app_online\"",
            "title": "2 Examples"
        },
        {
            "location": "/actions/produce/#parameters_1",
            "text": "Key  Description  Default      username  Your Apple ID Username  *    app_identifier  App Identifier (Bundle ID, e.g. com.krausefx.app)  *    bundle_identifier_suffix  App Identifier Suffix (Ignored if App Identifier does not end with .*)     app_name  App Name     app_version  Initial version number (e.g. '1.0')     sku  SKU Number (e.g. '1234')  *    platform  The platform to use (optional)  ios    platforms  The platforms to use (optional)     language  Primary Language (e.g. 'en-US', 'fr-FR')  English    company_name  The name of your company. Only required if it's the first app you create     skip_itc  Skip the creation of the app on App Store Connect  false    itc_users  Array of App Store Connect users. If provided, you can limit access to this newly created app for users with the App Manager, Developer, Marketer or Sales roles     enabled_features  DEPRECATED!  Please use  enable_services  instead - Array with Spaceship App Services  {}    enable_services  Array with Spaceship App Services (e.g. access_wifi: (on|off), app_group: (on|off), apple_pay: (on|off), associated_domains: (on|off), auto_fill_credential: (on|off), data_protection: (complete|unlessopen|untilfirstauth), game_center: (on|off), health_kit: (on|off), home_kit: (on|off), hotspot: (on|off), icloud: (legacy|cloudkit), in_app_purchase: (on|off), inter_app_audio: (on|off), multipath: (on|off), network_extension: (on|off), nfc_tag_reading: (on|off), personal_vpn: (on|off), passbook: (on|off), push_notification: (on|off), siri_kit: (on|off), vpn_configuration: (on|off), wallet: (on|off), wireless_accessory: (on|off))  {}    skip_devcenter  Skip the creation of the app on the Apple Developer Portal  false    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    itc_team_id  The ID of your App Store Connect team if you're in multiple teams  *    itc_team_name  The name of your App Store Connect team if you're in multiple teams  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/produce/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  produce  action generates the following Lane Variables:     SharedValue  Description      SharedValues::PRODUCE_APPLE_ID  The Apple ID of the newly created app. You probably need it for  deliver     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/produce/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action produce",
            "title": "Documentation"
        },
        {
            "location": "/actions/produce/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run produce  To pass parameters, make use of the  :  symbol, for example  fastlane run produce parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/produce/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/prompt/",
            "text": "prompt\n\n\nAsk the user for a value or for confirmation\n\n\n\n\nYou can use \nprompt\n to ask the user for a value or to just let the user confirm the next step.\nWhen this is executed on a CI service, the passed \nci_input\n value will be returned.\nThis action also supports multi-line inputs using the \nmulti_line_end_keyword\n option.\n\n\n\n\n\n\n\n\n\n\nprompt\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nchangelog = prompt(text: \"Changelog: \")\n\n\n\n\nchangelog = prompt(\n  text: \"Changelog: \",\n  multi_line_end_keyword: \"END\"\n)\n\ncrashlytics(notes: changelog)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nThe text that will be displayed to the user\n\n\nPlease enter some text:\n\n\n\n\n\n\nci_input\n\n\nThe default text that will be used when being executed on a CI service\n\n\n''\n\n\n\n\n\n\nboolean\n\n\nIs that a boolean question (yes/no)? This will add (y/n) at the end\n\n\nfalse\n\n\n\n\n\n\nsecure_text\n\n\nIs that a secure text (yes/no)?\n\n\nfalse\n\n\n\n\n\n\nmulti_line_end_keyword\n\n\nEnable multi-line inputs by providing an end text (e.g. 'END') which will stop the user input\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action prompt\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run prompt\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run prompt parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "prompt"
        },
        {
            "location": "/actions/prompt/#prompt",
            "text": "Ask the user for a value or for confirmation   You can use  prompt  to ask the user for a value or to just let the user confirm the next step. When this is executed on a CI service, the passed  ci_input  value will be returned. This action also supports multi-line inputs using the  multi_line_end_keyword  option.      prompt       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "prompt"
        },
        {
            "location": "/actions/prompt/#2-examples",
            "text": "changelog = prompt(text: \"Changelog: \")  changelog = prompt(\n  text: \"Changelog: \",\n  multi_line_end_keyword: \"END\"\n)\n\ncrashlytics(notes: changelog)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/prompt/#parameters",
            "text": "Key  Description  Default      text  The text that will be displayed to the user  Please enter some text:    ci_input  The default text that will be used when being executed on a CI service  ''    boolean  Is that a boolean question (yes/no)? This will add (y/n) at the end  false    secure_text  Is that a secure text (yes/no)?  false    multi_line_end_keyword  Enable multi-line inputs by providing an end text (e.g. 'END') which will stop the user input      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/prompt/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action prompt",
            "title": "Documentation"
        },
        {
            "location": "/actions/prompt/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run prompt  To pass parameters, make use of the  :  symbol, for example  fastlane run prompt parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/prompt/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/push_git_tags/",
            "text": "push_git_tags\n\n\nPush local tags to the remote - this will only push tags\n\n\n\n\nIf you only want to push the tags and nothing else, you can use the \npush_git_tags\n action\n\n\n\n\n\n\n\n\n\n\npush_git_tags\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@vittoriom\n\n\n\n\n\n\n\n\n1 Example\n\n\npush_git_tags\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce push to remote\n\n\nfalse\n\n\n\n\n\n\nremote\n\n\nThe remote to push tags to\n\n\norigin\n\n\n\n\n\n\ntag\n\n\nThe tag to push to remote\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action push_git_tags\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run push_git_tags\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run push_git_tags parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "push_git_tags"
        },
        {
            "location": "/actions/push_git_tags/#push_git_tags",
            "text": "Push local tags to the remote - this will only push tags   If you only want to push the tags and nothing else, you can use the  push_git_tags  action      push_git_tags       Supported platforms  ios, android, mac    Author  @vittoriom",
            "title": "push_git_tags"
        },
        {
            "location": "/actions/push_git_tags/#1-example",
            "text": "push_git_tags",
            "title": "1 Example"
        },
        {
            "location": "/actions/push_git_tags/#parameters",
            "text": "Key  Description  Default      force  Force push to remote  false    remote  The remote to push tags to  origin    tag  The tag to push to remote      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/push_git_tags/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action push_git_tags",
            "title": "Documentation"
        },
        {
            "location": "/actions/push_git_tags/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run push_git_tags  To pass parameters, make use of the  :  symbol, for example  fastlane run push_git_tags parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/push_git_tags/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/push_to_git_remote/",
            "text": "push_to_git_remote\n\n\nPush local changes to the remote branch\n\n\n\n\nLets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using \ncommit_version_bump\n) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo.\nIf this is a new branch, use the \nset_upstream\n option to set the remote branch as upstream.\n\n\n\n\n\n\n\n\n\n\npush_to_git_remote\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n2 Examples\n\n\npush_to_git_remote # simple version. pushes \"master\" branch to \"origin\" remote\n\n\n\n\npush_to_git_remote(\n  remote: \"origin\",         # optional, default: \"origin\"\n  local_branch: \"develop\",  # optional, aliased by \"branch\", default is set to current branch\n  remote_branch: \"develop\", # optional, default is set to local_branch\n  force: true,    # optional, default: false\n  force_with_lease: true,   # optional, default: false\n  tags: false,    # optional, default: true\n  no_verify: true,# optional, default: false\n  set_upstream: true        # optional, default: false\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlocal_branch\n\n\nThe local branch to push from. Defaults to the current branch\n\n\n*\n\n\n\n\n\n\nremote_branch\n\n\nThe remote branch to push to. Defaults to the local branch\n\n\n*\n\n\n\n\n\n\nforce\n\n\nForce push to remote\n\n\nfalse\n\n\n\n\n\n\nforce_with_lease\n\n\nForce push with lease to remote\n\n\nfalse\n\n\n\n\n\n\ntags\n\n\nWhether tags are pushed to remote\n\n\ntrue\n\n\n\n\n\n\nremote\n\n\nThe remote to push to\n\n\norigin\n\n\n\n\n\n\nno_verify\n\n\nWhether or not to use --no-verify\n\n\nfalse\n\n\n\n\n\n\nset_upstream\n\n\nWhether or not to use --set-upstream\n\n\nfalse\n\n\n\n\n\n\npush_options\n\n\nArray of strings to be passed using the '--push-option' option\n\n\n[]\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action push_to_git_remote\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run push_to_git_remote\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run push_to_git_remote parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "push_to_git_remote"
        },
        {
            "location": "/actions/push_to_git_remote/#push_to_git_remote",
            "text": "Push local changes to the remote branch   Lets you push your local commits to a remote git repo. Useful if you make local changes such as adding a version bump commit (using  commit_version_bump ) or a git tag (using 'add_git_tag') on a CI server, and you want to push those changes back to your canonical/main repo. If this is a new branch, use the  set_upstream  option to set the remote branch as upstream.      push_to_git_remote       Supported platforms  ios, android, mac    Author  @lmirosevic",
            "title": "push_to_git_remote"
        },
        {
            "location": "/actions/push_to_git_remote/#2-examples",
            "text": "push_to_git_remote # simple version. pushes \"master\" branch to \"origin\" remote  push_to_git_remote(\n  remote: \"origin\",         # optional, default: \"origin\"\n  local_branch: \"develop\",  # optional, aliased by \"branch\", default is set to current branch\n  remote_branch: \"develop\", # optional, default is set to local_branch\n  force: true,    # optional, default: false\n  force_with_lease: true,   # optional, default: false\n  tags: false,    # optional, default: true\n  no_verify: true,# optional, default: false\n  set_upstream: true        # optional, default: false\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/push_to_git_remote/#parameters",
            "text": "Key  Description  Default      local_branch  The local branch to push from. Defaults to the current branch  *    remote_branch  The remote branch to push to. Defaults to the local branch  *    force  Force push to remote  false    force_with_lease  Force push with lease to remote  false    tags  Whether tags are pushed to remote  true    remote  The remote to push to  origin    no_verify  Whether or not to use --no-verify  false    set_upstream  Whether or not to use --set-upstream  false    push_options  Array of strings to be passed using the '--push-option' option  []     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/push_to_git_remote/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action push_to_git_remote",
            "title": "Documentation"
        },
        {
            "location": "/actions/push_to_git_remote/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run push_to_git_remote  To pass parameters, make use of the  :  symbol, for example  fastlane run push_to_git_remote parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/push_to_git_remote/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/puts/",
            "text": "puts\n\n\nPrints out the given text\n\n\n\n\n\n\n\n\nputs\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nputs \"Hi there\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nMessage to be printed out\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action puts\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run puts\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run puts parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "puts"
        },
        {
            "location": "/actions/puts/#puts",
            "text": "Prints out the given text     puts       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "puts"
        },
        {
            "location": "/actions/puts/#1-example",
            "text": "puts \"Hi there\"",
            "title": "1 Example"
        },
        {
            "location": "/actions/puts/#parameters",
            "text": "Key  Description  Default      message  Message to be printed out      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/puts/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action puts",
            "title": "Documentation"
        },
        {
            "location": "/actions/puts/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run puts  To pass parameters, make use of the  :  symbol, for example  fastlane run puts parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/puts/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/read_podspec/",
            "text": "read_podspec\n\n\nLoads a CocoaPods spec as JSON\n\n\n\n\nThis can be used for only specifying a version string in your podspec - and during your release process you'd read it from the podspec by running \nversion = read_podspec['version']\n at the beginning of your lane.\nLoads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its \nversion\n, \nfiles\n etc.\nThis can be useful when basing your release process on the version string only stored in one place - in the podspec.\nAs one of the first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).\n\n\n\n\n\n\n\n\n\n\nread_podspec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@czechboy0\n\n\n\n\n\n\n\n\n2 Examples\n\n\nspec = read_podspec\nversion = spec[\"version\"]\nputs \"Using Version #{version}\"\n\n\n\n\nspec = read_podspec(path: \"./XcodeServerSDK.podspec\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the podspec to be read\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nread_podspec\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::READ_PODSPEC_JSON\n\n\nPodspec JSON payload\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action read_podspec\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run read_podspec\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run read_podspec parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "read_podspec"
        },
        {
            "location": "/actions/read_podspec/#read_podspec",
            "text": "Loads a CocoaPods spec as JSON   This can be used for only specifying a version string in your podspec - and during your release process you'd read it from the podspec by running  version = read_podspec['version']  at the beginning of your lane. Loads the specified (or the first found) podspec in the folder as JSON, so that you can inspect its  version ,  files  etc. This can be useful when basing your release process on the version string only stored in one place - in the podspec. As one of the first steps you'd read the podspec and its version and the rest of the workflow can use that version string (when e.g. creating a new git tag or a GitHub Release).      read_podspec       Supported platforms  ios, mac    Author  @czechboy0",
            "title": "read_podspec"
        },
        {
            "location": "/actions/read_podspec/#2-examples",
            "text": "spec = read_podspec\nversion = spec[\"version\"]\nputs \"Using Version #{version}\"  spec = read_podspec(path: \"./XcodeServerSDK.podspec\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/read_podspec/#parameters",
            "text": "Key  Description  Default      path  Path to the podspec to be read  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/read_podspec/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  read_podspec  action generates the following Lane Variables:     SharedValue  Description      SharedValues::READ_PODSPEC_JSON  Podspec JSON payload     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/read_podspec/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action read_podspec",
            "title": "Documentation"
        },
        {
            "location": "/actions/read_podspec/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run read_podspec  To pass parameters, make use of the  :  symbol, for example  fastlane run read_podspec parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/read_podspec/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/recreate_schemes/",
            "text": "recreate_schemes\n\n\nRecreate not shared Xcode project schemes\n\n\n\n\n\n\n\n\nrecreate_schemes\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@jerolimov\n\n\n\n\n\n\n\n\n1 Example\n\n\nrecreate_schemes(project: \"./path/to/MyApp.xcodeproj\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nproject\n\n\nThe Xcode project\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action recreate_schemes\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run recreate_schemes\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run recreate_schemes parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "recreate_schemes"
        },
        {
            "location": "/actions/recreate_schemes/#recreate_schemes",
            "text": "Recreate not shared Xcode project schemes     recreate_schemes       Supported platforms  ios, mac    Author  @jerolimov",
            "title": "recreate_schemes"
        },
        {
            "location": "/actions/recreate_schemes/#1-example",
            "text": "recreate_schemes(project: \"./path/to/MyApp.xcodeproj\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/recreate_schemes/#parameters",
            "text": "Key  Description  Default      project  The Xcode project      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/recreate_schemes/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action recreate_schemes",
            "title": "Documentation"
        },
        {
            "location": "/actions/recreate_schemes/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run recreate_schemes  To pass parameters, make use of the  :  symbol, for example  fastlane run recreate_schemes parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/recreate_schemes/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/register_device/",
            "text": "register_device\n\n\nRegisters a new device to the Apple Dev Portal\n\n\n\n\nThis will register an iOS device with the Developer Portal so that you can include it in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add a device to the member center. If the device has already been registered within the member center, it will be left alone in the member center.\nThe action will connect to the Apple Developer Portal using the username you specified in your \nAppfile\n with \napple_id\n, but you can override it using the \n:username\n option.\n\n\n\n\n\n\n\n\n\n\nregister_device\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@pvinis\n\n\n\n\n\n\n\n\n2 Examples\n\n\nregister_device(\n  name: \"Luka iPhone 6\",\n  udid: \"1234567890123456789012345678901234567890\"\n) # Simply provide the name and udid of the device\n\n\n\n\nregister_device(\n  name: \"Luka iPhone 6\",\n  udid: \"1234567890123456789012345678901234567890\",\n  team_id: \"XXXXXXXXXX\",         # Optional, if you\"re a member of multiple teams, then you need to pass the team ID here.\n  username: \"luka@goonbee.com\"   # Optional, lets you override the Apple Member Center username.\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nname\n\n\nProvide the name of the device to register as\n\n\n\n\n\n\n\n\nplatform\n\n\nProvide the platform of the device to register as (ios, mac)\n\n\nios\n\n\n\n\n\n\nudid\n\n\nProvide the UDID of the device to register as\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nusername\n\n\nOptional: Your Apple ID\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action register_device\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run register_device\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run register_device parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "register_device"
        },
        {
            "location": "/actions/register_device/#register_device",
            "text": "Registers a new device to the Apple Dev Portal   This will register an iOS device with the Developer Portal so that you can include it in your provisioning profiles. This is an optimistic action, in that it will only ever add a device to the member center. If the device has already been registered within the member center, it will be left alone in the member center. The action will connect to the Apple Developer Portal using the username you specified in your  Appfile  with  apple_id , but you can override it using the  :username  option.      register_device       Supported platforms  ios    Author  @pvinis",
            "title": "register_device"
        },
        {
            "location": "/actions/register_device/#2-examples",
            "text": "register_device(\n  name: \"Luka iPhone 6\",\n  udid: \"1234567890123456789012345678901234567890\"\n) # Simply provide the name and udid of the device  register_device(\n  name: \"Luka iPhone 6\",\n  udid: \"1234567890123456789012345678901234567890\",\n  team_id: \"XXXXXXXXXX\",         # Optional, if you\"re a member of multiple teams, then you need to pass the team ID here.\n  username: \"luka@goonbee.com\"   # Optional, lets you override the Apple Member Center username.\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/register_device/#parameters",
            "text": "Key  Description  Default      name  Provide the name of the device to register as     platform  Provide the platform of the device to register as (ios, mac)  ios    udid  Provide the UDID of the device to register as     api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    username  Optional: Your Apple ID  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/register_device/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action register_device",
            "title": "Documentation"
        },
        {
            "location": "/actions/register_device/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run register_device  To pass parameters, make use of the  :  symbol, for example  fastlane run register_device parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/register_device/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/register_devices/",
            "text": "register_devices\n\n\nRegisters new devices to the Apple Dev Portal\n\n\n\n\nThis will register iOS/Mac devices with the Developer Portal so that you can include them in your provisioning profiles.\nThis is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work.\nThe action will connect to the Apple Developer Portal using the username you specified in your \nAppfile\n with \napple_id\n, but you can override it using the \nusername\n option, or by setting the env variable \nENV['DELIVER_USER']\n.\n\n\n\n\n\n\n\n\n\n\nregister_devices\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n4 Examples\n\n\nregister_devices(\n  devices: {\n    \"Luka iPhone 6\" => \"1234567890123456789012345678901234567890\",\n    \"Felix iPad Air 2\" => \"abcdefghijklmnopqrstvuwxyzabcdefghijklmn\"\n  }\n) # Simply provide a list of devices as a Hash\n\n\n\n\nregister_devices(\n  devices_file: \"./devices.txt\"\n) # Alternatively provide a standard UDID export .txt file, see the Apple Sample (http://devimages.apple.com/downloads/devices/Multiple-Upload-Samples.zip)\n\n\n\n\nregister_devices(\n  devices_file: \"./devices.txt\", # You must pass in either `devices_file` or `devices`.\n  team_id: \"XXXXXXXXXX\",         # Optional, if you\"re a member of multiple teams, then you need to pass the team ID here.\n  username: \"luka@goonbee.com\"   # Optional, lets you override the Apple Member Center username.\n)\n\n\n\n\nregister_devices(\n  devices: {\n    \"Luka MacBook\" => \"12345678-1234-1234-1234-123456789012\",\n    \"Felix MacBook Pro\" => \"ABCDEFGH-ABCD-ABCD-ABCD-ABCDEFGHIJKL\"\n  },\n  platform: \"mac\"\n) # Register devices for Mac\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndevices\n\n\nA hash of devices, with the name as key and the UDID as value\n\n\n\n\n\n\n\n\ndevices_file\n\n\nProvide a path to a file with the devices to register. For the format of the file see the examples\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nusername\n\n\nOptional: Your Apple ID\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action register_devices\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run register_devices\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run register_devices parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "register_devices"
        },
        {
            "location": "/actions/register_devices/#register_devices",
            "text": "Registers new devices to the Apple Dev Portal   This will register iOS/Mac devices with the Developer Portal so that you can include them in your provisioning profiles. This is an optimistic action, in that it will only ever add new devices to the member center, and never remove devices. If a device which has already been registered within the member center is not passed to this action, it will be left alone in the member center and continue to work. The action will connect to the Apple Developer Portal using the username you specified in your  Appfile  with  apple_id , but you can override it using the  username  option, or by setting the env variable  ENV['DELIVER_USER'] .      register_devices       Supported platforms  ios, mac    Author  @lmirosevic",
            "title": "register_devices"
        },
        {
            "location": "/actions/register_devices/#4-examples",
            "text": "register_devices(\n  devices: {\n    \"Luka iPhone 6\" => \"1234567890123456789012345678901234567890\",\n    \"Felix iPad Air 2\" => \"abcdefghijklmnopqrstvuwxyzabcdefghijklmn\"\n  }\n) # Simply provide a list of devices as a Hash  register_devices(\n  devices_file: \"./devices.txt\"\n) # Alternatively provide a standard UDID export .txt file, see the Apple Sample (http://devimages.apple.com/downloads/devices/Multiple-Upload-Samples.zip)  register_devices(\n  devices_file: \"./devices.txt\", # You must pass in either `devices_file` or `devices`.\n  team_id: \"XXXXXXXXXX\",         # Optional, if you\"re a member of multiple teams, then you need to pass the team ID here.\n  username: \"luka@goonbee.com\"   # Optional, lets you override the Apple Member Center username.\n)  register_devices(\n  devices: {\n    \"Luka MacBook\" => \"12345678-1234-1234-1234-123456789012\",\n    \"Felix MacBook Pro\" => \"ABCDEFGH-ABCD-ABCD-ABCD-ABCDEFGHIJKL\"\n  },\n  platform: \"mac\"\n) # Register devices for Mac",
            "title": "4 Examples"
        },
        {
            "location": "/actions/register_devices/#parameters",
            "text": "Key  Description  Default      devices  A hash of devices, with the name as key and the UDID as value     devices_file  Provide a path to a file with the devices to register. For the format of the file see the examples     api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    username  Optional: Your Apple ID  *    platform  The platform to use (optional)  ios     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/register_devices/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action register_devices",
            "title": "Documentation"
        },
        {
            "location": "/actions/register_devices/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run register_devices  To pass parameters, make use of the  :  symbol, for example  fastlane run register_devices parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/register_devices/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/reset_git_repo/",
            "text": "reset_git_repo\n\n\nResets git repo to a clean state by discarding uncommitted changes\n\n\n\n\nThis action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after running \nfastlane\n.\nUntracked files like \n.env\n will also be deleted, unless \n:skip_clean\n is true.\nIt's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if this condition is met:\n\n\n\n\nYou have called the \nensure_git_status_clean\n action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.\n\n\n\n\n\n\n\n\n\n\n\n\n\nreset_git_repo\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n4 Examples\n\n\nreset_git_repo\n\n\n\n\nreset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!\n\n\n\n\nreset_git_repo(skip_clean: true) # If you want \"git clean\" to be skipped, thus NOT deleting untracked files like \".env\". Optional, defaults to false.\n\n\n\n\nreset_git_repo(\n  force: true,\n  files: [\n    \"./file.txt\"\n  ]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nfiles\n\n\nArray of files the changes should be discarded. If not given, all files will be discarded\n\n\n\n\n\n\n\n\nforce\n\n\nSkip verifying of previously clean state of repo. Only recommended in combination with \nfiles\n option\n\n\nfalse\n\n\n\n\n\n\nskip_clean\n\n\nSkip 'git clean' to avoid removing untracked files like \n.env\n\n\nfalse\n\n\n\n\n\n\ndisregard_gitignore\n\n\nSetting this to true will clean the whole repository, ignoring anything in your local .gitignore. Set this to true if you want the equivalent of a fresh clone, and for all untracked and ignore files to also be removed\n\n\ntrue\n\n\n\n\n\n\nexclude\n\n\nYou can pass a string, or array of, file pattern(s) here which you want to have survive the cleaning process, and remain on disk, e.g. to leave the \nartifacts\n directory you would specify \nexclude: 'artifacts'\n. Make sure this pattern is also in your gitignore! See the gitignore documentation for info on patterns\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action reset_git_repo\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run reset_git_repo\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run reset_git_repo parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "reset_git_repo"
        },
        {
            "location": "/actions/reset_git_repo/#reset_git_repo",
            "text": "Resets git repo to a clean state by discarding uncommitted changes   This action will reset your git repo to a clean state, discarding any uncommitted and untracked changes. Useful in case you need to revert the repo back to a clean state, e.g. after running  fastlane . Untracked files like  .env  will also be deleted, unless  :skip_clean  is true. It's a pretty drastic action so it comes with a sort of safety latch. It will only proceed with the reset if this condition is met:   You have called the  ensure_git_status_clean  action prior to calling this action. This ensures that your repo started off in a clean state, so the only things that will get destroyed by this action are files that are created as a byproduct of the fastlane run.       reset_git_repo       Supported platforms  ios, android, mac    Author  @lmirosevic",
            "title": "reset_git_repo"
        },
        {
            "location": "/actions/reset_git_repo/#4-examples",
            "text": "reset_git_repo  reset_git_repo(force: true) # If you don't care about warnings and are absolutely sure that you want to discard all changes. This will reset the repo even if you have valuable uncommitted changes, so use with care!  reset_git_repo(skip_clean: true) # If you want \"git clean\" to be skipped, thus NOT deleting untracked files like \".env\". Optional, defaults to false.  reset_git_repo(\n  force: true,\n  files: [\n    \"./file.txt\"\n  ]\n)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/reset_git_repo/#parameters",
            "text": "Key  Description  Default      files  Array of files the changes should be discarded. If not given, all files will be discarded     force  Skip verifying of previously clean state of repo. Only recommended in combination with  files  option  false    skip_clean  Skip 'git clean' to avoid removing untracked files like  .env  false    disregard_gitignore  Setting this to true will clean the whole repository, ignoring anything in your local .gitignore. Set this to true if you want the equivalent of a fresh clone, and for all untracked and ignore files to also be removed  true    exclude  You can pass a string, or array of, file pattern(s) here which you want to have survive the cleaning process, and remain on disk, e.g. to leave the  artifacts  directory you would specify  exclude: 'artifacts' . Make sure this pattern is also in your gitignore! See the gitignore documentation for info on patterns      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/reset_git_repo/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action reset_git_repo",
            "title": "Documentation"
        },
        {
            "location": "/actions/reset_git_repo/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run reset_git_repo  To pass parameters, make use of the  :  symbol, for example  fastlane run reset_git_repo parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/reset_git_repo/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/reset_simulator_contents/",
            "text": "reset_simulator_contents\n\n\nShutdown and reset running simulators\n\n\n\n\n\n\n\n\nreset_simulator_contents\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@danramteke\n\n\n\n\n\n\n\n\n2 Examples\n\n\nreset_simulator_contents\n\n\n\n\nreset_simulator_contents(os_versions: [\"10.3.1\",\"12.2\"])\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nios\n\n\nDEPRECATED!\n Use \n:os_versions\n instead - Which OS versions of Simulators you want to reset content and settings, this does not remove/recreate the simulators\n\n\n\n\n\n\n\n\nos_versions\n\n\nWhich OS versions of Simulators you want to reset content and settings, this does not remove/recreate the simulators\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action reset_simulator_contents\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run reset_simulator_contents\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run reset_simulator_contents parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "reset_simulator_contents"
        },
        {
            "location": "/actions/reset_simulator_contents/#reset_simulator_contents",
            "text": "Shutdown and reset running simulators     reset_simulator_contents       Supported platforms  ios    Author  @danramteke",
            "title": "reset_simulator_contents"
        },
        {
            "location": "/actions/reset_simulator_contents/#2-examples",
            "text": "reset_simulator_contents  reset_simulator_contents(os_versions: [\"10.3.1\",\"12.2\"])",
            "title": "2 Examples"
        },
        {
            "location": "/actions/reset_simulator_contents/#parameters",
            "text": "Key  Description  Default      ios  DEPRECATED!  Use  :os_versions  instead - Which OS versions of Simulators you want to reset content and settings, this does not remove/recreate the simulators     os_versions  Which OS versions of Simulators you want to reset content and settings, this does not remove/recreate the simulators      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/reset_simulator_contents/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action reset_simulator_contents",
            "title": "Documentation"
        },
        {
            "location": "/actions/reset_simulator_contents/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run reset_simulator_contents  To pass parameters, make use of the  :  symbol, for example  fastlane run reset_simulator_contents parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/reset_simulator_contents/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/resign/",
            "text": "resign\n\n\nCodesign an existing ipa file\n\n\n\n\n\n\n\n\nresign\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@lmirosevic\n\n\n\n\n\n\n\n\n2 Examples\n\n\nresign(\n  ipa: \"path/to/ipa\", # can omit if using the `ipa` action\n  signing_identity: \"iPhone Distribution: Luka Mirosevic (0123456789)\",\n  provisioning_profile: \"path/to/profile\", # can omit if using the _sigh_ action\n)\n\n\n\n\n# You may provide multiple provisioning profiles if the application contains nested\n# applications or app extensions, which need their own provisioning profile.\n# You can do so by passing an array of provisioning profile strings or a hash\n# that associates provisioning profile values to bundle identifier keys.\nresign(\n  ipa: \"path/to/ipa\", # can omit if using the `ipa` action\n  signing_identity: \"iPhone Distribution: Luka Mirosevic (0123456789)\",\n  provisioning_profile: {\n    \"com.example.awesome-app\" => \"path/to/profile\",\n    \"com.example.awesome-app.app-extension\" => \"path/to/app-extension/profile\"\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to resign. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\nsigning_identity\n\n\nCode signing identity to use. e.g. \niPhone Distribution: Luka Mirosevic (0123456789)\n\n\n\n\n\n\n\n\nentitlements\n\n\nPath to the entitlement file to use, e.g. \nmyApp/MyApp.entitlements\n\n\n\n\n\n\n\n\nprovisioning_profile\n\n\nPath to your provisioning_profile. Optional if you use \nsigh\n\n\n*\n\n\n\n\n\n\nversion\n\n\nVersion number to force resigned ipa to use. Updates both \nCFBundleShortVersionString\n and \nCFBundleVersion\n values in \nInfo.plist\n. Applies for main app and all nested apps or extensions\n\n\n\n\n\n\n\n\ndisplay_name\n\n\nDisplay name to force resigned ipa to use\n\n\n\n\n\n\n\n\nshort_version\n\n\nShort version string to force resigned ipa to use (\nCFBundleShortVersionString\n)\n\n\n\n\n\n\n\n\nbundle_version\n\n\nBundle version to force resigned ipa to use (\nCFBundleVersion\n)\n\n\n\n\n\n\n\n\nbundle_id\n\n\nSet new bundle ID during resign (\nCFBundleIdentifier\n)\n\n\n\n\n\n\n\n\nuse_app_entitlements\n\n\nExtract app bundle codesigning entitlements and combine with entitlements from new provisioning profile\n\n\n\n\n\n\n\n\nkeychain_path\n\n\nProvide a path to a keychain file that should be used by \n/usr/bin/codesign\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action resign\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run resign\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run resign parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "resign"
        },
        {
            "location": "/actions/resign/#resign",
            "text": "Codesign an existing ipa file     resign       Supported platforms  ios    Author  @lmirosevic",
            "title": "resign"
        },
        {
            "location": "/actions/resign/#2-examples",
            "text": "resign(\n  ipa: \"path/to/ipa\", # can omit if using the `ipa` action\n  signing_identity: \"iPhone Distribution: Luka Mirosevic (0123456789)\",\n  provisioning_profile: \"path/to/profile\", # can omit if using the _sigh_ action\n)  # You may provide multiple provisioning profiles if the application contains nested\n# applications or app extensions, which need their own provisioning profile.\n# You can do so by passing an array of provisioning profile strings or a hash\n# that associates provisioning profile values to bundle identifier keys.\nresign(\n  ipa: \"path/to/ipa\", # can omit if using the `ipa` action\n  signing_identity: \"iPhone Distribution: Luka Mirosevic (0123456789)\",\n  provisioning_profile: {\n    \"com.example.awesome-app\" => \"path/to/profile\",\n    \"com.example.awesome-app.app-extension\" => \"path/to/app-extension/profile\"\n  }\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/resign/#parameters",
            "text": "Key  Description  Default      ipa  Path to the ipa file to resign. Optional if you use the  gym  or  xcodebuild  action  *    signing_identity  Code signing identity to use. e.g.  iPhone Distribution: Luka Mirosevic (0123456789)     entitlements  Path to the entitlement file to use, e.g.  myApp/MyApp.entitlements     provisioning_profile  Path to your provisioning_profile. Optional if you use  sigh  *    version  Version number to force resigned ipa to use. Updates both  CFBundleShortVersionString  and  CFBundleVersion  values in  Info.plist . Applies for main app and all nested apps or extensions     display_name  Display name to force resigned ipa to use     short_version  Short version string to force resigned ipa to use ( CFBundleShortVersionString )     bundle_version  Bundle version to force resigned ipa to use ( CFBundleVersion )     bundle_id  Set new bundle ID during resign ( CFBundleIdentifier )     use_app_entitlements  Extract app bundle codesigning entitlements and combine with entitlements from new provisioning profile     keychain_path  Provide a path to a keychain file that should be used by  /usr/bin/codesign      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/resign/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action resign",
            "title": "Documentation"
        },
        {
            "location": "/actions/resign/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run resign  To pass parameters, make use of the  :  symbol, for example  fastlane run resign parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/resign/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/restore_file/",
            "text": "restore_file\n\n\nThis action restore your file that was backuped with the \nbackup_file\n action\n\n\n\n\n\n\n\n\nrestore_file\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@gin0606\n\n\n\n\n\n\n\n\n1 Example\n\n\nrestore_file(path: \"/path/to/file\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nOriginal file name you want to restore\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action restore_file\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run restore_file\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run restore_file parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "restore_file"
        },
        {
            "location": "/actions/restore_file/#restore_file",
            "text": "This action restore your file that was backuped with the  backup_file  action     restore_file       Supported platforms  ios, android, mac    Author  @gin0606",
            "title": "restore_file"
        },
        {
            "location": "/actions/restore_file/#1-example",
            "text": "restore_file(path: \"/path/to/file\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/restore_file/#parameters",
            "text": "Key  Description  Default      path  Original file name you want to restore      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/restore_file/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action restore_file",
            "title": "Documentation"
        },
        {
            "location": "/actions/restore_file/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run restore_file  To pass parameters, make use of the  :  symbol, for example  fastlane run restore_file parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/restore_file/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/rocket/",
            "text": "rocket\n\n\nOutputs ascii-art for a rocket \ud83d\ude80\n\n\n\n\nPrint an ascii Rocket :rocket:. Useful after using \ncrashlytics\n or \npilot\n to indicate that your new build has been shipped to outer-space.\n\n\n\n\n\n\n\n\n\n\nrocket\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@JaviSoto, @radex\n\n\n\n\n\n\n\n\n1 Example\n\n\nrocket\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action rocket\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run rocket\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run rocket parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "rocket"
        },
        {
            "location": "/actions/rocket/#rocket",
            "text": "Outputs ascii-art for a rocket \ud83d\ude80   Print an ascii Rocket :rocket:. Useful after using  crashlytics  or  pilot  to indicate that your new build has been shipped to outer-space.      rocket       Supported platforms  ios, android, mac    Author  @JaviSoto, @radex",
            "title": "rocket"
        },
        {
            "location": "/actions/rocket/#1-example",
            "text": "rocket",
            "title": "1 Example"
        },
        {
            "location": "/actions/rocket/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action rocket",
            "title": "Documentation"
        },
        {
            "location": "/actions/rocket/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run rocket  To pass parameters, make use of the  :  symbol, for example  fastlane run rocket parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/rocket/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/rsync/",
            "text": "rsync\n\n\nRsync files from :source to :destination\n\n\n\n\nA wrapper around \nrsync\n, which is a tool that lets you synchronize files, including permissions and so on. For a more detailed information about \nrsync\n, please see \nrsync(1) man page\n.\n\n\n\n\n\n\n\n\n\n\nrsync\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n1 Example\n\n\nrsync(\n  source: \"root@host:/tmp/1.txt\",\n  destination: \"/tmp/local_file.txt\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nextra\n\n\nPort\n\n\n-av\n\n\n\n\n\n\nsource\n\n\nsource file/folder\n\n\n\n\n\n\n\n\ndestination\n\n\ndestination file/folder\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action rsync\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run rsync\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run rsync parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "rsync"
        },
        {
            "location": "/actions/rsync/#rsync",
            "text": "Rsync files from :source to :destination   A wrapper around  rsync , which is a tool that lets you synchronize files, including permissions and so on. For a more detailed information about  rsync , please see  rsync(1) man page .      rsync       Supported platforms  ios, android, mac    Author  @hjanuschka",
            "title": "rsync"
        },
        {
            "location": "/actions/rsync/#1-example",
            "text": "rsync(\n  source: \"root@host:/tmp/1.txt\",\n  destination: \"/tmp/local_file.txt\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/rsync/#parameters",
            "text": "Key  Description  Default      extra  Port  -av    source  source file/folder     destination  destination file/folder      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/rsync/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action rsync",
            "title": "Documentation"
        },
        {
            "location": "/actions/rsync/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run rsync  To pass parameters, make use of the  :  symbol, for example  fastlane run rsync parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/rsync/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ruby_version/",
            "text": "ruby_version\n\n\nVerifies the minimum ruby version required\n\n\n\n\nAdd this to your \nFastfile\n to require a certain version of \nruby\n.\nPut it at the top of your \nFastfile\n to ensure that \nfastlane\n is executed appropriately.\n\n\n\n\n\n\n\n\n\n\nruby_version\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@sebastianvarela\n\n\n\n\n\n\n\n\n1 Example\n\n\nruby_version(\"2.4.0\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ruby_version\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ruby_version\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ruby_version parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ruby_version"
        },
        {
            "location": "/actions/ruby_version/#ruby_version",
            "text": "Verifies the minimum ruby version required   Add this to your  Fastfile  to require a certain version of  ruby . Put it at the top of your  Fastfile  to ensure that  fastlane  is executed appropriately.      ruby_version       Supported platforms  ios, android, mac    Author  @sebastianvarela",
            "title": "ruby_version"
        },
        {
            "location": "/actions/ruby_version/#1-example",
            "text": "ruby_version(\"2.4.0\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/ruby_version/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ruby_version",
            "title": "Documentation"
        },
        {
            "location": "/actions/ruby_version/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ruby_version  To pass parameters, make use of the  :  symbol, for example  fastlane run ruby_version parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ruby_version/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/run_tests/",
            "text": "run_tests\n\n\nEasily run tests of your iOS app (via \nscan\n)\n\n\n\n  \n\n\n\n\n\nThe easiest way to run tests of your iOS and Mac app\n\n\nscan\n makes it easy to run tests of your iOS and Mac app on a simulator or connected device.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nScanfile\n\n\n\n\n\n\n\nWhat's scan?\n\n\n\n\nBefore \nscan\n\n\nxcodebuild \\\n  -workspace MyApp.xcworkspace \\\n  -scheme \"MyApp\" \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n  test\n\n\n\n\nAs the output will look like this\n\n\n/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o Example/main.m normal arm64 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/felixkrause/Developer/fastlane/gym/example/cocoapods\n    export LANG=en_US.US-ASCII\n    export PATH=\"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode-beta.app/Contents/Developer/usr/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0@global/bin:/Users/felixkrause/.rvm/rubies/ruby-2.2.0/bin:/Users/felixkrause/.rvm/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch arm64 -fmessage-length=126 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -fcolor-diagnostics -std=gnu99 -fobjc-arc -fmodules -gmodules -fmodules-cache-path=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -Os -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wunreachable-code -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-arc-repeated-use-of-weak -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wno-deprecated-implementations -DCOCOAPODS=1 -DNS_BLOCK_ASSERTIONS=1 -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.0.sdk -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -miphoneos-version-min=9.0 -g -fvisibility=hidden -Wno-sign-conversion -fembed-bitcode -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-generated-files.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-own-target-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-all-target-headers.hmap -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-project-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos/include -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources/arm64 -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources -F/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -MMD -MT dependencies -MF /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.d --serialize-diagnostics /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.dia -c /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Example/main.m -o /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o\n\n\n\n\nyou'll probably want to use something like \nxcpretty\n, which will look like this:\n\n\nset -o pipefail &&\n  xcodebuild \\\n    -workspace MyApp.xcworkspace \\\n    -scheme \"MyApp\" \\\n    -sdk iphonesimulator \\\n    -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n    test \\\n  | xcpretty \\\n    -r \"html\" \\\n    -o \"tests.html\"\n\n\n\n\nWith \nscan\n\n\nfastlane scan\n\n\n\n\nWhy \nscan\n?\n\n\nscan\n uses the latest APIs and tools to make running tests plain simple and offer a great integration into your existing workflow, like \nfastlane\n or Jenkins.\n\n\n\n\n\n\n\n\n\n\nscan Features\n\n\n\n\n\n\n\n\n\n\n\ud83c\udfc1\n\n\nBeautiful inline build output while running the tests\n\n\n\n\n\n\n\ud83d\udea0\n\n\nSensible defaults: Automatically detect the project, schemes and more\n\n\n\n\n\n\n\ud83d\udcca\n\n\nSupport for HTML, JSON and JUnit reports\n\n\n\n\n\n\n\ud83d\udd0e\n\n\nXcode duplicated your simulators again? \nscan\n will handle this for you\n\n\n\n\n\n\n\ud83d\udd17\n\n\nWorks perfectly with \nfastlane\n and other tools\n\n\n\n\n\n\n\ud83d\ude85\n\n\nDon't remember any complicated build commands, just \nscan\n\n\n\n\n\n\n\ud83d\udd27\n\n\nEasy and dynamic configuration using parameters and environment variables\n\n\n\n\n\n\n\ud83d\udce2\n\n\nBeautiful slack notifications of the test results\n\n\n\n\n\n\n\ud83d\udcbe\n\n\nStore common build settings in a \nScanfile\n\n\n\n\n\n\n\ud83d\udce4\n\n\nThe raw \nxcodebuild\n outputs are stored in \n~/Library/Logs/scan\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSupports both iOS and Mac applications\n\n\n\n\n\n\n\ud83d\udc71\n\n\nAutomatically switches to the \ntravis formatter\n when running on Travis\n\n\n\n\n\n\n\ud83d\udcd6\n\n\nHelps you resolve common test errors like simulator not responding\n\n\n\n\n\n\n\n\nscan\n uses a plain \nxcodebuild\n command, therefore keeping 100% compatible with \nxcodebuild\n. To generate the nice output, \nscan\n uses \nxcpretty\n. You can always access the raw output in \n~/Library/Logs/scan\n.\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\nfastlane scan\n\n\n\n\nThat's all you need to run your tests. If you want more control, here are some available parameters:\n\n\nfastlane scan --workspace \"Example.xcworkspace\" --scheme \"AppName\" --device \"iPhone 6\" --clean\n\n\n\n\nIf you need to use a different Xcode install, use \nxcode-select\n or define \nDEVELOPER_DIR\n:\n\n\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" scan\n\n\n\n\nTo run \nscan\n on multiple devices via \nfastlane\n, add this to your \nFastfile\n:\n\n\nscan(\n  workspace: \"Example.xcworkspace\",\n  devices: [\"iPhone 6s\", \"iPad Air\"]\n)\n\n\n\n\nFor a list of all available parameters use\n\n\nfastlane action scan\n\n\n\n\nTo access the raw \nxcodebuild\n output open \n~/Library/Logs/scan\n\n\nScanfile\n\n\nSince you might want to manually trigger the tests but don't want to specify all the parameters every time, you can store your defaults in a so called \nScanfile\n.\n\n\nRun \nfastlane scan init\n to create a new configuration file. Example:\n\n\nscheme(\"Example\")\ndevices([\"iPhone 6s\", \"iPad Air\"])\n\nclean(true)\n\noutput_types(\"html\")\n\n\n\n\nAutomating the whole process\n\n\nscan\n works great together with \nfastlane\n, which connects all deployment tools into one streamlined workflow.\n\n\nUsing \nfastlane\n you can define a configuration like\n\n\nlane :test do\n  scan(scheme: \"Example\")\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\nrun_tests\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n6 Examples\n\n\nrun_tests\n\n\n\n\nscan # alias for \"run_tests\"\n\n\n\n\nrun_tests(\n  workspace: \"App.xcworkspace\",\n  scheme: \"MyTests\",\n  clean: false\n)\n\n\n\n\n# Build For Testing\nrun_tests(\n   derived_data_path: \"my_folder\",\n   build_for_testing: true\n)\n\n\n\n\n# run tests using derived data from prev. build\nrun_tests(\n   derived_data_path: \"my_folder\",\n   test_without_building: true\n)\n\n\n\n\n# or run it from an existing xctestrun package\nrun_tests(\n   xctestrun: \"/path/to/mytests.xctestrun\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath to the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath to the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\ndevice\n\n\nThe name of the simulator type you want to run tests on (e.g. 'iPhone 6')\n\n\n\n\n\n\n\n\ndevices\n\n\nArray of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])\n\n\n\n\n\n\n\n\nskip_detect_devices\n\n\nShould skip auto detecting of devices if none were specified\n\n\nfalse\n\n\n\n\n\n\nforce_quit_simulator\n\n\nEnabling this option will automatically killall Simulator processes before the run\n\n\nfalse\n\n\n\n\n\n\nreset_simulator\n\n\nEnabling this option will automatically erase the simulator before running the application\n\n\nfalse\n\n\n\n\n\n\ndisable_slide_to_type\n\n\nEnabling this option will disable the simulator from showing the 'Slide to type' prompt\n\n\ntrue\n\n\n\n\n\n\nprelaunch_simulator\n\n\nEnabling this option will launch the first simulator prior to calling any xcodebuild command\n\n\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n\n\n*\n\n\n\n\n\n\nonly_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to run\n\n\n\n\n\n\n\n\nskip_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to skip\n\n\n\n\n\n\n\n\ntestplan\n\n\nThe testplan associated with the scheme that should be used for testing\n\n\n\n\n\n\n\n\nonly_test_configurations\n\n\nArray of strings matching test plan configurations to run\n\n\n\n\n\n\n\n\nskip_test_configurations\n\n\nArray of strings matching test plan configurations to skip\n\n\n\n\n\n\n\n\nxctestrun\n\n\nRun tests using the provided \n.xctestrun\n file\n\n\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. \ncom.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a\n)\n\n\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\ncode_coverage\n\n\nShould code coverage be generated? (Xcode 7 and up)\n\n\n\n\n\n\n\n\naddress_sanitizer\n\n\nShould the address sanitizer be turned on?\n\n\n\n\n\n\n\n\nthread_sanitizer\n\n\nShould the thread sanitizer be turned on?\n\n\n\n\n\n\n\n\nopen_report\n\n\nShould the HTML report be opened when tests are completed?\n\n\nfalse\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build, similar to \noutput_style='raw'\n but this will also skip the test results table\n\n\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which all reports will be stored\n\n\n*\n\n\n\n\n\n\noutput_style\n\n\nDefine how the output should look like. Valid values are: standard, basic, rspec, or raw (disables xcpretty during xcodebuild)\n\n\n\n\n\n\n\n\noutput_types\n\n\nComma separated list of the output types (e.g. html, junit, json-compilation-database)\n\n\nhtml,junit\n\n\n\n\n\n\noutput_files\n\n\nComma separated list of the output files, corresponding to the types provided by :output_types (order should match). If specifying an output type of json-compilation-database with :use_clang_report_name enabled, that option will take precedence\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the raw log\n\n\n*\n\n\n\n\n\n\ninclude_simulator_logs\n\n\nIf the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n\n\nfalse\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\nformatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\n\n\nxcpretty_args\n\n\nPass in xcpretty additional command line arguments (e.g. '--test --no-color' or '--tap --no-utf')\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\nshould_zip_build_products\n\n\nShould zip the derived data build products and place in output path?\n\n\nfalse\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\nuse_clang_report_name\n\n\nGenerate the json compilation database with clang naming convention (compile_commands.json)\n\n\nfalse\n\n\n\n\n\n\nconcurrent_workers\n\n\nSpecify the exact number of test runners that will be spawned during parallel testing. Equivalent to -parallel-testing-worker-count\n\n\n\n\n\n\n\n\nmax_concurrent_simulators\n\n\nConstrain the number of simulator devices on which to test concurrently. Equivalent to -maximum-concurrent-test-simulator-destinations\n\n\n\n\n\n\n\n\ndisable_concurrent_testing\n\n\nDo not run test bundles in parallel on the specified destinations. Testing will occur on each destination serially. Equivalent to -disable-concurrent-testing\n\n\nfalse\n\n\n\n\n\n\nskip_build\n\n\nShould debug build be skipped before test build?\n\n\nfalse\n\n\n\n\n\n\ntest_without_building\n\n\nTest without building, requires a derived data path\n\n\n\n\n\n\n\n\nbuild_for_testing\n\n\nBuild for testing only, does not run tests\n\n\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\napp_name\n\n\nApp name to use in slack message and logfile name\n\n\n\n\n\n\n\n\ndeployment_target_version\n\n\nTarget version of the app being build or tested. Used to filter out simulator version\n\n\n\n\n\n\n\n\nslack_url\n\n\nCreate an Incoming WebHook for your Slack group to post results there\n\n\n\n\n\n\n\n\nslack_channel\n\n\n#channel or @username\n\n\n\n\n\n\n\n\nslack_message\n\n\nThe message included with each message posted to slack\n\n\n\n\n\n\n\n\nslack_use_webhook_configured_username_and_icon\n\n\nUse webhook's default username and icon settings? (true/false)\n\n\nfalse\n\n\n\n\n\n\nslack_username\n\n\nOverrides the webhook's username property if slack_use_webhook_configured_username_and_icon is false\n\n\nfastlane\n\n\n\n\n\n\nslack_icon_url\n\n\nOverrides the webhook's image property if slack_use_webhook_configured_username_and_icon is false\n\n\nhttps://fastlane.tools/assets/img/fastlane_icon.png\n\n\n\n\n\n\nskip_slack\n\n\nDon't publish to slack, even when an URL is given\n\n\nfalse\n\n\n\n\n\n\nslack_only_on_failure\n\n\nOnly post on Slack if the tests fail\n\n\nfalse\n\n\n\n\n\n\nslack_default_payloads\n\n\nSpecifies default payloads to include in Slack messages. For more info visit https://docs.fastlane.tools/actions/slack\n\n\n\n\n\n\n\n\ndestination\n\n\nUse only if you're a pro, use the other options instead\n\n\n\n\n\n\n\n\ncatalyst_platform\n\n\nPlatform to build when using a Catalyst enabled app. Valid values are: ios, macos\n\n\n\n\n\n\n\n\ncustom_report_file_name\n\n\nDEPRECATED!\n Use \n--output_files\n instead - Sets custom full report file name when generating a single report\n\n\n\n\n\n\n\n\nxcodebuild_command\n\n\nAllows for override of the default \nxcodebuild\n command\n\n\nenv NSUnbufferedIO=YES xcodebuild\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\nfail_build\n\n\nShould this step stop the build if the tests fail? Set this to false if you're using trainer\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nrun_tests\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SCAN_DERIVED_DATA_PATH\n\n\nThe path to the derived data\n\n\n\n\n\n\nSharedValues::SCAN_GENERATED_PLIST_FILE\n\n\nThe generated plist file\n\n\n\n\n\n\nSharedValues::SCAN_GENERATED_PLIST_FILES\n\n\nThe generated plist files\n\n\n\n\n\n\nSharedValues::SCAN_ZIP_BUILD_PRODUCTS_PATH\n\n\nThe path to the zipped build products\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action run_tests\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run run_tests\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run run_tests parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "run_tests"
        },
        {
            "location": "/actions/run_tests/#run_tests",
            "text": "Easily run tests of your iOS app (via  scan )",
            "title": "run_tests"
        },
        {
            "location": "/actions/run_tests/#the-easiest-way-to-run-tests-of-your-ios-and-mac-app",
            "text": "scan  makes it easy to run tests of your iOS and Mac app on a simulator or connected device.   \n     Features  \u2022\n     Usage  \u2022\n     Scanfile",
            "title": "The easiest way to run tests of your iOS and Mac app"
        },
        {
            "location": "/actions/run_tests/#whats-scan",
            "text": "",
            "title": "What's scan?"
        },
        {
            "location": "/actions/run_tests/#before-scan",
            "text": "xcodebuild \\\n  -workspace MyApp.xcworkspace \\\n  -scheme \"MyApp\" \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n  test  As the output will look like this  /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o Example/main.m normal arm64 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/felixkrause/Developer/fastlane/gym/example/cocoapods\n    export LANG=en_US.US-ASCII\n    export PATH=\"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode-beta.app/Contents/Developer/usr/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0@global/bin:/Users/felixkrause/.rvm/rubies/ruby-2.2.0/bin:/Users/felixkrause/.rvm/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch arm64 -fmessage-length=126 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -fcolor-diagnostics -std=gnu99 -fobjc-arc -fmodules -gmodules -fmodules-cache-path=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -Os -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wunreachable-code -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-arc-repeated-use-of-weak -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wno-deprecated-implementations -DCOCOAPODS=1 -DNS_BLOCK_ASSERTIONS=1 -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.0.sdk -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -miphoneos-version-min=9.0 -g -fvisibility=hidden -Wno-sign-conversion -fembed-bitcode -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-generated-files.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-own-target-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-all-target-headers.hmap -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-project-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos/include -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources/arm64 -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources -F/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -MMD -MT dependencies -MF /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.d --serialize-diagnostics /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.dia -c /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Example/main.m -o /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o  you'll probably want to use something like  xcpretty , which will look like this:  set -o pipefail &&\n  xcodebuild \\\n    -workspace MyApp.xcworkspace \\\n    -scheme \"MyApp\" \\\n    -sdk iphonesimulator \\\n    -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n    test \\\n  | xcpretty \\\n    -r \"html\" \\\n    -o \"tests.html\"",
            "title": "Before scan"
        },
        {
            "location": "/actions/run_tests/#with-scan",
            "text": "fastlane scan",
            "title": "With scan"
        },
        {
            "location": "/actions/run_tests/#why-scan",
            "text": "scan  uses the latest APIs and tools to make running tests plain simple and offer a great integration into your existing workflow, like  fastlane  or Jenkins.      scan Features      \ud83c\udfc1  Beautiful inline build output while running the tests    \ud83d\udea0  Sensible defaults: Automatically detect the project, schemes and more    \ud83d\udcca  Support for HTML, JSON and JUnit reports    \ud83d\udd0e  Xcode duplicated your simulators again?  scan  will handle this for you    \ud83d\udd17  Works perfectly with  fastlane  and other tools    \ud83d\ude85  Don't remember any complicated build commands, just  scan    \ud83d\udd27  Easy and dynamic configuration using parameters and environment variables    \ud83d\udce2  Beautiful slack notifications of the test results    \ud83d\udcbe  Store common build settings in a  Scanfile    \ud83d\udce4  The raw  xcodebuild  outputs are stored in  ~/Library/Logs/scan    \ud83d\udcbb  Supports both iOS and Mac applications    \ud83d\udc71  Automatically switches to the  travis formatter  when running on Travis    \ud83d\udcd6  Helps you resolve common test errors like simulator not responding     scan  uses a plain  xcodebuild  command, therefore keeping 100% compatible with  xcodebuild . To generate the nice output,  scan  uses  xcpretty . You can always access the raw output in  ~/Library/Logs/scan .",
            "title": "Why scan?"
        },
        {
            "location": "/actions/run_tests/#usage",
            "text": "fastlane scan  That's all you need to run your tests. If you want more control, here are some available parameters:  fastlane scan --workspace \"Example.xcworkspace\" --scheme \"AppName\" --device \"iPhone 6\" --clean  If you need to use a different Xcode install, use  xcode-select  or define  DEVELOPER_DIR :  DEVELOPER_DIR=\"/Applications/Xcode6.2.app\" scan  To run  scan  on multiple devices via  fastlane , add this to your  Fastfile :  scan(\n  workspace: \"Example.xcworkspace\",\n  devices: [\"iPhone 6s\", \"iPad Air\"]\n)  For a list of all available parameters use  fastlane action scan  To access the raw  xcodebuild  output open  ~/Library/Logs/scan",
            "title": "Usage"
        },
        {
            "location": "/actions/run_tests/#scanfile",
            "text": "Since you might want to manually trigger the tests but don't want to specify all the parameters every time, you can store your defaults in a so called  Scanfile .  Run  fastlane scan init  to create a new configuration file. Example:  scheme(\"Example\")\ndevices([\"iPhone 6s\", \"iPad Air\"])\n\nclean(true)\n\noutput_types(\"html\")",
            "title": "Scanfile"
        },
        {
            "location": "/actions/run_tests/#automating-the-whole-process",
            "text": "scan  works great together with  fastlane , which connects all deployment tools into one streamlined workflow.  Using  fastlane  you can define a configuration like  lane :test do\n  scan(scheme: \"Example\")\nend      run_tests       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Automating the whole process"
        },
        {
            "location": "/actions/run_tests/#6-examples",
            "text": "run_tests  scan # alias for \"run_tests\"  run_tests(\n  workspace: \"App.xcworkspace\",\n  scheme: \"MyTests\",\n  clean: false\n)  # Build For Testing\nrun_tests(\n   derived_data_path: \"my_folder\",\n   build_for_testing: true\n)  # run tests using derived data from prev. build\nrun_tests(\n   derived_data_path: \"my_folder\",\n   test_without_building: true\n)  # or run it from an existing xctestrun package\nrun_tests(\n   xctestrun: \"/path/to/mytests.xctestrun\"\n)",
            "title": "6 Examples"
        },
        {
            "location": "/actions/run_tests/#parameters",
            "text": "Key  Description  Default      workspace  Path to the workspace file     project  Path to the project file     scheme  The project's scheme. Make sure it's marked as  Shared     device  The name of the simulator type you want to run tests on (e.g. 'iPhone 6')     devices  Array of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])     skip_detect_devices  Should skip auto detecting of devices if none were specified  false    force_quit_simulator  Enabling this option will automatically killall Simulator processes before the run  false    reset_simulator  Enabling this option will automatically erase the simulator before running the application  false    disable_slide_to_type  Enabling this option will disable the simulator from showing the 'Slide to type' prompt  true    prelaunch_simulator  Enabling this option will launch the first simulator prior to calling any xcodebuild command     reinstall_app  Enabling this option will automatically uninstall the application before running it  false    app_identifier  The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)  *    only_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to run     skip_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to skip     testplan  The testplan associated with the scheme that should be used for testing     only_test_configurations  Array of strings matching test plan configurations to run     skip_test_configurations  Array of strings matching test plan configurations to skip     xctestrun  Run tests using the provided  .xctestrun  file     toolchain  The toolchain that should be used for building the application (e.g.  com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a )     clean  Should the project be cleaned before building it?  false    code_coverage  Should code coverage be generated? (Xcode 7 and up)     address_sanitizer  Should the address sanitizer be turned on?     thread_sanitizer  Should the thread sanitizer be turned on?     open_report  Should the HTML report be opened when tests are completed?  false    disable_xcpretty  Disable xcpretty formatting of build, similar to  output_style='raw'  but this will also skip the test results table     output_directory  The directory in which all reports will be stored  *    output_style  Define how the output should look like. Valid values are: standard, basic, rspec, or raw (disables xcpretty during xcodebuild)     output_types  Comma separated list of the output types (e.g. html, junit, json-compilation-database)  html,junit    output_files  Comma separated list of the output files, corresponding to the types provided by :output_types (order should match). If specifying an output type of json-compilation-database with :use_clang_report_name enabled, that option will take precedence     buildlog_path  The directory where to store the raw log  *    include_simulator_logs  If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory  false    suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     formatter  A custom xcpretty formatter to use     xcpretty_args  Pass in xcpretty additional command line arguments (e.g. '--test --no-color' or '--tap --no-utf')     derived_data_path  The directory where build products and other derived data will go     should_zip_build_products  Should zip the derived data build products and place in output path?  false    result_bundle  Should an Xcode result bundle be generated in the output directory  false    use_clang_report_name  Generate the json compilation database with clang naming convention (compile_commands.json)  false    concurrent_workers  Specify the exact number of test runners that will be spawned during parallel testing. Equivalent to -parallel-testing-worker-count     max_concurrent_simulators  Constrain the number of simulator devices on which to test concurrently. Equivalent to -maximum-concurrent-test-simulator-destinations     disable_concurrent_testing  Do not run test bundles in parallel on the specified destinations. Testing will occur on each destination serially. Equivalent to -disable-concurrent-testing  false    skip_build  Should debug build be skipped before test build?  false    test_without_building  Test without building, requires a derived data path     build_for_testing  Build for testing only, does not run tests     sdk  The SDK that should be used for building the application     configuration  The configuration to use when building the app. Defaults to 'Release'  *    xcargs  Pass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     app_name  App name to use in slack message and logfile name     deployment_target_version  Target version of the app being build or tested. Used to filter out simulator version     slack_url  Create an Incoming WebHook for your Slack group to post results there     slack_channel  #channel or @username     slack_message  The message included with each message posted to slack     slack_use_webhook_configured_username_and_icon  Use webhook's default username and icon settings? (true/false)  false    slack_username  Overrides the webhook's username property if slack_use_webhook_configured_username_and_icon is false  fastlane    slack_icon_url  Overrides the webhook's image property if slack_use_webhook_configured_username_and_icon is false  https://fastlane.tools/assets/img/fastlane_icon.png    skip_slack  Don't publish to slack, even when an URL is given  false    slack_only_on_failure  Only post on Slack if the tests fail  false    slack_default_payloads  Specifies default payloads to include in Slack messages. For more info visit https://docs.fastlane.tools/actions/slack     destination  Use only if you're a pro, use the other options instead     catalyst_platform  Platform to build when using a Catalyst enabled app. Valid values are: ios, macos     custom_report_file_name  DEPRECATED!  Use  --output_files  instead - Sets custom full report file name when generating a single report     xcodebuild_command  Allows for override of the default  xcodebuild  command  env NSUnbufferedIO=YES xcodebuild    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    use_system_scm  Lets xcodebuild use system's scm configuration  false    fail_build  Should this step stop the build if the tests fail? Set this to false if you're using trainer  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/run_tests/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  run_tests  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SCAN_DERIVED_DATA_PATH  The path to the derived data    SharedValues::SCAN_GENERATED_PLIST_FILE  The generated plist file    SharedValues::SCAN_GENERATED_PLIST_FILES  The generated plist files    SharedValues::SCAN_ZIP_BUILD_PRODUCTS_PATH  The path to the zipped build products     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/run_tests/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action run_tests",
            "title": "Documentation"
        },
        {
            "location": "/actions/run_tests/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run run_tests  To pass parameters, make use of the  :  symbol, for example  fastlane run run_tests parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/run_tests/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/s3/",
            "text": "s3\n\n\nGenerates a plist file and uploads all to AWS S3\n\n\n\n\nPlease use the \naws_s3\n plugin instead.\nInstall using \nfastlane add_plugin aws_s3\n.\n\n\nUpload a new build to Amazon S3 to distribute the build to beta testers.\nWorks for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you.\nIt is recommended to \nnot\n store the AWS access keys in the \nFastfile\n. The uploaded \nversion.json\n file provides an easy way for apps to poll if a new update is available.\n\n\n\n\n\n\n\n\n\n\ns3\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n2 Examples\n\n\ns3\n\n\n\n\ns3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV[\"S3_ACCESS_KEY\"],     # Required from user.\n  secret_access_key: ENV[\"S3_SECRET_ACCESS_KEY\"], # Required from user.\n  bucket: ENV[\"S3_BUCKET\"],   # Required from user.\n  ipa: \"AppName.ipa\",         # Optional if you use `ipa` to build\n  dsym: \"AppName.app.dSYM.zip\",         # Optional if you use `ipa` to build\n  path: \"v{CFBundleShortVersionString}_b{CFBundleVersion}/\", # This is actually the default.\n  upload_metadata: true,      # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name: \"app_version.json\",# Name of the file to upload to S3. Defaults to \"version.json\"\n  version_template_path: \"path/to/erb\"  # Path to an ERB to configure the structure of the version JSON file\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nipa\n\n\n.ipa file for the build\n\n\n*\n\n\n\n\n\n\ndsym\n\n\nzipped .dsym package for the build\n\n\n*\n\n\n\n\n\n\nupload_metadata\n\n\nUpload relevant metadata for this build\n\n\ntrue\n\n\n\n\n\n\nplist_template_path\n\n\nplist template path\n\n\n\n\n\n\n\n\nplist_file_name\n\n\nuploaded plist filename\n\n\n\n\n\n\n\n\nhtml_template_path\n\n\nhtml erb template path\n\n\n\n\n\n\n\n\nhtml_file_name\n\n\nuploaded html filename\n\n\n\n\n\n\n\n\nversion_template_path\n\n\nversion erb template path\n\n\n\n\n\n\n\n\nversion_file_name\n\n\nuploaded version filename\n\n\n\n\n\n\n\n\naccess_key\n\n\nAWS Access Key ID\n\n\n*\n\n\n\n\n\n\nsecret_access_key\n\n\nAWS Secret Access Key\n\n\n*\n\n\n\n\n\n\nbucket\n\n\nAWS bucket name\n\n\n*\n\n\n\n\n\n\nregion\n\n\nAWS region (for bucket creation)\n\n\n*\n\n\n\n\n\n\npath\n\n\nS3 'path'. Values from Info.plist will be substituted for keys wrapped in \n\n\nv{CFBundleShortVersionString}_b{CFBundleVersion}/\n\n\n\n\n\n\nsource\n\n\nOptional source directory e.g. ./build\n\n\n\n\n\n\n\n\nacl\n\n\nUploaded object permissions e.g public_read (default), private, public_read_write, authenticated_read\n\n\npublic_read\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ns3\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::S3_IPA_OUTPUT_PATH\n\n\nDirect HTTP link to the uploaded ipa file\n\n\n\n\n\n\nSharedValues::S3_DSYM_OUTPUT_PATH\n\n\nDirect HTTP link to the uploaded dsym file\n\n\n\n\n\n\nSharedValues::S3_PLIST_OUTPUT_PATH\n\n\nDirect HTTP link to the uploaded plist file\n\n\n\n\n\n\nSharedValues::S3_HTML_OUTPUT_PATH\n\n\nDirect HTTP link to the uploaded HTML file\n\n\n\n\n\n\nSharedValues::S3_VERSION_OUTPUT_PATH\n\n\nDirect HTTP link to the uploaded Version file\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action s3\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run s3\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run s3 parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "s3"
        },
        {
            "location": "/actions/s3/#s3",
            "text": "Generates a plist file and uploads all to AWS S3   Please use the  aws_s3  plugin instead. Install using  fastlane add_plugin aws_s3 .  Upload a new build to Amazon S3 to distribute the build to beta testers. Works for both Ad Hoc and Enterprise signed applications. This step will generate the necessary HTML, plist, and version files for you. It is recommended to  not  store the AWS access keys in the  Fastfile . The uploaded  version.json  file provides an easy way for apps to poll if a new update is available.      s3       Supported platforms     Author  @joshdholtz",
            "title": "s3"
        },
        {
            "location": "/actions/s3/#2-examples",
            "text": "s3  s3(\n  # All of these are used to make Shenzhen's `ipa distribute:s3` command\n  access_key: ENV[\"S3_ACCESS_KEY\"],     # Required from user.\n  secret_access_key: ENV[\"S3_SECRET_ACCESS_KEY\"], # Required from user.\n  bucket: ENV[\"S3_BUCKET\"],   # Required from user.\n  ipa: \"AppName.ipa\",         # Optional if you use `ipa` to build\n  dsym: \"AppName.app.dSYM.zip\",         # Optional if you use `ipa` to build\n  path: \"v{CFBundleShortVersionString}_b{CFBundleVersion}/\", # This is actually the default.\n  upload_metadata: true,      # Upload version.json, plist and HTML. Set to false to skip uploading of these files.\n  version_file_name: \"app_version.json\",# Name of the file to upload to S3. Defaults to \"version.json\"\n  version_template_path: \"path/to/erb\"  # Path to an ERB to configure the structure of the version JSON file\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/s3/#parameters",
            "text": "Key  Description  Default      ipa  .ipa file for the build  *    dsym  zipped .dsym package for the build  *    upload_metadata  Upload relevant metadata for this build  true    plist_template_path  plist template path     plist_file_name  uploaded plist filename     html_template_path  html erb template path     html_file_name  uploaded html filename     version_template_path  version erb template path     version_file_name  uploaded version filename     access_key  AWS Access Key ID  *    secret_access_key  AWS Secret Access Key  *    bucket  AWS bucket name  *    region  AWS region (for bucket creation)  *    path  S3 'path'. Values from Info.plist will be substituted for keys wrapped in   v{CFBundleShortVersionString}_b{CFBundleVersion}/    source  Optional source directory e.g. ./build     acl  Uploaded object permissions e.g public_read (default), private, public_read_write, authenticated_read  public_read     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/s3/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  s3  action generates the following Lane Variables:     SharedValue  Description      SharedValues::S3_IPA_OUTPUT_PATH  Direct HTTP link to the uploaded ipa file    SharedValues::S3_DSYM_OUTPUT_PATH  Direct HTTP link to the uploaded dsym file    SharedValues::S3_PLIST_OUTPUT_PATH  Direct HTTP link to the uploaded plist file    SharedValues::S3_HTML_OUTPUT_PATH  Direct HTTP link to the uploaded HTML file    SharedValues::S3_VERSION_OUTPUT_PATH  Direct HTTP link to the uploaded Version file     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/s3/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action s3",
            "title": "Documentation"
        },
        {
            "location": "/actions/s3/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run s3  To pass parameters, make use of the  :  symbol, for example  fastlane run s3 parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/s3/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/say/",
            "text": "say\n\n\nThis action speaks the given text out loud\n\n\n\n\n\n\n\n\nsay\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nsay(\"I can speak\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntext\n\n\nText to be spoken out loud (as string or array of strings)\n\n\n\n\n\n\n\n\nmute\n\n\nIf say should be muted with text printed out\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action say\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run say\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run say parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "say"
        },
        {
            "location": "/actions/say/#say",
            "text": "This action speaks the given text out loud     say       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "say"
        },
        {
            "location": "/actions/say/#1-example",
            "text": "say(\"I can speak\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/say/#parameters",
            "text": "Key  Description  Default      text  Text to be spoken out loud (as string or array of strings)     mute  If say should be muted with text printed out  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/say/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action say",
            "title": "Documentation"
        },
        {
            "location": "/actions/say/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run say  To pass parameters, make use of the  :  symbol, for example  fastlane run say parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/say/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/scan/",
            "text": "scan\n\n\nAlias for the \nrun_tests\n action\n\n\n\n  \n\n\n\n\n\nThe easiest way to run tests of your iOS and Mac app\n\n\nscan\n makes it easy to run tests of your iOS and Mac app on a simulator or connected device.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nScanfile\n\n\n\n\n\n\n\nWhat's scan?\n\n\n\n\nBefore \nscan\n\n\nxcodebuild \\\n  -workspace MyApp.xcworkspace \\\n  -scheme \"MyApp\" \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n  test\n\n\n\n\nAs the output will look like this\n\n\n/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o Example/main.m normal arm64 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/felixkrause/Developer/fastlane/gym/example/cocoapods\n    export LANG=en_US.US-ASCII\n    export PATH=\"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode-beta.app/Contents/Developer/usr/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0@global/bin:/Users/felixkrause/.rvm/rubies/ruby-2.2.0/bin:/Users/felixkrause/.rvm/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch arm64 -fmessage-length=126 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -fcolor-diagnostics -std=gnu99 -fobjc-arc -fmodules -gmodules -fmodules-cache-path=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -Os -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wunreachable-code -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-arc-repeated-use-of-weak -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wno-deprecated-implementations -DCOCOAPODS=1 -DNS_BLOCK_ASSERTIONS=1 -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.0.sdk -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -miphoneos-version-min=9.0 -g -fvisibility=hidden -Wno-sign-conversion -fembed-bitcode -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-generated-files.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-own-target-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-all-target-headers.hmap -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-project-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos/include -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources/arm64 -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources -F/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -MMD -MT dependencies -MF /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.d --serialize-diagnostics /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.dia -c /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Example/main.m -o /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o\n\n\n\n\nyou'll probably want to use something like \nxcpretty\n, which will look like this:\n\n\nset -o pipefail &&\n  xcodebuild \\\n    -workspace MyApp.xcworkspace \\\n    -scheme \"MyApp\" \\\n    -sdk iphonesimulator \\\n    -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n    test \\\n  | xcpretty \\\n    -r \"html\" \\\n    -o \"tests.html\"\n\n\n\n\nWith \nscan\n\n\nfastlane scan\n\n\n\n\nWhy \nscan\n?\n\n\nscan\n uses the latest APIs and tools to make running tests plain simple and offer a great integration into your existing workflow, like \nfastlane\n or Jenkins.\n\n\n\n\n\n\n\n\n\n\nscan Features\n\n\n\n\n\n\n\n\n\n\n\ud83c\udfc1\n\n\nBeautiful inline build output while running the tests\n\n\n\n\n\n\n\ud83d\udea0\n\n\nSensible defaults: Automatically detect the project, schemes and more\n\n\n\n\n\n\n\ud83d\udcca\n\n\nSupport for HTML, JSON and JUnit reports\n\n\n\n\n\n\n\ud83d\udd0e\n\n\nXcode duplicated your simulators again? \nscan\n will handle this for you\n\n\n\n\n\n\n\ud83d\udd17\n\n\nWorks perfectly with \nfastlane\n and other tools\n\n\n\n\n\n\n\ud83d\ude85\n\n\nDon't remember any complicated build commands, just \nscan\n\n\n\n\n\n\n\ud83d\udd27\n\n\nEasy and dynamic configuration using parameters and environment variables\n\n\n\n\n\n\n\ud83d\udce2\n\n\nBeautiful slack notifications of the test results\n\n\n\n\n\n\n\ud83d\udcbe\n\n\nStore common build settings in a \nScanfile\n\n\n\n\n\n\n\ud83d\udce4\n\n\nThe raw \nxcodebuild\n outputs are stored in \n~/Library/Logs/scan\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSupports both iOS and Mac applications\n\n\n\n\n\n\n\ud83d\udc71\n\n\nAutomatically switches to the \ntravis formatter\n when running on Travis\n\n\n\n\n\n\n\ud83d\udcd6\n\n\nHelps you resolve common test errors like simulator not responding\n\n\n\n\n\n\n\n\nscan\n uses a plain \nxcodebuild\n command, therefore keeping 100% compatible with \nxcodebuild\n. To generate the nice output, \nscan\n uses \nxcpretty\n. You can always access the raw output in \n~/Library/Logs/scan\n.\n\n\n\n\n\n\n\n\n\n\nUsage\n\n\nfastlane scan\n\n\n\n\nThat's all you need to run your tests. If you want more control, here are some available parameters:\n\n\nfastlane scan --workspace \"Example.xcworkspace\" --scheme \"AppName\" --device \"iPhone 6\" --clean\n\n\n\n\nIf you need to use a different Xcode install, use \nxcode-select\n or define \nDEVELOPER_DIR\n:\n\n\nDEVELOPER_DIR=\"/Applications/Xcode6.2.app\" scan\n\n\n\n\nTo run \nscan\n on multiple devices via \nfastlane\n, add this to your \nFastfile\n:\n\n\nscan(\n  workspace: \"Example.xcworkspace\",\n  devices: [\"iPhone 6s\", \"iPad Air\"]\n)\n\n\n\n\nFor a list of all available parameters use\n\n\nfastlane action scan\n\n\n\n\nTo access the raw \nxcodebuild\n output open \n~/Library/Logs/scan\n\n\nScanfile\n\n\nSince you might want to manually trigger the tests but don't want to specify all the parameters every time, you can store your defaults in a so called \nScanfile\n.\n\n\nRun \nfastlane scan init\n to create a new configuration file. Example:\n\n\nscheme(\"Example\")\ndevices([\"iPhone 6s\", \"iPad Air\"])\n\nclean(true)\n\noutput_types(\"html\")\n\n\n\n\nAutomating the whole process\n\n\nscan\n works great together with \nfastlane\n, which connects all deployment tools into one streamlined workflow.\n\n\nUsing \nfastlane\n you can define a configuration like\n\n\nlane :test do\n  scan(scheme: \"Example\")\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\nscan\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n6 Examples\n\n\nrun_tests\n\n\n\n\nscan # alias for \"run_tests\"\n\n\n\n\nrun_tests(\n  workspace: \"App.xcworkspace\",\n  scheme: \"MyTests\",\n  clean: false\n)\n\n\n\n\n# Build For Testing\nrun_tests(\n   derived_data_path: \"my_folder\",\n   build_for_testing: true\n)\n\n\n\n\n# run tests using derived data from prev. build\nrun_tests(\n   derived_data_path: \"my_folder\",\n   test_without_building: true\n)\n\n\n\n\n# or run it from an existing xctestrun package\nrun_tests(\n   xctestrun: \"/path/to/mytests.xctestrun\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath to the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath to the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\ndevice\n\n\nThe name of the simulator type you want to run tests on (e.g. 'iPhone 6')\n\n\n\n\n\n\n\n\ndevices\n\n\nArray of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])\n\n\n\n\n\n\n\n\nskip_detect_devices\n\n\nShould skip auto detecting of devices if none were specified\n\n\nfalse\n\n\n\n\n\n\nforce_quit_simulator\n\n\nEnabling this option will automatically killall Simulator processes before the run\n\n\nfalse\n\n\n\n\n\n\nreset_simulator\n\n\nEnabling this option will automatically erase the simulator before running the application\n\n\nfalse\n\n\n\n\n\n\ndisable_slide_to_type\n\n\nEnabling this option will disable the simulator from showing the 'Slide to type' prompt\n\n\ntrue\n\n\n\n\n\n\nprelaunch_simulator\n\n\nEnabling this option will launch the first simulator prior to calling any xcodebuild command\n\n\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n\n\n*\n\n\n\n\n\n\nonly_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to run\n\n\n\n\n\n\n\n\nskip_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to skip\n\n\n\n\n\n\n\n\ntestplan\n\n\nThe testplan associated with the scheme that should be used for testing\n\n\n\n\n\n\n\n\nonly_test_configurations\n\n\nArray of strings matching test plan configurations to run\n\n\n\n\n\n\n\n\nskip_test_configurations\n\n\nArray of strings matching test plan configurations to skip\n\n\n\n\n\n\n\n\nxctestrun\n\n\nRun tests using the provided \n.xctestrun\n file\n\n\n\n\n\n\n\n\ntoolchain\n\n\nThe toolchain that should be used for building the application (e.g. \ncom.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a\n)\n\n\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\ncode_coverage\n\n\nShould code coverage be generated? (Xcode 7 and up)\n\n\n\n\n\n\n\n\naddress_sanitizer\n\n\nShould the address sanitizer be turned on?\n\n\n\n\n\n\n\n\nthread_sanitizer\n\n\nShould the thread sanitizer be turned on?\n\n\n\n\n\n\n\n\nopen_report\n\n\nShould the HTML report be opened when tests are completed?\n\n\nfalse\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build, similar to \noutput_style='raw'\n but this will also skip the test results table\n\n\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which all reports will be stored\n\n\n*\n\n\n\n\n\n\noutput_style\n\n\nDefine how the output should look like. Valid values are: standard, basic, rspec, or raw (disables xcpretty during xcodebuild)\n\n\n\n\n\n\n\n\noutput_types\n\n\nComma separated list of the output types (e.g. html, junit, json-compilation-database)\n\n\nhtml,junit\n\n\n\n\n\n\noutput_files\n\n\nComma separated list of the output files, corresponding to the types provided by :output_types (order should match). If specifying an output type of json-compilation-database with :use_clang_report_name enabled, that option will take precedence\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the raw log\n\n\n*\n\n\n\n\n\n\ninclude_simulator_logs\n\n\nIf the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n\n\nfalse\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\nformatter\n\n\nA custom xcpretty formatter to use\n\n\n\n\n\n\n\n\nxcpretty_args\n\n\nPass in xcpretty additional command line arguments (e.g. '--test --no-color' or '--tap --no-utf')\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\nshould_zip_build_products\n\n\nShould zip the derived data build products and place in output path?\n\n\nfalse\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\nuse_clang_report_name\n\n\nGenerate the json compilation database with clang naming convention (compile_commands.json)\n\n\nfalse\n\n\n\n\n\n\nconcurrent_workers\n\n\nSpecify the exact number of test runners that will be spawned during parallel testing. Equivalent to -parallel-testing-worker-count\n\n\n\n\n\n\n\n\nmax_concurrent_simulators\n\n\nConstrain the number of simulator devices on which to test concurrently. Equivalent to -maximum-concurrent-test-simulator-destinations\n\n\n\n\n\n\n\n\ndisable_concurrent_testing\n\n\nDo not run test bundles in parallel on the specified destinations. Testing will occur on each destination serially. Equivalent to -disable-concurrent-testing\n\n\nfalse\n\n\n\n\n\n\nskip_build\n\n\nShould debug build be skipped before test build?\n\n\nfalse\n\n\n\n\n\n\ntest_without_building\n\n\nTest without building, requires a derived data path\n\n\n\n\n\n\n\n\nbuild_for_testing\n\n\nBuild for testing only, does not run tests\n\n\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\napp_name\n\n\nApp name to use in slack message and logfile name\n\n\n\n\n\n\n\n\ndeployment_target_version\n\n\nTarget version of the app being build or tested. Used to filter out simulator version\n\n\n\n\n\n\n\n\nslack_url\n\n\nCreate an Incoming WebHook for your Slack group to post results there\n\n\n\n\n\n\n\n\nslack_channel\n\n\n#channel or @username\n\n\n\n\n\n\n\n\nslack_message\n\n\nThe message included with each message posted to slack\n\n\n\n\n\n\n\n\nslack_use_webhook_configured_username_and_icon\n\n\nUse webhook's default username and icon settings? (true/false)\n\n\nfalse\n\n\n\n\n\n\nslack_username\n\n\nOverrides the webhook's username property if slack_use_webhook_configured_username_and_icon is false\n\n\nfastlane\n\n\n\n\n\n\nslack_icon_url\n\n\nOverrides the webhook's image property if slack_use_webhook_configured_username_and_icon is false\n\n\nhttps://fastlane.tools/assets/img/fastlane_icon.png\n\n\n\n\n\n\nskip_slack\n\n\nDon't publish to slack, even when an URL is given\n\n\nfalse\n\n\n\n\n\n\nslack_only_on_failure\n\n\nOnly post on Slack if the tests fail\n\n\nfalse\n\n\n\n\n\n\nslack_default_payloads\n\n\nSpecifies default payloads to include in Slack messages. For more info visit https://docs.fastlane.tools/actions/slack\n\n\n\n\n\n\n\n\ndestination\n\n\nUse only if you're a pro, use the other options instead\n\n\n\n\n\n\n\n\ncatalyst_platform\n\n\nPlatform to build when using a Catalyst enabled app. Valid values are: ios, macos\n\n\n\n\n\n\n\n\ncustom_report_file_name\n\n\nDEPRECATED!\n Use \n--output_files\n instead - Sets custom full report file name when generating a single report\n\n\n\n\n\n\n\n\nxcodebuild_command\n\n\nAllows for override of the default \nxcodebuild\n command\n\n\nenv NSUnbufferedIO=YES xcodebuild\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\nfail_build\n\n\nShould this step stop the build if the tests fail? Set this to false if you're using trainer\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nscan\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SCAN_DERIVED_DATA_PATH\n\n\nThe path to the derived data\n\n\n\n\n\n\nSharedValues::SCAN_GENERATED_PLIST_FILE\n\n\nThe generated plist file\n\n\n\n\n\n\nSharedValues::SCAN_GENERATED_PLIST_FILES\n\n\nThe generated plist files\n\n\n\n\n\n\nSharedValues::SCAN_ZIP_BUILD_PRODUCTS_PATH\n\n\nThe path to the zipped build products\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action scan\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run scan\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run scan parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "scan"
        },
        {
            "location": "/actions/scan/#scan",
            "text": "Alias for the  run_tests  action",
            "title": "scan"
        },
        {
            "location": "/actions/scan/#the-easiest-way-to-run-tests-of-your-ios-and-mac-app",
            "text": "scan  makes it easy to run tests of your iOS and Mac app on a simulator or connected device.   \n     Features  \u2022\n     Usage  \u2022\n     Scanfile",
            "title": "The easiest way to run tests of your iOS and Mac app"
        },
        {
            "location": "/actions/scan/#whats-scan",
            "text": "",
            "title": "What's scan?"
        },
        {
            "location": "/actions/scan/#before-scan",
            "text": "xcodebuild \\\n  -workspace MyApp.xcworkspace \\\n  -scheme \"MyApp\" \\\n  -sdk iphonesimulator \\\n  -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n  test  As the output will look like this  /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o Example/main.m normal arm64 objective-c com.apple.compilers.llvm.clang.1_0.compiler\n    cd /Users/felixkrause/Developer/fastlane/gym/example/cocoapods\n    export LANG=en_US.US-ASCII\n    export PATH=\"/Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/usr/bin:/Applications/Xcode-beta.app/Contents/Developer/usr/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0/bin:/Users/felixkrause/.rvm/gems/ruby-2.2.0@global/bin:/Users/felixkrause/.rvm/rubies/ruby-2.2.0/bin:/Users/felixkrause/.rvm/bin:/usr/local/heroku/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n    /Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/clang -x objective-c -arch arm64 -fmessage-length=126 -fdiagnostics-show-note-include-stack -fmacro-backtrace-limit=0 -fcolor-diagnostics -std=gnu99 -fobjc-arc -fmodules -gmodules -fmodules-cache-path=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache -fmodules-prune-interval=86400 -fmodules-prune-after=345600 -fbuild-session-file=/Users/felixkrause/Library/Developer/Xcode/DerivedData/ModuleCache/Session.modulevalidation -fmodules-validate-once-per-build-session -Wnon-modular-include-in-framework-module -Werror=non-modular-include-in-framework-module -Wno-trigraphs -fpascal-strings -Os -fno-common -Wno-missing-field-initializers -Wno-missing-prototypes -Werror=return-type -Wunreachable-code -Wno-implicit-atomic-properties -Werror=deprecated-objc-isa-usage -Werror=objc-root-class -Wno-arc-repeated-use-of-weak -Wduplicate-method-match -Wno-missing-braces -Wparentheses -Wswitch -Wunused-function -Wno-unused-label -Wno-unused-parameter -Wunused-variable -Wunused-value -Wempty-body -Wconditional-uninitialized -Wno-unknown-pragmas -Wno-shadow -Wno-four-char-constants -Wno-conversion -Wconstant-conversion -Wint-conversion -Wbool-conversion -Wenum-conversion -Wshorten-64-to-32 -Wpointer-sign -Wno-newline-eof -Wno-selector -Wno-strict-selector-match -Wundeclared-selector -Wno-deprecated-implementations -DCOCOAPODS=1 -DNS_BLOCK_ASSERTIONS=1 -DOBJC_OLD_DISPATCH_PROTOTYPES=0 -isysroot /Applications/Xcode-beta.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.0.sdk -fstrict-aliasing -Wprotocol -Wdeprecated-declarations -miphoneos-version-min=9.0 -g -fvisibility=hidden -Wno-sign-conversion -fembed-bitcode -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-generated-files.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-own-target-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-all-target-headers.hmap -iquote /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/ExampleProductName-project-headers.hmap -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos/include -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -I/Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources/arm64 -I/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/DerivedSources -F/Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/BuildProductsPath/Release-iphoneos -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public -isystem /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Pods/Headers/Public/HexColors -MMD -MT dependencies -MF /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.d --serialize-diagnostics /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.dia -c /Users/felixkrause/Developer/fastlane/gym/example/cocoapods/Example/main.m -o /Users/felixkrause/Library/Developer/Xcode/DerivedData/Example-fhlmxikmujknefgidqwqvtbatohi/Build/Intermediates/ArchiveIntermediates/Example/IntermediateBuildFilesPath/Example.build/Release-iphoneos/Example.build/Objects-normal/arm64/main.o  you'll probably want to use something like  xcpretty , which will look like this:  set -o pipefail &&\n  xcodebuild \\\n    -workspace MyApp.xcworkspace \\\n    -scheme \"MyApp\" \\\n    -sdk iphonesimulator \\\n    -destination 'platform=iOS Simulator,name=iPhone 6,OS=8.1' \\\n    test \\\n  | xcpretty \\\n    -r \"html\" \\\n    -o \"tests.html\"",
            "title": "Before scan"
        },
        {
            "location": "/actions/scan/#with-scan",
            "text": "fastlane scan",
            "title": "With scan"
        },
        {
            "location": "/actions/scan/#why-scan",
            "text": "scan  uses the latest APIs and tools to make running tests plain simple and offer a great integration into your existing workflow, like  fastlane  or Jenkins.      scan Features      \ud83c\udfc1  Beautiful inline build output while running the tests    \ud83d\udea0  Sensible defaults: Automatically detect the project, schemes and more    \ud83d\udcca  Support for HTML, JSON and JUnit reports    \ud83d\udd0e  Xcode duplicated your simulators again?  scan  will handle this for you    \ud83d\udd17  Works perfectly with  fastlane  and other tools    \ud83d\ude85  Don't remember any complicated build commands, just  scan    \ud83d\udd27  Easy and dynamic configuration using parameters and environment variables    \ud83d\udce2  Beautiful slack notifications of the test results    \ud83d\udcbe  Store common build settings in a  Scanfile    \ud83d\udce4  The raw  xcodebuild  outputs are stored in  ~/Library/Logs/scan    \ud83d\udcbb  Supports both iOS and Mac applications    \ud83d\udc71  Automatically switches to the  travis formatter  when running on Travis    \ud83d\udcd6  Helps you resolve common test errors like simulator not responding     scan  uses a plain  xcodebuild  command, therefore keeping 100% compatible with  xcodebuild . To generate the nice output,  scan  uses  xcpretty . You can always access the raw output in  ~/Library/Logs/scan .",
            "title": "Why scan?"
        },
        {
            "location": "/actions/scan/#usage",
            "text": "fastlane scan  That's all you need to run your tests. If you want more control, here are some available parameters:  fastlane scan --workspace \"Example.xcworkspace\" --scheme \"AppName\" --device \"iPhone 6\" --clean  If you need to use a different Xcode install, use  xcode-select  or define  DEVELOPER_DIR :  DEVELOPER_DIR=\"/Applications/Xcode6.2.app\" scan  To run  scan  on multiple devices via  fastlane , add this to your  Fastfile :  scan(\n  workspace: \"Example.xcworkspace\",\n  devices: [\"iPhone 6s\", \"iPad Air\"]\n)  For a list of all available parameters use  fastlane action scan  To access the raw  xcodebuild  output open  ~/Library/Logs/scan",
            "title": "Usage"
        },
        {
            "location": "/actions/scan/#scanfile",
            "text": "Since you might want to manually trigger the tests but don't want to specify all the parameters every time, you can store your defaults in a so called  Scanfile .  Run  fastlane scan init  to create a new configuration file. Example:  scheme(\"Example\")\ndevices([\"iPhone 6s\", \"iPad Air\"])\n\nclean(true)\n\noutput_types(\"html\")",
            "title": "Scanfile"
        },
        {
            "location": "/actions/scan/#automating-the-whole-process",
            "text": "scan  works great together with  fastlane , which connects all deployment tools into one streamlined workflow.  Using  fastlane  you can define a configuration like  lane :test do\n  scan(scheme: \"Example\")\nend      scan       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Automating the whole process"
        },
        {
            "location": "/actions/scan/#6-examples",
            "text": "run_tests  scan # alias for \"run_tests\"  run_tests(\n  workspace: \"App.xcworkspace\",\n  scheme: \"MyTests\",\n  clean: false\n)  # Build For Testing\nrun_tests(\n   derived_data_path: \"my_folder\",\n   build_for_testing: true\n)  # run tests using derived data from prev. build\nrun_tests(\n   derived_data_path: \"my_folder\",\n   test_without_building: true\n)  # or run it from an existing xctestrun package\nrun_tests(\n   xctestrun: \"/path/to/mytests.xctestrun\"\n)",
            "title": "6 Examples"
        },
        {
            "location": "/actions/scan/#parameters",
            "text": "Key  Description  Default      workspace  Path to the workspace file     project  Path to the project file     scheme  The project's scheme. Make sure it's marked as  Shared     device  The name of the simulator type you want to run tests on (e.g. 'iPhone 6')     devices  Array of devices to run the tests on (e.g. ['iPhone 6', 'iPad Air'])     skip_detect_devices  Should skip auto detecting of devices if none were specified  false    force_quit_simulator  Enabling this option will automatically killall Simulator processes before the run  false    reset_simulator  Enabling this option will automatically erase the simulator before running the application  false    disable_slide_to_type  Enabling this option will disable the simulator from showing the 'Slide to type' prompt  true    prelaunch_simulator  Enabling this option will launch the first simulator prior to calling any xcodebuild command     reinstall_app  Enabling this option will automatically uninstall the application before running it  false    app_identifier  The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)  *    only_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to run     skip_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to skip     testplan  The testplan associated with the scheme that should be used for testing     only_test_configurations  Array of strings matching test plan configurations to run     skip_test_configurations  Array of strings matching test plan configurations to skip     xctestrun  Run tests using the provided  .xctestrun  file     toolchain  The toolchain that should be used for building the application (e.g.  com.apple.dt.toolchain.Swift_2_3, org.swift.30p620160816a )     clean  Should the project be cleaned before building it?  false    code_coverage  Should code coverage be generated? (Xcode 7 and up)     address_sanitizer  Should the address sanitizer be turned on?     thread_sanitizer  Should the thread sanitizer be turned on?     open_report  Should the HTML report be opened when tests are completed?  false    disable_xcpretty  Disable xcpretty formatting of build, similar to  output_style='raw'  but this will also skip the test results table     output_directory  The directory in which all reports will be stored  *    output_style  Define how the output should look like. Valid values are: standard, basic, rspec, or raw (disables xcpretty during xcodebuild)     output_types  Comma separated list of the output types (e.g. html, junit, json-compilation-database)  html,junit    output_files  Comma separated list of the output files, corresponding to the types provided by :output_types (order should match). If specifying an output type of json-compilation-database with :use_clang_report_name enabled, that option will take precedence     buildlog_path  The directory where to store the raw log  *    include_simulator_logs  If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory  false    suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     formatter  A custom xcpretty formatter to use     xcpretty_args  Pass in xcpretty additional command line arguments (e.g. '--test --no-color' or '--tap --no-utf')     derived_data_path  The directory where build products and other derived data will go     should_zip_build_products  Should zip the derived data build products and place in output path?  false    result_bundle  Should an Xcode result bundle be generated in the output directory  false    use_clang_report_name  Generate the json compilation database with clang naming convention (compile_commands.json)  false    concurrent_workers  Specify the exact number of test runners that will be spawned during parallel testing. Equivalent to -parallel-testing-worker-count     max_concurrent_simulators  Constrain the number of simulator devices on which to test concurrently. Equivalent to -maximum-concurrent-test-simulator-destinations     disable_concurrent_testing  Do not run test bundles in parallel on the specified destinations. Testing will occur on each destination serially. Equivalent to -disable-concurrent-testing  false    skip_build  Should debug build be skipped before test build?  false    test_without_building  Test without building, requires a derived data path     build_for_testing  Build for testing only, does not run tests     sdk  The SDK that should be used for building the application     configuration  The configuration to use when building the app. Defaults to 'Release'  *    xcargs  Pass additional arguments to xcodebuild. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     app_name  App name to use in slack message and logfile name     deployment_target_version  Target version of the app being build or tested. Used to filter out simulator version     slack_url  Create an Incoming WebHook for your Slack group to post results there     slack_channel  #channel or @username     slack_message  The message included with each message posted to slack     slack_use_webhook_configured_username_and_icon  Use webhook's default username and icon settings? (true/false)  false    slack_username  Overrides the webhook's username property if slack_use_webhook_configured_username_and_icon is false  fastlane    slack_icon_url  Overrides the webhook's image property if slack_use_webhook_configured_username_and_icon is false  https://fastlane.tools/assets/img/fastlane_icon.png    skip_slack  Don't publish to slack, even when an URL is given  false    slack_only_on_failure  Only post on Slack if the tests fail  false    slack_default_payloads  Specifies default payloads to include in Slack messages. For more info visit https://docs.fastlane.tools/actions/slack     destination  Use only if you're a pro, use the other options instead     catalyst_platform  Platform to build when using a Catalyst enabled app. Valid values are: ios, macos     custom_report_file_name  DEPRECATED!  Use  --output_files  instead - Sets custom full report file name when generating a single report     xcodebuild_command  Allows for override of the default  xcodebuild  command  env NSUnbufferedIO=YES xcodebuild    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    use_system_scm  Lets xcodebuild use system's scm configuration  false    fail_build  Should this step stop the build if the tests fail? Set this to false if you're using trainer  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/scan/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  scan  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SCAN_DERIVED_DATA_PATH  The path to the derived data    SharedValues::SCAN_GENERATED_PLIST_FILE  The generated plist file    SharedValues::SCAN_GENERATED_PLIST_FILES  The generated plist files    SharedValues::SCAN_ZIP_BUILD_PRODUCTS_PATH  The path to the zipped build products     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/scan/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action scan",
            "title": "Documentation"
        },
        {
            "location": "/actions/scan/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run scan  To pass parameters, make use of the  :  symbol, for example  fastlane run scan parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/scan/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/scp/",
            "text": "scp\n\n\nTransfer files via SCP\n\n\n\n\n\n\n\n\nscp\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n2 Examples\n\n\nscp(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  upload: {\n    src: \"/root/dir1\",\n    dst: \"/tmp/new_dir\"\n  }\n)\n\n\n\n\nscp(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  download: {\n    src: \"/root/dir1\",\n    dst: \"/tmp/new_dir\"\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nUsername\n\n\n\n\n\n\n\n\npassword\n\n\nPassword\n\n\n\n\n\n\n\n\nhost\n\n\nHostname\n\n\n\n\n\n\n\n\nport\n\n\nPort\n\n\n22\n\n\n\n\n\n\nupload\n\n\nUpload\n\n\n\n\n\n\n\n\ndownload\n\n\nDownload\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action scp\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run scp\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run scp parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "scp"
        },
        {
            "location": "/actions/scp/#scp",
            "text": "Transfer files via SCP     scp       Supported platforms  ios, android, mac    Author  @hjanuschka",
            "title": "scp"
        },
        {
            "location": "/actions/scp/#2-examples",
            "text": "scp(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  upload: {\n    src: \"/root/dir1\",\n    dst: \"/tmp/new_dir\"\n  }\n)  scp(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  download: {\n    src: \"/root/dir1\",\n    dst: \"/tmp/new_dir\"\n  }\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/scp/#parameters",
            "text": "Key  Description  Default      username  Username     password  Password     host  Hostname     port  Port  22    upload  Upload     download  Download      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/scp/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action scp",
            "title": "Documentation"
        },
        {
            "location": "/actions/scp/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run scp  To pass parameters, make use of the  :  symbol, for example  fastlane run scp parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/scp/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/screengrab/",
            "text": "screengrab\n\n\nAlias for the \ncapture_android_screenshots\n action\n\n\n\n  \n\n\n\n\n\nAutomated localized screenshots of your Android app on every device\n\n\nscreengrab\n generates localized screenshots of your Android app for different device types and languages for Google Play and can be uploaded using \nsupply\n.\n\n\n\n\nWhy should I automate this process?\n\n\n\n\nCreate hundreds of screenshots in multiple languages on emulators or real devices, saving you hours\n\n\nEasily verify that localizations fit into labels on all screen dimensions to find UI mistakes before you ship\n\n\nYou only need to configure it once for anyone on your team to run it\n\n\nKeep your screenshots perfectly up-to-date with every app update. Your customers deserve it!\n\n\nFully integrates with \nfastlane\n and \nsupply\n\n\n\n\nInstallation\n\n\nInstall the gem\n\n\nsudo gem install fastlane\n\n\n\n\nGradle dependency\n\n\nandroidTestImplementation 'tools.fastlane:screengrab:x.x.x'\n\n\n\n\nThe latest version is \n \n \n\n\nAs of Screengrab version 2.0.0, all Android test dependencies are AndroidX dependencies. This means a device with API 18+, Android 4.3 or greater is required. If you wish to capture screenshots with an older Android OS, then you must use a 1.x.x version.\n\n\nConfiguring your Manifest Permissions\n\n\nEnsure that the following permissions exist in your \nsrc/debug/AndroidManifest.xml\n\n\n<!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />\n\n\n\n\nConfiguring your \nUI Tests\n for Screenshots\n\n\n\n\nAdd \nLocaleTestRule\n to your tests class to handle automatic switching of locales.\n\n   If you're using Java use:\n   \njava\n   @ClassRule\n   public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n   If you're using Kotlin use:\n   \nkotlin\n   @Rule @JvmField\n   val localeTestRule = LocaleTestRule()\n\n   Important is the \n@JvmField\n annotation. It won't work like that:\n   \nkotlin\n   companion object {\n       @get:ClassRule\n       val localeTestRule = LocaleTestRule()\n   }\n\n\n\n\n\n\nTo capture screenshots, add the following to your tests \nScreengrab.screenshot(\"name_of_screenshot_here\");\n on the appropriate screens\n\n\n\n\nGenerating Screenshots with Screengrab\n\n\n\n\nThen, before running \nfastlane screengrab\n you'll need a debug and test apk\n\n\nYou can create your APKs manually with \n./gradlew assembleDebug assembleAndroidTest\n\n\nYou can also create a lane and use \nbuild_android_app\n:\n  \nruby\n  desc \"Build debug and test APK for screenshots\"\n  lane :build_for_screengrab do\n    build_android_app(\n      task: 'assemble',\n      build_type: 'Debug'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'AndroidTest'\n    )\n  end\n\n\n\n\n\n\nOnce complete run \nfastlane screengrab\n in your app project directory to generate screenshots\n\n\nYou will be prompted to provide any required parameters which are not in your \nScreengrabfile\n or provided as command line arguments\n\n\n\n\n\n\nYour screenshots will be saved to \nfastlane/metadata/android\n in the directory where you ran \nscreengrab\n\n\n\n\nImproved screenshot capture with UI Automator\n\n\nAs of \nscreengrab\n 0.5.0, you can specify different strategies to control the way \nscreengrab\n captures screenshots. The newer strategy delegates to \nUI Automator\n which fixes a number of problems compared to the original strategy:\n\n\n\n\nShadows/elevation are correctly captured for Material UI\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nUI Automator is the default strategy. However, UI Automator requires a device with \nAPI level >= 18\n. If you need to grab screenshots on an older Android version, use the latest 1.x.x version of this library and set the DecorView ScreenshotStrategy.\n\n\nScreengrab.setDefaultScreenshotStrategy(new DecorViewScreenshotStrategy());\n\n\n\n\nImproved screenshot capture with Falcon\n\n\nAs of \nscreengrab\n 1.2.0, you can specify a new strategy to delegate to \nFalcon\n. Falcon may work better than UI Automator in some situations and also provides similar benefits as UI Automator:\n\n\n\n\nMulti-window situations are correctly captured (dialogs, etc.)\n\n\nWorks on Android N\n\n\n\n\nFalcon requires a device with \nAPI level >= 10\n. To enable it for all screenshots by default, make the following call before your tests run:\n\n\nScreengrab.setDefaultScreenshotStrategy(new FalconScreenshotStrategy(activityRule.getActivity()));\n\n\n\n\nAdvanced Screengrabfile Configuration\n\n\nRunning \nfastlane screengrab init\n generated a Screengrabfile which can store all of your configuration options. Since most values will not change often for your project, it is recommended to store them there.\n\n\nThe \nScreengrabfile\n is written in Ruby, so you may find it helpful to use an editor that highlights Ruby syntax to modify this file.\n\n\n# remove the leading '#' to uncomment lines\n\n# app_package_name('your.app.package')\n# use_tests_in_packages(['your.screenshot.tests.package'])\n\n# app_apk_path('path/to/your/app.apk')\n# tests_apk_path('path/to/your/tests.apk')\n\nlocales(['en-US', 'fr-FR', 'it-IT'])\n\n# clear all previously generated screenshots in your local output directory before creating new ones\nclear_previous_screenshots(true)\n\n\n\n\nFor more information about all available options run\n\n\nfastlane action screengrab\n\n\n\n\nTips\n\n\nUI Tests\n\n\nCheck out \nTesting UI for a Single App\n for an introduction to using Espresso for UI testing.\n\n\nExample UI Test Class (Using JUnit4)\n\n\nJava:\n\n\n@RunWith(JUnit4.class)\npublic class JUnit4StyleTests {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}\n\n\n\n\n\nKotlin:\n\n\n@RunWith(JUnit4.class)\nclass JUnit4StyleTests {\n    @get:Rule\n    var activityRule = ActivityTestRule(MainActivity::class.java)\n\n    @Rule @JvmField\n    val localeTestRule = LocaleTestRule()\n\n    @Test\n    fun testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\")\n\n        onView(withId(R.id.fab)).perform(click())\n\n        Screengrab.screenshot(\"after_button_click\")\n    }\n}\n\n\n\n\n\nThere is an \nexample project\n showing how to use JUnit 3 or 4 and Espresso with the screengrab Java library to capture screenshots during a UI test run.\n\n\nUsing JUnit 4 is preferable because of its ability to perform actions before and after the entire test class is run. This means you will change the device's locale far fewer times when compared with JUnit 3 running those commands before and after each test method.\n\n\nWhen using JUnit 3 you'll need to add a bit more code:\n\n\n\n\nUse \nLocaleUtil.changeDeviceLocaleTo(LocaleUtil.getTestLocale());\n in \nsetUp()\n\n\nUse \nLocaleUtil.changeDeviceLocaleTo(LocaleUtil.getEndingLocale());\n in \ntearDown()\n\n\nUse \nScreengrab.screenshot(\"name_of_screenshot_here\");\n to capture screenshots at the appropriate points in your tests\n\n\n\n\nIf you're having trouble getting your device unlocked and the screen activated to run tests, try using \nScreenUtil.activateScreenForTesting(activity);\n in your test setup.\n\n\nClean Status Bar\n\n\nScreengrab can clean your status bar to make your screenshots even more beautiful.\n\nNote: the clean status bar feature is only supported on devices with \nAPI level >= 23\n.\n\n\nTo use the clean status bar feature add the following lines to your src/debug/AndroidManifest.xml\n\n\n<!-- Indicates the use of the clean status bar feature -->\n<uses-feature android:name=\"tools.fastlane.screengrab.cleanstatusbar\"/>\n<!-- Allows for changing the status bar -->\n<uses-permission android:name=\"android.permission.DUMP\"/>\n\n\n\n\nAfter that you can enable and disable the clean status bar at any moment during your tests.\n\nIn most cases you probably want to do this in the @BeforeClass and @AfterClass methods.\n\n\n@BeforeClass\npublic static void beforeAll() {\n    CleanStatusBar.enableWithDefaults();\n}\n\n@AfterClass\npublic static void afterAll() {\n    CleanStatusBar.disable();\n}\n\n\n\n\nHave a look at the methods of the \nCleanStatusBar\n class to customize the status bar even more.\n\nYou could for example show the Bluetooth icon and the LTE text.\n\n\nnew CleanStatusBar()\n    .setBluetoothState(BluetoothState.DISCONNECTED)\n    .setMobileNetworkDataType(MobileDataType.LTE)\n    .enable();\n\n\n\n\nAdvanced \nscreengrab\n\n\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your test cases on launch. These strings will be available in your tests through \nInstrumentationRegistry.getArguments()\n.\n\n\nscreengrab(\n  launch_arguments: [\n    \"username hjanuschka\",\n    \"build_number 201\"\n  ]\n)\n\n\n\n\nBundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}\n\n\n\n\n\n\n\n\nDetecting screengrab at runtime\n\n\nFor some apps, it is helpful to know when \nscreengrab\n is running so that you can display specific data for your screenshots. For iOS fastlane users, this is much like \"FASTLANE_SNAPSHOT\". In order to do this, you'll need to have at least two product flavors of your app.\n\n\nAdd two product flavors to the app-level build.gradle file:\n\n\nandroid {\n...\n    flavorDimensions \"mode\"\n    productFlavors {\n        screengrab {\n            dimension \"mode\"\n        }\n        regular {\n            dimension \"mode\"\n        }\n    }\n...\n}\n\n\n\n\nCheck for the existence of that flavor (i.e screengrab) in your app code as follows in order to use mock data or customize data for screenshots:\n\n\nif (BuildConfig.FLAVOR == \"screengrab\") {\n    System.out.println(\"screengrab is running!\");\n}\n\n\n\n\nWhen running \nscreengrab\n, do the following to build the flavor you want as well as the test apk. Note that you use \"assembleFlavor_name\" where Flavor_name is the flavor name, capitalized (i.e. Screengrab).\n\n\n./gradlew assembleScreengrab assembleAndroidTest\n\n\n\n\nRun \nscreengrab\n:\n\n\nfastlane screengrab\n\n\n\n\nscreengrab\n will ask you to select the debug and test apps (which you can then add to your Screengrabfile to skip this step later).\n\n\nThe debug apk should be somewhere like this:\n\n\napp/build/outputs/apk/screengrab/debug/app-screengrab-debug.apk\n\n\nThe test apk should be somewhere like this:\n\n\napp/build/outputs/apk/androidTest/screengrab/debug/app-screengrab-debug-androidTest.apk\n\n\nSit back and enjoy your new screenshots!\n\n\nNote: while this could also be done by creating a new build variant (i.e. debug, release and creating a new one called screengrab), \nAndroid only allows one build type to be tested\n which defaults to debug. That's why we use product flavors.\n\n\n\n\n\n\n\n\n\n\n\n\n\nscreengrab\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@asfalcone, @i2amsam, @mfurtak\n\n\n\n\n\n\n\n\n3 Examples\n\n\ncapture_android_screenshots\n\n\n\n\nscreengrab # alias for \"capture_android_screenshots\"\n\n\n\n\ncapture_android_screenshots(\n  locales: [\"en-US\", \"fr-FR\", \"ja-JP\"],\n  clear_previous_screenshots: true,\n  app_apk_path: \"build/outputs/apk/example-debug.apk\",\n  tests_apk_path: \"build/outputs/apk/example-debug-androidTest-unaligned.apk\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nandroid_home\n\n\nPath to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx\n\n\n*\n\n\n\n\n\n\nbuild_tools_version\n\n\nThe Android build tools version to use, e.g. '23.0.2'\n\n\n\n\n\n\n\n\nlocales\n\n\nA list of locales which should be used\n\n\n[\"en-US\"]\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running screengrab\n\n\nfalse\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\nfastlane/metadata/android\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the summary after running \nscreengrab\n\n\n*\n\n\n\n\n\n\napp_package_name\n\n\nThe package name of the app under test (e.g. com.yourcompany.yourapp)\n\n\n*\n\n\n\n\n\n\ntests_package_name\n\n\nThe package name of the tests bundle (e.g. com.yourcompany.yourapp.test)\n\n\n\n\n\n\n\n\nuse_tests_in_packages\n\n\nOnly run tests in these Java packages\n\n\n\n\n\n\n\n\nuse_tests_in_classes\n\n\nOnly run tests in these Java classes\n\n\n\n\n\n\n\n\nlaunch_arguments\n\n\nAdditional launch arguments\n\n\n\n\n\n\n\n\ntest_instrumentation_runner\n\n\nThe fully qualified class name of your test instrumentation runner\n\n\nandroidx.test.runner.AndroidJUnitRunner\n\n\n\n\n\n\nending_locale\n\n\nReturn the device to this locale after running tests\n\n\nen-US\n\n\n\n\n\n\nuse_adb_root\n\n\nRestarts the adb daemon using \nadb root\n to allow access to screenshots directories on device. Use if getting 'Permission denied' errors\n\n\nfalse\n\n\n\n\n\n\napp_apk_path\n\n\nThe path to the APK for the app under test\n\n\n*\n\n\n\n\n\n\ntests_apk_path\n\n\nThe path to the APK for the the tests bundle\n\n\n*\n\n\n\n\n\n\nspecific_device\n\n\nUse the device or emulator with the given serial number or qualifier\n\n\n\n\n\n\n\n\ndevice_type\n\n\nType of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)\n\n\nphone\n\n\n\n\n\n\nexit_on_test_failure\n\n\nWhether or not to exit Screengrab on test failure. Exiting on failure will not copy sceenshots to local machine nor open sceenshots summary\n\n\ntrue\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\nuse_timestamp_suffix\n\n\nAdd timestamp suffix to screenshot filename\n\n\ntrue\n\n\n\n\n\n\nadb_host\n\n\nConfigure the host used by adb to connect, allows running on remote devices farm\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nscreengrab\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SCREENGRAB_OUTPUT_DIRECTORY\n\n\nThe path to the output directory\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action screengrab\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run screengrab\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run screengrab parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "screengrab"
        },
        {
            "location": "/actions/screengrab/#screengrab",
            "text": "Alias for the  capture_android_screenshots  action",
            "title": "screengrab"
        },
        {
            "location": "/actions/screengrab/#automated-localized-screenshots-of-your-android-app-on-every-device",
            "text": "screengrab  generates localized screenshots of your Android app for different device types and languages for Google Play and can be uploaded using  supply .",
            "title": "Automated localized screenshots of your Android app on every device"
        },
        {
            "location": "/actions/screengrab/#why-should-i-automate-this-process",
            "text": "Create hundreds of screenshots in multiple languages on emulators or real devices, saving you hours  Easily verify that localizations fit into labels on all screen dimensions to find UI mistakes before you ship  You only need to configure it once for anyone on your team to run it  Keep your screenshots perfectly up-to-date with every app update. Your customers deserve it!  Fully integrates with  fastlane  and  supply",
            "title": "Why should I automate this process?"
        },
        {
            "location": "/actions/screengrab/#installation",
            "text": "Install the gem  sudo gem install fastlane",
            "title": "Installation"
        },
        {
            "location": "/actions/screengrab/#gradle-dependency",
            "text": "androidTestImplementation 'tools.fastlane:screengrab:x.x.x'  The latest version is       As of Screengrab version 2.0.0, all Android test dependencies are AndroidX dependencies. This means a device with API 18+, Android 4.3 or greater is required. If you wish to capture screenshots with an older Android OS, then you must use a 1.x.x version.",
            "title": "Gradle dependency"
        },
        {
            "location": "/actions/screengrab/#configuring-your-manifest-permissions",
            "text": "Ensure that the following permissions exist in your  src/debug/AndroidManifest.xml  <!-- Allows unlocking your device and activating its screen so UI tests can succeed -->\n<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\"/>\n<uses-permission android:name=\"android.permission.WAKE_LOCK\"/>\n\n<!-- Allows for storing and retrieving screenshots -->\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\" />\n\n<!-- Allows changing locales -->\n<uses-permission android:name=\"android.permission.CHANGE_CONFIGURATION\" />",
            "title": "Configuring your Manifest Permissions"
        },
        {
            "location": "/actions/screengrab/#configuring-your-ui-tests-for-screenshots",
            "text": "Add  LocaleTestRule  to your tests class to handle automatic switching of locales. \n   If you're using Java use:\n    java\n   @ClassRule\n   public static final LocaleTestRule localeTestRule = new LocaleTestRule(); \n   If you're using Kotlin use:\n    kotlin\n   @Rule @JvmField\n   val localeTestRule = LocaleTestRule() \n   Important is the  @JvmField  annotation. It won't work like that:\n    kotlin\n   companion object {\n       @get:ClassRule\n       val localeTestRule = LocaleTestRule()\n   }    To capture screenshots, add the following to your tests  Screengrab.screenshot(\"name_of_screenshot_here\");  on the appropriate screens",
            "title": "Configuring your UI Tests"
        },
        {
            "location": "/actions/screengrab/#generating-screenshots-with-screengrab",
            "text": "Then, before running  fastlane screengrab  you'll need a debug and test apk  You can create your APKs manually with  ./gradlew assembleDebug assembleAndroidTest  You can also create a lane and use  build_android_app :\n   ruby\n  desc \"Build debug and test APK for screenshots\"\n  lane :build_for_screengrab do\n    build_android_app(\n      task: 'assemble',\n      build_type: 'Debug'\n    )\n    build_android_app(\n      task: 'assemble',\n      build_type: 'AndroidTest'\n    )\n  end    Once complete run  fastlane screengrab  in your app project directory to generate screenshots  You will be prompted to provide any required parameters which are not in your  Screengrabfile  or provided as command line arguments    Your screenshots will be saved to  fastlane/metadata/android  in the directory where you ran  screengrab",
            "title": "Generating Screenshots with Screengrab"
        },
        {
            "location": "/actions/screengrab/#improved-screenshot-capture-with-ui-automator",
            "text": "As of  screengrab  0.5.0, you can specify different strategies to control the way  screengrab  captures screenshots. The newer strategy delegates to  UI Automator  which fixes a number of problems compared to the original strategy:   Shadows/elevation are correctly captured for Material UI  Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   UI Automator is the default strategy. However, UI Automator requires a device with  API level >= 18 . If you need to grab screenshots on an older Android version, use the latest 1.x.x version of this library and set the DecorView ScreenshotStrategy.  Screengrab.setDefaultScreenshotStrategy(new DecorViewScreenshotStrategy());",
            "title": "Improved screenshot capture with UI Automator"
        },
        {
            "location": "/actions/screengrab/#improved-screenshot-capture-with-falcon",
            "text": "As of  screengrab  1.2.0, you can specify a new strategy to delegate to  Falcon . Falcon may work better than UI Automator in some situations and also provides similar benefits as UI Automator:   Multi-window situations are correctly captured (dialogs, etc.)  Works on Android N   Falcon requires a device with  API level >= 10 . To enable it for all screenshots by default, make the following call before your tests run:  Screengrab.setDefaultScreenshotStrategy(new FalconScreenshotStrategy(activityRule.getActivity()));",
            "title": "Improved screenshot capture with Falcon"
        },
        {
            "location": "/actions/screengrab/#advanced-screengrabfile-configuration",
            "text": "Running  fastlane screengrab init  generated a Screengrabfile which can store all of your configuration options. Since most values will not change often for your project, it is recommended to store them there.  The  Screengrabfile  is written in Ruby, so you may find it helpful to use an editor that highlights Ruby syntax to modify this file.  # remove the leading '#' to uncomment lines\n\n# app_package_name('your.app.package')\n# use_tests_in_packages(['your.screenshot.tests.package'])\n\n# app_apk_path('path/to/your/app.apk')\n# tests_apk_path('path/to/your/tests.apk')\n\nlocales(['en-US', 'fr-FR', 'it-IT'])\n\n# clear all previously generated screenshots in your local output directory before creating new ones\nclear_previous_screenshots(true)  For more information about all available options run  fastlane action screengrab",
            "title": "Advanced Screengrabfile Configuration"
        },
        {
            "location": "/actions/screengrab/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/screengrab/#ui-tests",
            "text": "Check out  Testing UI for a Single App  for an introduction to using Espresso for UI testing.",
            "title": "UI Tests"
        },
        {
            "location": "/actions/screengrab/#example-ui-test-class-using-junit4",
            "text": "Java:  @RunWith(JUnit4.class)\npublic class JUnit4StyleTests {\n    @ClassRule\n    public static final LocaleTestRule localeTestRule = new LocaleTestRule();\n\n    @Rule\n    public ActivityTestRule<MainActivity> activityRule = new ActivityTestRule<>(MainActivity.class);\n\n    @Test\n    public void testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\");\n\n        onView(withId(R.id.fab)).perform(click());\n\n        Screengrab.screenshot(\"after_button_click\");\n    }\n}  Kotlin:  @RunWith(JUnit4.class)\nclass JUnit4StyleTests {\n    @get:Rule\n    var activityRule = ActivityTestRule(MainActivity::class.java)\n\n    @Rule @JvmField\n    val localeTestRule = LocaleTestRule()\n\n    @Test\n    fun testTakeScreenshot() {\n        Screengrab.screenshot(\"before_button_click\")\n\n        onView(withId(R.id.fab)).perform(click())\n\n        Screengrab.screenshot(\"after_button_click\")\n    }\n}  There is an  example project  showing how to use JUnit 3 or 4 and Espresso with the screengrab Java library to capture screenshots during a UI test run.  Using JUnit 4 is preferable because of its ability to perform actions before and after the entire test class is run. This means you will change the device's locale far fewer times when compared with JUnit 3 running those commands before and after each test method.  When using JUnit 3 you'll need to add a bit more code:   Use  LocaleUtil.changeDeviceLocaleTo(LocaleUtil.getTestLocale());  in  setUp()  Use  LocaleUtil.changeDeviceLocaleTo(LocaleUtil.getEndingLocale());  in  tearDown()  Use  Screengrab.screenshot(\"name_of_screenshot_here\");  to capture screenshots at the appropriate points in your tests   If you're having trouble getting your device unlocked and the screen activated to run tests, try using  ScreenUtil.activateScreenForTesting(activity);  in your test setup.",
            "title": "Example UI Test Class (Using JUnit4)"
        },
        {
            "location": "/actions/screengrab/#clean-status-bar",
            "text": "Screengrab can clean your status bar to make your screenshots even more beautiful. \nNote: the clean status bar feature is only supported on devices with  API level >= 23 .  To use the clean status bar feature add the following lines to your src/debug/AndroidManifest.xml  <!-- Indicates the use of the clean status bar feature -->\n<uses-feature android:name=\"tools.fastlane.screengrab.cleanstatusbar\"/>\n<!-- Allows for changing the status bar -->\n<uses-permission android:name=\"android.permission.DUMP\"/>  After that you can enable and disable the clean status bar at any moment during your tests. \nIn most cases you probably want to do this in the @BeforeClass and @AfterClass methods.  @BeforeClass\npublic static void beforeAll() {\n    CleanStatusBar.enableWithDefaults();\n}\n\n@AfterClass\npublic static void afterAll() {\n    CleanStatusBar.disable();\n}  Have a look at the methods of the  CleanStatusBar  class to customize the status bar even more. \nYou could for example show the Bluetooth icon and the LTE text.  new CleanStatusBar()\n    .setBluetoothState(BluetoothState.DISCONNECTED)\n    .setMobileNetworkDataType(MobileDataType.LTE)\n    .enable();",
            "title": "Clean Status Bar"
        },
        {
            "location": "/actions/screengrab/#advanced-screengrab",
            "text": "Launch Arguments  You can provide additional arguments to your test cases on launch. These strings will be available in your tests through  InstrumentationRegistry.getArguments() .  screengrab(\n  launch_arguments: [\n    \"username hjanuschka\",\n    \"build_number 201\"\n  ]\n)  Bundle extras = InstrumentationRegistry.getArguments();\nString peerID = null;\nif (extras != null) {\n  if (extras.containsKey(\"username\")) {\n    username = extras.getString(\"username\");\n    System.out.println(\"Username: \" + username);\n  } else {\n    System.out.println(\"No username in extras\");\n  }\n} else {\n  System.out.println(\"No extras\");\n}    Detecting screengrab at runtime  For some apps, it is helpful to know when  screengrab  is running so that you can display specific data for your screenshots. For iOS fastlane users, this is much like \"FASTLANE_SNAPSHOT\". In order to do this, you'll need to have at least two product flavors of your app.  Add two product flavors to the app-level build.gradle file:  android {\n...\n    flavorDimensions \"mode\"\n    productFlavors {\n        screengrab {\n            dimension \"mode\"\n        }\n        regular {\n            dimension \"mode\"\n        }\n    }\n...\n}  Check for the existence of that flavor (i.e screengrab) in your app code as follows in order to use mock data or customize data for screenshots:  if (BuildConfig.FLAVOR == \"screengrab\") {\n    System.out.println(\"screengrab is running!\");\n}  When running  screengrab , do the following to build the flavor you want as well as the test apk. Note that you use \"assembleFlavor_name\" where Flavor_name is the flavor name, capitalized (i.e. Screengrab).  ./gradlew assembleScreengrab assembleAndroidTest  Run  screengrab :  fastlane screengrab  screengrab  will ask you to select the debug and test apps (which you can then add to your Screengrabfile to skip this step later).  The debug apk should be somewhere like this:  app/build/outputs/apk/screengrab/debug/app-screengrab-debug.apk  The test apk should be somewhere like this:  app/build/outputs/apk/androidTest/screengrab/debug/app-screengrab-debug-androidTest.apk  Sit back and enjoy your new screenshots!  Note: while this could also be done by creating a new build variant (i.e. debug, release and creating a new one called screengrab),  Android only allows one build type to be tested  which defaults to debug. That's why we use product flavors.       screengrab       Supported platforms  android    Author  @asfalcone, @i2amsam, @mfurtak",
            "title": "Advanced screengrab"
        },
        {
            "location": "/actions/screengrab/#3-examples",
            "text": "capture_android_screenshots  screengrab # alias for \"capture_android_screenshots\"  capture_android_screenshots(\n  locales: [\"en-US\", \"fr-FR\", \"ja-JP\"],\n  clear_previous_screenshots: true,\n  app_apk_path: \"build/outputs/apk/example-debug.apk\",\n  tests_apk_path: \"build/outputs/apk/example-debug-androidTest-unaligned.apk\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/screengrab/#parameters",
            "text": "Key  Description  Default      android_home  Path to the root of your Android SDK installation, e.g. ~/tools/android-sdk-macosx  *    build_tools_version  The Android build tools version to use, e.g. '23.0.2'     locales  A list of locales which should be used  [\"en-US\"]    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running screengrab  false    output_directory  The directory where to store the screenshots  fastlane/metadata/android    skip_open_summary  Don't open the summary after running  screengrab  *    app_package_name  The package name of the app under test (e.g. com.yourcompany.yourapp)  *    tests_package_name  The package name of the tests bundle (e.g. com.yourcompany.yourapp.test)     use_tests_in_packages  Only run tests in these Java packages     use_tests_in_classes  Only run tests in these Java classes     launch_arguments  Additional launch arguments     test_instrumentation_runner  The fully qualified class name of your test instrumentation runner  androidx.test.runner.AndroidJUnitRunner    ending_locale  Return the device to this locale after running tests  en-US    use_adb_root  Restarts the adb daemon using  adb root  to allow access to screenshots directories on device. Use if getting 'Permission denied' errors  false    app_apk_path  The path to the APK for the app under test  *    tests_apk_path  The path to the APK for the the tests bundle  *    specific_device  Use the device or emulator with the given serial number or qualifier     device_type  Type of device used for screenshots. Matches Google Play Types (phone, sevenInch, tenInch, tv, wear)  phone    exit_on_test_failure  Whether or not to exit Screengrab on test failure. Exiting on failure will not copy sceenshots to local machine nor open sceenshots summary  true    reinstall_app  Enabling this option will automatically uninstall the application before running it  false    use_timestamp_suffix  Add timestamp suffix to screenshot filename  true    adb_host  Configure the host used by adb to connect, allows running on remote devices farm      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/screengrab/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  screengrab  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SCREENGRAB_OUTPUT_DIRECTORY  The path to the output directory     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/screengrab/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action screengrab",
            "title": "Documentation"
        },
        {
            "location": "/actions/screengrab/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run screengrab  To pass parameters, make use of the  :  symbol, for example  fastlane run screengrab parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/screengrab/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/set_build_number_repository/",
            "text": "set_build_number_repository\n\n\nSet the build number from the current repository\n\n\n\n\nThis action will set the \nbuild number\n according to what the SCM HEAD reports.\nCurrently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number).\nThere is an option, \n:use_hg_revision_number\n, which allows to use mercurial revision number instead of hash.\n\n\n\n\n\n\n\n\n\n\nset_build_number_repository\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@pbrooks, @armadsen, @AndrewSB\n\n\n\n\n\n\n\n\n2 Examples\n\n\nset_build_number_repository\n\n\n\n\nset_build_number_repository(\n  xcodeproj: \"./path/to/MyApp.xcodeproj\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuse_hg_revision_number\n\n\nUse hg revision number instead of hash (ignored for non-hg repos)\n\n\nfalse\n\n\n\n\n\n\nxcodeproj\n\n\nexplicitly specify which xcodeproj to use\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action set_build_number_repository\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run set_build_number_repository\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run set_build_number_repository parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "set_build_number_repository"
        },
        {
            "location": "/actions/set_build_number_repository/#set_build_number_repository",
            "text": "Set the build number from the current repository   This action will set the  build number  according to what the SCM HEAD reports. Currently supported SCMs are svn (uses root revision), git-svn (uses svn revision) and git (uses short hash) and mercurial (uses short hash or revision number). There is an option,  :use_hg_revision_number , which allows to use mercurial revision number instead of hash.      set_build_number_repository       Supported platforms  ios, mac    Author  @pbrooks, @armadsen, @AndrewSB",
            "title": "set_build_number_repository"
        },
        {
            "location": "/actions/set_build_number_repository/#2-examples",
            "text": "set_build_number_repository  set_build_number_repository(\n  xcodeproj: \"./path/to/MyApp.xcodeproj\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/set_build_number_repository/#parameters",
            "text": "Key  Description  Default      use_hg_revision_number  Use hg revision number instead of hash (ignored for non-hg repos)  false    xcodeproj  explicitly specify which xcodeproj to use      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/set_build_number_repository/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action set_build_number_repository",
            "title": "Documentation"
        },
        {
            "location": "/actions/set_build_number_repository/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run set_build_number_repository  To pass parameters, make use of the  :  symbol, for example  fastlane run set_build_number_repository parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/set_build_number_repository/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/set_changelog/",
            "text": "set_changelog\n\n\nSet the changelog for all languages on App Store Connect\n\n\n\n\nThis is useful if you have only one changelog for all languages.\nYou can store the changelog in \n./fastlane/changelog.txt\n and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages.\nDefining the version is optional. \nfastlane\n will try to automatically detect it if you don't provide one.\n\n\n\n\n\n\n\n\n\n\nset_changelog\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nset_changelog(changelog: \"Changelog for all Languages\")\n\n\n\n\nset_changelog(app_identifier: \"com.krausefx.app\", version: \"1.0\", changelog: \"Changelog for all Languages\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nversion\n\n\nThe version number to create/update\n\n\n\n\n\n\n\n\nchangelog\n\n\nChangelog text that should be uploaded to App Store Connect\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nplatform\n\n\nThe platform of the app (ios, appletvos, mac)\n\n\nios\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action set_changelog\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run set_changelog\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run set_changelog parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "set_changelog"
        },
        {
            "location": "/actions/set_changelog/#set_changelog",
            "text": "Set the changelog for all languages on App Store Connect   This is useful if you have only one changelog for all languages. You can store the changelog in  ./fastlane/changelog.txt  and it will automatically get loaded from there. This integration is useful if you support e.g. 10 languages and want to use the same \"What's new\"-text for all languages. Defining the version is optional.  fastlane  will try to automatically detect it if you don't provide one.      set_changelog       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "set_changelog"
        },
        {
            "location": "/actions/set_changelog/#2-examples",
            "text": "set_changelog(changelog: \"Changelog for all Languages\")  set_changelog(app_identifier: \"com.krausefx.app\", version: \"1.0\", changelog: \"Changelog for all Languages\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/set_changelog/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     app_identifier  The bundle identifier of your app  *    username  Your Apple ID Username  *    version  The version number to create/update     changelog  Changelog text that should be uploaded to App Store Connect     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    platform  The platform of the app (ios, appletvos, mac)  ios     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/set_changelog/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action set_changelog",
            "title": "Documentation"
        },
        {
            "location": "/actions/set_changelog/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run set_changelog  To pass parameters, make use of the  :  symbol, for example  fastlane run set_changelog parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/set_changelog/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/set_github_release/",
            "text": "set_github_release\n\n\nThis will create a new release on GitHub and upload assets for it\n\n\n\n\nCreates a new release on GitHub. You must provide your GitHub Personal token (get one from \nhttps://github.com/settings/tokens/new\n), the repository name and tag name. By default, that's \nmaster\n.\nIf the tag doesn't exist, one will be created on the commit or branch passed in as commitish.\nOut parameters provide the release's id, which can be used for later editing and the release HTML link to GitHub. You can also specify a list of assets to be uploaded to the release with the \n:upload_assets\n parameter.\n\n\n\n\n\n\n\n\n\n\nset_github_release\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@czechboy0, @tommeier\n\n\n\n\n\n\nReturns\n\n\nA hash containing all relevant information of this release\nAccess things like 'html_url', 'tag_name', 'name', 'body'\n\n\n\n\n\n\n\n\n1 Example\n\n\ngithub_release = set_github_release(\n  repository_name: \"fastlane/fastlane\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  name: \"Super New actions\",\n  tag_name: \"v1.22.0\",\n  description: (File.read(\"changelog\") rescue \"No changelog provided\"),\n  commitish: \"master\",\n  upload_assets: [\"example_integration.ipa\", \"./pkg/built.gem\"]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nrepository_name\n\n\nThe path to your repo, e.g. 'fastlane/fastlane'\n\n\n\n\n\n\n\n\nserver_url\n\n\nThe server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')\n\n\nhttps://api.github.com\n\n\n\n\n\n\napi_token\n\n\nPersonal API Token for GitHub - generate one at https://github.com/settings/tokens\n\n\n*\n\n\n\n\n\n\napi_bearer\n\n\nUse a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN environment variable\n\n\n\n\n\n\n\n\ntag_name\n\n\nPass in the tag name\n\n\n\n\n\n\n\n\nname\n\n\nName of this release\n\n\n\n\n\n\n\n\ncommitish\n\n\nSpecifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)\n\n\n\n\n\n\n\n\ndescription\n\n\nDescription of this release\n\n\n*\n\n\n\n\n\n\nis_draft\n\n\nWhether the release should be marked as draft\n\n\nfalse\n\n\n\n\n\n\nis_prerelease\n\n\nWhether the release should be marked as prerelease\n\n\nfalse\n\n\n\n\n\n\nupload_assets\n\n\nPath to assets to be uploaded with the release\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nset_github_release\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SET_GITHUB_RELEASE_HTML_LINK\n\n\nLink to your created release\n\n\n\n\n\n\nSharedValues::SET_GITHUB_RELEASE_RELEASE_ID\n\n\nRelease id (useful for subsequent editing)\n\n\n\n\n\n\nSharedValues::SET_GITHUB_RELEASE_JSON\n\n\nThe whole release JSON object\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action set_github_release\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run set_github_release\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run set_github_release parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "set_github_release"
        },
        {
            "location": "/actions/set_github_release/#set_github_release",
            "text": "This will create a new release on GitHub and upload assets for it   Creates a new release on GitHub. You must provide your GitHub Personal token (get one from  https://github.com/settings/tokens/new ), the repository name and tag name. By default, that's  master . If the tag doesn't exist, one will be created on the commit or branch passed in as commitish. Out parameters provide the release's id, which can be used for later editing and the release HTML link to GitHub. You can also specify a list of assets to be uploaded to the release with the  :upload_assets  parameter.      set_github_release       Supported platforms  ios, android, mac    Author  @czechboy0, @tommeier    Returns  A hash containing all relevant information of this release Access things like 'html_url', 'tag_name', 'name', 'body'",
            "title": "set_github_release"
        },
        {
            "location": "/actions/set_github_release/#1-example",
            "text": "github_release = set_github_release(\n  repository_name: \"fastlane/fastlane\",\n  api_token: ENV[\"GITHUB_TOKEN\"],\n  name: \"Super New actions\",\n  tag_name: \"v1.22.0\",\n  description: (File.read(\"changelog\") rescue \"No changelog provided\"),\n  commitish: \"master\",\n  upload_assets: [\"example_integration.ipa\", \"./pkg/built.gem\"]\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/set_github_release/#parameters",
            "text": "Key  Description  Default      repository_name  The path to your repo, e.g. 'fastlane/fastlane'     server_url  The server url. e.g. 'https://your.internal.github.host/api/v3' (Default: 'https://api.github.com')  https://api.github.com    api_token  Personal API Token for GitHub - generate one at https://github.com/settings/tokens  *    api_bearer  Use a Bearer authorization token. Usually generated by Github Apps, e.g. GitHub Actions GITHUB_TOKEN environment variable     tag_name  Pass in the tag name     name  Name of this release     commitish  Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually master)     description  Description of this release  *    is_draft  Whether the release should be marked as draft  false    is_prerelease  Whether the release should be marked as prerelease  false    upload_assets  Path to assets to be uploaded with the release      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/set_github_release/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  set_github_release  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SET_GITHUB_RELEASE_HTML_LINK  Link to your created release    SharedValues::SET_GITHUB_RELEASE_RELEASE_ID  Release id (useful for subsequent editing)    SharedValues::SET_GITHUB_RELEASE_JSON  The whole release JSON object     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/set_github_release/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action set_github_release",
            "title": "Documentation"
        },
        {
            "location": "/actions/set_github_release/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run set_github_release  To pass parameters, make use of the  :  symbol, for example  fastlane run set_github_release parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/set_github_release/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/set_info_plist_value/",
            "text": "set_info_plist_value\n\n\nSets value to Info.plist of your project as native Ruby data structures\n\n\n\n\n\n\n\n\nset_info_plist_value\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@kohtenko, @uwehollatz\n\n\n\n\n\n\n\n\n2 Examples\n\n\nset_info_plist_value(path: \"./Info.plist\", key: \"CFBundleIdentifier\", value: \"com.krausefx.app.beta\")\n\n\n\n\nset_info_plist_value(path: \"./MyApp-Info.plist\", key: \"NSAppTransportSecurity\", subkey: \"NSAllowsArbitraryLoads\", value: true, output_file_name: \"./Info.plist\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nName of key in plist\n\n\n\n\n\n\n\n\nsubkey\n\n\nName of subkey in plist\n\n\n\n\n\n\n\n\nvalue\n\n\nValue to setup\n\n\n\n\n\n\n\n\npath\n\n\nPath to plist file you want to update\n\n\n\n\n\n\n\n\noutput_file_name\n\n\nPath to the output file you want to generate\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action set_info_plist_value\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run set_info_plist_value\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run set_info_plist_value parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "set_info_plist_value"
        },
        {
            "location": "/actions/set_info_plist_value/#set_info_plist_value",
            "text": "Sets value to Info.plist of your project as native Ruby data structures     set_info_plist_value       Supported platforms  ios, mac    Author  @kohtenko, @uwehollatz",
            "title": "set_info_plist_value"
        },
        {
            "location": "/actions/set_info_plist_value/#2-examples",
            "text": "set_info_plist_value(path: \"./Info.plist\", key: \"CFBundleIdentifier\", value: \"com.krausefx.app.beta\")  set_info_plist_value(path: \"./MyApp-Info.plist\", key: \"NSAppTransportSecurity\", subkey: \"NSAllowsArbitraryLoads\", value: true, output_file_name: \"./Info.plist\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/set_info_plist_value/#parameters",
            "text": "Key  Description  Default      key  Name of key in plist     subkey  Name of subkey in plist     value  Value to setup     path  Path to plist file you want to update     output_file_name  Path to the output file you want to generate      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/set_info_plist_value/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action set_info_plist_value",
            "title": "Documentation"
        },
        {
            "location": "/actions/set_info_plist_value/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run set_info_plist_value  To pass parameters, make use of the  :  symbol, for example  fastlane run set_info_plist_value parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/set_info_plist_value/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/set_pod_key/",
            "text": "set_pod_key\n\n\nSets a value for a key with cocoapods-keys\n\n\n\n\nAdds a key to \ncocoapods-keys\n\n\n\n\n\n\n\n\n\n\nset_pod_key\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@marcelofabri\n\n\n\n\n\n\n\n\n1 Example\n\n\nset_pod_key(\n  key: \"APIToken\",\n  value: \"1234\",\n  project: \"MyProject\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec when there is a Gemfile presented\n\n\ntrue\n\n\n\n\n\n\nkey\n\n\nThe key to be saved with cocoapods-keys\n\n\n\n\n\n\n\n\nvalue\n\n\nThe value to be saved with cocoapods-keys\n\n\n\n\n\n\n\n\nproject\n\n\nThe project name\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action set_pod_key\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run set_pod_key\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run set_pod_key parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "set_pod_key"
        },
        {
            "location": "/actions/set_pod_key/#set_pod_key",
            "text": "Sets a value for a key with cocoapods-keys   Adds a key to  cocoapods-keys      set_pod_key       Supported platforms  ios, mac    Author  @marcelofabri",
            "title": "set_pod_key"
        },
        {
            "location": "/actions/set_pod_key/#1-example",
            "text": "set_pod_key(\n  key: \"APIToken\",\n  value: \"1234\",\n  project: \"MyProject\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/set_pod_key/#parameters",
            "text": "Key  Description  Default      use_bundle_exec  Use bundle exec when there is a Gemfile presented  true    key  The key to be saved with cocoapods-keys     value  The value to be saved with cocoapods-keys     project  The project name      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/set_pod_key/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action set_pod_key",
            "title": "Documentation"
        },
        {
            "location": "/actions/set_pod_key/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run set_pod_key  To pass parameters, make use of the  :  symbol, for example  fastlane run set_pod_key parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/set_pod_key/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/setup_ci/",
            "text": "setup_ci\n\n\nSetup the keychain and match to work with CI\n\n\n\n\n\n\nCreates a new temporary keychain for use with match\n\n\nSwitches match to \nreadonly\n mode to not create new profiles/cert on CI\n\n\nSets up log and test result paths to be easily collectible\n\n\n\n\nThis action helps with CI integration. Add this to the top of your Fastfile if you use CI.\n\n\n\n\n\n\n\n\n\n\nsetup_ci\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@mollyIV, @svenmuennich\n\n\n\n\n\n\n\n\n1 Example\n\n\nsetup_ci(\n  provider: \"circleci\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce setup, even if not executed by CI\n\n\nfalse\n\n\n\n\n\n\nprovider\n\n\nCI provider. If none is set, the provider is detected automatically\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action setup_ci\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run setup_ci\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run setup_ci parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "setup_ci"
        },
        {
            "location": "/actions/setup_ci/#setup_ci",
            "text": "Setup the keychain and match to work with CI    Creates a new temporary keychain for use with match  Switches match to  readonly  mode to not create new profiles/cert on CI  Sets up log and test result paths to be easily collectible   This action helps with CI integration. Add this to the top of your Fastfile if you use CI.      setup_ci       Supported platforms  ios, mac    Author  @mollyIV, @svenmuennich",
            "title": "setup_ci"
        },
        {
            "location": "/actions/setup_ci/#1-example",
            "text": "setup_ci(\n  provider: \"circleci\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/setup_ci/#parameters",
            "text": "Key  Description  Default      force  Force setup, even if not executed by CI  false    provider  CI provider. If none is set, the provider is detected automatically      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/setup_ci/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action setup_ci",
            "title": "Documentation"
        },
        {
            "location": "/actions/setup_ci/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run setup_ci  To pass parameters, make use of the  :  symbol, for example  fastlane run setup_ci parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/setup_ci/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/setup_circle_ci/",
            "text": "setup_circle_ci\n\n\nSetup the keychain and match to work with CircleCI\n\n\n\n\n\n\nCreates a new temporary keychain for use with match\n\n\nSwitches match to \nreadonly\n mode to not create new profiles/cert on CI\n\n\nSets up log and test result paths to be easily collectible\n\n\n\n\nThis action helps with CircleCI integration. Add this to the top of your Fastfile if you use CircleCI.\n\n\n\n\n\n\n\n\n\n\nsetup_circle_ci\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@dantoml\n\n\n\n\n\n\n\n\n1 Example\n\n\nsetup_circle_ci\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce setup, even if not executed by CircleCI\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action setup_circle_ci\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run setup_circle_ci\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run setup_circle_ci parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "setup_circle_ci"
        },
        {
            "location": "/actions/setup_circle_ci/#setup_circle_ci",
            "text": "Setup the keychain and match to work with CircleCI    Creates a new temporary keychain for use with match  Switches match to  readonly  mode to not create new profiles/cert on CI  Sets up log and test result paths to be easily collectible   This action helps with CircleCI integration. Add this to the top of your Fastfile if you use CircleCI.      setup_circle_ci       Supported platforms  ios, android, mac    Author  @dantoml",
            "title": "setup_circle_ci"
        },
        {
            "location": "/actions/setup_circle_ci/#1-example",
            "text": "setup_circle_ci",
            "title": "1 Example"
        },
        {
            "location": "/actions/setup_circle_ci/#parameters",
            "text": "Key  Description  Default      force  Force setup, even if not executed by CircleCI  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/setup_circle_ci/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action setup_circle_ci",
            "title": "Documentation"
        },
        {
            "location": "/actions/setup_circle_ci/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run setup_circle_ci  To pass parameters, make use of the  :  symbol, for example  fastlane run setup_circle_ci parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/setup_circle_ci/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/setup_jenkins/",
            "text": "setup_jenkins\n\n\nSetup xcodebuild, gym and scan for easier Jenkins integration\n\n\n\n\n\n\nAdds and unlocks keychains from Jenkins 'Keychains and Provisioning Profiles Plugin'\n\n\nSets unlocked keychain to be used by Match\n\n\nSets code signing identity from Jenkins 'Keychains and Provisioning Profiles Plugin'\n\n\nSets output directory to './output' (gym, scan and backup_xcarchive)\n\n\nSets derived data path to './derivedData' (xcodebuild, gym, scan and clear_derived_data, carthage)\n\n\nProduce result bundle (gym and scan)\n\n\n\n\nThis action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the \n./output\n directory.\nThe action also works with \nKeychains and Provisioning Profiles Plugin\n, the selected keychain will be automatically unlocked and the selected code signing identity will be used.\nMatch\n will be also set up to use the unlocked keychain and set in read-only mode, if its environment variables were not yet defined.\nBy default this action will only work when \nfastlane\n is executed on a CI system.\n\n\n\n\n\n\n\n\n\n\nsetup_jenkins\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@bartoszj\n\n\n\n\n\n\n\n\n1 Example\n\n\nsetup_jenkins\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce setup, even if not executed by Jenkins\n\n\nfalse\n\n\n\n\n\n\nunlock_keychain\n\n\nUnlocks keychain\n\n\ntrue\n\n\n\n\n\n\nadd_keychain_to_search_list\n\n\nAdd to keychain search list\n\n\n:replace\n\n\n\n\n\n\nset_default_keychain\n\n\nSet keychain as default\n\n\ntrue\n\n\n\n\n\n\nkeychain_path\n\n\nPath to keychain\n\n\n\n\n\n\n\n\nkeychain_password\n\n\nKeychain password\n\n\n''\n\n\n\n\n\n\nset_code_signing_identity\n\n\nSet code signing identity from CODE_SIGNING_IDENTITY environment\n\n\ntrue\n\n\n\n\n\n\ncode_signing_identity\n\n\nCode signing identity\n\n\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which the ipa file should be stored in\n\n\n./output\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where built products and other derived data will go\n\n\n./derivedData\n\n\n\n\n\n\nresult_bundle\n\n\nProduce the result bundle describing what occurred will be placed\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action setup_jenkins\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run setup_jenkins\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run setup_jenkins parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "setup_jenkins"
        },
        {
            "location": "/actions/setup_jenkins/#setup_jenkins",
            "text": "Setup xcodebuild, gym and scan for easier Jenkins integration    Adds and unlocks keychains from Jenkins 'Keychains and Provisioning Profiles Plugin'  Sets unlocked keychain to be used by Match  Sets code signing identity from Jenkins 'Keychains and Provisioning Profiles Plugin'  Sets output directory to './output' (gym, scan and backup_xcarchive)  Sets derived data path to './derivedData' (xcodebuild, gym, scan and clear_derived_data, carthage)  Produce result bundle (gym and scan)   This action helps with Jenkins integration. Creates own derived data for each job. All build results like IPA files and archives will be stored in the  ./output  directory. The action also works with  Keychains and Provisioning Profiles Plugin , the selected keychain will be automatically unlocked and the selected code signing identity will be used. Match  will be also set up to use the unlocked keychain and set in read-only mode, if its environment variables were not yet defined. By default this action will only work when  fastlane  is executed on a CI system.      setup_jenkins       Supported platforms  ios, mac    Author  @bartoszj",
            "title": "setup_jenkins"
        },
        {
            "location": "/actions/setup_jenkins/#1-example",
            "text": "setup_jenkins",
            "title": "1 Example"
        },
        {
            "location": "/actions/setup_jenkins/#parameters",
            "text": "Key  Description  Default      force  Force setup, even if not executed by Jenkins  false    unlock_keychain  Unlocks keychain  true    add_keychain_to_search_list  Add to keychain search list  :replace    set_default_keychain  Set keychain as default  true    keychain_path  Path to keychain     keychain_password  Keychain password  ''    set_code_signing_identity  Set code signing identity from CODE_SIGNING_IDENTITY environment  true    code_signing_identity  Code signing identity     output_directory  The directory in which the ipa file should be stored in  ./output    derived_data_path  The directory where built products and other derived data will go  ./derivedData    result_bundle  Produce the result bundle describing what occurred will be placed  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/setup_jenkins/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action setup_jenkins",
            "title": "Documentation"
        },
        {
            "location": "/actions/setup_jenkins/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run setup_jenkins  To pass parameters, make use of the  :  symbol, for example  fastlane run setup_jenkins parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/setup_jenkins/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/setup_travis/",
            "text": "setup_travis\n\n\nSetup the keychain and match to work with Travis CI\n\n\n\n\n\n\nCreates a new temporary keychain for use with match\n\n\nSwitches match to \nreadonly\n mode to not create new profiles/cert on CI\n\n\n\n\nThis action helps with Travis integration. Add this to the top of your Fastfile if you use Travis.\n\n\n\n\n\n\n\n\n\n\nsetup_travis\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nsetup_travis\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nforce\n\n\nForce setup, even if not executed by travis\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action setup_travis\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run setup_travis\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run setup_travis parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "setup_travis"
        },
        {
            "location": "/actions/setup_travis/#setup_travis",
            "text": "Setup the keychain and match to work with Travis CI    Creates a new temporary keychain for use with match  Switches match to  readonly  mode to not create new profiles/cert on CI   This action helps with Travis integration. Add this to the top of your Fastfile if you use Travis.      setup_travis       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "setup_travis"
        },
        {
            "location": "/actions/setup_travis/#1-example",
            "text": "setup_travis",
            "title": "1 Example"
        },
        {
            "location": "/actions/setup_travis/#parameters",
            "text": "Key  Description  Default      force  Force setup, even if not executed by travis  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/setup_travis/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action setup_travis",
            "title": "Documentation"
        },
        {
            "location": "/actions/setup_travis/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run setup_travis  To pass parameters, make use of the  :  symbol, for example  fastlane run setup_travis parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/setup_travis/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/sh/",
            "text": "sh\n\n\nRuns a shell command\n\n\n\n\nAllows running an arbitrary shell command.\nBe aware of a specific behavior of \nsh\n action with regard to the working directory. For details, refer to \nAdvanced\n.\n\n\n\n\n\n\n\n\n\n\nsh\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nOutputs the string and executes it. When running in tests, it returns the actual command instead of executing it\n\n\n\n\n\n\n\n\n2 Examples\n\n\nsh(\"ls\")\n\n\n\n\nsh(\"git\", \"commit\", \"-m\", \"My message\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\nShell command to be executed\n\n\n\n\n\n\n\n\nlog\n\n\nDetermines whether fastlane should print out the executed command itself and output of the executed command. If command line option --troubleshoot is used, then it overrides this option to true\n\n\ntrue\n\n\n\n\n\n\nerror_callback\n\n\nA callback invoked with the command output if there is a non-zero exit status\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action sh\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run sh\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run sh parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "sh"
        },
        {
            "location": "/actions/sh/#sh",
            "text": "Runs a shell command   Allows running an arbitrary shell command. Be aware of a specific behavior of  sh  action with regard to the working directory. For details, refer to  Advanced .      sh       Supported platforms  ios, android, mac    Author  @KrauseFx    Returns  Outputs the string and executes it. When running in tests, it returns the actual command instead of executing it",
            "title": "sh"
        },
        {
            "location": "/actions/sh/#2-examples",
            "text": "sh(\"ls\")  sh(\"git\", \"commit\", \"-m\", \"My message\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/sh/#parameters",
            "text": "Key  Description  Default      command  Shell command to be executed     log  Determines whether fastlane should print out the executed command itself and output of the executed command. If command line option --troubleshoot is used, then it overrides this option to true  true    error_callback  A callback invoked with the command output if there is a non-zero exit status      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/sh/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action sh",
            "title": "Documentation"
        },
        {
            "location": "/actions/sh/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run sh  To pass parameters, make use of the  :  symbol, for example  fastlane run sh parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/sh/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/sigh/",
            "text": "sigh\n\n\nAlias for the \nget_provisioning_profile\n action\n\n\n\n  \n\n\n\n\n\nBecause you would rather spend your time building stuff than fighting provisioning\n\n\nsigh\n can create, renew, download and repair provisioning profiles (with one command). It supports App Store, Ad Hoc, Development and Enterprise profiles and supports nice features, like auto-adding all test devices.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUsage\n \u2022\n    \nResign\n \u2022\n    \nHow does it work?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nDownload\n the latest provisioning profile for your app\n\n\nRenew\n a provisioning profile, when it has expired\n\n\nRepair\n a provisioning profile, when it is broken\n\n\nCreate\n a new provisioning profile, if it doesn't exist already\n\n\nSupports \nApp Store\n, \nAd Hoc\n and \nDevelopment\n profiles\n\n\nSupport for \nmultiple Apple accounts\n, storing your credentials securely in the Keychain\n\n\nSupport for \nmultiple Teams\n\n\nSupport for \nEnterprise Profiles\n\n\n\n\nTo automate iOS Push profiles you can use \npem\n.\n\n\nWhy not let Xcode do the work?\n\n\n\n\nsigh\n can easily be integrated into your CI-server (e.g. Jenkins)\n\n\nXcode sometimes invalidates \nall existing profiles\n\n\nYou have control over what happens\n\n\nYou still get to have the signing files, which you can then use for your build scripts or store in git\n\n\n\n\nSee \nsigh\n in action:\n\n\n\n\nUsage\n\n\nNote\n: It is recommended to use \nmatch\n according to the \ncodesigning.guide\n for generating and maintaining your provisioning profiles. Use \nsigh\n directly only if you want full control over what's going on and know more about codesigning.\n\n\nfastlane sigh\n\n\n\n\nYes, that's the whole command!\n\n\nsigh\n will create, repair and download profiles for the App Store by default.\n\n\nYou can pass your bundle identifier and username like this:\n\n\nfastlane sigh -a com.krausefx.app -u username\n\n\n\n\nIf you want to generate an \nAd Hoc\n profile instead of an App Store profile:\n\n\nfastlane sigh --adhoc\n\n\n\n\nIf you want to generate a \nDevelopment\n profile:\n\n\nfastlane sigh --development\n\n\n\n\nTo generate the profile in a specific directory:\n\n\nfastlane sigh -o \"~/Certificates/\"\n\n\n\n\nTo download all your provisioning profiles use\n\n\nfastlane sigh download_all\n\n\n\n\nOptionally, use \nfastlane sigh download_all --download_xcode_profiles\n to also include the Xcode managed provisioning profiles\n\n\nFor a list of available parameters and commands run\n\n\nfastlane action sigh\n\n\n\n\nAdvanced\n\n\nBy default, \nsigh\n will install the downloaded profile on your machine. If you just want to generate the profile and skip the installation, use the following flag:\n\n\nfastlane sigh --skip_install\n\n\n\n\nTo save the provisioning profile under a specific name, use the -q option:\n\n\nfastlane sigh -a com.krausefx.app -u username -q \"myProfile.mobileprovision\"\n\n\n\n\nIf for some reason you don't want \nsigh\n to verify that the code signing identity is installed on your local machine:\n\n\nfastlane sigh --skip_certificate_verification\n\n\n\n\nIf you need the provisioning profile to be renewed regardless of its state use the \n--force\n option. This gives you a profile with the maximum lifetime. \n--force\n will also add all available devices to this profile.\n\n\nfastlane sigh --force\n\n\n\n\nBy default, \nsigh\n will include all certificates on development profiles, and first certificate on other types. If you need to specify which certificate to use you can either use the environment variable \nSIGH_CERTIFICATE\n, or pass the name or expiry date of the certificate as argument:\n\n\nfastlane sigh -c \"SunApps GmbH\"\n\n\n\n\nFor a list of available parameters and commands run\n\n\nfastlane action sigh\n\n\n\n\nUse with \nfastlane\n\n\nsigh\n becomes really interesting when used in \nfastlane\n in combination with \ncert\n.\n\n\nUpdate your \nFastfile\n to contain the following code:\n\n\nlane :beta do\n  cert\n  sigh(force: true)\nend\n\n\n\n\nforce: true\n will make sure to re-generate the provisioning profile on each run.\nThis will result in \nsigh\n always using the correct signing certificate, which is installed on the local machine.\n\n\nRepair\n\n\nsigh\n can automatically repair all your existing provisioning profiles which are expired or just invalid.\n\n\nfastlane sigh repair\n\n\n\n\nResign\n\n\nIf you generated your \nipa\n file but want to apply a different code signing onto the ipa file, you can use \nsigh resign\n:\n\n\nfastlane sigh resign\n\n\n\n\nsigh\n will find the ipa file and the provisioning profile for you if they are located in the current folder.\n\n\nYou can pass more information using the command line:\n\n\nfastlane sigh resign ./path/app.ipa --signing_identity \"iPhone Distribution: Felix Krause\" -p \"my.mobileprovision\"\n\n\n\n\nManage\n\n\nWith \nsigh manage\n you can list all provisioning profiles installed locally.\n\n\nfastlane sigh manage\n\n\n\n\nDelete all expired provisioning profiles\n\n\nfastlane sigh manage -e\n\n\n\n\nOr delete all \niOS Team Provisioning Profile\n by using a regular expression\n\n\nfastlane sigh manage -p \"iOS\\ ?Team Provisioning Profile:\"\n\n\n\n\nEnvironment Variables\n\n\nRun \nfastlane action sigh\n to get a list of all available environment variables.\n\n\nIf you're using \ncert\n in combination with \nfastlane\n the signing certificate will automatically be selected for you. (make sure to run \ncert\n before \nsigh\n)\n\n\nHow does it work?\n\n\nsigh\n will access the \niOS Dev Center\n to download, renew or generate the \n.mobileprovision\n file. It uses \nspaceship\n to communicate with Apple's web services.\n\n\nHow is my password stored?\n\n\nsigh\n uses the \nCredentialsManager\n from \nfastlane\n.\n\n\nTips\n\n\nUse 'ProvisionQL' for advanced Quick Look in Finder\n\n\nInstall \nProvisionQL\n.\n\n\nIt will show you \nmobileprovision\n files like this:\n\n\n\nApp Identifier couldn't be found\n\n\nIf you also want to create a new App Identifier on the Apple Developer Portal, check out \nproduce\n, which does exactly that.\n\n\nWhat happens to my Xcode managed profiles?\n\n\nsigh\n will never touch or use the profiles which are created and managed by Xcode. Instead \nsigh\n will manage its own set of provisioning profiles.\n\n\n\n\n\n\n\n\n\n\n\nsigh\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe UUID of the profile sigh just fetched/generated\n\n\n\n\n\n\n\n\n3 Examples\n\n\nget_provisioning_profile\n\n\n\n\nsigh # alias for \"get_provisioning_profile\"\n\n\n\n\nget_provisioning_profile(\n  adhoc: true,\n  force: true,\n  filename: \"myFile.mobileprovision\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nadhoc\n\n\nSetting this flag will generate AdHoc profiles instead of App Store Profiles\n\n\nfalse\n\n\n\n\n\n\ndeveloper_id\n\n\nSetting this flag will generate Developer ID profiles instead of App Store Profiles\n\n\nfalse\n\n\n\n\n\n\ndevelopment\n\n\nRenew the development certificate instead of the production one\n\n\nfalse\n\n\n\n\n\n\nskip_install\n\n\nBy default, the certificate will be added to your local machine. Setting this flag will skip this action\n\n\nfalse\n\n\n\n\n\n\nforce\n\n\nRenew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nprovisioning_name\n\n\nThe name of the profile that is used on the Apple Developer Portal\n\n\n\n\n\n\n\n\nignore_profiles_with_different_name\n\n\nUse in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded\n\n\nfalse\n\n\n\n\n\n\noutput_path\n\n\nDirectory in which the profile should be stored\n\n\n.\n\n\n\n\n\n\ncert_id\n\n\nThe ID of the code signing certificate to use (e.g. 78ADL6LVAA)\n\n\n\n\n\n\n\n\ncert_owner_name\n\n\nThe certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")\n\n\n\n\n\n\n\n\nfilename\n\n\nFilename to use for the generated provisioning profile (must include .mobileprovision)\n\n\n\n\n\n\n\n\nskip_fetch_profiles\n\n\nSkips the verification of existing profiles which is useful if you have thousands of profiles\n\n\nfalse\n\n\n\n\n\n\nskip_certificate_verification\n\n\nSkips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine\n\n\nfalse\n\n\n\n\n\n\nplatform\n\n\nSet the provisioning profile's platform (i.e. ios, tvos, macos, catalyst)\n\n\nios\n\n\n\n\n\n\nreadonly\n\n\nOnly fetch existing profile, don't generate new ones\n\n\nfalse\n\n\n\n\n\n\ntemplate_name\n\n\nThe name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")\n\n\n\n\n\n\n\n\nfail_on_name_taken\n\n\nShould the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nsigh\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_PATH\n\n\nA path in which certificates, key and profile are exported\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_PATHS\n\n\nPaths in which certificates, key and profile are exported\n\n\n\n\n\n\nSharedValues::SIGH_UUID\n\n\nUUID (Universally Unique IDentifier) of a provisioning profile\n\n\n\n\n\n\nSharedValues::SIGH_NAME\n\n\nThe name of the profile\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_TYPE\n\n\nThe profile type, can be appstore, adhoc, development, enterprise\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action sigh\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run sigh\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run sigh parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "sigh"
        },
        {
            "location": "/actions/sigh/#sigh",
            "text": "Alias for the  get_provisioning_profile  action",
            "title": "sigh"
        },
        {
            "location": "/actions/sigh/#because-you-would-rather-spend-your-time-building-stuff-than-fighting-provisioning",
            "text": "sigh  can create, renew, download and repair provisioning profiles (with one command). It supports App Store, Ad Hoc, Development and Enterprise profiles and supports nice features, like auto-adding all test devices.   \n     Features  \u2022\n     Usage  \u2022\n     Resign  \u2022\n     How does it work?",
            "title": "Because you would rather spend your time building stuff than fighting provisioning"
        },
        {
            "location": "/actions/sigh/#features",
            "text": "Download  the latest provisioning profile for your app  Renew  a provisioning profile, when it has expired  Repair  a provisioning profile, when it is broken  Create  a new provisioning profile, if it doesn't exist already  Supports  App Store ,  Ad Hoc  and  Development  profiles  Support for  multiple Apple accounts , storing your credentials securely in the Keychain  Support for  multiple Teams  Support for  Enterprise Profiles   To automate iOS Push profiles you can use  pem .",
            "title": "Features"
        },
        {
            "location": "/actions/sigh/#why-not-let-xcode-do-the-work",
            "text": "sigh  can easily be integrated into your CI-server (e.g. Jenkins)  Xcode sometimes invalidates  all existing profiles  You have control over what happens  You still get to have the signing files, which you can then use for your build scripts or store in git   See  sigh  in action:",
            "title": "Why not let Xcode do the work?"
        },
        {
            "location": "/actions/sigh/#usage",
            "text": "Note : It is recommended to use  match  according to the  codesigning.guide  for generating and maintaining your provisioning profiles. Use  sigh  directly only if you want full control over what's going on and know more about codesigning.  fastlane sigh  Yes, that's the whole command!  sigh  will create, repair and download profiles for the App Store by default.  You can pass your bundle identifier and username like this:  fastlane sigh -a com.krausefx.app -u username  If you want to generate an  Ad Hoc  profile instead of an App Store profile:  fastlane sigh --adhoc  If you want to generate a  Development  profile:  fastlane sigh --development  To generate the profile in a specific directory:  fastlane sigh -o \"~/Certificates/\"  To download all your provisioning profiles use  fastlane sigh download_all  Optionally, use  fastlane sigh download_all --download_xcode_profiles  to also include the Xcode managed provisioning profiles  For a list of available parameters and commands run  fastlane action sigh",
            "title": "Usage"
        },
        {
            "location": "/actions/sigh/#advanced",
            "text": "By default,  sigh  will install the downloaded profile on your machine. If you just want to generate the profile and skip the installation, use the following flag:  fastlane sigh --skip_install  To save the provisioning profile under a specific name, use the -q option:  fastlane sigh -a com.krausefx.app -u username -q \"myProfile.mobileprovision\"  If for some reason you don't want  sigh  to verify that the code signing identity is installed on your local machine:  fastlane sigh --skip_certificate_verification  If you need the provisioning profile to be renewed regardless of its state use the  --force  option. This gives you a profile with the maximum lifetime.  --force  will also add all available devices to this profile.  fastlane sigh --force  By default,  sigh  will include all certificates on development profiles, and first certificate on other types. If you need to specify which certificate to use you can either use the environment variable  SIGH_CERTIFICATE , or pass the name or expiry date of the certificate as argument:  fastlane sigh -c \"SunApps GmbH\"  For a list of available parameters and commands run  fastlane action sigh",
            "title": "Advanced"
        },
        {
            "location": "/actions/sigh/#use-with-fastlane",
            "text": "sigh  becomes really interesting when used in  fastlane  in combination with  cert .  Update your  Fastfile  to contain the following code:  lane :beta do\n  cert\n  sigh(force: true)\nend  force: true  will make sure to re-generate the provisioning profile on each run.\nThis will result in  sigh  always using the correct signing certificate, which is installed on the local machine.",
            "title": "Use with fastlane"
        },
        {
            "location": "/actions/sigh/#repair",
            "text": "sigh  can automatically repair all your existing provisioning profiles which are expired or just invalid.  fastlane sigh repair",
            "title": "Repair"
        },
        {
            "location": "/actions/sigh/#resign",
            "text": "If you generated your  ipa  file but want to apply a different code signing onto the ipa file, you can use  sigh resign :  fastlane sigh resign  sigh  will find the ipa file and the provisioning profile for you if they are located in the current folder.  You can pass more information using the command line:  fastlane sigh resign ./path/app.ipa --signing_identity \"iPhone Distribution: Felix Krause\" -p \"my.mobileprovision\"",
            "title": "Resign"
        },
        {
            "location": "/actions/sigh/#manage",
            "text": "With  sigh manage  you can list all provisioning profiles installed locally.  fastlane sigh manage  Delete all expired provisioning profiles  fastlane sigh manage -e  Or delete all  iOS Team Provisioning Profile  by using a regular expression  fastlane sigh manage -p \"iOS\\ ?Team Provisioning Profile:\"",
            "title": "Manage"
        },
        {
            "location": "/actions/sigh/#environment-variables",
            "text": "Run  fastlane action sigh  to get a list of all available environment variables.  If you're using  cert  in combination with  fastlane  the signing certificate will automatically be selected for you. (make sure to run  cert  before  sigh )",
            "title": "Environment Variables"
        },
        {
            "location": "/actions/sigh/#how-does-it-work",
            "text": "sigh  will access the  iOS Dev Center  to download, renew or generate the  .mobileprovision  file. It uses  spaceship  to communicate with Apple's web services.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/sigh/#how-is-my-password-stored",
            "text": "sigh  uses the  CredentialsManager  from  fastlane .",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/sigh/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/sigh/#use-provisionql-for-advanced-quick-look-in-finder",
            "text": "Install  ProvisionQL .  It will show you  mobileprovision  files like this:",
            "title": "Use 'ProvisionQL' for advanced Quick Look in Finder"
        },
        {
            "location": "/actions/sigh/#app-identifier-couldnt-be-found",
            "text": "If you also want to create a new App Identifier on the Apple Developer Portal, check out  produce , which does exactly that.",
            "title": "App Identifier couldn't be found"
        },
        {
            "location": "/actions/sigh/#what-happens-to-my-xcode-managed-profiles",
            "text": "sigh  will never touch or use the profiles which are created and managed by Xcode. Instead  sigh  will manage its own set of provisioning profiles.      sigh       Supported platforms  ios, mac    Author  @KrauseFx    Returns  The UUID of the profile sigh just fetched/generated",
            "title": "What happens to my Xcode managed profiles?"
        },
        {
            "location": "/actions/sigh/#3-examples",
            "text": "get_provisioning_profile  sigh # alias for \"get_provisioning_profile\"  get_provisioning_profile(\n  adhoc: true,\n  force: true,\n  filename: \"myFile.mobileprovision\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/sigh/#parameters",
            "text": "Key  Description  Default      adhoc  Setting this flag will generate AdHoc profiles instead of App Store Profiles  false    developer_id  Setting this flag will generate Developer ID profiles instead of App Store Profiles  false    development  Renew the development certificate instead of the production one  false    skip_install  By default, the certificate will be added to your local machine. Setting this flag will skip this action  false    force  Renew provisioning profiles regardless of its state - to automatically add all devices for ad hoc profiles  false    app_identifier  The bundle identifier of your app  *    api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    provisioning_name  The name of the profile that is used on the Apple Developer Portal     ignore_profiles_with_different_name  Use in combination with :provisioning_name - when true only profiles matching this exact name will be downloaded  false    output_path  Directory in which the profile should be stored  .    cert_id  The ID of the code signing certificate to use (e.g. 78ADL6LVAA)     cert_owner_name  The certificate name to use for new profiles, or to renew with. (e.g. \"Felix Krause\")     filename  Filename to use for the generated provisioning profile (must include .mobileprovision)     skip_fetch_profiles  Skips the verification of existing profiles which is useful if you have thousands of profiles  false    skip_certificate_verification  Skips the verification of the certificates for every existing profiles. This will make sure the provisioning profile can be used on the local machine  false    platform  Set the provisioning profile's platform (i.e. ios, tvos, macos, catalyst)  ios    readonly  Only fetch existing profile, don't generate new ones  false    template_name  The name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")     fail_on_name_taken  Should the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/sigh/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  sigh  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SIGH_PROFILE_PATH  A path in which certificates, key and profile are exported    SharedValues::SIGH_PROFILE_PATHS  Paths in which certificates, key and profile are exported    SharedValues::SIGH_UUID  UUID (Universally Unique IDentifier) of a provisioning profile    SharedValues::SIGH_NAME  The name of the profile    SharedValues::SIGH_PROFILE_TYPE  The profile type, can be appstore, adhoc, development, enterprise     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/sigh/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action sigh",
            "title": "Documentation"
        },
        {
            "location": "/actions/sigh/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run sigh  To pass parameters, make use of the  :  symbol, for example  fastlane run sigh parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/sigh/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/skip_docs/",
            "text": "skip_docs\n\n\nSkip the creation of the fastlane/README.md file when running fastlane\n\n\n\n\nTell \nfastlane\n to not automatically create a \nfastlane/README.md\n when running \nfastlane\n. You can always trigger the creation of this file manually by running \nfastlane docs\n.\n\n\n\n\n\n\n\n\n\n\nskip_docs\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nskip_docs\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action skip_docs\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run skip_docs\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run skip_docs parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "skip_docs"
        },
        {
            "location": "/actions/skip_docs/#skip_docs",
            "text": "Skip the creation of the fastlane/README.md file when running fastlane   Tell  fastlane  to not automatically create a  fastlane/README.md  when running  fastlane . You can always trigger the creation of this file manually by running  fastlane docs .      skip_docs       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "skip_docs"
        },
        {
            "location": "/actions/skip_docs/#1-example",
            "text": "skip_docs",
            "title": "1 Example"
        },
        {
            "location": "/actions/skip_docs/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action skip_docs",
            "title": "Documentation"
        },
        {
            "location": "/actions/skip_docs/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run skip_docs  To pass parameters, make use of the  :  symbol, for example  fastlane run skip_docs parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/skip_docs/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/slack/",
            "text": "slack\n\n\nSend a success/error message to your \nSlack\n group\n\n\n\n\nCreate an Incoming WebHook and export this as \nSLACK_URL\n. Can send a message to \n#channel\n (by default), a direct message to \n@username\n or a message to a private group \ngroup\n with success (green) or failure (red) status.\n\n\n\n\n\n\n\n\n\n\nslack\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nslack(message: \"App successfully released!\")\n\n\n\n\nslack(\n  message: \"App successfully released!\",\n  channel: \"#channel\",  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {  # Optional, lets you specify any number of your own Slack attachments.\n    \"Build Date\" => Time.new.to_s,\n    \"Built by\" => \"Jenkins\",\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify default payloads to include. Pass an empty array to suppress all the default payloads.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).\n       # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url: \"http://example.com/path/to/thumb.png\",\n    fields: [{\n      title: \"My Field\",\n      value: \"My Value\",\n      short: true\n    }]\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmessage\n\n\nThe message that should be displayed on Slack. This supports the standard Slack markup language\n\n\n\n\n\n\n\n\npretext\n\n\nThis is optional text that appears above the message attachment block. This supports the standard Slack markup language\n\n\n\n\n\n\n\n\nchannel\n\n\n#channel or @username\n\n\n\n\n\n\n\n\nuse_webhook_configured_username_and_icon\n\n\nUse webhook's default username and icon settings? (true/false)\n\n\nfalse\n\n\n\n\n\n\nslack_url\n\n\nCreate an Incoming WebHook for your Slack group\n\n\n\n\n\n\n\n\nusername\n\n\nOverrides the webhook's username property if use_webhook_configured_username_and_icon is false\n\n\nfastlane\n\n\n\n\n\n\nicon_url\n\n\nOverrides the webhook's image property if use_webhook_configured_username_and_icon is false\n\n\nhttps://fastlane.tools/assets/img/fastlane_icon.png\n\n\n\n\n\n\npayload\n\n\nAdd additional information to this post. payload must be a hash containing any key with any value\n\n\n{}\n\n\n\n\n\n\ndefault_payloads\n\n\nSpecifies default payloads to include. Pass an empty array to suppress all the default payloads\n\n\n[\"lane\", \"test_result\", \"git_branch\", \"git_author\", \"last_git_commit\", \"last_git_commit_hash\"]\n\n\n\n\n\n\nattachment_properties\n\n\nMerge additional properties in the slack attachment, see https://api.slack.com/docs/attachments\n\n\n{}\n\n\n\n\n\n\nsuccess\n\n\nWas this build successful? (true/false)\n\n\ntrue\n\n\n\n\n\n\nfail_on_error\n\n\nShould an error sending the slack notification cause a failure? (true/false)\n\n\ntrue\n\n\n\n\n\n\nlink_names\n\n\nFind and link channel names and usernames (true/false)\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action slack\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run slack\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run slack parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "slack"
        },
        {
            "location": "/actions/slack/#slack",
            "text": "Send a success/error message to your  Slack  group   Create an Incoming WebHook and export this as  SLACK_URL . Can send a message to  #channel  (by default), a direct message to  @username  or a message to a private group  group  with success (green) or failure (red) status.      slack       Supported platforms  ios, android, mac    Author  @KrauseFx",
            "title": "slack"
        },
        {
            "location": "/actions/slack/#2-examples",
            "text": "slack(message: \"App successfully released!\")  slack(\n  message: \"App successfully released!\",\n  channel: \"#channel\",  # Optional, by default will post to the default channel configured for the POST URL.\n  success: true,        # Optional, defaults to true.\n  payload: {  # Optional, lets you specify any number of your own Slack attachments.\n    \"Build Date\" => Time.new.to_s,\n    \"Built by\" => \"Jenkins\",\n  },\n  default_payloads: [:git_branch, :git_author], # Optional, lets you specify default payloads to include. Pass an empty array to suppress all the default payloads.\n  attachment_properties: { # Optional, lets you specify any other properties available for attachments in the slack API (see https://api.slack.com/docs/attachments).\n       # This hash is deep merged with the existing properties set using the other properties above. This allows your own fields properties to be appended to the existing fields that were created using the `payload` property for instance.\n    thumb_url: \"http://example.com/path/to/thumb.png\",\n    fields: [{\n      title: \"My Field\",\n      value: \"My Value\",\n      short: true\n    }]\n  }\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/slack/#parameters",
            "text": "Key  Description  Default      message  The message that should be displayed on Slack. This supports the standard Slack markup language     pretext  This is optional text that appears above the message attachment block. This supports the standard Slack markup language     channel  #channel or @username     use_webhook_configured_username_and_icon  Use webhook's default username and icon settings? (true/false)  false    slack_url  Create an Incoming WebHook for your Slack group     username  Overrides the webhook's username property if use_webhook_configured_username_and_icon is false  fastlane    icon_url  Overrides the webhook's image property if use_webhook_configured_username_and_icon is false  https://fastlane.tools/assets/img/fastlane_icon.png    payload  Add additional information to this post. payload must be a hash containing any key with any value  {}    default_payloads  Specifies default payloads to include. Pass an empty array to suppress all the default payloads  [\"lane\", \"test_result\", \"git_branch\", \"git_author\", \"last_git_commit\", \"last_git_commit_hash\"]    attachment_properties  Merge additional properties in the slack attachment, see https://api.slack.com/docs/attachments  {}    success  Was this build successful? (true/false)  true    fail_on_error  Should an error sending the slack notification cause a failure? (true/false)  true    link_names  Find and link channel names and usernames (true/false)  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/slack/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action slack",
            "title": "Documentation"
        },
        {
            "location": "/actions/slack/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run slack  To pass parameters, make use of the  :  symbol, for example  fastlane run slack parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/slack/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/slather/",
            "text": "slather\n\n\nUse slather to generate a code coverage report\n\n\n\n\nSlather works with multiple code coverage formats, including Xcode 7 code coverage.\nSlather is available at \nhttps://github.com/SlatherOrg/slather\n.\n\n\n\n\n\n\n\n\n\n\nslather\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@mattdelves\n\n\n\n\n\n\n\n\n1 Example\n\n\nslather(\n  build_directory: \"foo\",\n  input_format: \"bah\",\n  scheme: \"MyScheme\",\n  proj: \"MyProject.xcodeproj\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nbuild_directory\n\n\nThe location of the build output\n\n\n\n\n\n\n\n\nproj\n\n\nThe project file that slather looks at\n\n\n\n\n\n\n\n\nworkspace\n\n\nThe workspace that slather looks at\n\n\n\n\n\n\n\n\nscheme\n\n\nScheme to use when calling slather\n\n\n\n\n\n\n\n\nconfiguration\n\n\nConfiguration to use when calling slather (since slather-2.4.1)\n\n\n\n\n\n\n\n\ninput_format\n\n\nThe input format that slather should look for\n\n\n\n\n\n\n\n\nbuildkite\n\n\nTell slather that it is running on Buildkite\n\n\n\n\n\n\n\n\nteamcity\n\n\nTell slather that it is running on TeamCity\n\n\n\n\n\n\n\n\njenkins\n\n\nTell slather that it is running on Jenkins\n\n\n\n\n\n\n\n\ntravis\n\n\nTell slather that it is running on TravisCI\n\n\n\n\n\n\n\n\ntravis_pro\n\n\nTell slather that it is running on TravisCI Pro\n\n\n\n\n\n\n\n\ncircleci\n\n\nTell slather that it is running on CircleCI\n\n\n\n\n\n\n\n\ncoveralls\n\n\nTell slather that it should post data to Coveralls\n\n\n\n\n\n\n\n\nsimple_output\n\n\nTell slather that it should output results to the terminal\n\n\n\n\n\n\n\n\ngutter_json\n\n\nTell slather that it should output results as Gutter JSON format\n\n\n\n\n\n\n\n\ncobertura_xml\n\n\nTell slather that it should output results as Cobertura XML format\n\n\n\n\n\n\n\n\nsonarqube_xml\n\n\nTell slather that it should output results as SonarQube Generic XML format\n\n\n\n\n\n\n\n\nllvm_cov\n\n\nTell slather that it should output results as llvm-cov show format\n\n\n\n\n\n\n\n\njson\n\n\nTell slather that it should output results as static JSON report\n\n\n\n\n\n\n\n\nhtml\n\n\nTell slather that it should output results as static HTML pages\n\n\n\n\n\n\n\n\nshow\n\n\nTell slather that it should open static html pages automatically\n\n\nfalse\n\n\n\n\n\n\nsource_directory\n\n\nTell slather the location of your source files\n\n\n\n\n\n\n\n\noutput_directory\n\n\nTell slather the location of for your output files\n\n\n\n\n\n\n\n\nignore\n\n\nTell slather to ignore files matching a path or any path from an array of paths\n\n\n\n\n\n\n\n\nverbose\n\n\nTell slather to enable verbose mode\n\n\n\n\n\n\n\n\nuse_bundle_exec\n\n\nUse bundle exec to execute slather. Make sure it is in the Gemfile\n\n\nfalse\n\n\n\n\n\n\nbinary_basename\n\n\nBasename of the binary file, this should match the name of your bundle excluding its extension (i.e. YourApp [for YourApp.app bundle])\n\n\n\n\n\n\n\n\nbinary_file\n\n\nBinary file name to be used for code coverage\n\n\n\n\n\n\n\n\narch\n\n\nSpecify which architecture the binary file is in. Needed for universal binaries\n\n\n\n\n\n\n\n\nsource_files\n\n\nA Dir.glob compatible pattern used to limit the lookup to specific source files. Ignored in gcov mode\n\n\nfalse\n\n\n\n\n\n\ndecimals\n\n\nThe amount of decimals to use for % coverage reporting\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action slather\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run slather\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run slather parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "slather"
        },
        {
            "location": "/actions/slather/#slather",
            "text": "Use slather to generate a code coverage report   Slather works with multiple code coverage formats, including Xcode 7 code coverage. Slather is available at  https://github.com/SlatherOrg/slather .      slather       Supported platforms  ios, mac    Author  @mattdelves",
            "title": "slather"
        },
        {
            "location": "/actions/slather/#1-example",
            "text": "slather(\n  build_directory: \"foo\",\n  input_format: \"bah\",\n  scheme: \"MyScheme\",\n  proj: \"MyProject.xcodeproj\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/slather/#parameters",
            "text": "Key  Description  Default      build_directory  The location of the build output     proj  The project file that slather looks at     workspace  The workspace that slather looks at     scheme  Scheme to use when calling slather     configuration  Configuration to use when calling slather (since slather-2.4.1)     input_format  The input format that slather should look for     buildkite  Tell slather that it is running on Buildkite     teamcity  Tell slather that it is running on TeamCity     jenkins  Tell slather that it is running on Jenkins     travis  Tell slather that it is running on TravisCI     travis_pro  Tell slather that it is running on TravisCI Pro     circleci  Tell slather that it is running on CircleCI     coveralls  Tell slather that it should post data to Coveralls     simple_output  Tell slather that it should output results to the terminal     gutter_json  Tell slather that it should output results as Gutter JSON format     cobertura_xml  Tell slather that it should output results as Cobertura XML format     sonarqube_xml  Tell slather that it should output results as SonarQube Generic XML format     llvm_cov  Tell slather that it should output results as llvm-cov show format     json  Tell slather that it should output results as static JSON report     html  Tell slather that it should output results as static HTML pages     show  Tell slather that it should open static html pages automatically  false    source_directory  Tell slather the location of your source files     output_directory  Tell slather the location of for your output files     ignore  Tell slather to ignore files matching a path or any path from an array of paths     verbose  Tell slather to enable verbose mode     use_bundle_exec  Use bundle exec to execute slather. Make sure it is in the Gemfile  false    binary_basename  Basename of the binary file, this should match the name of your bundle excluding its extension (i.e. YourApp [for YourApp.app bundle])     binary_file  Binary file name to be used for code coverage     arch  Specify which architecture the binary file is in. Needed for universal binaries     source_files  A Dir.glob compatible pattern used to limit the lookup to specific source files. Ignored in gcov mode  false    decimals  The amount of decimals to use for % coverage reporting  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/slather/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action slather",
            "title": "Documentation"
        },
        {
            "location": "/actions/slather/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run slather  To pass parameters, make use of the  :  symbol, for example  fastlane run slather parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/slather/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/snapshot/",
            "text": "snapshot\n\n\nAlias for the \ncapture_ios_screenshots\n action\n\n\n\n  \n\n\n\n\n\nAutomate taking localized screenshots of your iOS and tvOS apps on every device\n\n\n\n\n\n  Check out the new \nfastlane documentation\n on how to generate screenshots\n\n\n\n\n\nsnapshot\n generates localized iOS and tvOS screenshots for different device types and languages for the App Store and can be uploaded using (\ndeliver\n).\n\n\nYou have to manually create 20 (languages) x 6 (devices) x 5 (screenshots) = \n600 screenshots\n.\n\n\nIt's hard to get everything right!\n\n\n\n\nNew screenshots with every (design) update\n\n\nNo loading indicators\n\n\nSame content / screens\n\n\nClean Status Bar\n\n\nUploading screenshots (\ndeliver\n is your friend)\n\n\n\n\nMore information about \ncreating perfect screenshots\n.\n\n\nsnapshot\n runs completely in the background - you can do something else, while your computer takes the screenshots for you.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nUI Tests\n \u2022\n    \nQuick Start\n \u2022\n    \nUsage\n \u2022\n    \nTips\n \u2022\n    \nHow?\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nCreate hundreds of screenshots in multiple languages on all simulators\n\n\nTake screenshots in multiple device simulators concurrently to cut down execution time (Xcode 9 only)\n\n\nConfigure it once, store the configuration in git\n\n\nDo something else, while the computer takes the screenshots for you\n\n\nIntegrates with \nfastlane\n and \ndeliver\n\n\nGenerates a beautiful web page, which shows all screenshots on all devices. This is perfect to send to QA or the marketing team\n\n\nsnapshot\n automatically waits for network requests to be finished before taking a screenshot (we don't want loading images in the App Store screenshots)\n\n\n\n\nAfter \nsnapshot\n successfully created new screenshots, it will generate a beautiful HTML file to get a quick overview of all screens:\n\n\n\n\nWhy?\n\n\nThis tool automatically switches the language and device type and runs UI Tests for every combination.\n\n\nWhy should I automate this process?\n\n\n\n\nIt takes \nhours\n to take screenshots\n\n\nYou get a great overview of all your screens, running on all available simulators without the need to manually start it hundreds of times\n\n\nEasy verification for translators (without an iDevice) that translations do make sense in real App context\n\n\nEasy verification that localizations fit into labels on all screen dimensions\n\n\nIt is an integration test: You can test for UI elements and other things inside your scripts\n\n\nBe so nice, and provide new screenshots with every App Store update. Your customers deserve it\n\n\nYou realize, there is a spelling mistake in one of the screens? Well, just correct it and re-run the script\n\n\n\n\nUI Tests\n\n\nGetting started\n\n\nThis project uses Apple's newly announced UI Tests. We will not go into detail on how to write scripts.\n\n\nHere a few links to get started:\n\n\n\n\nWWDC 2015 Introduction to UI Tests\n\n\nA first look into UI Tests\n\n\nUI Testing in Xcode 7\n\n\nHSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app\n\n\nAutomating App Store screenshots using fastlane snapshot and frameit\n\n\n\n\nQuick Start\n\n\n\n\nCreate a new UI Test target in your Xcode project (\ntop part of this article\n)\n\n\nRun \nfastlane snapshot init\n in your project folder\n\n\nAdd the ./SnapshotHelper.swift to your UI Test target (You can move the file anywhere you want)\n\n\n(Xcode 8 only) add the ./SnapshotHelperXcode8.swift to your UI Test target\n\n\n\n\n\n\n(Objective C only) add the bridging header to your test class:\n\n\n#import \"MYUITests-Swift.h\"\n\n  (The bridging header is named after your test target with \n-Swift.h\n appended.)\n\n\n\n\n\n\nIn your UI Test class, click the \nRecord\n button on the bottom left and record your interaction\n\n\nTo take a snapshot, call the following between interactions\n\n\nSwift: \nsnapshot(\"01LoginScreen\")\n\n\nObjective C: \n[Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];\n\n\n\n\n\n\nAdd the following code to your \nsetUp()\n method:\n\n\n\n\nSwift:\n\n\nlet app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()\n\n\n\n\nObjective C:\n\n\nXCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];\n\n\n\n\nMake sure you only have one \nlaunch\n call in your test class, as Xcode adds one automatically on new test files.\n\n\n\n\nYou can try the \nsnapshot\n \nexample project\n by cloning this repo.\n\n\nTo quick start your UI tests, you can use the UI Test recorder. You only have to interact with the simulator, and Xcode will generate the UI Test code for you. You can find the red record button on the bottom of the screen (more information in \nthis blog post\n)\n\n\nUsage\n\n\nfastlane snapshot\n\n\n\n\nYour screenshots will be stored in the \n./screenshots/\n folder by default (or \n./fastlane/screenshots\n if you're using \nfastlane\n)\n\n\nNew with Xcode 9, \nsnapshot\n can run multiple simulators concurrently. This is the default behavior in order to take your screenshots as quickly as possible. This can be disabled to run each device, one at a time, by setting the \n:concurrent_simulators\n option to \nfalse\n.\n\n\nNote:\n While running \nsnapshot\n with Xcode 9, the simulators will not be visibly spawned. So, while you won't see the simulators running your tests, they will, in fact, be taking your screenshots.\n\n\nIf any error occurs while running the snapshot script on a device, that device will not have any screenshots, and \nsnapshot\n will continue with the next device or language. To stop the flow after the first error, run\n\n\nfastlane snapshot --stop_after_first_error\n\n\n\n\nAlso by default, \nsnapshot\n will open the HTML after all is done. This can be skipped with the following command\n\n\nfastlane snapshot --stop_after_first_error --skip_open_summary\n\n\n\n\nThere are a lot of options available that define how to build your app, for example\n\n\nfastlane snapshot --scheme \"UITests\" --configuration \"Release\"  --sdk \"iphonesimulator\"\n\n\n\n\nReinstall the app before running \nsnapshot\n\n\nfastlane snapshot --reinstall_app --app_identifier \"tools.fastlane.app\"\n\n\n\n\nBy default \nsnapshot\n automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g. \n#2517\n). You can adapt this number using\n\n\nfastlane snapshot --number_of_retries 3\n\n\n\n\nAdd photos and/or videos to the simulator before running \nsnapshot\n\n\nfastlane snapshot --add_photos MyTestApp/Assets/demo.jpg --add_videos MyTestApp/Assets/demo.mp4\n\n\n\n\nFor a list for all available options run\n\n\nfastlane action snapshot\n\n\n\n\nAfter running \nsnapshot\n you will get a nice summary:\n\n\n\n\nSnapfile\n\n\nAll of the available options can also be stored in a configuration file called the \nSnapfile\n. Since most values will not change often for your project, it is recommended to store them there:\n\n\nFirst make sure to have a \nSnapfile\n (you get it for free when running \nfastlane snapshot init\n)\n\n\nThe \nSnapfile\n can contain all the options that are also available on \nfastlane action snapshot\n\n\nscheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])\n\n\n\n\nCompletely reset all simulators\n\n\nYou can run this command in the terminal to delete and re-create all iOS and tvOS simulators:\n\n\nfastlane snapshot reset_simulators\n\n\n\n\nWarning\n: This will delete \nall\n your simulators and replace by new ones! This is useful, if you run into weird problems when running \nsnapshot\n.\n\n\nYou can use the environment variable \nSNAPSHOT_FORCE_DELETE\n to stop asking for confirmation before deleting.\n\n\nSNAPSHOT_FORCE_DELETE=1 fastlane snapshot reset_simulators\n\n\n\n\nUpdate snapshot helpers\n\n\nSome updates require the helper files to be updated. \nsnapshot\n will automatically warn you and tell you how to update.\n\n\nBasically you can run\n\n\nfastlane snapshot update\n\n\n\n\nto update your \nSnapshotHelper.swift\n files. In case you modified your \nSnapshotHelper.swift\n and want to manually update the file, check out \nSnapshotHelper.swift\n.\n\n\nLaunch Arguments\n\n\nYou can provide additional arguments to your app on launch. These strings will be available in your app (e.g. not in the testing target) through \nProcessInfo.processInfo.arguments\n. Alternatively, use user-default syntax (\n-key value\n) and they will be available as key-value pairs in \nUserDefaults.standard\n.\n\n\nlaunch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])\n\n\n\n\nname.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"\n\n\n\n\nsnapshot\n includes \n-FASTLANE_SNAPSHOT YES\n, which will set a temporary user default for the key \nFASTLANE_SNAPSHOT\n, you may use this to detect when the app is run by \nsnapshot\n.\n\n\nif UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}\n\n\n\n\nSpecify multiple argument strings and \nsnapshot\n will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.\n\n\n# Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])\n\n\n\n\nXcode Environment Variables\n\n\nsnapshot\n includes \nFASTLANE_SNAPSHOT=YES\n and \nFASTLANE_LANGUAGE=<language>\n as arguments when executing \nxcodebuild\n. This means you may use these environment variables in a custom build phase run script to do any additional configuration.\n\n\nHow does it work?\n\n\nThe easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So \nsnapshot\n uses a different approach:\n\n\nWhen you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests (\nMore Information\n). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which \nsnapshot\n stores in a temporary folder.\n\n\nWhen the user calls \nsnapshot(...)\n in the UI Tests (Swift or Objective C) the script actually does a rotation to \n.Unknown\n which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find \nsome\n event that a user would never trigger, so that we know it's from \nsnapshot\n. On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).\n\n\nsnapshot\n then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once \nsnapshot\n has all events triggered by \nsnapshot\n it collects a ordered list of all the file names of the actual screenshots of the application.\n\n\nIn the test output, the Swift \nsnapshot\n function will print out something like this\n\n\n\n\nsnapshot: [some random text here]\n\n\n\n\nsnapshot\n finds all these entries using a regex. The number of \nsnapshot\n outputs in the terminal and the number of \nsnapshot\n events in the plist file should be the same. Knowing that, \nsnapshot\n automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.\n\n\n2 thing have to be passed on from \nsnapshot\n to the \nxcodebuild\n command line tool:\n\n\n\n\nThe device type is passed via the \ndestination\n parameter of the \nxcodebuild\n parameter\n\n\nThe language is passed via a temporary file which is written by \nsnapshot\n before running the tests and read by the UI Tests when launching the application\n\n\n\n\nIf you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:\n\n\nRadar \n23062925\n has been resolved with Xcode 8.3, so it's now possible to actually take screenshots from the simulator. We'll keep using the old approach for now, since many of you still want to use older versions of Xcode.\n\n\nTips\n\n\n\n\n\n  Check out the new \nfastlane documentation\n on how to generate screenshots\n\n\n\n\n\nFrame the screenshots\n\n\nIf you want to add frames around the screenshots and even put a title on top, check out \nframeit\n.\n\n\nAvailable language codes\n\n\nALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]\n\n\n\n\nTo get more information about language and locale codes please read \nInternationalization and Localization Guide\n.\n\n\nUse a clean status bar\n\n\nYou can set \noverride_status_bar\n to \ntrue\n to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.\n\n\nEditing the \nSnapfile\n\n\nChange syntax highlighting to \nRuby\n.\n\n\nSimulator doesn't launch the application\n\n\nWhen the app dies directly after the application is launched there might be 2 problems\n\n\n\n\nThe simulator is somehow in a broken state and you need to re-create it. You can use \nsnapshot reset_simulators\n to reset all simulators (this will remove all installed apps)\n\n\nA restart helps very often\n\n\n\n\nDetermine language\n\n\nTo detect the currently used localization in your tests, access the \ndeviceLanguage\n variable from \nSnapshotHelper.swift\n.\n\n\nSpeed up snapshots\n\n\nA lot of time in UI tests is spent waiting for animations.\n\n\nYou can disable \nUIView\n animations in your app to make the tests faster:\n\n\nif ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}\n\n\n\n\nThis requires you to pass the launch argument like so:\n\n\nsnapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])\n\n\n\n\nBy default, \nsnapshot\n will wait for a short time for the animations to finish.\nIf you're skipping the animations, this wait time is unnecessary and can be skipped:\n\n\nsetupSnapshot(app, waitForAnimations: false)\n\n\n\n\n\n\n\n\n\n\n\n\n\nsnapshot\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\ncapture_ios_screenshots\n\n\n\n\nsnapshot # alias for \"capture_ios_screenshots\"\n\n\n\n\ncapture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\n\n\nxcargs\n\n\nPass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\ndevices\n\n\nA list of devices you want to take the screenshots from\n\n\n\n\n\n\n\n\nlanguages\n\n\nA list of languages which should be used\n\n\n[\"en-US\"]\n\n\n\n\n\n\nlaunch_arguments\n\n\nA list of launch arguments which should be used\n\n\n[\"\"]\n\n\n\n\n\n\noutput_directory\n\n\nThe directory where to store the screenshots\n\n\n*\n\n\n\n\n\n\noutput_simulator_logs\n\n\nIf the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory\n\n\nfalse\n\n\n\n\n\n\nios_version\n\n\nBy default, the latest version should be used automatically. If you want to change it, do it here\n\n\n\n\n\n\n\n\nskip_open_summary\n\n\nDon't open the HTML summary after running \nsnapshot\n\n\nfalse\n\n\n\n\n\n\nskip_helper_version_check\n\n\nDo not check for most recent SnapshotHelper code\n\n\nfalse\n\n\n\n\n\n\nclear_previous_screenshots\n\n\nEnabling this option will automatically clear previously generated screenshots before running snapshot\n\n\nfalse\n\n\n\n\n\n\nreinstall_app\n\n\nEnabling this option will automatically uninstall the application before running it\n\n\nfalse\n\n\n\n\n\n\nerase_simulator\n\n\nEnabling this option will automatically erase the simulator before running the application\n\n\nfalse\n\n\n\n\n\n\nheadless\n\n\nEnabling this option will prevent displaying the simulator window\n\n\ntrue\n\n\n\n\n\n\noverride_status_bar\n\n\nEnabling this option will automatically override the status bar to show 9:41 AM, full battery, and full reception\n\n\nfalse\n\n\n\n\n\n\nlocalize_simulator\n\n\nEnabling this option will configure the Simulator's system language\n\n\nfalse\n\n\n\n\n\n\ndark_mode\n\n\nEnabling this option will configure the Simulator to be in dark mode (false for light, true for dark)\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to uninstall (only needed when enabling reinstall_app)\n\n\n*\n\n\n\n\n\n\nadd_photos\n\n\nA list of photos that should be added to the simulator before running the application\n\n\n\n\n\n\n\n\nadd_videos\n\n\nA list of videos that should be added to the simulator before running the application\n\n\n\n\n\n\n\n\nhtml_template\n\n\nA path to screenshots.html template\n\n\n\n\n\n\n\n\nbuildlog_path\n\n\nThe directory where to store the build log\n\n\n*\n\n\n\n\n\n\nclean\n\n\nShould the project be cleaned before building it?\n\n\nfalse\n\n\n\n\n\n\ntest_without_building\n\n\nTest without building, requires a derived data path\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration to use when building the app. Defaults to 'Release'\n\n\n*\n\n\n\n\n\n\nxcpretty_args\n\n\nAdditional xcpretty arguments\n\n\n\n\n\n\n\n\nsdk\n\n\nThe SDK that should be used for building the application\n\n\n\n\n\n\n\n\nscheme\n\n\nThe scheme you want to use, this must be the scheme for the UI Tests\n\n\n\n\n\n\n\n\nnumber_of_retries\n\n\nThe number of times a test can fail before snapshot should stop retrying\n\n\n1\n\n\n\n\n\n\nstop_after_first_error\n\n\nShould snapshot stop immediately after the tests completely failed on one device?\n\n\nfalse\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\nresult_bundle\n\n\nShould an Xcode result bundle be generated in the output directory\n\n\nfalse\n\n\n\n\n\n\ntest_target_name\n\n\nThe name of the target you want to test (if you desire to override the Target Application from Xcode)\n\n\n\n\n\n\n\n\nnamespace_log_files\n\n\nSeparate the log files per device and per language\n\n\n\n\n\n\n\n\nconcurrent_simulators\n\n\nTake snapshots on multiple simulators concurrently. Note: This option is only applicable when running against Xcode 9\n\n\ntrue\n\n\n\n\n\n\ndisable_slide_to_type\n\n\nDisable the simulator from showing the 'Slide to type' prompt\n\n\nfalse\n\n\n\n\n\n\ncloned_source_packages_path\n\n\nSets a custom path for Swift Package Manager dependencies\n\n\n\n\n\n\n\n\nskip_package_dependencies_resolution\n\n\nSkips resolution of Swift Package Manager dependencies\n\n\nfalse\n\n\n\n\n\n\ndisable_package_automatic_updates\n\n\nPrevents packages from automatically being resolved to versions other than those recorded in the \nPackage.resolved\n file\n\n\nfalse\n\n\n\n\n\n\ntestplan\n\n\nThe testplan associated with the scheme that should be used for testing\n\n\n\n\n\n\n\n\nonly_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to run\n\n\n\n\n\n\n\n\nskip_testing\n\n\nArray of strings matching Test Bundle/Test Suite/Test Cases to skip\n\n\n\n\n\n\n\n\ndisable_xcpretty\n\n\nDisable xcpretty formatting of build\n\n\n\n\n\n\n\n\nsuppress_xcode_output\n\n\nSuppress the output of xcodebuild to stdout. Output is still saved in buildlog_path\n\n\n\n\n\n\n\n\nuse_system_scm\n\n\nLets xcodebuild use system's scm configuration\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nsnapshot\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SNAPSHOT_SCREENSHOTS_PATH\n\n\nThe path to the screenshots\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action snapshot\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run snapshot\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run snapshot parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "snapshot"
        },
        {
            "location": "/actions/snapshot/#snapshot",
            "text": "Alias for the  capture_ios_screenshots  action",
            "title": "snapshot"
        },
        {
            "location": "/actions/snapshot/#automate-taking-localized-screenshots-of-your-ios-and-tvos-apps-on-every-device",
            "text": "",
            "title": "Automate taking localized screenshots of your iOS and tvOS apps on every device"
        },
        {
            "location": "/actions/snapshot/#features",
            "text": "Create hundreds of screenshots in multiple languages on all simulators  Take screenshots in multiple device simulators concurrently to cut down execution time (Xcode 9 only)  Configure it once, store the configuration in git  Do something else, while the computer takes the screenshots for you  Integrates with  fastlane  and  deliver  Generates a beautiful web page, which shows all screenshots on all devices. This is perfect to send to QA or the marketing team  snapshot  automatically waits for network requests to be finished before taking a screenshot (we don't want loading images in the App Store screenshots)   After  snapshot  successfully created new screenshots, it will generate a beautiful HTML file to get a quick overview of all screens:",
            "title": "Features"
        },
        {
            "location": "/actions/snapshot/#why",
            "text": "This tool automatically switches the language and device type and runs UI Tests for every combination.",
            "title": "Why?"
        },
        {
            "location": "/actions/snapshot/#why-should-i-automate-this-process",
            "text": "It takes  hours  to take screenshots  You get a great overview of all your screens, running on all available simulators without the need to manually start it hundreds of times  Easy verification for translators (without an iDevice) that translations do make sense in real App context  Easy verification that localizations fit into labels on all screen dimensions  It is an integration test: You can test for UI elements and other things inside your scripts  Be so nice, and provide new screenshots with every App Store update. Your customers deserve it  You realize, there is a spelling mistake in one of the screens? Well, just correct it and re-run the script",
            "title": "Why should I automate this process?"
        },
        {
            "location": "/actions/snapshot/#ui-tests",
            "text": "",
            "title": "UI Tests"
        },
        {
            "location": "/actions/snapshot/#getting-started",
            "text": "This project uses Apple's newly announced UI Tests. We will not go into detail on how to write scripts.  Here a few links to get started:   WWDC 2015 Introduction to UI Tests  A first look into UI Tests  UI Testing in Xcode 7  HSTestingBackchannel : \u2018Cheat\u2019 by communicating directly with your app  Automating App Store screenshots using fastlane snapshot and frameit",
            "title": "Getting started"
        },
        {
            "location": "/actions/snapshot/#quick-start",
            "text": "Create a new UI Test target in your Xcode project ( top part of this article )  Run  fastlane snapshot init  in your project folder  Add the ./SnapshotHelper.swift to your UI Test target (You can move the file anywhere you want)  (Xcode 8 only) add the ./SnapshotHelperXcode8.swift to your UI Test target    (Objective C only) add the bridging header to your test class:  #import \"MYUITests-Swift.h\" \n  (The bridging header is named after your test target with  -Swift.h  appended.)    In your UI Test class, click the  Record  button on the bottom left and record your interaction  To take a snapshot, call the following between interactions  Swift:  snapshot(\"01LoginScreen\")  Objective C:  [Snapshot snapshot:@\"01LoginScreen\" timeWaitingForIdle:10];    Add the following code to your  setUp()  method:   Swift:  let app = XCUIApplication()\nsetupSnapshot(app)\napp.launch()  Objective C:  XCUIApplication *app = [[XCUIApplication alloc] init];\n[Snapshot setupSnapshot:app waitForAnimations:NO];\n[app launch];  Make sure you only have one  launch  call in your test class, as Xcode adds one automatically on new test files.   You can try the  snapshot   example project  by cloning this repo.  To quick start your UI tests, you can use the UI Test recorder. You only have to interact with the simulator, and Xcode will generate the UI Test code for you. You can find the red record button on the bottom of the screen (more information in  this blog post )",
            "title": "Quick Start"
        },
        {
            "location": "/actions/snapshot/#usage",
            "text": "fastlane snapshot  Your screenshots will be stored in the  ./screenshots/  folder by default (or  ./fastlane/screenshots  if you're using  fastlane )  New with Xcode 9,  snapshot  can run multiple simulators concurrently. This is the default behavior in order to take your screenshots as quickly as possible. This can be disabled to run each device, one at a time, by setting the  :concurrent_simulators  option to  false .  Note:  While running  snapshot  with Xcode 9, the simulators will not be visibly spawned. So, while you won't see the simulators running your tests, they will, in fact, be taking your screenshots.  If any error occurs while running the snapshot script on a device, that device will not have any screenshots, and  snapshot  will continue with the next device or language. To stop the flow after the first error, run  fastlane snapshot --stop_after_first_error  Also by default,  snapshot  will open the HTML after all is done. This can be skipped with the following command  fastlane snapshot --stop_after_first_error --skip_open_summary  There are a lot of options available that define how to build your app, for example  fastlane snapshot --scheme \"UITests\" --configuration \"Release\"  --sdk \"iphonesimulator\"  Reinstall the app before running  snapshot  fastlane snapshot --reinstall_app --app_identifier \"tools.fastlane.app\"  By default  snapshot  automatically retries running UI Tests if they fail. This is due to randomly failing UI Tests (e.g.  #2517 ). You can adapt this number using  fastlane snapshot --number_of_retries 3  Add photos and/or videos to the simulator before running  snapshot  fastlane snapshot --add_photos MyTestApp/Assets/demo.jpg --add_videos MyTestApp/Assets/demo.mp4  For a list for all available options run  fastlane action snapshot  After running  snapshot  you will get a nice summary:",
            "title": "Usage"
        },
        {
            "location": "/actions/snapshot/#snapfile",
            "text": "All of the available options can also be stored in a configuration file called the  Snapfile . Since most values will not change often for your project, it is recommended to store them there:  First make sure to have a  Snapfile  (you get it for free when running  fastlane snapshot init )  The  Snapfile  can contain all the options that are also available on  fastlane action snapshot  scheme(\"UITests\")\n\ndevices([\n  \"iPad (7th generation)\",\n  \"iPad Air (3rd generation)\",\n  \"iPad Pro (11-inch)\",\n  \"iPad Pro (12.9-inch) (3rd generation)\",\n  \"iPad Pro (9.7-inch)\",\n  \"iPhone 11\",\n  \"iPhone 11 Pro\",\n  \"iPhone 11 Pro Max\",\n  \"iPhone 8\",\n  \"iPhone 8 Plus\"\n])\n\nlanguages([\n  \"en-US\",\n  \"de-DE\",\n  \"es-ES\",\n  [\"pt\", \"pt_BR\"] # Portuguese with Brazilian locale\n])\n\nlaunch_arguments([\"-username Felix\"])\n\n# The directory in which the screenshots should be stored\noutput_directory('./screenshots')\n\nclear_previous_screenshots(true)\n\noverride_status_bar(true)\n\nadd_photos([\"MyTestApp/Assets/demo.jpg\"])",
            "title": "Snapfile"
        },
        {
            "location": "/actions/snapshot/#completely-reset-all-simulators",
            "text": "You can run this command in the terminal to delete and re-create all iOS and tvOS simulators:  fastlane snapshot reset_simulators  Warning : This will delete  all  your simulators and replace by new ones! This is useful, if you run into weird problems when running  snapshot .  You can use the environment variable  SNAPSHOT_FORCE_DELETE  to stop asking for confirmation before deleting.  SNAPSHOT_FORCE_DELETE=1 fastlane snapshot reset_simulators",
            "title": "Completely reset all simulators"
        },
        {
            "location": "/actions/snapshot/#update-snapshot-helpers",
            "text": "Some updates require the helper files to be updated.  snapshot  will automatically warn you and tell you how to update.  Basically you can run  fastlane snapshot update  to update your  SnapshotHelper.swift  files. In case you modified your  SnapshotHelper.swift  and want to manually update the file, check out  SnapshotHelper.swift .",
            "title": "Update snapshot helpers"
        },
        {
            "location": "/actions/snapshot/#launch-arguments",
            "text": "You can provide additional arguments to your app on launch. These strings will be available in your app (e.g. not in the testing target) through  ProcessInfo.processInfo.arguments . Alternatively, use user-default syntax ( -key value ) and they will be available as key-value pairs in  UserDefaults.standard .  launch_arguments([\n  \"-firstName Felix -lastName Krause\"\n])  name.text = UserDefaults.standard.string(forKey: \"firstName\")\n// name.text = \"Felix\"  snapshot  includes  -FASTLANE_SNAPSHOT YES , which will set a temporary user default for the key  FASTLANE_SNAPSHOT , you may use this to detect when the app is run by  snapshot .  if UserDefaults.standard.bool(forKey: \"FASTLANE_SNAPSHOT\") {\n    // runtime check that we are in snapshot mode\n}  Specify multiple argument strings and  snapshot  will generate screenshots for each combination of arguments, devices, and languages. This is useful for comparing the same screenshots with different feature flags, dynamic text sizes, and different data sets.  # Snapfile for A/B Test Comparison\nlaunch_arguments([\n  \"-secretFeatureEnabled YES\",\n  \"-secretFeatureEnabled NO\"\n])",
            "title": "Launch Arguments"
        },
        {
            "location": "/actions/snapshot/#xcode-environment-variables",
            "text": "snapshot  includes  FASTLANE_SNAPSHOT=YES  and  FASTLANE_LANGUAGE=<language>  as arguments when executing  xcodebuild . This means you may use these environment variables in a custom build phase run script to do any additional configuration.",
            "title": "Xcode Environment Variables"
        },
        {
            "location": "/actions/snapshot/#how-does-it-work",
            "text": "The easiest solution would be to just render the UIWindow into a file. That's not possible because UI Tests don't run on a main thread. So  snapshot  uses a different approach:  When you run unit tests in Xcode, the reporter generates a plist file, documenting all events that occurred during the tests ( More Information ). Additionally, Xcode generates screenshots before, during and after each of these events. There is no way to manually trigger a screenshot event. The screenshots and the plist files are stored in the DerivedData directory, which  snapshot  stores in a temporary folder.  When the user calls  snapshot(...)  in the UI Tests (Swift or Objective C) the script actually does a rotation to  .Unknown  which doesn't have any effect on the actual app, but is enough to trigger a screenshot. It has no effect to the application and is not something you would do in your tests. The goal was to find  some  event that a user would never trigger, so that we know it's from  snapshot . On tvOS, there is no orientation so we ask for a count of app views with type \"Browser\" (which should never exist on tvOS).  snapshot  then iterates through all test events and check where we either did this weird rotation (on iOS) or searched for browsers (on tvOS). Once  snapshot  has all events triggered by  snapshot  it collects a ordered list of all the file names of the actual screenshots of the application.  In the test output, the Swift  snapshot  function will print out something like this   snapshot: [some random text here]   snapshot  finds all these entries using a regex. The number of  snapshot  outputs in the terminal and the number of  snapshot  events in the plist file should be the same. Knowing that,  snapshot  automatically matches these 2 lists to identify the name of each of these screenshots. They are then copied over to the output directory and separated by language and device.  2 thing have to be passed on from  snapshot  to the  xcodebuild  command line tool:   The device type is passed via the  destination  parameter of the  xcodebuild  parameter  The language is passed via a temporary file which is written by  snapshot  before running the tests and read by the UI Tests when launching the application   If you find a better way to do any of this, please submit an issue on GitHub or even a pull request :+1:  Radar  23062925  has been resolved with Xcode 8.3, so it's now possible to actually take screenshots from the simulator. We'll keep using the old approach for now, since many of you still want to use older versions of Xcode.",
            "title": "How does it work?"
        },
        {
            "location": "/actions/snapshot/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/snapshot/#frame-the-screenshots",
            "text": "If you want to add frames around the screenshots and even put a title on top, check out  frameit .",
            "title": "Frame the screenshots"
        },
        {
            "location": "/actions/snapshot/#available-language-codes",
            "text": "ALL_LANGUAGES = [\"da\", \"de-DE\", \"el\", \"en-AU\", \"en-CA\", \"en-GB\", \"en-US\", \"es-ES\", \"es-MX\", \"fi\", \"fr-CA\", \"fr-FR\", \"id\", \"it\", \"ja\", \"ko\", \"ms\", \"nl-NL\", \"no\", \"pt-BR\", \"pt-PT\", \"ru\", \"sv\", \"th\", \"tr\", \"vi\", \"zh-Hans\", \"zh-Hant\"]  To get more information about language and locale codes please read  Internationalization and Localization Guide .",
            "title": "Available language codes"
        },
        {
            "location": "/actions/snapshot/#use-a-clean-status-bar",
            "text": "You can set  override_status_bar  to  true  to set the status bar to Tuesday January 9th at 9:41AM with full battery and reception.",
            "title": "Use a clean status bar"
        },
        {
            "location": "/actions/snapshot/#editing-the-snapfile",
            "text": "Change syntax highlighting to  Ruby .",
            "title": "Editing the Snapfile"
        },
        {
            "location": "/actions/snapshot/#simulator-doesnt-launch-the-application",
            "text": "When the app dies directly after the application is launched there might be 2 problems   The simulator is somehow in a broken state and you need to re-create it. You can use  snapshot reset_simulators  to reset all simulators (this will remove all installed apps)  A restart helps very often",
            "title": "Simulator doesn't launch the application"
        },
        {
            "location": "/actions/snapshot/#determine-language",
            "text": "To detect the currently used localization in your tests, access the  deviceLanguage  variable from  SnapshotHelper.swift .",
            "title": "Determine language"
        },
        {
            "location": "/actions/snapshot/#speed-up-snapshots",
            "text": "A lot of time in UI tests is spent waiting for animations.  You can disable  UIView  animations in your app to make the tests faster:  if ProcessInfo().arguments.contains(\"SKIP_ANIMATIONS\") {\n    UIView.setAnimationsEnabled(false)\n}  This requires you to pass the launch argument like so:  snapshot(launch_arguments: [\"SKIP_ANIMATIONS\"])  By default,  snapshot  will wait for a short time for the animations to finish.\nIf you're skipping the animations, this wait time is unnecessary and can be skipped:  setupSnapshot(app, waitForAnimations: false)      snapshot       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Speed up snapshots"
        },
        {
            "location": "/actions/snapshot/#3-examples",
            "text": "capture_ios_screenshots  snapshot # alias for \"capture_ios_screenshots\"  capture_ios_screenshots(\n  skip_open_summary: true,\n  clean: true\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/snapshot/#parameters",
            "text": "Key  Description  Default      workspace  Path the workspace file     project  Path the project file     xcargs  Pass additional arguments to xcodebuild for the test phase. Be sure to quote the setting names and values e.g. OTHER_LDFLAGS=\"-ObjC -lstdc++\"     xcconfig  Use an extra XCCONFIG file to build your app     devices  A list of devices you want to take the screenshots from     languages  A list of languages which should be used  [\"en-US\"]    launch_arguments  A list of launch arguments which should be used  [\"\"]    output_directory  The directory where to store the screenshots  *    output_simulator_logs  If the logs generated by the app (e.g. using NSLog, perror, etc.) in the Simulator should be written to the output_directory  false    ios_version  By default, the latest version should be used automatically. If you want to change it, do it here     skip_open_summary  Don't open the HTML summary after running  snapshot  false    skip_helper_version_check  Do not check for most recent SnapshotHelper code  false    clear_previous_screenshots  Enabling this option will automatically clear previously generated screenshots before running snapshot  false    reinstall_app  Enabling this option will automatically uninstall the application before running it  false    erase_simulator  Enabling this option will automatically erase the simulator before running the application  false    headless  Enabling this option will prevent displaying the simulator window  true    override_status_bar  Enabling this option will automatically override the status bar to show 9:41 AM, full battery, and full reception  false    localize_simulator  Enabling this option will configure the Simulator's system language  false    dark_mode  Enabling this option will configure the Simulator to be in dark mode (false for light, true for dark)     app_identifier  The bundle identifier of the app to uninstall (only needed when enabling reinstall_app)  *    add_photos  A list of photos that should be added to the simulator before running the application     add_videos  A list of videos that should be added to the simulator before running the application     html_template  A path to screenshots.html template     buildlog_path  The directory where to store the build log  *    clean  Should the project be cleaned before building it?  false    test_without_building  Test without building, requires a derived data path     configuration  The configuration to use when building the app. Defaults to 'Release'  *    xcpretty_args  Additional xcpretty arguments     sdk  The SDK that should be used for building the application     scheme  The scheme you want to use, this must be the scheme for the UI Tests     number_of_retries  The number of times a test can fail before snapshot should stop retrying  1    stop_after_first_error  Should snapshot stop immediately after the tests completely failed on one device?  false    derived_data_path  The directory where build products and other derived data will go     result_bundle  Should an Xcode result bundle be generated in the output directory  false    test_target_name  The name of the target you want to test (if you desire to override the Target Application from Xcode)     namespace_log_files  Separate the log files per device and per language     concurrent_simulators  Take snapshots on multiple simulators concurrently. Note: This option is only applicable when running against Xcode 9  true    disable_slide_to_type  Disable the simulator from showing the 'Slide to type' prompt  false    cloned_source_packages_path  Sets a custom path for Swift Package Manager dependencies     skip_package_dependencies_resolution  Skips resolution of Swift Package Manager dependencies  false    disable_package_automatic_updates  Prevents packages from automatically being resolved to versions other than those recorded in the  Package.resolved  file  false    testplan  The testplan associated with the scheme that should be used for testing     only_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to run     skip_testing  Array of strings matching Test Bundle/Test Suite/Test Cases to skip     disable_xcpretty  Disable xcpretty formatting of build     suppress_xcode_output  Suppress the output of xcodebuild to stdout. Output is still saved in buildlog_path     use_system_scm  Lets xcodebuild use system's scm configuration  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/snapshot/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  snapshot  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SNAPSHOT_SCREENSHOTS_PATH  The path to the screenshots     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/snapshot/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action snapshot",
            "title": "Documentation"
        },
        {
            "location": "/actions/snapshot/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run snapshot  To pass parameters, make use of the  :  symbol, for example  fastlane run snapshot parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/snapshot/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/sonar/",
            "text": "sonar\n\n\nInvokes sonar-scanner to programmatically run SonarQube analysis\n\n\n\n\nSee \nhttp://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner\n for details.\nIt can process unit test results if formatted as junit report as shown in \nxctest\n action. It can also integrate coverage reports in Cobertura format, which can be transformed into by the \nslather\n action.\n\n\n\n\n\n\n\n\n\n\nsonar\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@c_gretzki\n\n\n\n\n\n\nReturns\n\n\nThe exit code of the sonar-scanner binary\n\n\n\n\n\n\n\n\n2 Examples\n\n\nsonar(\n  project_key: \"name.gretzki.awesomeApp\",\n  project_version: \"1.0\",\n  project_name: \"iOS - AwesomeApp\",\n  sources_path: File.expand_path(\"../AwesomeApp\")\n)\n\n\n\n\nsonar(\n  project_key: \"name.gretzki.awesomeApp\",\n  project_version: \"1.0\",\n  project_name: \"iOS - AwesomeApp\",\n  sources_path: File.expand_path(\"../AwesomeApp\"),\n  sonar_organization: \"myOrg\",\n  sonar_login: \"123456abcdef\",\n  sonar_url: \"https://sonarcloud.io\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nproject_configuration_path\n\n\nThe path to your sonar project configuration file; defaults to \nsonar-project.properties\n\n\n\n\n\n\n\n\nproject_key\n\n\nThe key sonar uses to identify the project, e.g. \nname.gretzki.awesomeApp\n. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\n\n\nproject_name\n\n\nThe name of the project that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\n\n\nproject_version\n\n\nThe project's version that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\n\n\nsources_path\n\n\nComma-separated paths to directories containing source files. Must either be specified here or inside the sonar project configuration file\n\n\n\n\n\n\n\n\nexclusions\n\n\nComma-separated paths to directories to be excluded from the analysis\n\n\n\n\n\n\n\n\nproject_language\n\n\nLanguage key, e.g. objc\n\n\n\n\n\n\n\n\nsource_encoding\n\n\nUsed encoding of source files, e.g., UTF-8\n\n\n\n\n\n\n\n\nsonar_runner_args\n\n\nPass additional arguments to sonar-scanner. Be sure to provide the arguments with a leading \n-D\n e.g. FL_SONAR_RUNNER_ARGS=\"-Dsonar.verbose=true\"\n\n\n\n\n\n\n\n\nsonar_login\n\n\nPass the Sonar Login token (e.g: xxxxxxprivate_token_XXXXbXX7e)\n\n\n\n\n\n\n\n\nsonar_url\n\n\nPass the url of the Sonar server\n\n\n\n\n\n\n\n\nsonar_organization\n\n\nKey of the organization on SonarCloud\n\n\n\n\n\n\n\n\nbranch_name\n\n\nPass the branch name which is getting scanned\n\n\n\n\n\n\n\n\npull_request_branch\n\n\nThe name of the branch that contains the changes to be merged\n\n\n\n\n\n\n\n\npull_request_base\n\n\nThe long-lived branch into which the PR will be merged\n\n\n\n\n\n\n\n\npull_request_key\n\n\nUnique identifier of your PR. Must correspond to the key of the PR in GitHub or TFS\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action sonar\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run sonar\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run sonar parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "sonar"
        },
        {
            "location": "/actions/sonar/#sonar",
            "text": "Invokes sonar-scanner to programmatically run SonarQube analysis   See  http://docs.sonarqube.org/display/SCAN/Analyzing+with+SonarQube+Scanner  for details. It can process unit test results if formatted as junit report as shown in  xctest  action. It can also integrate coverage reports in Cobertura format, which can be transformed into by the  slather  action.      sonar       Supported platforms  ios, android, mac    Author  @c_gretzki    Returns  The exit code of the sonar-scanner binary",
            "title": "sonar"
        },
        {
            "location": "/actions/sonar/#2-examples",
            "text": "sonar(\n  project_key: \"name.gretzki.awesomeApp\",\n  project_version: \"1.0\",\n  project_name: \"iOS - AwesomeApp\",\n  sources_path: File.expand_path(\"../AwesomeApp\")\n)  sonar(\n  project_key: \"name.gretzki.awesomeApp\",\n  project_version: \"1.0\",\n  project_name: \"iOS - AwesomeApp\",\n  sources_path: File.expand_path(\"../AwesomeApp\"),\n  sonar_organization: \"myOrg\",\n  sonar_login: \"123456abcdef\",\n  sonar_url: \"https://sonarcloud.io\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/sonar/#parameters",
            "text": "Key  Description  Default      project_configuration_path  The path to your sonar project configuration file; defaults to  sonar-project.properties     project_key  The key sonar uses to identify the project, e.g.  name.gretzki.awesomeApp . Must either be specified here or inside the sonar project configuration file     project_name  The name of the project that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file     project_version  The project's version that gets displayed on the sonar report page. Must either be specified here or inside the sonar project configuration file     sources_path  Comma-separated paths to directories containing source files. Must either be specified here or inside the sonar project configuration file     exclusions  Comma-separated paths to directories to be excluded from the analysis     project_language  Language key, e.g. objc     source_encoding  Used encoding of source files, e.g., UTF-8     sonar_runner_args  Pass additional arguments to sonar-scanner. Be sure to provide the arguments with a leading  -D  e.g. FL_SONAR_RUNNER_ARGS=\"-Dsonar.verbose=true\"     sonar_login  Pass the Sonar Login token (e.g: xxxxxxprivate_token_XXXXbXX7e)     sonar_url  Pass the url of the Sonar server     sonar_organization  Key of the organization on SonarCloud     branch_name  Pass the branch name which is getting scanned     pull_request_branch  The name of the branch that contains the changes to be merged     pull_request_base  The long-lived branch into which the PR will be merged     pull_request_key  Unique identifier of your PR. Must correspond to the key of the PR in GitHub or TFS      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/sonar/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action sonar",
            "title": "Documentation"
        },
        {
            "location": "/actions/sonar/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run sonar  To pass parameters, make use of the  :  symbol, for example  fastlane run sonar parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/sonar/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/spaceship_logs/",
            "text": "spaceship_logs\n\n\nFind, print, and copy Spaceship logs\n\n\n\n\n\n\n\n\nspaceship_logs\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\nReturns\n\n\nThe array of Spaceship logs\n\n\n\n\n\n\n\n\n5 Examples\n\n\nspaceship_logs\n\n\n\n\nspaceship_logs(\n  copy_to_path: \"/tmp/artifacts\"\n)\n\n\n\n\nspaceship_logs(\n  copy_to_clipboard: true\n)\n\n\n\n\nspaceship_logs(\n  print_contents: true,\n  print_paths: true\n)\n\n\n\n\nspaceship_logs(\n  latest: false,\n  print_contents: true,\n  print_paths: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nlatest\n\n\nFinds only the latest Spaceshop log file if set to true, otherwise returns all\n\n\ntrue\n\n\n\n\n\n\nprint_contents\n\n\nPrints the contents of the found Spaceship log file(s)\n\n\nfalse\n\n\n\n\n\n\nprint_paths\n\n\nPrints the paths of the found Spaceship log file(s)\n\n\nfalse\n\n\n\n\n\n\ncopy_to_path\n\n\nCopies the found Spaceship log file(s) to a directory\n\n\n\n\n\n\n\n\ncopy_to_clipboard\n\n\nCopies the contents of the found Spaceship log file(s) to the clipboard\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action spaceship_logs\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run spaceship_logs\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run spaceship_logs parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "spaceship_logs"
        },
        {
            "location": "/actions/spaceship_logs/#spaceship_logs",
            "text": "Find, print, and copy Spaceship logs     spaceship_logs       Supported platforms  ios, android, mac    Author  @joshdholtz    Returns  The array of Spaceship logs",
            "title": "spaceship_logs"
        },
        {
            "location": "/actions/spaceship_logs/#5-examples",
            "text": "spaceship_logs  spaceship_logs(\n  copy_to_path: \"/tmp/artifacts\"\n)  spaceship_logs(\n  copy_to_clipboard: true\n)  spaceship_logs(\n  print_contents: true,\n  print_paths: true\n)  spaceship_logs(\n  latest: false,\n  print_contents: true,\n  print_paths: true\n)",
            "title": "5 Examples"
        },
        {
            "location": "/actions/spaceship_logs/#parameters",
            "text": "Key  Description  Default      latest  Finds only the latest Spaceshop log file if set to true, otherwise returns all  true    print_contents  Prints the contents of the found Spaceship log file(s)  false    print_paths  Prints the paths of the found Spaceship log file(s)  false    copy_to_path  Copies the found Spaceship log file(s) to a directory     copy_to_clipboard  Copies the contents of the found Spaceship log file(s) to the clipboard  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/spaceship_logs/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action spaceship_logs",
            "title": "Documentation"
        },
        {
            "location": "/actions/spaceship_logs/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run spaceship_logs  To pass parameters, make use of the  :  symbol, for example  fastlane run spaceship_logs parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/spaceship_logs/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/spaceship_stats/",
            "text": "spaceship_stats\n\n\nPrint out Spaceship stats from this session (number of request to each domain)\n\n\n\n\n\n\n\n\nspaceship_stats\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n1 Example\n\n\nspaceship_stats\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nprint_request_logs\n\n\nPrint all URLs requested\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action spaceship_stats\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run spaceship_stats\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run spaceship_stats parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "spaceship_stats"
        },
        {
            "location": "/actions/spaceship_stats/#spaceship_stats",
            "text": "Print out Spaceship stats from this session (number of request to each domain)     spaceship_stats       Supported platforms  ios, android, mac    Author  @joshdholtz",
            "title": "spaceship_stats"
        },
        {
            "location": "/actions/spaceship_stats/#1-example",
            "text": "spaceship_stats",
            "title": "1 Example"
        },
        {
            "location": "/actions/spaceship_stats/#parameters",
            "text": "Key  Description  Default      print_request_logs  Print all URLs requested  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/spaceship_stats/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action spaceship_stats",
            "title": "Documentation"
        },
        {
            "location": "/actions/spaceship_stats/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run spaceship_stats  To pass parameters, make use of the  :  symbol, for example  fastlane run spaceship_stats parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/spaceship_stats/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/splunkmint/",
            "text": "splunkmint\n\n\nUpload dSYM file to \nSplunk MINT\n\n\n\n\n\n\n\n\nsplunkmint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@xfreebird\n\n\n\n\n\n\n\n\n1 Example\n\n\nsplunkmint(\n  dsym: \"My.app.dSYM.zip\",\n  api_key: \"43564d3a\",\n  api_token: \"e05456234c4869fb7e0b61\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndsym\n\n\ndSYM.zip file to upload to Splunk MINT\n\n\n\n\n\n\n\n\napi_key\n\n\nSplunk MINT App API key e.g. f57a57ca\n\n\n\n\n\n\n\n\napi_token\n\n\nSplunk MINT API token e.g. e05ba40754c4869fb7e0b61\n\n\n\n\n\n\n\n\nverbose\n\n\nMake detailed output\n\n\nfalse\n\n\n\n\n\n\nupload_progress\n\n\nShow upload progress\n\n\nfalse\n\n\n\n\n\n\nproxy_username\n\n\nProxy username\n\n\n\n\n\n\n\n\nproxy_password\n\n\nProxy password\n\n\n\n\n\n\n\n\nproxy_address\n\n\nProxy address\n\n\n\n\n\n\n\n\nproxy_port\n\n\nProxy port\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action splunkmint\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run splunkmint\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run splunkmint parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "splunkmint"
        },
        {
            "location": "/actions/splunkmint/#splunkmint",
            "text": "Upload dSYM file to  Splunk MINT     splunkmint       Supported platforms  ios    Author  @xfreebird",
            "title": "splunkmint"
        },
        {
            "location": "/actions/splunkmint/#1-example",
            "text": "splunkmint(\n  dsym: \"My.app.dSYM.zip\",\n  api_key: \"43564d3a\",\n  api_token: \"e05456234c4869fb7e0b61\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/splunkmint/#parameters",
            "text": "Key  Description  Default      dsym  dSYM.zip file to upload to Splunk MINT     api_key  Splunk MINT App API key e.g. f57a57ca     api_token  Splunk MINT API token e.g. e05ba40754c4869fb7e0b61     verbose  Make detailed output  false    upload_progress  Show upload progress  false    proxy_username  Proxy username     proxy_password  Proxy password     proxy_address  Proxy address     proxy_port  Proxy port      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/splunkmint/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action splunkmint",
            "title": "Documentation"
        },
        {
            "location": "/actions/splunkmint/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run splunkmint  To pass parameters, make use of the  :  symbol, for example  fastlane run splunkmint parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/splunkmint/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/spm/",
            "text": "spm\n\n\nRuns Swift Package Manager on your project\n\n\n\n\n\n\n\n\nspm\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@fjcaetano, @nxtstep\n\n\n\n\n\n\n\n\n3 Examples\n\n\nspm\n\n\n\n\nspm(\n  command: \"build\",\n  build_path: \"./build\",\n  configuration: \"release\"\n)\n\n\n\n\nspm(\n  command: \"generate-xcodeproj\",\n  xcconfig: \"Package.xcconfig\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ncommand\n\n\nThe swift command (one of: build, test, clean, reset, update, resolve, generate-xcodeproj, init)\n\n\nbuild\n\n\n\n\n\n\nenable_code_coverage\n\n\nEnables code coverage for the generated Xcode project when using the 'generate-xcodeproj' and the 'test' command\n\n\n\n\n\n\n\n\nbuild_path\n\n\nSpecify build/cache directory [default: ./.build]\n\n\n\n\n\n\n\n\npackage_path\n\n\nChange working directory before any other operation\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse xcconfig file to override swift package generate-xcodeproj defaults\n\n\n\n\n\n\n\n\nconfiguration\n\n\nBuild with configuration (debug|release) [default: debug]\n\n\n\n\n\n\n\n\ndisable_sandbox\n\n\nDisable using the sandbox when executing subprocesses\n\n\nfalse\n\n\n\n\n\n\nxcpretty_output\n\n\nSpecifies the output type for xcpretty. eg. 'test', or 'simple'\n\n\n\n\n\n\n\n\nxcpretty_args\n\n\nPass in xcpretty additional command line arguments (e.g. '--test --no-color' or '--tap --no-utf'), requires xcpretty_output to be specified also\n\n\n\n\n\n\n\n\nverbose\n\n\nIncrease verbosity of informational output\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action spm\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run spm\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run spm parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "spm"
        },
        {
            "location": "/actions/spm/#spm",
            "text": "Runs Swift Package Manager on your project     spm       Supported platforms  ios, android, mac    Author  @fjcaetano, @nxtstep",
            "title": "spm"
        },
        {
            "location": "/actions/spm/#3-examples",
            "text": "spm  spm(\n  command: \"build\",\n  build_path: \"./build\",\n  configuration: \"release\"\n)  spm(\n  command: \"generate-xcodeproj\",\n  xcconfig: \"Package.xcconfig\"\n)",
            "title": "3 Examples"
        },
        {
            "location": "/actions/spm/#parameters",
            "text": "Key  Description  Default      command  The swift command (one of: build, test, clean, reset, update, resolve, generate-xcodeproj, init)  build    enable_code_coverage  Enables code coverage for the generated Xcode project when using the 'generate-xcodeproj' and the 'test' command     build_path  Specify build/cache directory [default: ./.build]     package_path  Change working directory before any other operation     xcconfig  Use xcconfig file to override swift package generate-xcodeproj defaults     configuration  Build with configuration (debug|release) [default: debug]     disable_sandbox  Disable using the sandbox when executing subprocesses  false    xcpretty_output  Specifies the output type for xcpretty. eg. 'test', or 'simple'     xcpretty_args  Pass in xcpretty additional command line arguments (e.g. '--test --no-color' or '--tap --no-utf'), requires xcpretty_output to be specified also     verbose  Increase verbosity of informational output  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/spm/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action spm",
            "title": "Documentation"
        },
        {
            "location": "/actions/spm/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run spm  To pass parameters, make use of the  :  symbol, for example  fastlane run spm parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/spm/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/ssh/",
            "text": "ssh\n\n\nAllows remote command execution using ssh\n\n\n\n\nLets you execute remote commands via ssh using username/password or ssh-agent. If one of the commands in command-array returns non 0, it fails.\n\n\n\n\n\n\n\n\n\n\nssh\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n1 Example\n\n\nssh(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  commands: [\n    \"date\",\n    \"echo 1 > /tmp/file1\"\n  ]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nUsername\n\n\n\n\n\n\n\n\npassword\n\n\nPassword\n\n\n\n\n\n\n\n\nhost\n\n\nHostname\n\n\n\n\n\n\n\n\nport\n\n\nPort\n\n\n22\n\n\n\n\n\n\ncommands\n\n\nCommands\n\n\n\n\n\n\n\n\nlog\n\n\nLog commands and output\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nssh\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::SSH_STDOUT_VALUE\n\n\nHolds the standard output of all commands\n\n\n\n\n\n\nSharedValues::SSH_STDERR_VALUE\n\n\nHolds the standard error of all commands\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action ssh\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run ssh\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run ssh parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "ssh"
        },
        {
            "location": "/actions/ssh/#ssh",
            "text": "Allows remote command execution using ssh   Lets you execute remote commands via ssh using username/password or ssh-agent. If one of the commands in command-array returns non 0, it fails.      ssh       Supported platforms  ios, android, mac    Author  @hjanuschka",
            "title": "ssh"
        },
        {
            "location": "/actions/ssh/#1-example",
            "text": "ssh(\n  host: \"dev.januschka.com\",\n  username: \"root\",\n  commands: [\n    \"date\",\n    \"echo 1 > /tmp/file1\"\n  ]\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/ssh/#parameters",
            "text": "Key  Description  Default      username  Username     password  Password     host  Hostname     port  Port  22    commands  Commands     log  Log commands and output  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/ssh/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  ssh  action generates the following Lane Variables:     SharedValue  Description      SharedValues::SSH_STDOUT_VALUE  Holds the standard output of all commands    SharedValues::SSH_STDERR_VALUE  Holds the standard error of all commands     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/ssh/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action ssh",
            "title": "Documentation"
        },
        {
            "location": "/actions/ssh/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run ssh  To pass parameters, make use of the  :  symbol, for example  fastlane run ssh parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/ssh/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/supply/",
            "text": "supply\n\n\nAlias for the \nupload_to_play_store\n action\n\n\n\n  \n\n\n\n\n\nCommand line tool for updating Android apps and their metadata on the Google Play Store\n\n\nsupply\n uploads app metadata, screenshots, binaries, and app bundles to Google Play. You can also select tracks for builds and promote builds to production.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nSetup\n \u2022\n    \nQuick Start\n \u2022\n    \nCommands\n \u2022\n    \nUploading an APK\n \u2022\n    \nUploading an AAB\n \u2022\n    \nImages\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nUpdate existing Android applications on Google Play via the command line\n\n\nUpload new builds (APKs and AABs)\n\n\nRetrieve and edit metadata, such as title and description, for multiple languages\n\n\nUpload the app icon, promo graphics and screenshots for multiple languages\n\n\nHave a local copy of the metadata in your git repository\n\n\nRetrieve version code numbers from existing Google Play tracks\n\n\n\n\nSetup\n\n\nSetup consists of setting up your Google Developers Service Account\n\n\nTip: If you see Google Play Console or Google Developer Console in your local language, add \n&hl=en\n at the end of the URL (before any \n#...\n) to switch to English.\n\n\n\n\nOpen the \nGoogle Play Console\n\n\nClick the \nSettings\n menu entry, followed by \nAPI access\n\n\nClick the \nCREATE SERVICE ACCOUNT\n button \n\n\nFollow the \nGoogle Developers Console\n link in the dialog, which opens a new tab/window:\n\n\nClick the \nCREATE SERVICE ACCOUNT\n button at the top of the \nGoogle Developers Console\n\n\nProvide a \nService account name\n\n\nClick \nSelect a role\n and choose \nService Accounts > Service Account User\n\n\nCheck the \nFurnish a new private key\n checkbox\n\n\nMake sure \nJSON\n is selected as the \nKey type\n\n\nClick \nSAVE\n to close the dialog\n\n\nMake a note of the file name of the JSON file downloaded to your computer\n\n\n\n\n\n\nBack on the \nGoogle Play Console\n, click \nDONE\n to close the dialog\n\n\nClick on \nGrant Access\n for the newly added service account\n\n\nChoose \nRelease Manager\n (or alternatively \nProject Lead\n) from the \nRole\n dropdown. (Note that choosing \nRelease Manager\n grants access to the production track and all other tracks. Choosing \nProject Lead\n grants access to update all tracks \nexcept\n the production track.)\n\n\nClick \nADD USER\n to close the dialog\n\n\n\n\nYou can use \nfastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json\n to test the connection to Google Play Store with the downloaded private key.\n\n\nMigrating Google credential format (from .p12 key file to .json)\n\n\nIn previous versions of supply, credentials to your Play Console were stored as \n.p12\n files. Since version 0.4.0, supply now supports the recommended \n.json\n key Service Account credential files. If you wish to upgrade:\n\n\n\n\nfollow the \nSetup\n procedure once again to make sure you create the appropriate JSON file\n\n\nupdate your fastlane configuration or your command line invocation to use the appropriate argument if necessary.\n  Note that you don't need to take note nor pass the \nissuer\n argument anymore.\n\n\n\n\nThe previous p12 configuration is still currently supported.\n\n\nQuick Start\n\n\n\n\nBefore using \nsupply\n to connect to Google Play Store, you'll need to set up your app manually first by uploading at least one build to Google Play Store. See \nfastlane/fastlane#14686\n for more info.\n\n\n\n\n\n\ncd [your_project_folder]\n\n\nfastlane supply init\n\n\nMake changes to the downloaded metadata, add images, screenshots and/or an APK\n\n\nfastlane supply\n\n\n\n\nAvailable Commands\n\n\n\n\nfastlane supply\n: update an app with metadata, a build, images and screenshots\n\n\nfastlane supply init\n: download metadata for an existing app to a local directory\n\n\nfastlane action supply\n: show information on available commands, arguments and environment variables\n\n\n\n\nYou can either run \nsupply\n on its own and use it interactively, or you can pass arguments or specify environment variables for all the options to skip the questions.\n\n\nUploading an APK\n\n\nTo upload a new binary to Google Play, simply run\n\n\nfastlane supply --apk path/to/app.apk\n\n\n\n\nThis will also upload app metadata if you previously ran \nfastlane supply init\n.\n\n\nTo gradually roll out a new build use\n\n\nfastlane supply --apk path/app.apk --track beta --rollout 0.5\n\n\n\n\nTo set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option \nin_app_update_priority\n\n\nfastlane supply --apk path/app.apk --track beta --in_app_update_priority 3\n\n\n\n\nExpansion files (\n.obb\n)\n\n\nExpansion files (obbs) found under the same directory as your APK will also be uploaded together with your APK as long as:\n\n\n\n\nthey are identified as type 'main' or 'patch' (by containing 'main' or 'patch' in their file name)\n\n\nyou have at most one of each type\n\n\n\n\nIf you only want to update the APK, but keep the expansion files from the previous version on Google Play use\n\n\nfastlane supply --apk path/app.apk --obb_main_references_version 21 --obb_main_file_size 666154207\n\n\n\n\nor\n\n\nfastlane supply --apk path/app.apk --obb_patch_references_version 21 --obb_patch_file_size 666154207\n\n\n\n\nUploading an AAB\n\n\nTo upload a new \nAndroid application bundle\n to Google Play, simply run\n\n\nfastlane supply --aab path/to/app.aab\n\n\n\n\nThis will also upload app metadata if you previously ran \nfastlane supply init\n.\n\n\nTo gradually roll out a new build use\n\n\nfastlane supply --aab path/app.aab --track beta --rollout 0.5\n\n\n\n\nTo set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option \nin_app_update_priority\n\n\nfastlane supply --aab path/app.aab --track beta --in_app_update_priority 3\n\n\n\n\nImages and Screenshots\n\n\nAfter running \nfastlane supply init\n, you will have a metadata directory. This directory contains one or more locale directories (e.g. en-US, en-GB, etc.), and inside this directory are text files such as \ntitle.txt\n and \nshort_description.txt\n.\n\n\nInside of a given locale directory is a folder called \nimages\n. Here you can supply images with the following file names (extension can be png, jpg or jpeg):\n\n\n\n\nfeatureGraphic\n\n\nicon\n\n\npromoGraphic\n\n\ntvBanner\n\n\n\n\nYou can also supply screenshots by creating directories within the \nimages\n directory with the following names, containing PNGs or JPEGs (image names are irrelevant):\n\n\n\n\nphoneScreenshots/\n\n\nsevenInchScreenshots/\n (7-inch tablets)\n\n\ntenInchScreenshots/\n (10-inch tablets)\n\n\ntvScreenshots/\n\n\nwearScreenshots/\n\n\n\n\nNote that these will replace the current images and screenshots on the play store listing, not add to them.\n\n\nChangelogs (What's new)\n\n\nYou can add changelog files under the \nchangelogs/\n directory for each locale. The filename should exactly match the \nversion code\n of the APK that it represents. You can also provide default notes that will be used if no files match the version code by adding a \ndefault.txt\n file. \nfastlane supply init\n will populate changelog files from existing data on Google Play if no \nmetadata/\n directory exists when it is run.\n\n\n\u2514\u2500\u2500 fastlane\n    \u2514\u2500\u2500 metadata\n        \u2514\u2500\u2500 android\n            \u251c\u2500\u2500 en-US\n            \u2502   \u2514\u2500\u2500 changelogs\n            \u2502       \u251c\u2500\u2500 default.txt\n            \u2502       \u251c\u2500\u2500 100000.txt\n            \u2502       \u2514\u2500\u2500 100100.txt\n            \u2514\u2500\u2500 fr-FR\n                \u2514\u2500\u2500 changelogs\n                    \u251c\u2500\u2500 default.txt\n                    \u2514\u2500\u2500 100100.txt\n\n\n\n\nTrack Promotion\n\n\nA common Play publishing scenario might involve uploading an APK version to a test track, testing it, and finally promoting that version to production.\n\n\nThis can be done using the \n--track_promote_to\n parameter. The \n--track_promote_to\n parameter works with the \n--track\n parameter to command the Play API to promote existing Play track APK version(s) (those active on the track identified by the \n--track\n param value) to a new track (\n--track_promote_to\n value).\n\n\nRetrieve Track Release Names & Version Codes\n\n\nBefore performing a new APK upload you may want to check existing track version codes or release names, or you may simply want to provide an informational lane that displays the currently promoted version codes or release name for the production track. You can use the \ngoogle_play_track_version_codes\n action to retrieve existing version codes for a package and track. You can use the \ngoogle_play_track_release_names\n action to retrieve existing release names for a package and track.\nFor more information, see the \nfastlane action google_play_track_version_codes\n and \nfastlane action google_play_track_release_names\n help output.\n\n\nMigration from AndroidPublisherV2 to AndroidPublisherV3 in \nfastlane\n 2.135.0\n\n\nNew Options\n\n\n\n\n:version_name\n\n\nUsed when uploading with \n:apk_path\n, \n:apk_paths\n, \n:aab_path\n, and \n:aab_paths\n\n\nCan be any string such (example: \"October Release\" or \"Awesome New Feature\")\n\n\nDefaults to the version name in app/build.gradle or AndroidManifest.xml\n\n\n\n\n\n\n:release_status\n\n\nUsed when uploading with \n:apk_path\n, \n:apk_paths\n, \n:aab_path\n, and \n:aab_paths\n\n\nCan set as  \"draft\" to complete the release at some other time\n\n\nDefaults to \"completed\"\n\n\n\n\n\n\n:version_code\n\n\nUsed for \n:update_rollout\n, \n:track_promote_to\n, and uploading of meta data and screenshots\n\n\n\n\n\n\n:skip_upload_changelogs\n\n\nChangelogs were previously included with the \n:skip_upload_metadata\n but is now its own option\n\n\n\n\n\n\n\n\nDeprecated Options\n\n\n\n\n:check_superseded_tracks\n\n\nGoogle Play will automatically remove releases that are superseded now\n\n\n\n\n\n\n:deactivate_on_promote\n\n\nGoogle Play will automatically deactivate a release from its previous track on promote\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\nsupply\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nupload_to_play_store\n\n\n\n\nsupply # alias for \"upload_to_play_store\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the application to use\n\n\n*\n\n\n\n\n\n\nversion_name\n\n\nVersion name (used when uploading new apks/aabs) - defaults to 'versionName' in build.gradle or AndroidManifest.xml\n\n\n*\n\n\n\n\n\n\nversion_code\n\n\nVersion code (used when updating rollout or promoting specific versions)\n\n\n*\n\n\n\n\n\n\nrelease_status\n\n\nRelease status (used when uploading new apks/aabs) - valid values are completed, draft, halted, inProgress\n\n\n*\n\n\n\n\n\n\ntrack\n\n\nThe track of the application to use. The default available tracks are: production, beta, alpha, internal\n\n\nproduction\n\n\n\n\n\n\nrollout\n\n\nThe percentage of the user fraction when uploading to the rollout track (setting to 1 will complete the rollout)\n\n\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the directory containing the metadata files\n\n\n*\n\n\n\n\n\n\nkey\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The p12 File used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nissuer\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The issuer of the p12 file (email address of the service account)\n\n\n*\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\napk\n\n\nPath to the APK file to upload\n\n\n*\n\n\n\n\n\n\napk_paths\n\n\nAn array of paths to APK files to upload\n\n\n\n\n\n\n\n\naab\n\n\nPath to the AAB file to upload\n\n\n*\n\n\n\n\n\n\naab_paths\n\n\nAn array of paths to AAB files to upload\n\n\n\n\n\n\n\n\nskip_upload_apk\n\n\nWhether to skip uploading APK\n\n\nfalse\n\n\n\n\n\n\nskip_upload_aab\n\n\nWhether to skip uploading AAB\n\n\nfalse\n\n\n\n\n\n\nskip_upload_metadata\n\n\nWhether to skip uploading metadata, changelogs not included\n\n\nfalse\n\n\n\n\n\n\nskip_upload_changelogs\n\n\nWhether to skip uploading changelogs\n\n\nfalse\n\n\n\n\n\n\nskip_upload_images\n\n\nWhether to skip uploading images, screenshots not included\n\n\nfalse\n\n\n\n\n\n\nskip_upload_screenshots\n\n\nWhether to skip uploading SCREENSHOTS\n\n\nfalse\n\n\n\n\n\n\ntrack_promote_to\n\n\nThe track to promote to. The default available tracks are: production, beta, alpha, internal\n\n\n\n\n\n\n\n\nvalidate_only\n\n\nOnly validate changes with Google Play rather than actually publish\n\n\nfalse\n\n\n\n\n\n\nmapping\n\n\nPath to the mapping file to upload\n\n\n\n\n\n\n\n\nmapping_paths\n\n\nAn array of paths to mapping files to upload\n\n\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ncheck_superseded_tracks\n\n\nDEPRECATED!\n Google Play does this automatically now - Check the other tracks for superseded versions and disable them\n\n\nfalse\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\ndeactivate_on_promote\n\n\nDEPRECATED!\n Google Play does this automatically now - When promoting to a new track, deactivate the binary in the origin track\n\n\ntrue\n\n\n\n\n\n\nversion_codes_to_retain\n\n\nAn array of version codes to retain when publishing a new APK\n\n\n\n\n\n\n\n\nin_app_update_priority\n\n\nIn-app update priority for all the newly added apks in the release. Can take values between [0,5]\n\n\n\n\n\n\n\n\nobb_main_references_version\n\n\nReferences version of 'main' expansion file\n\n\n\n\n\n\n\n\nobb_main_file_size\n\n\nSize of 'main' expansion file in bytes\n\n\n\n\n\n\n\n\nobb_patch_references_version\n\n\nReferences version of 'patch' expansion file\n\n\n\n\n\n\n\n\nobb_patch_file_size\n\n\nSize of 'patch' expansion file in bytes\n\n\n\n\n\n\n\n\nack_bundle_installation_warning\n\n\nMust be set to true if the bundle installation may trigger a warning on user devices (e.g can only be downloaded over wifi). Typically this is required for bundles over 150MB\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action supply\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run supply\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run supply parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "supply"
        },
        {
            "location": "/actions/supply/#supply",
            "text": "Alias for the  upload_to_play_store  action",
            "title": "supply"
        },
        {
            "location": "/actions/supply/#command-line-tool-for-updating-android-apps-and-their-metadata-on-the-google-play-store",
            "text": "supply  uploads app metadata, screenshots, binaries, and app bundles to Google Play. You can also select tracks for builds and promote builds to production.   \n     Features  \u2022\n     Setup  \u2022\n     Quick Start  \u2022\n     Commands  \u2022\n     Uploading an APK  \u2022\n     Uploading an AAB  \u2022\n     Images",
            "title": "Command line tool for updating Android apps and their metadata on the Google Play Store"
        },
        {
            "location": "/actions/supply/#features",
            "text": "Update existing Android applications on Google Play via the command line  Upload new builds (APKs and AABs)  Retrieve and edit metadata, such as title and description, for multiple languages  Upload the app icon, promo graphics and screenshots for multiple languages  Have a local copy of the metadata in your git repository  Retrieve version code numbers from existing Google Play tracks",
            "title": "Features"
        },
        {
            "location": "/actions/supply/#setup",
            "text": "Setup consists of setting up your Google Developers Service Account  Tip: If you see Google Play Console or Google Developer Console in your local language, add  &hl=en  at the end of the URL (before any  #... ) to switch to English.   Open the  Google Play Console  Click the  Settings  menu entry, followed by  API access  Click the  CREATE SERVICE ACCOUNT  button   Follow the  Google Developers Console  link in the dialog, which opens a new tab/window:  Click the  CREATE SERVICE ACCOUNT  button at the top of the  Google Developers Console  Provide a  Service account name  Click  Select a role  and choose  Service Accounts > Service Account User  Check the  Furnish a new private key  checkbox  Make sure  JSON  is selected as the  Key type  Click  SAVE  to close the dialog  Make a note of the file name of the JSON file downloaded to your computer    Back on the  Google Play Console , click  DONE  to close the dialog  Click on  Grant Access  for the newly added service account  Choose  Release Manager  (or alternatively  Project Lead ) from the  Role  dropdown. (Note that choosing  Release Manager  grants access to the production track and all other tracks. Choosing  Project Lead  grants access to update all tracks  except  the production track.)  Click  ADD USER  to close the dialog   You can use  fastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json  to test the connection to Google Play Store with the downloaded private key.",
            "title": "Setup"
        },
        {
            "location": "/actions/supply/#migrating-google-credential-format-from-p12-key-file-to-json",
            "text": "In previous versions of supply, credentials to your Play Console were stored as  .p12  files. Since version 0.4.0, supply now supports the recommended  .json  key Service Account credential files. If you wish to upgrade:   follow the  Setup  procedure once again to make sure you create the appropriate JSON file  update your fastlane configuration or your command line invocation to use the appropriate argument if necessary.\n  Note that you don't need to take note nor pass the  issuer  argument anymore.   The previous p12 configuration is still currently supported.",
            "title": "Migrating Google credential format (from .p12 key file to .json)"
        },
        {
            "location": "/actions/supply/#quick-start",
            "text": "Before using  supply  to connect to Google Play Store, you'll need to set up your app manually first by uploading at least one build to Google Play Store. See  fastlane/fastlane#14686  for more info.    cd [your_project_folder]  fastlane supply init  Make changes to the downloaded metadata, add images, screenshots and/or an APK  fastlane supply",
            "title": "Quick Start"
        },
        {
            "location": "/actions/supply/#available-commands",
            "text": "fastlane supply : update an app with metadata, a build, images and screenshots  fastlane supply init : download metadata for an existing app to a local directory  fastlane action supply : show information on available commands, arguments and environment variables   You can either run  supply  on its own and use it interactively, or you can pass arguments or specify environment variables for all the options to skip the questions.",
            "title": "Available Commands"
        },
        {
            "location": "/actions/supply/#uploading-an-apk",
            "text": "To upload a new binary to Google Play, simply run  fastlane supply --apk path/to/app.apk  This will also upload app metadata if you previously ran  fastlane supply init .  To gradually roll out a new build use  fastlane supply --apk path/app.apk --track beta --rollout 0.5  To set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option  in_app_update_priority  fastlane supply --apk path/app.apk --track beta --in_app_update_priority 3",
            "title": "Uploading an APK"
        },
        {
            "location": "/actions/supply/#expansion-files-obb",
            "text": "Expansion files (obbs) found under the same directory as your APK will also be uploaded together with your APK as long as:   they are identified as type 'main' or 'patch' (by containing 'main' or 'patch' in their file name)  you have at most one of each type   If you only want to update the APK, but keep the expansion files from the previous version on Google Play use  fastlane supply --apk path/app.apk --obb_main_references_version 21 --obb_main_file_size 666154207  or  fastlane supply --apk path/app.apk --obb_patch_references_version 21 --obb_patch_file_size 666154207",
            "title": "Expansion files (.obb)"
        },
        {
            "location": "/actions/supply/#uploading-an-aab",
            "text": "To upload a new  Android application bundle  to Google Play, simply run  fastlane supply --aab path/to/app.aab  This will also upload app metadata if you previously ran  fastlane supply init .  To gradually roll out a new build use  fastlane supply --aab path/app.aab --track beta --rollout 0.5  To set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option  in_app_update_priority  fastlane supply --aab path/app.aab --track beta --in_app_update_priority 3",
            "title": "Uploading an AAB"
        },
        {
            "location": "/actions/supply/#images-and-screenshots",
            "text": "After running  fastlane supply init , you will have a metadata directory. This directory contains one or more locale directories (e.g. en-US, en-GB, etc.), and inside this directory are text files such as  title.txt  and  short_description.txt .  Inside of a given locale directory is a folder called  images . Here you can supply images with the following file names (extension can be png, jpg or jpeg):   featureGraphic  icon  promoGraphic  tvBanner   You can also supply screenshots by creating directories within the  images  directory with the following names, containing PNGs or JPEGs (image names are irrelevant):   phoneScreenshots/  sevenInchScreenshots/  (7-inch tablets)  tenInchScreenshots/  (10-inch tablets)  tvScreenshots/  wearScreenshots/   Note that these will replace the current images and screenshots on the play store listing, not add to them.",
            "title": "Images and Screenshots"
        },
        {
            "location": "/actions/supply/#changelogs-whats-new",
            "text": "You can add changelog files under the  changelogs/  directory for each locale. The filename should exactly match the  version code  of the APK that it represents. You can also provide default notes that will be used if no files match the version code by adding a  default.txt  file.  fastlane supply init  will populate changelog files from existing data on Google Play if no  metadata/  directory exists when it is run.  \u2514\u2500\u2500 fastlane\n    \u2514\u2500\u2500 metadata\n        \u2514\u2500\u2500 android\n            \u251c\u2500\u2500 en-US\n            \u2502   \u2514\u2500\u2500 changelogs\n            \u2502       \u251c\u2500\u2500 default.txt\n            \u2502       \u251c\u2500\u2500 100000.txt\n            \u2502       \u2514\u2500\u2500 100100.txt\n            \u2514\u2500\u2500 fr-FR\n                \u2514\u2500\u2500 changelogs\n                    \u251c\u2500\u2500 default.txt\n                    \u2514\u2500\u2500 100100.txt",
            "title": "Changelogs (What's new)"
        },
        {
            "location": "/actions/supply/#track-promotion",
            "text": "A common Play publishing scenario might involve uploading an APK version to a test track, testing it, and finally promoting that version to production.  This can be done using the  --track_promote_to  parameter. The  --track_promote_to  parameter works with the  --track  parameter to command the Play API to promote existing Play track APK version(s) (those active on the track identified by the  --track  param value) to a new track ( --track_promote_to  value).",
            "title": "Track Promotion"
        },
        {
            "location": "/actions/supply/#retrieve-track-release-names-version-codes",
            "text": "Before performing a new APK upload you may want to check existing track version codes or release names, or you may simply want to provide an informational lane that displays the currently promoted version codes or release name for the production track. You can use the  google_play_track_version_codes  action to retrieve existing version codes for a package and track. You can use the  google_play_track_release_names  action to retrieve existing release names for a package and track.\nFor more information, see the  fastlane action google_play_track_version_codes  and  fastlane action google_play_track_release_names  help output.",
            "title": "Retrieve Track Release Names &amp; Version Codes"
        },
        {
            "location": "/actions/supply/#migration-from-androidpublisherv2-to-androidpublisherv3-in-fastlane-21350",
            "text": "",
            "title": "Migration from AndroidPublisherV2 to AndroidPublisherV3 in fastlane 2.135.0"
        },
        {
            "location": "/actions/supply/#new-options",
            "text": ":version_name  Used when uploading with  :apk_path ,  :apk_paths ,  :aab_path , and  :aab_paths  Can be any string such (example: \"October Release\" or \"Awesome New Feature\")  Defaults to the version name in app/build.gradle or AndroidManifest.xml    :release_status  Used when uploading with  :apk_path ,  :apk_paths ,  :aab_path , and  :aab_paths  Can set as  \"draft\" to complete the release at some other time  Defaults to \"completed\"    :version_code  Used for  :update_rollout ,  :track_promote_to , and uploading of meta data and screenshots    :skip_upload_changelogs  Changelogs were previously included with the  :skip_upload_metadata  but is now its own option",
            "title": "New Options"
        },
        {
            "location": "/actions/supply/#deprecated-options",
            "text": ":check_superseded_tracks  Google Play will automatically remove releases that are superseded now    :deactivate_on_promote  Google Play will automatically deactivate a release from its previous track on promote     :      supply       Supported platforms  android    Author  @KrauseFx",
            "title": "Deprecated Options"
        },
        {
            "location": "/actions/supply/#2-examples",
            "text": "upload_to_play_store  supply # alias for \"upload_to_play_store\"",
            "title": "2 Examples"
        },
        {
            "location": "/actions/supply/#parameters",
            "text": "Key  Description  Default      package_name  The package name of the application to use  *    version_name  Version name (used when uploading new apks/aabs) - defaults to 'versionName' in build.gradle or AndroidManifest.xml  *    version_code  Version code (used when updating rollout or promoting specific versions)  *    release_status  Release status (used when uploading new apks/aabs) - valid values are completed, draft, halted, inProgress  *    track  The track of the application to use. The default available tracks are: production, beta, alpha, internal  production    rollout  The percentage of the user fraction when uploading to the rollout track (setting to 1 will complete the rollout)     metadata_path  Path to the directory containing the metadata files  *    key  DEPRECATED!  Use  --json_key  instead - The p12 File used to authenticate with Google  *    issuer  DEPRECATED!  Use  --json_key  instead - The issuer of the p12 file (email address of the service account)  *    json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    apk  Path to the APK file to upload  *    apk_paths  An array of paths to APK files to upload     aab  Path to the AAB file to upload  *    aab_paths  An array of paths to AAB files to upload     skip_upload_apk  Whether to skip uploading APK  false    skip_upload_aab  Whether to skip uploading AAB  false    skip_upload_metadata  Whether to skip uploading metadata, changelogs not included  false    skip_upload_changelogs  Whether to skip uploading changelogs  false    skip_upload_images  Whether to skip uploading images, screenshots not included  false    skip_upload_screenshots  Whether to skip uploading SCREENSHOTS  false    track_promote_to  The track to promote to. The default available tracks are: production, beta, alpha, internal     validate_only  Only validate changes with Google Play rather than actually publish  false    mapping  Path to the mapping file to upload     mapping_paths  An array of paths to mapping files to upload     root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     check_superseded_tracks  DEPRECATED!  Google Play does this automatically now - Check the other tracks for superseded versions and disable them  false    timeout  Timeout for read, open, and send (in seconds)  300    deactivate_on_promote  DEPRECATED!  Google Play does this automatically now - When promoting to a new track, deactivate the binary in the origin track  true    version_codes_to_retain  An array of version codes to retain when publishing a new APK     in_app_update_priority  In-app update priority for all the newly added apks in the release. Can take values between [0,5]     obb_main_references_version  References version of 'main' expansion file     obb_main_file_size  Size of 'main' expansion file in bytes     obb_patch_references_version  References version of 'patch' expansion file     obb_patch_file_size  Size of 'patch' expansion file in bytes     ack_bundle_installation_warning  Must be set to true if the bundle installation may trigger a warning on user devices (e.g can only be downloaded over wifi). Typically this is required for bundles over 150MB  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/supply/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action supply",
            "title": "Documentation"
        },
        {
            "location": "/actions/supply/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run supply  To pass parameters, make use of the  :  symbol, for example  fastlane run supply parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/supply/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/swiftlint/",
            "text": "swiftlint\n\n\nRun swift code validation using SwiftLint\n\n\n\n\n\n\n\n\nswiftlint\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nswiftlint(\n  mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect\n  path: \"/path/to/lint\",       # Specify path to lint (optional)\n  output_file: \"swiftlint.result.json\", # The path of the output file (optional)\n  config_file: \".swiftlint-ci.yml\",     # The path of the configuration file (optional)\n  files: [# List of files to process (optional)\n    \"AppDelegate.swift\",\n    \"path/to/project/Model.swift\"\n  ],\n  raise_if_swiftlint_error: true,      # Allow fastlane to raise an error if swiftlint fails\n  ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nSwiftLint mode: :lint, :autocorrect or :analyze\n\n\n:lint\n\n\n\n\n\n\npath\n\n\nSpecify path to lint\n\n\n\n\n\n\n\n\noutput_file\n\n\nPath to output SwiftLint result\n\n\n\n\n\n\n\n\nconfig_file\n\n\nCustom configuration file of SwiftLint\n\n\n\n\n\n\n\n\nstrict\n\n\nFail on warnings? (true/false)\n\n\nfalse\n\n\n\n\n\n\nfiles\n\n\nList of files to process\n\n\n\n\n\n\n\n\nignore_exit_status\n\n\nIgnore the exit status of the SwiftLint command, so that serious violations                                                     don't fail the build (true/false)\n\n\nfalse\n\n\n\n\n\n\nraise_if_swiftlint_error\n\n\nRaises an error if swiftlint fails, so you can fail CI/CD jobs if necessary                                                     (true/false)\n\n\nfalse\n\n\n\n\n\n\nreporter\n\n\nChoose output reporter. Available: xcode, json, csv, checkstyle, codeclimate,                                                      junit, html, emoji, sonarqube, markdown, github-actions-logging\n\n\n\n\n\n\n\n\nquiet\n\n\nDon't print status logs like 'Linting \n' & 'Done linting'\n\n\nfalse\n\n\n\n\n\n\nexecutable\n\n\nPath to the \nswiftlint\n executable on your machine\n\n\n\n\n\n\n\n\nformat\n\n\nFormat code when mode is :autocorrect\n\n\nfalse\n\n\n\n\n\n\nno_cache\n\n\nIgnore the cache when mode is :autocorrect or :lint\n\n\nfalse\n\n\n\n\n\n\ncompiler_log_path\n\n\nCompiler log path when mode is :analyze\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action swiftlint\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run swiftlint\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run swiftlint parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "swiftlint"
        },
        {
            "location": "/actions/swiftlint/#swiftlint",
            "text": "Run swift code validation using SwiftLint     swiftlint       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "swiftlint"
        },
        {
            "location": "/actions/swiftlint/#1-example",
            "text": "swiftlint(\n  mode: :lint,      # SwiftLint mode: :lint (default) or :autocorrect\n  path: \"/path/to/lint\",       # Specify path to lint (optional)\n  output_file: \"swiftlint.result.json\", # The path of the output file (optional)\n  config_file: \".swiftlint-ci.yml\",     # The path of the configuration file (optional)\n  files: [# List of files to process (optional)\n    \"AppDelegate.swift\",\n    \"path/to/project/Model.swift\"\n  ],\n  raise_if_swiftlint_error: true,      # Allow fastlane to raise an error if swiftlint fails\n  ignore_exit_status: true    # Allow fastlane to continue even if SwiftLint returns a non-zero exit status\n\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/swiftlint/#parameters",
            "text": "Key  Description  Default      mode  SwiftLint mode: :lint, :autocorrect or :analyze  :lint    path  Specify path to lint     output_file  Path to output SwiftLint result     config_file  Custom configuration file of SwiftLint     strict  Fail on warnings? (true/false)  false    files  List of files to process     ignore_exit_status  Ignore the exit status of the SwiftLint command, so that serious violations                                                     don't fail the build (true/false)  false    raise_if_swiftlint_error  Raises an error if swiftlint fails, so you can fail CI/CD jobs if necessary                                                     (true/false)  false    reporter  Choose output reporter. Available: xcode, json, csv, checkstyle, codeclimate,                                                      junit, html, emoji, sonarqube, markdown, github-actions-logging     quiet  Don't print status logs like 'Linting  ' & 'Done linting'  false    executable  Path to the  swiftlint  executable on your machine     format  Format code when mode is :autocorrect  false    no_cache  Ignore the cache when mode is :autocorrect or :lint  false    compiler_log_path  Compiler log path when mode is :analyze      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/swiftlint/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action swiftlint",
            "title": "Documentation"
        },
        {
            "location": "/actions/swiftlint/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run swiftlint  To pass parameters, make use of the  :  symbol, for example  fastlane run swiftlint parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/swiftlint/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/sync_code_signing/",
            "text": "sync_code_signing\n\n\nEasily sync your certificates and profiles across your team (via \nmatch\n)\n\n\n\n  \n\n\n\n\n\nEasily sync your certificates and profiles across your team\n\n\nA new approach to iOS and macOS code signing: Share one code signing identity across your development team to simplify your codesigning setup and prevent code signing issues.\n\n\nmatch\n is the implementation of the \ncodesigning.guide concept\n. \nmatch\n creates all required certificates & provisioning profiles and stores them in a separate git repository, Google Cloud, or Amazon S3. Every team member with access to the selected storage can use those credentials for code signing. \nmatch\n also automatically repairs broken and expired credentials. It's the easiest way to share signing credentials across teams\n\n\nMore information on how to get started with codesigning\n\n\n\n\n\n    \nWhy?\n \u2022\n    \nUsage\n \u2022\n    \nIs this secure?\n\n\n\n\n\n\n\nmatch\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nWhy match?\n\n\nBefore starting to use \nmatch\n, make sure to read the \ncodesigning.guide\n:\n\n\n\n\nWhen deploying an app to the App Store, beta testing service or even installing it on a device, most development teams have separate code signing identities for every member. This results in dozens of profiles including a lot of duplicates.\n\n\nYou have to manually renew and download the latest set of provisioning profiles every time you add a new device or a certificate expires. Additionally this requires spending a lot of time when setting up a new machine that will build your app.\n\n\n\n\nA new approach\n\n\n\n\nShare one code signing identity across your development team to simplify your setup and prevent code signing issues. What if there was a central place where your code signing identity and profiles are kept, so anyone in the team can access them during the build process?\n\n\n\n\nFor more information about the concept, visit \ncodesigning.guide\n.\n\n\nWhy not let Xcode handle all this?\n\n\n\n\nYou have full control over what happens\n\n\nYou have access to all the certificates and profiles, which are all securely stored in git\n\n\nYou share one code signing identity across the team to have fewer certificates and profiles\n\n\nXcode sometimes revokes certificates which breaks your setup causing failed builds\n\n\nMore predictable builds by settings profiles in an explicit way instead of using the \nAutomatic\n setting\n\n\nIt just works\u2122\n\n\n\n\nWhat does \nmatch\n do for you?\n\n\n\n\n\n\n\n\n\n\nmatch\n\n\n\n\n\n\n\n\n\n\n\ud83d\udd04\n\n\nAutomatically sync your iOS and macOS keys and profiles across all your team members using git\n\n\n\n\n\n\n\ud83d\udce6\n\n\nHandle all the heavy lifting of creating and storing your certificates and profiles\n\n\n\n\n\n\n\ud83d\udcbb\n\n\nSetup codesigning on a new machine in under a minute\n\n\n\n\n\n\n\ud83c\udfaf\n\n\nDesigned to work with apps with multiple targets and bundle identifiers\n\n\n\n\n\n\n\ud83d\udd12\n\n\nYou have full control over your files and Git repo, no third party service involved\n\n\n\n\n\n\n\u2728\n\n\nProvisioning profile will always match the correct certificate\n\n\n\n\n\n\n\ud83d\udca5\n\n\nEasily reset your existing profiles and certificates if your current account has expired or invalid profiles\n\n\n\n\n\n\n\u267b\ufe0f\n\n\nAutomatically renew your provisioning profiles to include all your devices using the \n--force\n option\n\n\n\n\n\n\n\ud83d\udc65\n\n\nSupport for multiple Apple accounts and multiple teams\n\n\n\n\n\n\n\u2728\n\n\nTightly integrated with \nfastlane\n to work seamlessly with \ngym\n and other build tools\n\n\n\n\n\n\n\n\nUsage\n\n\nSetup\n\n\n\n\nOptional: Create a \nnew, shared Apple Developer Portal account\n, something like \noffice@company.com\n, that will be shared across your team from now on (for more information visit \ncodesigning.guide\n)\n\n\nRun the following in your project folder to start using \nmatch\n:\n\n\n\n\nfastlane match init\n\n\n\n\n\n\nYou'll be asked if you want to store your code signing identities inside a \nGit repo\n, \nGoogle Cloud\n or \nAmazon S3\n.\n\n\nGit Storage\n\n\nUse Git Storage to store all code signing identities in a private git repo, owned and operated by you. The files will be encrypted using OpenSSL.\n\n\nFirst, enter the URL to your private (!) Git repo (You can create one for free on e.g. \nGitHub\n or \nBitBucket\n). The URL you enter can be either a \nhttps://\n or a \ngit\n URL. \nfastlane match init\n won't read or modify your certificates or profiles yet, and also won't validate your git URL.\n\n\nThis will create a \nMatchfile\n in your current directory (or in your \n./fastlane/\n folder).\n\n\nExample content (for more advanced setups check out the \nfastlane section\n):\n\n\ngit_url(\"https://github.com/fastlane/certificates\")\n\napp_identifier(\"tools.fastlane.app\")\nusername(\"user@fastlane.tools\")\n\n\n\n\nGit Storage on GitHub\n\n\nIf your machine is currently using SSH to authenticate with GitHub, you'll want to use a \ngit\n URL, otherwise, you may see an authentication error when you attempt to use match. Alternatively, you can set a basic authorization for \nmatch\n:\n\n\nUsing parameter:\n\n\nmatch(git_basic_authorization: '<YOUR KEY>')\n\n\n\n\nUsing environment variable:\n\n\nENV['MATCH_GIT_BASIC_AUTHORIZATION'] = '<YOUR KEY>'\nmatch\n\n\n\n\nYou can find more information about GitHub basic authentication and personal token generation here: \nhttps://developer.github.com/v3/auth/#basic-authentication\n\n\nGit Storage on GitHub - Deploy keys\n\n\nIf your machine does not have a private key set up for your certificates repository, you can give \nmatch\n a path for one:\n\n\nUsing parameter:\n\n\nmatch(git_private_key: '<PATH TO YOUR KEY>')\n\n\n\n\nUsing environment variable:\n\n\nENV['MATCH_GIT_PRIVATE_KEY'] = '<PATH TO YOUR KEY>'\nmatch\n\n\n\n\nYou can find more information about GitHub basic authentication and personal token generation here: \nhttps://developer.github.com/v3/auth/#basic-authentication\n\n\nGit Storage on Azure DevOps\n\n\nIf you're running a pipeline on Azure DevOps and using git storage in a another repository on the same project, you might want to use \nbearer\n token authentication.\n\n\nUsing parameter:\n\n\nmatch(git_bearer_authorization: '<YOUR TOKEN>')\n\n\n\n\nUsing environment variable:\n\n\nENV['MATCH_GIT_BEARER_AUTHORIZATION'] = '<YOUR TOKEN>'\nmatch\n\n\n\n\nYou can find more information about this use case here: \nhttps://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#authorize-access-to-your-repositories\n\n\nGoogle Cloud Storage\n\n\nUse \nGoogle Cloud Storage\n for a fully hosted solution for your code signing identities. Certificates are stored on Google Cloud, encrypted using Google managed keys. Everything will be stored on your Google account, inside a storage bucket you provide. You can also directly access the files using the web console.\n\n\nThis will create a \nMatchfile\n in your current directory (or in your \n./fastlane/\n folder).\n\n\nExample content (for more advanced setups check out the \nfastlane section\n):\n\n\ngoogle_cloud_bucket_name(\"major-key-certificates\")\n\n\n\n\nAmazon S3\n\n\nUse \nAmazon S3\n for a fully hosted solution for your code signing identities. Certificates are stored on S3, inside a storage bucket you provide. You can also directly access the files using the web console.\n\n\nThis will create a \nMatchfile\n in your current directory (or in your \n./fastlane/\n folder).\n\n\nExample content (for more advanced setups check out the \nfastlane section\n):\n\n\ns3_bucket(\"ios-certificates\")\n\n\n\n\nMultiple teams\n\n\nmatch\n can store the codesigning files for multiple development teams:\n\n\nGit Storage\n\n\nUse one git branch per team. \nmatch\n also supports storing certificates of multiple teams in one repo, by using separate git branches. If you work in multiple teams, make sure to set the \ngit_branch\n parameter to a unique value per team. From there, \nmatch\n will automatically create and use the specified branch for you.\n\n\nmatch(git_branch: \"team1\", username: \"user@team1.com\")\nmatch(git_branch: \"team2\", username: \"user@team2.com\")\n\n\n\n\nGoogle Cloud or Amazon S3 Storage\n\n\nIf you use Google Cloud or Amazon S3 Storage, you don't need to do anything manually. Just use Google Cloud or Amazon S3 Storage, and the top level folder will be the team ID.\n\n\nRun\n\n\n\n\nBefore running \nmatch\n for the first time, you should consider clearing your existing profiles and certificates using the \nmatch nuke command\n.\n\n\n\n\nAfter running \nfastlane match init\n you can run the following to generate new certificates and profiles:\n\n\nfastlane match appstore\n\n\n\n\nfastlane match development\n\n\n\n\n\n\nThis will create a new certificate and provisioning profile (if required) and store them in your selected storage.\n\nIf you previously ran \nmatch\n with the configured storage it will automatically install the existing profiles from your storage.\n\n\nThe provisioning profiles are installed in \n~/Library/MobileDevice/Provisioning Profiles\n while the certificates and private keys are installed in your Keychain.\n\n\nTo get a more detailed output of what \nmatch\n is doing use\n\n\nfastlane match --verbose\n\n\n\n\nFor a list of all available options run\n\n\nfastlane action match\n\n\n\n\nHandle multiple targets\n\n\nmatch\n can use the same one Git repository, Google Cloud, or Amazon S3 Storage for all bundle identifiers.\n\n\nIf you have several targets with different bundle identifiers, supply them as a comma-separated list:\n\n\nfastlane match appstore -a tools.fastlane.app,tools.fastlane.app.watchkitapp\n\n\n\n\nYou can make this even easier using \nfastlane\n by creating a \ncertificates\n lane like this:\n\n\nlane :certificates do\n  match(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.app.watchkitapp\"])\nend\n\n\n\n\nThen all your team has to do is run \nfastlane certificates\n and the keys, certificates and profiles for all targets will be synced.\n\n\nHandle multiple apps per developer/distribution certificate\n\n\nIf you want to use a single developer and/or distribution certificate for multiple apps belonging to the same development team, you may use the same signing identities repository and branch to store the signing identities for your apps:\n\n\nMatchfile\n example for both App #1 and #2:\n\n\ngit_url(\"https://github.com/example/example-repo.git\")\ngit_branch(\"master\")\n\n\n\n\nmatch\n will reuse certificates and will create separate provisioning profiles for each app.\n\n\nPassphrase\n\n\nGit Repo storage only\n\n\nWhen running \nmatch\n for the first time on a new machine, it will ask you for the passphrase for the Git repository. This is an additional layer of security: each of the files will be encrypted using \nopenssl\n. Make sure to remember the password, as you'll need it when you run match on a different machine.\n\n\nTo set the passphrase to decrypt your profiles using an environment variable (and avoid the prompt) use \nMATCH_PASSWORD\n.\n\n\nMigrate from Git Repo to Google Cloud\n\n\nIf you're already using a Git Repo, but would like to switch to using Google Cloud Storage, run the following command to automatically migrate all your existing code signing identities and provisioning profiles\n\n\nfastlane match migrate\n\n\n\n\nAfter a successful migration you can safely delete your Git repo.\n\n\nGoogle Cloud access control\n\n\nGoogle Cloud Storage only\n\n\nThere are two cases for reading and writing certificates stored in a Google Cloud storage bucket:\n\n\n\n\nContinuous integration jobs. These will authenticate to your Google Cloud project via a service account, and use a \ngc_keys.json\n file as credentials.\n\n\nDevelopers on a local workstation. In this case, you should choose whether everyone on your team will create their own \ngc_keys.json\n file, or whether you want to manage access to the bucket directly using your developers' Google accounts.\n\n\n\n\nWhen running \nfastlane match init\n the first time, the setup process will give you the option to create your \ngc_keys.json\n file. This file contains the authentication credentials needed to access your Google Cloud storage bucket. Make sure to keep that file secret and never add it to version control. We recommend adding \ngc_keys.json\n to your \n.gitignore\n\n\nManaging developer access via keys\n\n\nIf you want to manage developer access to your certificates via authentication keys, every developer should create their own \ngc_keys.json\n and add the file to all their work machines. This will give the admin full control over who has read/write access to the given Storage bucket. At the same time it allows your team to revoke a single key if a file gets compromised.\n\n\nManaging developer access via Google accounts\n\n\nIf your developers already have Google accounts and access to your Google Cloud project, you can also manage access to the storage bucket via \nCloud Identity and Access Management (IAM)\n. Just \nset up\n individual developer accounts or an entire Google Group containing your team as readers and writers on your storage bucket.\n\n\nYou can then specify the Google Cloud project id containing your storage bucket in your \nMatchfile\n:\n\n\nstorage_mode(\"google_cloud\")\ngoogle_cloud_bucket_name(\"my-app-certificates\")\ngoogle_cloud_project_id(\"my-app-project\")\n\n\n\n\nThis lets developers on your team use \nApplication Default Credentials\n when accessing your storage bucket. After installing the \nGoogle Cloud SDK\n, they only need to run the following command once:\n\n\ngcloud auth application-default login\n\n\n\n\n... and log in with their Google account. Then, when they run \nfastlane match\n, \nmatch\n will use these credentials to read from and write to the storage bucket.\n\n\nNew machine\n\n\nTo set up the certificates and provisioning profiles on a new machine, you just run the same command using:\n\n\nfastlane match development\n\n\n\n\nYou can also run \nmatch\n in a \nreadonly\n mode to be sure it won't create any new certificates or profiles.\n\n\nfastlane match development --readonly\n\n\n\n\nWe recommend to always use \nreadonly\n mode when running \nfastlane\n on CI systems. This can be done using\n\n\nlane :beta do\n  match(type: \"appstore\", readonly: is_ci)\n\n  gym(scheme: \"Release\")\nend\n\n\n\n\nAccess Control\n\n\nA benefit of using \nmatch\n is that it enables you to give the developers of your team access to the code signing certificates without having to give everyone access to the Developer Portal:\n\n\n\n\nRun \nmatch\n to store the certificates in a Git repo or Google Cloud Storage\n\n\nGrant access to the Git repo / Google Cloud Storage Bucket to your developers and give them the passphrase (for git storage)\n\n\nThe developers can now run \nmatch\n which will install the latest code signing profiles so they can build and sign the application without having to have access to the Apple Developer Portal\n\n\nEvery time you run \nmatch\n to update the profiles (e.g. add a new device), all your developers will automatically get the latest profiles when running \nmatch\n\n\n\n\nIf you decide to run \nmatch\n without access to the Developer Portal, make sure to use the \n--readonly\n option so that the commands don't ask you for the password to the Developer Portal.\n\n\nThe advantage of this approach is that no one in your team will revoke a certificate by mistake, while having all code signing secrets in one location.\n\n\nFolder structure\n\n\nAfter running \nmatch\n for the first time, your Git repo or Google Cloud bucket will contain 2 directories:\n\n\n\n\nThe \ncerts\n folder contains all certificates with their private keys\n\n\nThe \nprofiles\n folder contains all provisioning profiles\n\n\n\n\nAdditionally, \nmatch\n creates a nice repo \nREADME.md\n for you, making it easy to onboard new team members:\n\n\n\n  \n\n\n\n\n\nIn the case of Google Cloud, the top level folder will be the team ID.\n\n\nfastlane\n\n\nAdd \nmatch\n to your \nFastfile\n to automatically fetch the latest code signing certificates with \nfastlane\n.\n\n\nmatch(type: \"appstore\")\n\nmatch(type: \"development\")\n\nmatch(type: \"adhoc\",\n      app_identifier: \"tools.fastlane.app\")\n\nmatch(type: \"enterprise\",\n      app_identifier: \"tools.fastlane.app\")\n\n# _match_ should be called before building the app with _gym_\ngym\n# ...\n\n\n\n\nRegistering new devices\n\n\nBy using \nmatch\n, you'll save a lot of time every time you add new device to your Ad Hoc or Development profiles. Use \nmatch\n in combination with the \nregister_devices\n action.\n\n\nlane :beta do\n  register_devices(devices_file: \"./devices.txt\")\n  match(type: \"adhoc\", force_for_new_devices: true)\nend\n\n\n\n\nBy using the \nforce_for_new_devices\n parameter, \nmatch\n will check if the (enabled) device count has changed since the last time you ran \nmatch\n, and automatically re-generate the provisioning profile if necessary. You can also use \nforce: true\n to re-generate the provisioning profile on each run.\n\n\nImportant:\n The \nforce_for_new_devices\n parameter is ignored for App Store provisioning profiles since they don't contain any device information.\n\n\nIf you're not using \nfastlane\n, you can also use the \nforce_for_new_devices\n option from the command line:\n\n\nfastlane match adhoc --force_for_new_devices\n\n\n\n\nTemplates (aka: custom entitlements)\n\n\nMatch can generate profiles that contain custom entitlements by passing in the entitlement's name with the \ntemplate_name\n parameter.\n\n\nmatch(type: \"development\",\n      template_name: \"Apple Pay Pass Suppression Development\")\n\n\n\n\nSetup Xcode project\n\n\nDocs on how to set up your Xcode project\n\n\nTo build from the command line using \nfastlane\n\n\nmatch\n automatically pre-fills environment variables with the UUIDs of the correct provisioning profiles, ready to be used in your Xcode project.\n\n\nMore information about how to setup your Xcode project can be found \nhere\n\n\nTo build from Xcode manually\n\n\nThis is useful when installing your application on your device using the Development profile.\n\n\nYou can statically select the right provisioning profile in your Xcode project (the name will be \nmatch Development tools.fastlane.app\n).\n\n\nDocs on how to set up your Xcode project\n\n\nContinuous Integration\n\n\nGit repo access\n\n\nThere is one tricky part of setting up a CI system to work with \nmatch\n, which is enabling the CI to access the repo. Usually you'd just add your CI's public ssh key as a deploy key to your \nmatch\n repo, but since your CI will already likely be using its public ssh key to access the codebase repo, \nyou won't be able to do that\n.\n\n\nSome repo hosts might allow you to use the same deploy key for different repos, but GitHub will not. If your host does, you don't need to worry about this, just add your CI's public ssh key as a deploy key for your \nmatch\n repo and scroll down to \"\nEncryption password\n\".\n\n\nThere are a few ways around this:\n\n\n\n\nCreate a new account on your repo host with read-only access to your \nmatch\n repo. Bitrise have a good description of this \nhere\n.\n\n\nSome CIs allow you to upload your signing credentials manually, but obviously this means that you'll have to re-upload the profiles/keys/certs each time they change.\n\n\n\n\nNeither solution is pretty. It's one of those \ntrade-off\n things. Do you care more about \nnot\n having an extra account sitting around, or do you care more about having the :sparkles: of auto-syncing of credentials.\n\n\nGit repo encryption password\n\n\nOnce you've decided which approach to take, all that's left to do is to set your encryption password as secret environment variable named \nMATCH_PASSWORD\n. \nmatch\n will pick this up when it's run.\n\n\nGoogle Cloud Storage access\n\n\nAccessing Google Cloud Storage from your CI system requires you to provide the \ngc_keys.json\n file as part of your build. How you implement this is your decision. You can inject that file during build time.\n\n\nAmazon S3 Storage access\n\n\nAccessing Amazon S3 Storage from your CI system requires you to provide the \ns3_region\n, \ns3_access_key\n, \ns3_secret_access_key\n and \ns3_bucket\n options (or environment variables), with keys that has read access to the bucket.\n\n\nNuke\n\n\nIf you never really cared about code signing and have a messy Apple Developer account with a lot of invalid, expired or Xcode managed profiles/certificates, you can use the \nmatch nuke\n command to revoke your certificates and provisioning profiles. Don't worry, apps that are already available in the App Store / TestFlight will still work. Builds distributed via Ad Hoc or Enterprise will be disabled after nuking your account, so you'll have to re-upload a new build. After clearing your account you'll start from a clean state, and you can run \nmatch\n to generate your certificates and profiles again.\n\n\nTo revoke all certificates and provisioning profiles for a specific environment:\n\n\nfastlane match nuke development\nfastlane match nuke distribution\nfastlane match nuke enterprise\n\n\n\n\n\n\nYou'll have to confirm a list of profiles / certificates that will be deleted.\n\n\nAdvanced Git Storage features\n\n\nChange Password\n\n\nTo change the password of your repo and therefore decrypting and encrypting all files run:\n\n\nfastlane match change_password\n\n\n\n\nYou'll be asked for the new password on all your machines on the next run.\n\n\nImport\n\n\nTo import and encrypt a certificate (\n.cer\n), the private key (\n.p12\n) and the provisioning profiles (\n.mobileprovision\n or \n.provisionprofile\n) into the \nmatch\n repo run:\n\n\nfastlane match import\n\n\n\n\nYou'll be prompted for the certificate (\n.cer\n), the private key (\n.p12\n) and the provisioning profiles (\n.mobileprovision\n or \n.provisionprofile\n) paths. \nmatch\n will first validate the certificate (\n.cer\n) against the Developer Portal before importing the certificate, the private key and the provisioning profiles into the specified \nmatch\n repository.\n\n\nHowever if there is no access to the developer portal but there are certificates, private keys and profiles provided, you can use the \nskip_certificate_matching\n option to tell \nmatch\n not to verify the certificates. Like this:\n\n\nfastlane match import --skip_certificate_matching true\n\n\n\n\nThis will skip login to Apple Developer Portal and will import the provided certificate, private key and profile directly to the certificates repo.\n\n\nPlease be careful when using this option and ensure the certificates and profiles match the type (development, adhoc, appstore, enterprise, developer_id) and are not revoked or expired.\n\n\nManual Decrypt\n\n\nIf you want to manually decrypt a file you can.\n\n\nopenssl aes-256-cbc -k \"<password>\" -in \"<fileYouWantToDecryptPath>\" -out \"<decryptedFilePath>\" -a -d\n\n\n\n\nExport Distribution Certificate and Private Key as Single .p12 File\n\n\nmatch\n stores the certificate (\n.cer\n) and the private key (\n.p12\n) files separately. The following steps will repackage the separate certificate and private key into a single \n.p12\n file.\n\n\nDecrypt your cert found in \ncerts/<type>/<unique-id>.cer\n as a pem file:\n\n\nopenssl aes-256-cbc -k \"<password>\" -in \"certs/<type>/<unique-id>.cer\" -out \"cert.der\" -a -d -md [md5|sha256]\nopenssl x509 -inform der -in cert.der -out cert.pem\n\n\n\n\nDecrypt your private key found in \ncerts/<type>/<unique-id>.p12\n as a pem file:\n\n\nopenssl aes-256-cbc -k \"<password>\" -in \"certs/distribution/<unique-id>.p12\" -out \"key.pem\" -a -d -md [md5|sha256]\n\n\n\n\nGenerate an encrypted p12 file with the same or new password:\n\n\nopenssl pkcs12 -export -out \"cert.p12\" -inkey \"key.pem\" -in \"cert.pem\" -password pass:<password>\n\n\n\n\nIs this secure?\n\n\nGit\n\n\nBoth your keys and provisioning profiles are encrypted using OpenSSL using a passphrase.\n\n\nStoring your private keys in a Git repo may sound off-putting at first. We did an analysis of potential security issues, see section below.\n\n\nGoogle Cloud Storage\n\n\nAll your keys and provisioning profiles are encrypted using Google managed keys.\n\n\nWhat could happen if someone stole a private key?\n\n\nIf attackers would have your certificate and provisioning profile, they could codesign an application with the same bundle identifier.\n\n\nWhat's the worst that could happen for each of the profile types?\n\n\nApp Store Profiles\n\n\nAn App Store profile can't be used for anything as long as it's not re-signed by Apple. The only way to get an app resigned is to submit an app for review which could take anywhere from 24 hours to a few days (checkout \nappreviewtimes.com\n for up-to-date expectations). Attackers could only submit an app for review, if they also got access to your App Store Connect credentials (which are not stored in git, but in your local keychain). Additionally you get an email notification every time a build gets uploaded to cancel the submission even before your app gets into the review stage.\n\n\nDevelopment and Ad Hoc Profiles\n\n\nIn general those profiles are harmless as they can only be used to install a signed application on a small subset of devices. To add new devices, the attacker would also need your Apple Developer Portal credentials (which are not stored in git, but in your local keychain).\n\n\nEnterprise Profiles\n\n\nAttackers could use an In-House profile to distribute signed application to a potentially unlimited number of devices. All this would run under your company name and it could eventually lead to Apple revoking your In-House account. However it is very easy to revoke a certificate to remotely break the app on all devices.\n\n\nBecause of the potentially dangerous nature of In-House profiles please use \nmatch\n with enterprise profiles with caution, ensure your git repository is private and use a secure password.\n\n\nTo sum up\n\n\n\n\nYou have full control over the access list of your Git repo, no third party service involved\n\n\nEven if your certificates are leaked, they can't be used to cause any harm without your App Store Connect login credentials\n\n\nUse In-House enterprise profile with \nmatch\n with caution\n\n\nIf you use GitHub or Bitbucket we encourage enabling 2 factor authentication for all accounts that have access to the certificates repo\n\n\nThe complete source code of \nmatch\n is fully open source on \nGitHub\n\n\n\n\n\n\n\n\n\n\n\n\n\nsync_code_signing\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n4 Examples\n\n\nsync_code_signing(type: \"appstore\", app_identifier: \"tools.fastlane.app\")\n\n\n\n\nsync_code_signing(type: \"development\", readonly: true)\n\n\n\n\nsync_code_signing(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.sleepy\"])\n\n\n\n\nmatch   # alias for \"sync_code_signing\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nDefine the profile type, can be appstore, adhoc, development, enterprise, developer_id, mac_installer_distribution\n\n\ndevelopment\n\n\n\n\n\n\nadditional_cert_types\n\n\nCreate additional cert types needed for macOS installers (valid values: mac_installer_distribution, developer_id_installer)\n\n\n\n\n\n\n\n\nreadonly\n\n\nOnly fetch existing certificates and profiles, don't generate new ones\n\n\nfalse\n\n\n\n\n\n\ngenerate_apple_certs\n\n\nCreate a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)\n\n\n*\n\n\n\n\n\n\nskip_provisioning_profiles\n\n\nSkip syncing provisioning profiles\n\n\nfalse\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier(s) of your app (comma-separated string or array of strings)\n\n\n*\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nstorage_mode\n\n\nDefine where you want to store your certificates\n\n\ngit\n\n\n\n\n\n\ngit_url\n\n\nURL to the git repo containing all the certificates\n\n\n\n\n\n\n\n\ngit_branch\n\n\nSpecific git branch to use\n\n\nmaster\n\n\n\n\n\n\ngit_full_name\n\n\ngit user full name to commit\n\n\n\n\n\n\n\n\ngit_user_email\n\n\ngit user email to commit\n\n\n\n\n\n\n\n\nshallow_clone\n\n\nMake a shallow clone of the repository (truncate the history to 1 revision)\n\n\nfalse\n\n\n\n\n\n\nclone_branch_directly\n\n\nClone just the branch specified, instead of the whole repo. This requires that the branch already exists. Otherwise the command will fail\n\n\nfalse\n\n\n\n\n\n\ngit_basic_authorization\n\n\nUse a basic authorization header to access the git repo (e.g.: access via HTTPS, GitHub Actions, etc), usually a string in Base64\n\n\n\n\n\n\n\n\ngit_bearer_authorization\n\n\nUse a bearer authorization header to access the git repo (e.g.: access to an Azure DevOps repository), usually a string in Base64\n\n\n\n\n\n\n\n\ngit_private_key\n\n\nUse a private key to access the git repo (e.g.: access to GitHub repository via Deploy keys), usually a id_rsa named file or the contents hereof\n\n\n\n\n\n\n\n\ngoogle_cloud_bucket_name\n\n\nName of the Google Cloud Storage bucket to use\n\n\n\n\n\n\n\n\ngoogle_cloud_keys_file\n\n\nPath to the gc_keys.json file\n\n\n\n\n\n\n\n\ngoogle_cloud_project_id\n\n\nID of the Google Cloud project to use for authentication\n\n\n\n\n\n\n\n\ns3_region\n\n\nName of the S3 region\n\n\n\n\n\n\n\n\ns3_access_key\n\n\nS3 access key\n\n\n\n\n\n\n\n\ns3_secret_access_key\n\n\nS3 secret access key\n\n\n\n\n\n\n\n\ns3_bucket\n\n\nName of the S3 bucket\n\n\n\n\n\n\n\n\ns3_object_prefix\n\n\nPrefix to be used on all objects uploaded to S3\n\n\n\n\n\n\n\n\nkeychain_name\n\n\nKeychain the items should be imported to\n\n\nlogin.keychain\n\n\n\n\n\n\nkeychain_password\n\n\nThis might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password\n\n\n\n\n\n\n\n\nforce\n\n\nRenew the provisioning profiles every time you run match\n\n\nfalse\n\n\n\n\n\n\nforce_for_new_devices\n\n\nRenew the provisioning profiles if the device count on the developer portal has changed. Ignored for profile type 'appstore'\n\n\nfalse\n\n\n\n\n\n\nskip_confirmation\n\n\nDisables confirmation prompts during nuke, answering them with yes\n\n\nfalse\n\n\n\n\n\n\nskip_docs\n\n\nSkip generation of a README.md for the created git repository\n\n\nfalse\n\n\n\n\n\n\nplatform\n\n\nSet the provisioning profile's platform to work with (i.e. ios, tvos, macos, catalyst)\n\n\n*\n\n\n\n\n\n\nderive_catalyst_app_identifier\n\n\nEnable this if you have the Mac Catalyst capability enabled and your project was created with Xcode 11.3 or earlier. Prepends 'maccatalyst.' to the app identifier for the provisioning profile mapping\n\n\nfalse\n\n\n\n\n\n\ntemplate_name\n\n\nThe name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")\n\n\n\n\n\n\n\n\nprofile_name\n\n\nA custom name for the provisioning profile. This will replace the default provisioning profile name if specified\n\n\n\n\n\n\n\n\nfail_on_name_taken\n\n\nShould the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first\n\n\nfalse\n\n\n\n\n\n\nskip_certificate_matching\n\n\nSet to true if there is no access to Apple developer portal but there are certificates, keys and profiles provided. Only works with match import action\n\n\nfalse\n\n\n\n\n\n\noutput_path\n\n\nPath in which to export certificates, key and profile\n\n\n\n\n\n\n\n\nskip_set_partition_list\n\n\nSkips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing\n\n\nfalse\n\n\n\n\n\n\nverbose\n\n\nPrint out extra information and all commands\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nsync_code_signing\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::MATCH_PROVISIONING_PROFILE_MAPPING\n\n\nThe match provisioning profile mapping\n\n\n\n\n\n\nSharedValues::SIGH_PROFILE_TYPE\n\n\nThe profile type, can be appstore, adhoc, development, enterprise\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action sync_code_signing\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run sync_code_signing\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run sync_code_signing parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "sync_code_signing"
        },
        {
            "location": "/actions/sync_code_signing/#sync_code_signing",
            "text": "Easily sync your certificates and profiles across your team (via  match )",
            "title": "sync_code_signing"
        },
        {
            "location": "/actions/sync_code_signing/#easily-sync-your-certificates-and-profiles-across-your-team",
            "text": "A new approach to iOS and macOS code signing: Share one code signing identity across your development team to simplify your codesigning setup and prevent code signing issues.  match  is the implementation of the  codesigning.guide concept .  match  creates all required certificates & provisioning profiles and stores them in a separate git repository, Google Cloud, or Amazon S3. Every team member with access to the selected storage can use those credentials for code signing.  match  also automatically repairs broken and expired credentials. It's the easiest way to share signing credentials across teams  More information on how to get started with codesigning   \n     Why?  \u2022\n     Usage  \u2022\n     Is this secure?",
            "title": "Easily sync your certificates and profiles across your team"
        },
        {
            "location": "/actions/sync_code_signing/#why-match",
            "text": "Before starting to use  match , make sure to read the  codesigning.guide :   When deploying an app to the App Store, beta testing service or even installing it on a device, most development teams have separate code signing identities for every member. This results in dozens of profiles including a lot of duplicates.  You have to manually renew and download the latest set of provisioning profiles every time you add a new device or a certificate expires. Additionally this requires spending a lot of time when setting up a new machine that will build your app.   A new approach   Share one code signing identity across your development team to simplify your setup and prevent code signing issues. What if there was a central place where your code signing identity and profiles are kept, so anyone in the team can access them during the build process?   For more information about the concept, visit  codesigning.guide .",
            "title": "Why match?"
        },
        {
            "location": "/actions/sync_code_signing/#why-not-let-xcode-handle-all-this",
            "text": "You have full control over what happens  You have access to all the certificates and profiles, which are all securely stored in git  You share one code signing identity across the team to have fewer certificates and profiles  Xcode sometimes revokes certificates which breaks your setup causing failed builds  More predictable builds by settings profiles in an explicit way instead of using the  Automatic  setting  It just works\u2122",
            "title": "Why not let Xcode handle all this?"
        },
        {
            "location": "/actions/sync_code_signing/#what-does-match-do-for-you",
            "text": "match      \ud83d\udd04  Automatically sync your iOS and macOS keys and profiles across all your team members using git    \ud83d\udce6  Handle all the heavy lifting of creating and storing your certificates and profiles    \ud83d\udcbb  Setup codesigning on a new machine in under a minute    \ud83c\udfaf  Designed to work with apps with multiple targets and bundle identifiers    \ud83d\udd12  You have full control over your files and Git repo, no third party service involved    \u2728  Provisioning profile will always match the correct certificate    \ud83d\udca5  Easily reset your existing profiles and certificates if your current account has expired or invalid profiles    \u267b\ufe0f  Automatically renew your provisioning profiles to include all your devices using the  --force  option    \ud83d\udc65  Support for multiple Apple accounts and multiple teams    \u2728  Tightly integrated with  fastlane  to work seamlessly with  gym  and other build tools",
            "title": "What does match do for you?"
        },
        {
            "location": "/actions/sync_code_signing/#usage",
            "text": "",
            "title": "Usage"
        },
        {
            "location": "/actions/sync_code_signing/#setup",
            "text": "Optional: Create a  new, shared Apple Developer Portal account , something like  office@company.com , that will be shared across your team from now on (for more information visit  codesigning.guide )  Run the following in your project folder to start using  match :   fastlane match init   You'll be asked if you want to store your code signing identities inside a  Git repo ,  Google Cloud  or  Amazon S3 .",
            "title": "Setup"
        },
        {
            "location": "/actions/sync_code_signing/#git-storage",
            "text": "Use Git Storage to store all code signing identities in a private git repo, owned and operated by you. The files will be encrypted using OpenSSL.  First, enter the URL to your private (!) Git repo (You can create one for free on e.g.  GitHub  or  BitBucket ). The URL you enter can be either a  https://  or a  git  URL.  fastlane match init  won't read or modify your certificates or profiles yet, and also won't validate your git URL.  This will create a  Matchfile  in your current directory (or in your  ./fastlane/  folder).  Example content (for more advanced setups check out the  fastlane section ):  git_url(\"https://github.com/fastlane/certificates\")\n\napp_identifier(\"tools.fastlane.app\")\nusername(\"user@fastlane.tools\")",
            "title": "Git Storage"
        },
        {
            "location": "/actions/sync_code_signing/#git-storage-on-github",
            "text": "If your machine is currently using SSH to authenticate with GitHub, you'll want to use a  git  URL, otherwise, you may see an authentication error when you attempt to use match. Alternatively, you can set a basic authorization for  match :  Using parameter:  match(git_basic_authorization: '<YOUR KEY>')  Using environment variable:  ENV['MATCH_GIT_BASIC_AUTHORIZATION'] = '<YOUR KEY>'\nmatch  You can find more information about GitHub basic authentication and personal token generation here:  https://developer.github.com/v3/auth/#basic-authentication",
            "title": "Git Storage on GitHub"
        },
        {
            "location": "/actions/sync_code_signing/#git-storage-on-github-deploy-keys",
            "text": "If your machine does not have a private key set up for your certificates repository, you can give  match  a path for one:  Using parameter:  match(git_private_key: '<PATH TO YOUR KEY>')  Using environment variable:  ENV['MATCH_GIT_PRIVATE_KEY'] = '<PATH TO YOUR KEY>'\nmatch  You can find more information about GitHub basic authentication and personal token generation here:  https://developer.github.com/v3/auth/#basic-authentication",
            "title": "Git Storage on GitHub - Deploy keys"
        },
        {
            "location": "/actions/sync_code_signing/#git-storage-on-azure-devops",
            "text": "If you're running a pipeline on Azure DevOps and using git storage in a another repository on the same project, you might want to use  bearer  token authentication.  Using parameter:  match(git_bearer_authorization: '<YOUR TOKEN>')  Using environment variable:  ENV['MATCH_GIT_BEARER_AUTHORIZATION'] = '<YOUR TOKEN>'\nmatch  You can find more information about this use case here:  https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#authorize-access-to-your-repositories",
            "title": "Git Storage on Azure DevOps"
        },
        {
            "location": "/actions/sync_code_signing/#google-cloud-storage",
            "text": "Use  Google Cloud Storage  for a fully hosted solution for your code signing identities. Certificates are stored on Google Cloud, encrypted using Google managed keys. Everything will be stored on your Google account, inside a storage bucket you provide. You can also directly access the files using the web console.  This will create a  Matchfile  in your current directory (or in your  ./fastlane/  folder).  Example content (for more advanced setups check out the  fastlane section ):  google_cloud_bucket_name(\"major-key-certificates\")",
            "title": "Google Cloud Storage"
        },
        {
            "location": "/actions/sync_code_signing/#amazon-s3",
            "text": "Use  Amazon S3  for a fully hosted solution for your code signing identities. Certificates are stored on S3, inside a storage bucket you provide. You can also directly access the files using the web console.  This will create a  Matchfile  in your current directory (or in your  ./fastlane/  folder).  Example content (for more advanced setups check out the  fastlane section ):  s3_bucket(\"ios-certificates\")",
            "title": "Amazon S3"
        },
        {
            "location": "/actions/sync_code_signing/#multiple-teams",
            "text": "match  can store the codesigning files for multiple development teams:",
            "title": "Multiple teams"
        },
        {
            "location": "/actions/sync_code_signing/#git-storage_1",
            "text": "Use one git branch per team.  match  also supports storing certificates of multiple teams in one repo, by using separate git branches. If you work in multiple teams, make sure to set the  git_branch  parameter to a unique value per team. From there,  match  will automatically create and use the specified branch for you.  match(git_branch: \"team1\", username: \"user@team1.com\")\nmatch(git_branch: \"team2\", username: \"user@team2.com\")",
            "title": "Git Storage"
        },
        {
            "location": "/actions/sync_code_signing/#google-cloud-or-amazon-s3-storage",
            "text": "If you use Google Cloud or Amazon S3 Storage, you don't need to do anything manually. Just use Google Cloud or Amazon S3 Storage, and the top level folder will be the team ID.",
            "title": "Google Cloud or Amazon S3 Storage"
        },
        {
            "location": "/actions/sync_code_signing/#run",
            "text": "Before running  match  for the first time, you should consider clearing your existing profiles and certificates using the  match nuke command .   After running  fastlane match init  you can run the following to generate new certificates and profiles:  fastlane match appstore  fastlane match development   This will create a new certificate and provisioning profile (if required) and store them in your selected storage. \nIf you previously ran  match  with the configured storage it will automatically install the existing profiles from your storage.  The provisioning profiles are installed in  ~/Library/MobileDevice/Provisioning Profiles  while the certificates and private keys are installed in your Keychain.  To get a more detailed output of what  match  is doing use  fastlane match --verbose  For a list of all available options run  fastlane action match",
            "title": "Run"
        },
        {
            "location": "/actions/sync_code_signing/#handle-multiple-targets",
            "text": "match  can use the same one Git repository, Google Cloud, or Amazon S3 Storage for all bundle identifiers.  If you have several targets with different bundle identifiers, supply them as a comma-separated list:  fastlane match appstore -a tools.fastlane.app,tools.fastlane.app.watchkitapp  You can make this even easier using  fastlane  by creating a  certificates  lane like this:  lane :certificates do\n  match(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.app.watchkitapp\"])\nend  Then all your team has to do is run  fastlane certificates  and the keys, certificates and profiles for all targets will be synced.",
            "title": "Handle multiple targets"
        },
        {
            "location": "/actions/sync_code_signing/#handle-multiple-apps-per-developerdistribution-certificate",
            "text": "If you want to use a single developer and/or distribution certificate for multiple apps belonging to the same development team, you may use the same signing identities repository and branch to store the signing identities for your apps:  Matchfile  example for both App #1 and #2:  git_url(\"https://github.com/example/example-repo.git\")\ngit_branch(\"master\")  match  will reuse certificates and will create separate provisioning profiles for each app.",
            "title": "Handle multiple apps per developer/distribution certificate"
        },
        {
            "location": "/actions/sync_code_signing/#passphrase",
            "text": "Git Repo storage only  When running  match  for the first time on a new machine, it will ask you for the passphrase for the Git repository. This is an additional layer of security: each of the files will be encrypted using  openssl . Make sure to remember the password, as you'll need it when you run match on a different machine.  To set the passphrase to decrypt your profiles using an environment variable (and avoid the prompt) use  MATCH_PASSWORD .",
            "title": "Passphrase"
        },
        {
            "location": "/actions/sync_code_signing/#migrate-from-git-repo-to-google-cloud",
            "text": "If you're already using a Git Repo, but would like to switch to using Google Cloud Storage, run the following command to automatically migrate all your existing code signing identities and provisioning profiles  fastlane match migrate  After a successful migration you can safely delete your Git repo.",
            "title": "Migrate from Git Repo to Google Cloud"
        },
        {
            "location": "/actions/sync_code_signing/#google-cloud-access-control",
            "text": "Google Cloud Storage only  There are two cases for reading and writing certificates stored in a Google Cloud storage bucket:   Continuous integration jobs. These will authenticate to your Google Cloud project via a service account, and use a  gc_keys.json  file as credentials.  Developers on a local workstation. In this case, you should choose whether everyone on your team will create their own  gc_keys.json  file, or whether you want to manage access to the bucket directly using your developers' Google accounts.   When running  fastlane match init  the first time, the setup process will give you the option to create your  gc_keys.json  file. This file contains the authentication credentials needed to access your Google Cloud storage bucket. Make sure to keep that file secret and never add it to version control. We recommend adding  gc_keys.json  to your  .gitignore",
            "title": "Google Cloud access control"
        },
        {
            "location": "/actions/sync_code_signing/#managing-developer-access-via-keys",
            "text": "If you want to manage developer access to your certificates via authentication keys, every developer should create their own  gc_keys.json  and add the file to all their work machines. This will give the admin full control over who has read/write access to the given Storage bucket. At the same time it allows your team to revoke a single key if a file gets compromised.",
            "title": "Managing developer access via keys"
        },
        {
            "location": "/actions/sync_code_signing/#managing-developer-access-via-google-accounts",
            "text": "If your developers already have Google accounts and access to your Google Cloud project, you can also manage access to the storage bucket via  Cloud Identity and Access Management (IAM) . Just  set up  individual developer accounts or an entire Google Group containing your team as readers and writers on your storage bucket.  You can then specify the Google Cloud project id containing your storage bucket in your  Matchfile :  storage_mode(\"google_cloud\")\ngoogle_cloud_bucket_name(\"my-app-certificates\")\ngoogle_cloud_project_id(\"my-app-project\")  This lets developers on your team use  Application Default Credentials  when accessing your storage bucket. After installing the  Google Cloud SDK , they only need to run the following command once:  gcloud auth application-default login  ... and log in with their Google account. Then, when they run  fastlane match ,  match  will use these credentials to read from and write to the storage bucket.",
            "title": "Managing developer access via Google accounts"
        },
        {
            "location": "/actions/sync_code_signing/#new-machine",
            "text": "To set up the certificates and provisioning profiles on a new machine, you just run the same command using:  fastlane match development  You can also run  match  in a  readonly  mode to be sure it won't create any new certificates or profiles.  fastlane match development --readonly  We recommend to always use  readonly  mode when running  fastlane  on CI systems. This can be done using  lane :beta do\n  match(type: \"appstore\", readonly: is_ci)\n\n  gym(scheme: \"Release\")\nend",
            "title": "New machine"
        },
        {
            "location": "/actions/sync_code_signing/#access-control",
            "text": "A benefit of using  match  is that it enables you to give the developers of your team access to the code signing certificates without having to give everyone access to the Developer Portal:   Run  match  to store the certificates in a Git repo or Google Cloud Storage  Grant access to the Git repo / Google Cloud Storage Bucket to your developers and give them the passphrase (for git storage)  The developers can now run  match  which will install the latest code signing profiles so they can build and sign the application without having to have access to the Apple Developer Portal  Every time you run  match  to update the profiles (e.g. add a new device), all your developers will automatically get the latest profiles when running  match   If you decide to run  match  without access to the Developer Portal, make sure to use the  --readonly  option so that the commands don't ask you for the password to the Developer Portal.  The advantage of this approach is that no one in your team will revoke a certificate by mistake, while having all code signing secrets in one location.",
            "title": "Access Control"
        },
        {
            "location": "/actions/sync_code_signing/#folder-structure",
            "text": "After running  match  for the first time, your Git repo or Google Cloud bucket will contain 2 directories:   The  certs  folder contains all certificates with their private keys  The  profiles  folder contains all provisioning profiles   Additionally,  match  creates a nice repo  README.md  for you, making it easy to onboard new team members:  \n     In the case of Google Cloud, the top level folder will be the team ID.",
            "title": "Folder structure"
        },
        {
            "location": "/actions/sync_code_signing/#fastlane",
            "text": "Add  match  to your  Fastfile  to automatically fetch the latest code signing certificates with  fastlane .  match(type: \"appstore\")\n\nmatch(type: \"development\")\n\nmatch(type: \"adhoc\",\n      app_identifier: \"tools.fastlane.app\")\n\nmatch(type: \"enterprise\",\n      app_identifier: \"tools.fastlane.app\")\n\n# _match_ should be called before building the app with _gym_\ngym\n# ...",
            "title": "fastlane"
        },
        {
            "location": "/actions/sync_code_signing/#registering-new-devices",
            "text": "By using  match , you'll save a lot of time every time you add new device to your Ad Hoc or Development profiles. Use  match  in combination with the  register_devices  action.  lane :beta do\n  register_devices(devices_file: \"./devices.txt\")\n  match(type: \"adhoc\", force_for_new_devices: true)\nend  By using the  force_for_new_devices  parameter,  match  will check if the (enabled) device count has changed since the last time you ran  match , and automatically re-generate the provisioning profile if necessary. You can also use  force: true  to re-generate the provisioning profile on each run.  Important:  The  force_for_new_devices  parameter is ignored for App Store provisioning profiles since they don't contain any device information.  If you're not using  fastlane , you can also use the  force_for_new_devices  option from the command line:  fastlane match adhoc --force_for_new_devices",
            "title": "Registering new devices"
        },
        {
            "location": "/actions/sync_code_signing/#templates-aka-custom-entitlements",
            "text": "Match can generate profiles that contain custom entitlements by passing in the entitlement's name with the  template_name  parameter.  match(type: \"development\",\n      template_name: \"Apple Pay Pass Suppression Development\")",
            "title": "Templates (aka: custom entitlements)"
        },
        {
            "location": "/actions/sync_code_signing/#setup-xcode-project",
            "text": "Docs on how to set up your Xcode project",
            "title": "Setup Xcode project"
        },
        {
            "location": "/actions/sync_code_signing/#to-build-from-the-command-line-using-fastlane",
            "text": "match  automatically pre-fills environment variables with the UUIDs of the correct provisioning profiles, ready to be used in your Xcode project.  More information about how to setup your Xcode project can be found  here",
            "title": "To build from the command line using fastlane"
        },
        {
            "location": "/actions/sync_code_signing/#to-build-from-xcode-manually",
            "text": "This is useful when installing your application on your device using the Development profile.  You can statically select the right provisioning profile in your Xcode project (the name will be  match Development tools.fastlane.app ).  Docs on how to set up your Xcode project",
            "title": "To build from Xcode manually"
        },
        {
            "location": "/actions/sync_code_signing/#continuous-integration",
            "text": "",
            "title": "Continuous Integration"
        },
        {
            "location": "/actions/sync_code_signing/#git-repo-access",
            "text": "There is one tricky part of setting up a CI system to work with  match , which is enabling the CI to access the repo. Usually you'd just add your CI's public ssh key as a deploy key to your  match  repo, but since your CI will already likely be using its public ssh key to access the codebase repo,  you won't be able to do that .  Some repo hosts might allow you to use the same deploy key for different repos, but GitHub will not. If your host does, you don't need to worry about this, just add your CI's public ssh key as a deploy key for your  match  repo and scroll down to \" Encryption password \".  There are a few ways around this:   Create a new account on your repo host with read-only access to your  match  repo. Bitrise have a good description of this  here .  Some CIs allow you to upload your signing credentials manually, but obviously this means that you'll have to re-upload the profiles/keys/certs each time they change.   Neither solution is pretty. It's one of those  trade-off  things. Do you care more about  not  having an extra account sitting around, or do you care more about having the :sparkles: of auto-syncing of credentials.",
            "title": "Git repo access"
        },
        {
            "location": "/actions/sync_code_signing/#git-repo-encryption-password",
            "text": "Once you've decided which approach to take, all that's left to do is to set your encryption password as secret environment variable named  MATCH_PASSWORD .  match  will pick this up when it's run.",
            "title": "Git repo encryption password"
        },
        {
            "location": "/actions/sync_code_signing/#google-cloud-storage-access",
            "text": "Accessing Google Cloud Storage from your CI system requires you to provide the  gc_keys.json  file as part of your build. How you implement this is your decision. You can inject that file during build time.",
            "title": "Google Cloud Storage access"
        },
        {
            "location": "/actions/sync_code_signing/#amazon-s3-storage-access",
            "text": "Accessing Amazon S3 Storage from your CI system requires you to provide the  s3_region ,  s3_access_key ,  s3_secret_access_key  and  s3_bucket  options (or environment variables), with keys that has read access to the bucket.",
            "title": "Amazon S3 Storage access"
        },
        {
            "location": "/actions/sync_code_signing/#nuke",
            "text": "If you never really cared about code signing and have a messy Apple Developer account with a lot of invalid, expired or Xcode managed profiles/certificates, you can use the  match nuke  command to revoke your certificates and provisioning profiles. Don't worry, apps that are already available in the App Store / TestFlight will still work. Builds distributed via Ad Hoc or Enterprise will be disabled after nuking your account, so you'll have to re-upload a new build. After clearing your account you'll start from a clean state, and you can run  match  to generate your certificates and profiles again.  To revoke all certificates and provisioning profiles for a specific environment:  fastlane match nuke development\nfastlane match nuke distribution\nfastlane match nuke enterprise   You'll have to confirm a list of profiles / certificates that will be deleted.",
            "title": "Nuke"
        },
        {
            "location": "/actions/sync_code_signing/#advanced-git-storage-features",
            "text": "",
            "title": "Advanced Git Storage features"
        },
        {
            "location": "/actions/sync_code_signing/#change-password",
            "text": "To change the password of your repo and therefore decrypting and encrypting all files run:  fastlane match change_password  You'll be asked for the new password on all your machines on the next run.",
            "title": "Change Password"
        },
        {
            "location": "/actions/sync_code_signing/#import",
            "text": "To import and encrypt a certificate ( .cer ), the private key ( .p12 ) and the provisioning profiles ( .mobileprovision  or  .provisionprofile ) into the  match  repo run:  fastlane match import  You'll be prompted for the certificate ( .cer ), the private key ( .p12 ) and the provisioning profiles ( .mobileprovision  or  .provisionprofile ) paths.  match  will first validate the certificate ( .cer ) against the Developer Portal before importing the certificate, the private key and the provisioning profiles into the specified  match  repository.  However if there is no access to the developer portal but there are certificates, private keys and profiles provided, you can use the  skip_certificate_matching  option to tell  match  not to verify the certificates. Like this:  fastlane match import --skip_certificate_matching true  This will skip login to Apple Developer Portal and will import the provided certificate, private key and profile directly to the certificates repo.  Please be careful when using this option and ensure the certificates and profiles match the type (development, adhoc, appstore, enterprise, developer_id) and are not revoked or expired.",
            "title": "Import"
        },
        {
            "location": "/actions/sync_code_signing/#manual-decrypt",
            "text": "If you want to manually decrypt a file you can.  openssl aes-256-cbc -k \"<password>\" -in \"<fileYouWantToDecryptPath>\" -out \"<decryptedFilePath>\" -a -d",
            "title": "Manual Decrypt"
        },
        {
            "location": "/actions/sync_code_signing/#export-distribution-certificate-and-private-key-as-single-p12-file",
            "text": "match  stores the certificate ( .cer ) and the private key ( .p12 ) files separately. The following steps will repackage the separate certificate and private key into a single  .p12  file.  Decrypt your cert found in  certs/<type>/<unique-id>.cer  as a pem file:  openssl aes-256-cbc -k \"<password>\" -in \"certs/<type>/<unique-id>.cer\" -out \"cert.der\" -a -d -md [md5|sha256]\nopenssl x509 -inform der -in cert.der -out cert.pem  Decrypt your private key found in  certs/<type>/<unique-id>.p12  as a pem file:  openssl aes-256-cbc -k \"<password>\" -in \"certs/distribution/<unique-id>.p12\" -out \"key.pem\" -a -d -md [md5|sha256]  Generate an encrypted p12 file with the same or new password:  openssl pkcs12 -export -out \"cert.p12\" -inkey \"key.pem\" -in \"cert.pem\" -password pass:<password>",
            "title": "Export Distribution Certificate and Private Key as Single .p12 File"
        },
        {
            "location": "/actions/sync_code_signing/#is-this-secure",
            "text": "",
            "title": "Is this secure?"
        },
        {
            "location": "/actions/sync_code_signing/#git",
            "text": "Both your keys and provisioning profiles are encrypted using OpenSSL using a passphrase.  Storing your private keys in a Git repo may sound off-putting at first. We did an analysis of potential security issues, see section below.",
            "title": "Git"
        },
        {
            "location": "/actions/sync_code_signing/#google-cloud-storage_1",
            "text": "All your keys and provisioning profiles are encrypted using Google managed keys.",
            "title": "Google Cloud Storage"
        },
        {
            "location": "/actions/sync_code_signing/#what-could-happen-if-someone-stole-a-private-key",
            "text": "If attackers would have your certificate and provisioning profile, they could codesign an application with the same bundle identifier.  What's the worst that could happen for each of the profile types?",
            "title": "What could happen if someone stole a private key?"
        },
        {
            "location": "/actions/sync_code_signing/#app-store-profiles",
            "text": "An App Store profile can't be used for anything as long as it's not re-signed by Apple. The only way to get an app resigned is to submit an app for review which could take anywhere from 24 hours to a few days (checkout  appreviewtimes.com  for up-to-date expectations). Attackers could only submit an app for review, if they also got access to your App Store Connect credentials (which are not stored in git, but in your local keychain). Additionally you get an email notification every time a build gets uploaded to cancel the submission even before your app gets into the review stage.",
            "title": "App Store Profiles"
        },
        {
            "location": "/actions/sync_code_signing/#development-and-ad-hoc-profiles",
            "text": "In general those profiles are harmless as they can only be used to install a signed application on a small subset of devices. To add new devices, the attacker would also need your Apple Developer Portal credentials (which are not stored in git, but in your local keychain).",
            "title": "Development and Ad Hoc Profiles"
        },
        {
            "location": "/actions/sync_code_signing/#enterprise-profiles",
            "text": "Attackers could use an In-House profile to distribute signed application to a potentially unlimited number of devices. All this would run under your company name and it could eventually lead to Apple revoking your In-House account. However it is very easy to revoke a certificate to remotely break the app on all devices.  Because of the potentially dangerous nature of In-House profiles please use  match  with enterprise profiles with caution, ensure your git repository is private and use a secure password.",
            "title": "Enterprise Profiles"
        },
        {
            "location": "/actions/sync_code_signing/#to-sum-up",
            "text": "You have full control over the access list of your Git repo, no third party service involved  Even if your certificates are leaked, they can't be used to cause any harm without your App Store Connect login credentials  Use In-House enterprise profile with  match  with caution  If you use GitHub or Bitbucket we encourage enabling 2 factor authentication for all accounts that have access to the certificates repo  The complete source code of  match  is fully open source on  GitHub       sync_code_signing       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "To sum up"
        },
        {
            "location": "/actions/sync_code_signing/#4-examples",
            "text": "sync_code_signing(type: \"appstore\", app_identifier: \"tools.fastlane.app\")  sync_code_signing(type: \"development\", readonly: true)  sync_code_signing(app_identifier: [\"tools.fastlane.app\", \"tools.fastlane.sleepy\"])  match   # alias for \"sync_code_signing\"",
            "title": "4 Examples"
        },
        {
            "location": "/actions/sync_code_signing/#parameters",
            "text": "Key  Description  Default      type  Define the profile type, can be appstore, adhoc, development, enterprise, developer_id, mac_installer_distribution  development    additional_cert_types  Create additional cert types needed for macOS installers (valid values: mac_installer_distribution, developer_id_installer)     readonly  Only fetch existing certificates and profiles, don't generate new ones  false    generate_apple_certs  Create a certificate type for Xcode 11 and later (Apple Development or Apple Distribution)  *    skip_provisioning_profiles  Skip syncing provisioning profiles  false    app_identifier  The bundle identifier(s) of your app (comma-separated string or array of strings)  *    api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    team_id  The ID of your Developer Portal team if you're in multiple teams  *    team_name  The name of your Developer Portal team if you're in multiple teams  *    storage_mode  Define where you want to store your certificates  git    git_url  URL to the git repo containing all the certificates     git_branch  Specific git branch to use  master    git_full_name  git user full name to commit     git_user_email  git user email to commit     shallow_clone  Make a shallow clone of the repository (truncate the history to 1 revision)  false    clone_branch_directly  Clone just the branch specified, instead of the whole repo. This requires that the branch already exists. Otherwise the command will fail  false    git_basic_authorization  Use a basic authorization header to access the git repo (e.g.: access via HTTPS, GitHub Actions, etc), usually a string in Base64     git_bearer_authorization  Use a bearer authorization header to access the git repo (e.g.: access to an Azure DevOps repository), usually a string in Base64     git_private_key  Use a private key to access the git repo (e.g.: access to GitHub repository via Deploy keys), usually a id_rsa named file or the contents hereof     google_cloud_bucket_name  Name of the Google Cloud Storage bucket to use     google_cloud_keys_file  Path to the gc_keys.json file     google_cloud_project_id  ID of the Google Cloud project to use for authentication     s3_region  Name of the S3 region     s3_access_key  S3 access key     s3_secret_access_key  S3 secret access key     s3_bucket  Name of the S3 bucket     s3_object_prefix  Prefix to be used on all objects uploaded to S3     keychain_name  Keychain the items should be imported to  login.keychain    keychain_password  This might be required the first time you access certificates on a new mac. For the login/default keychain this is your macOS account password     force  Renew the provisioning profiles every time you run match  false    force_for_new_devices  Renew the provisioning profiles if the device count on the developer portal has changed. Ignored for profile type 'appstore'  false    skip_confirmation  Disables confirmation prompts during nuke, answering them with yes  false    skip_docs  Skip generation of a README.md for the created git repository  false    platform  Set the provisioning profile's platform to work with (i.e. ios, tvos, macos, catalyst)  *    derive_catalyst_app_identifier  Enable this if you have the Mac Catalyst capability enabled and your project was created with Xcode 11.3 or earlier. Prepends 'maccatalyst.' to the app identifier for the provisioning profile mapping  false    template_name  The name of provisioning profile template. If the developer account has provisioning profile templates (aka: custom entitlements), the template name can be found by inspecting the Entitlements drop-down while creating/editing a provisioning profile (e.g. \"Apple Pay Pass Suppression Development\")     profile_name  A custom name for the provisioning profile. This will replace the default provisioning profile name if specified     fail_on_name_taken  Should the command fail if it was about to create a duplicate of an existing provisioning profile. It can happen due to issues on Apple Developer Portal, when profile to be recreated was not properly deleted first  false    skip_certificate_matching  Set to true if there is no access to Apple developer portal but there are certificates, keys and profiles provided. Only works with match import action  false    output_path  Path in which to export certificates, key and profile     skip_set_partition_list  Skips setting the partition list (which can sometimes take a long time). Setting the partition list is usually needed to prevent Xcode from prompting to allow a cert to be used for signing  false    verbose  Print out extra information and all commands  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/sync_code_signing/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  sync_code_signing  action generates the following Lane Variables:     SharedValue  Description      SharedValues::MATCH_PROVISIONING_PROFILE_MAPPING  The match provisioning profile mapping    SharedValues::SIGH_PROFILE_TYPE  The profile type, can be appstore, adhoc, development, enterprise     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/sync_code_signing/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action sync_code_signing",
            "title": "Documentation"
        },
        {
            "location": "/actions/sync_code_signing/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run sync_code_signing  To pass parameters, make use of the  :  symbol, for example  fastlane run sync_code_signing parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/sync_code_signing/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/team_id/",
            "text": "team_id\n\n\nSpecify the Team ID you want to use for the Apple Developer Portal\n\n\n\n\n\n\n\n\nteam_id\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nteam_id(\"Q2CBPK58CA\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action team_id\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run team_id\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run team_id parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "team_id"
        },
        {
            "location": "/actions/team_id/#team_id",
            "text": "Specify the Team ID you want to use for the Apple Developer Portal     team_id       Supported platforms  ios    Author  @KrauseFx",
            "title": "team_id"
        },
        {
            "location": "/actions/team_id/#1-example",
            "text": "team_id(\"Q2CBPK58CA\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/team_id/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action team_id",
            "title": "Documentation"
        },
        {
            "location": "/actions/team_id/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run team_id  To pass parameters, make use of the  :  symbol, for example  fastlane run team_id parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/team_id/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/team_name/",
            "text": "team_name\n\n\nSet a team to use by its name\n\n\n\n\n\n\n\n\nteam_name\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nteam_name(\"Felix Krause\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action team_name\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run team_name\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run team_name parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "team_name"
        },
        {
            "location": "/actions/team_name/#team_name",
            "text": "Set a team to use by its name     team_name       Supported platforms  ios    Author  @KrauseFx",
            "title": "team_name"
        },
        {
            "location": "/actions/team_name/#1-example",
            "text": "team_name(\"Felix Krause\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/team_name/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action team_name",
            "title": "Documentation"
        },
        {
            "location": "/actions/team_name/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run team_name  To pass parameters, make use of the  :  symbol, for example  fastlane run team_name parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/team_name/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/testfairy/",
            "text": "testfairy\n\n\nUpload a new build to \nTestFairy\n\n\n\n\nYou can retrieve your API key on \nyour settings page\n\n\n\n\n\n\n\n\n\n\ntestfairy\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@taka0125, @tcurdt, @vijaysharm, @cdm2012\n\n\n\n\n\n\n\n\n2 Examples\n\n\ntestfairy(\n  api_key: \"...\",\n  ipa: \"./ipa_file.ipa\",\n  comment: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n)\n\n\n\n\ntestfairy(\n  api_key: \"...\",\n  apk: \"../build/app/outputs/apk/qa/release/app-qa-release.apk\",\n  comment: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n )\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key\n\n\nAPI Key for TestFairy\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your IPA file for iOS\n\n\n*\n\n\n\n\n\n\napk\n\n\nPath to your APK file for Android\n\n\n*\n\n\n\n\n\n\nsymbols_file\n\n\nSymbols mapping file\n\n\n*\n\n\n\n\n\n\nupload_url\n\n\nAPI URL for TestFairy\n\n\nhttps://upload.testfairy.com\n\n\n\n\n\n\ntesters_groups\n\n\nArray of tester groups to be notified\n\n\n[]\n\n\n\n\n\n\nmetrics\n\n\nArray of metrics to record (cpu,memory,network,phone_signal,gps,battery,mic,wifi)\n\n\n[]\n\n\n\n\n\n\ncomment\n\n\nAdditional release notes for this upload. This text will be added to email notifications\n\n\nNo comment provided\n\n\n\n\n\n\nauto_update\n\n\nAllows an easy upgrade of all users to the current version. To enable set to 'on'\n\n\noff\n\n\n\n\n\n\nnotify\n\n\nSend email to testers\n\n\noff\n\n\n\n\n\n\noptions\n\n\nArray of options (shake,video_only_wifi,anonymous)\n\n\n[]\n\n\n\n\n\n\ncustom\n\n\nArray of custom options. Contact support@testfairy.com for more information\n\n\n''\n\n\n\n\n\n\ntimeout\n\n\nRequest timeout in seconds\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ntestfairy\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::TESTFAIRY_BUILD_URL\n\n\nURL for the sessions of the newly uploaded build\n\n\n\n\n\n\nSharedValues::TESTFAIRY_DOWNLOAD_URL\n\n\nURL directly to the newly uploaded build\n\n\n\n\n\n\nSharedValues::TESTFAIRY_LANDING_PAGE\n\n\nURL of the build's landing page\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action testfairy\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run testfairy\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run testfairy parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "testfairy"
        },
        {
            "location": "/actions/testfairy/#testfairy",
            "text": "Upload a new build to  TestFairy   You can retrieve your API key on  your settings page      testfairy       Supported platforms  ios, android    Author  @taka0125, @tcurdt, @vijaysharm, @cdm2012",
            "title": "testfairy"
        },
        {
            "location": "/actions/testfairy/#2-examples",
            "text": "testfairy(\n  api_key: \"...\",\n  ipa: \"./ipa_file.ipa\",\n  comment: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n)  testfairy(\n  api_key: \"...\",\n  apk: \"../build/app/outputs/apk/qa/release/app-qa-release.apk\",\n  comment: \"Build #{lane_context[SharedValues::BUILD_NUMBER]}\",\n )",
            "title": "2 Examples"
        },
        {
            "location": "/actions/testfairy/#parameters",
            "text": "Key  Description  Default      api_key  API Key for TestFairy     ipa  Path to your IPA file for iOS  *    apk  Path to your APK file for Android  *    symbols_file  Symbols mapping file  *    upload_url  API URL for TestFairy  https://upload.testfairy.com    testers_groups  Array of tester groups to be notified  []    metrics  Array of metrics to record (cpu,memory,network,phone_signal,gps,battery,mic,wifi)  []    comment  Additional release notes for this upload. This text will be added to email notifications  No comment provided    auto_update  Allows an easy upgrade of all users to the current version. To enable set to 'on'  off    notify  Send email to testers  off    options  Array of options (shake,video_only_wifi,anonymous)  []    custom  Array of custom options. Contact support@testfairy.com for more information  ''    timeout  Request timeout in seconds      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/testfairy/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  testfairy  action generates the following Lane Variables:     SharedValue  Description      SharedValues::TESTFAIRY_BUILD_URL  URL for the sessions of the newly uploaded build    SharedValues::TESTFAIRY_DOWNLOAD_URL  URL directly to the newly uploaded build    SharedValues::TESTFAIRY_LANDING_PAGE  URL of the build's landing page     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/testfairy/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action testfairy",
            "title": "Documentation"
        },
        {
            "location": "/actions/testfairy/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run testfairy  To pass parameters, make use of the  :  symbol, for example  fastlane run testfairy parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/testfairy/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/testflight/",
            "text": "testflight\n\n\nAlias for the \nupload_to_testflight\n action\n\n\n\n  \n\n\n\n\n\nThe best way to manage your TestFlight testers and builds from your terminal\n\n\nPilot makes it easier to manage your app on Apple\u2019s TestFlight. You can:\n\n\n\n\nUpload & distribute builds\n\n\nAdd & remove testers\n\n\nRetrieve information about testers & devices\n\n\nImport/export all available testers\n\n\n\n\npilot\n uses \nspaceship.airforce\n to interact with App Store Connect \ud83d\ude80\n\n\n\n\n\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\npilot\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nUsage\n\n\nFor all commands, you can either use an \nAPI Key\n or your \nApple ID\n.\n\n\nApp Store Connect API Key\n\n\nThe App Store Connect API Key is the preferred authentication method (if you are able to use it).\n\n\n\n\nUses official App Store Connect API\n\n\nNo need for 2FA\n\n\nBetter performance over Apple ID\n\n\n\n\nSpecify the API key using \n--api_key_path ./path/to/api_key_info.json\n or \n--api_key \"{\\\"key_id\\\": \\\"D83848D23\\\", \\\"issuer_id\\\": \\\"227b0bbf-ada8-458c-9d62-3d8022b7d07f\\\", \\\"key_filepath\\\": \\\"D83848D23.p8\\\"}\"\n\n\nGo to \nUsing App Store Connect API\n for information on obtaining an API key, the \nfastlane\n \napi_key_info.json\n format, and other API key usage.\n\n\nApple ID\n\n\nSpecify the Apple ID to use using \n-u felix@krausefx.com\n. If you execute \npilot\n in a project already using \nfastlane\n the username and app identifier will automatically be determined.\n\n\nUploading builds\n\n\nTo upload a new build, just run\n\n\nfastlane pilot upload\n\n\n\n\nThis will automatically look for an \nipa\n in your current directory and tries to fetch the login credentials from your \nfastlane setup\n.\n\n\nYou'll be asked for any missing information. Additionally, you can pass all kinds of parameters:\n\n\nfastlane action pilot\n\n\n\n\nYou can pass a changelog using\n\n\nfastlane pilot upload --changelog \"Something that is new here\"\n\n\n\n\nYou can also skip the submission of the binary, which means, the \nipa\n file will only be uploaded and not distributed to testers:\n\n\nfastlane pilot upload --skip_submission\n\n\n\n\npilot\n does all kinds of magic for you:\n\n\n\n\nAutomatically detects the bundle identifier from your \nipa\n file\n\n\nAutomatically fetch the AppID of your app based on the bundle identifier\n\n\n\n\npilot\n uses \nspaceship\n to submit the build metadata and the iTunes Transporter to upload the binary. Because iTunes Transporter's upload capability is only supported on OS X, \npilot upload\n does not work on Linux, as described \nin this issue\n\n\nList builds\n\n\nTo list all builds for specific application use\n\n\nfastlane pilot builds\n\n\n\n\nThe result lists all active builds and processing builds:\n\n\n+-----------+---------+----------+\n|      Great App Builds          |\n+-----------+---------+----------+\n| Version # | Build # | Installs |\n+-----------+---------+----------+\n| 0.9.13    | 1       | 0        |\n| 0.9.13    | 2       | 0        |\n| 0.9.20    | 3       | 0        |\n| 0.9.20    | 4       | 3        |\n+-----------+---------+----------+\n\n\n\n\nManaging beta testers\n\n\nList of Testers\n\n\nThis command will list all your testers, both internal and external.\n\n\nfastlane pilot list\n\n\n\n\nThe output will look like this:\n\n\n+--------+--------+--------------------------+-----------+\n|                    Internal Testers                    |\n+--------+--------+--------------------------+-----------+\n| First  | Last   | Email                    | # Devices |\n+--------+--------+--------------------------+-----------+\n| Felix  | Krause | felix@krausefx.com       | 2         |\n+--------+--------+--------------------------+-----------+\n\n+-----------+---------+----------------------------+-----------+\n|                       External Testers                       |\n+-----------+---------+----------------------------+-----------+\n| First     | Last    | Email                      | # Devices |\n+-----------+---------+----------------------------+-----------+\n| Max       | Manfred | email@email.com            | 0         |\n| Detlef    | M\u00fcller  | detlef@krausefx.com        | 1         |\n+-----------+---------+----------------------------+-----------+\n\n\n\n\nAdd a new tester\n\n\nTo add a new tester to both your App Store Connect account and to your app (if given), use the \npilot add\n command. This will create a new tester (if necessary) or add an existing tester to the app to test.\n\n\nfastlane pilot add email@invite.com\n\n\n\n\nAdditionally you can specify the app identifier (if necessary):\n\n\nfastlane pilot add email@email.com -a com.krausefx.app\n\n\n\n\nFind a tester\n\n\nTo find a specific tester use\n\n\nfastlane pilot find felix@krausefx.com\n\n\n\n\nThe resulting output will look like this:\n\n\n+---------------------+---------------------+\n|            felix@krausefx.com             |\n+---------------------+---------------------+\n| First name          | Felix               |\n| Last name           | Krause              |\n| Email               | felix@krausefx.com  |\n| Latest Version      | 0.9.14 (23          |\n| Latest Install Date | 03/28/15 19:00      |\n| 2 Devices           | \u2022 iPhone 6, iOS 8.3 |\n|                     | \u2022 iPhone 5, iOS 7.0 |\n+---------------------+---------------------+\n\n\n\n\nRemove a tester\n\n\nThis command will only remove external beta testers.\n\n\nfastlane pilot remove felix@krausefx.com\n\n\n\n\nExport testers\n\n\nTo export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.\n\n\nfastlane pilot export\n\n\n\n\nImport testers\n\n\nAdd external testers from a CSV file. Create a file (ex: \ntesters.csv\n) and fill it with the following format:\n\n\nJohn,Appleseed,appleseed_john@mac.com,group-1;group-2\n\n\n\n\nfastlane pilot import\n\n\n\n\nYou can also specify the directory using\n\n\nfastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv\n\n\n\n\nTips\n\n\nDebug information\n\n\nIf you run into any issues you can use the \nverbose\n mode to get a more detailed output:\n\n\nfastlane pilot upload --verbose\n\n\n\n\nFirewall Issues\n\n\npilot\n uses the iTunes \nTransporter\n to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol from the command line using\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...\n\n\n\n\nIf you are using \npilot\n via the \nfastlane action\n, add the following to your \nFastfile\n\n\nENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...\n\n\n\n\nNote, however, that Apple recommends you don\u2019t specify the \n-t transport\n and instead allow Transporter to use automatic transport discovery to determine the best transport mode for your packages. For this reason, if the \nt\n option is passed, we will raise a warning.\n\n\nAlso note that \n-t\n is not the only additional parameter that can be used. The string specified in the \nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\n environment variable will be forwarded to Transporter. For all the available options, check \nApple's Transporter User Guide\n.\n\n\nCredentials Issues\n\n\nIf your password contains special characters, \npilot\n may throw a confusing error saying your \"Your Apple ID or password was entered incorrectly\". The easiest way to fix this error is to change your password to something that \ndoes not\n contains special characters.\n\n\nHow is my password stored?\n\n\npilot\n uses the \nCredentialsManager\n from \nfastlane\n.\n\n\nProvider Short Name\n\n\nIf you are on multiple App Store Connect teams, iTunes Transporter may need a provider short name to know where to upload your binary. \npilot\n will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the \nitc_provider\n option.\n\n\nUse an Application Specific Password to upload\n\n\npilot\n/\nupload_to_testflight\n can use an \nApplication Specific Password via the \nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\n environment variable\n to upload a binary if both the \nskip_waiting_for_build_processing\n and \napple_id\n options are set. (If any of those are not set, it will use the normal Apple login process that might require 2FA authentication.)\n\n\nRole for App Store Connect User\n\n\npilot\n/\nupload_to_testflight\n updates build information and testers after the build has finished processing. App Store Connect requires the  \"App Manager\" or \"Admin\" role for your Apple account to update this information. The \"Developer\" role will allow builds to be uploaded but \nwill not\n allow updating of build information and testers.\n\n\n\n\n\n\n\n\n\n\n\ntestflight\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n7 Examples\n\n\nupload_to_testflight\n\n\n\n\ntestflight # alias for \"upload_to_testflight\"\n\n\n\n\npilot # alias for \"upload_to_testflight\"\n\n\n\n\nupload_to_testflight(skip_submission: true) # to only upload the build\n\n\n\n\nupload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\nupload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)\n\n\n\n\nupload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-defafult\",\n      privacy_policy_url: \"https://example.com/privacy-defafult\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to upload or manage testers (optional)\n\n\n*\n\n\n\n\n\n\napp_platform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\napple_id\n\n\nApple ID property in the App Information section in App Store Connect\n\n\n*\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to upload\n\n\n*\n\n\n\n\n\n\ndemo_account_required\n\n\nDo you need a demo account when Apple does review?\n\n\nfalse\n\n\n\n\n\n\nbeta_app_review_info\n\n\nBeta app review information for contact info and demo account\n\n\n\n\n\n\n\n\nlocalized_app_info\n\n\nLocalized beta app test info for description, feedback email, marketing url, and privacy policy\n\n\n\n\n\n\n\n\nbeta_app_description\n\n\nProvide the 'Beta App Description' when uploading a new build\n\n\n\n\n\n\n\n\nbeta_app_feedback_email\n\n\nProvide the beta app email when uploading a new build\n\n\n\n\n\n\n\n\nlocalized_build_info\n\n\nLocalized beta app test info for what's new\n\n\n\n\n\n\n\n\nchangelog\n\n\nProvide the 'What to Test' text when uploading a new build\n\n\n\n\n\n\n\n\nskip_submission\n\n\nSkip the distributing action of pilot and only upload the ipa file\n\n\nfalse\n\n\n\n\n\n\nskip_waiting_for_build_processing\n\n\nIf set to true, the \ndistribute_external\n option won't work and no build will be distributed to testers. (You might want to use this option if you are using this action on CI and have to pay for 'minutes used' on your CI plan). If set to \ntrue\n and a changelog is provided, it will partially wait for the build to appear on AppStore Connect so the changelog can be set, and skip the remaining processing steps\n\n\nfalse\n\n\n\n\n\n\nupdate_build_info_on_upload\n\n\nDEPRECATED!\n Update build info immediately after validation. This is deprecated and will be removed in a future release. App Store Connect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n\n\nfalse\n\n\n\n\n\n\ndistribute_only\n\n\nDistribute a previously uploaded build (equivalent to the \nfastlane pilot distribute\n command)\n\n\nfalse\n\n\n\n\n\n\nuses_non_exempt_encryption\n\n\nProvide the 'Uses Non-Exempt Encryption' for export compliance. This is used if there is 'ITSAppUsesNonExemptEncryption' is not set in the Info.plist\n\n\nfalse\n\n\n\n\n\n\ndistribute_external\n\n\nShould the build be distributed to external testers?\n\n\nfalse\n\n\n\n\n\n\nnotify_external_testers\n\n\nShould notify external testers?\n\n\ntrue\n\n\n\n\n\n\napp_version\n\n\nThe version number of the application build to distribute. If the version number is not specified, then the most recent build uploaded to TestFlight will be distributed. If specified, the most recent build for the version number will be distributed\n\n\n\n\n\n\n\n\nbuild_number\n\n\nThe build number of the application build to distribute. If the build number is not specified, the most recent build is distributed\n\n\n\n\n\n\n\n\nexpire_previous_builds\n\n\nShould expire previous builds?\n\n\nfalse\n\n\n\n\n\n\nfirst_name\n\n\nThe tester's first name\n\n\n\n\n\n\n\n\nlast_name\n\n\nThe tester's last name\n\n\n\n\n\n\n\n\nemail\n\n\nThe tester's email\n\n\n\n\n\n\n\n\ntesters_file_path\n\n\nPath to a CSV file of testers\n\n\n./testers.csv\n\n\n\n\n\n\ngroups\n\n\nAssociate tester to one group or more by group name / group id. E.g. \n-g \"Team 1\",\"Team 2\"\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n\n\n*\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run \npathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off\n. The short names of providers should be listed in the second column\n\n\n\n\n\n\n\n\nwait_processing_interval\n\n\nInterval in seconds to wait for App Store Connect processing\n\n\n30\n\n\n\n\n\n\nwait_for_uploaded_build\n\n\nDEPRECATED!\n No longer needed with the transition over to the App Store Connect API - Use version info from uploaded ipa file to determine what build to use for distribution. If set to false, latest processing or any latest build will be used\n\n\nfalse\n\n\n\n\n\n\nreject_build_waiting_for_review\n\n\nExpire previous if it's 'waiting for review'\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action testflight\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run testflight\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run testflight parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "testflight"
        },
        {
            "location": "/actions/testflight/#testflight",
            "text": "Alias for the  upload_to_testflight  action",
            "title": "testflight"
        },
        {
            "location": "/actions/testflight/#the-best-way-to-manage-your-testflight-testers-and-builds-from-your-terminal",
            "text": "Pilot makes it easier to manage your app on Apple\u2019s TestFlight. You can:   Upload & distribute builds  Add & remove testers  Retrieve information about testers & devices  Import/export all available testers   pilot  uses  spaceship.airforce  to interact with App Store Connect \ud83d\ude80   \n     Usage  \u2022\n     Tips",
            "title": "The best way to manage your TestFlight testers and builds from your terminal"
        },
        {
            "location": "/actions/testflight/#usage",
            "text": "For all commands, you can either use an  API Key  or your  Apple ID .",
            "title": "Usage"
        },
        {
            "location": "/actions/testflight/#app-store-connect-api-key",
            "text": "The App Store Connect API Key is the preferred authentication method (if you are able to use it).   Uses official App Store Connect API  No need for 2FA  Better performance over Apple ID   Specify the API key using  --api_key_path ./path/to/api_key_info.json  or  --api_key \"{\\\"key_id\\\": \\\"D83848D23\\\", \\\"issuer_id\\\": \\\"227b0bbf-ada8-458c-9d62-3d8022b7d07f\\\", \\\"key_filepath\\\": \\\"D83848D23.p8\\\"}\"  Go to  Using App Store Connect API  for information on obtaining an API key, the  fastlane   api_key_info.json  format, and other API key usage.",
            "title": "App Store Connect API Key"
        },
        {
            "location": "/actions/testflight/#apple-id",
            "text": "Specify the Apple ID to use using  -u felix@krausefx.com . If you execute  pilot  in a project already using  fastlane  the username and app identifier will automatically be determined.",
            "title": "Apple ID"
        },
        {
            "location": "/actions/testflight/#uploading-builds",
            "text": "To upload a new build, just run  fastlane pilot upload  This will automatically look for an  ipa  in your current directory and tries to fetch the login credentials from your  fastlane setup .  You'll be asked for any missing information. Additionally, you can pass all kinds of parameters:  fastlane action pilot  You can pass a changelog using  fastlane pilot upload --changelog \"Something that is new here\"  You can also skip the submission of the binary, which means, the  ipa  file will only be uploaded and not distributed to testers:  fastlane pilot upload --skip_submission  pilot  does all kinds of magic for you:   Automatically detects the bundle identifier from your  ipa  file  Automatically fetch the AppID of your app based on the bundle identifier   pilot  uses  spaceship  to submit the build metadata and the iTunes Transporter to upload the binary. Because iTunes Transporter's upload capability is only supported on OS X,  pilot upload  does not work on Linux, as described  in this issue",
            "title": "Uploading builds"
        },
        {
            "location": "/actions/testflight/#list-builds",
            "text": "To list all builds for specific application use  fastlane pilot builds  The result lists all active builds and processing builds:  +-----------+---------+----------+\n|      Great App Builds          |\n+-----------+---------+----------+\n| Version # | Build # | Installs |\n+-----------+---------+----------+\n| 0.9.13    | 1       | 0        |\n| 0.9.13    | 2       | 0        |\n| 0.9.20    | 3       | 0        |\n| 0.9.20    | 4       | 3        |\n+-----------+---------+----------+",
            "title": "List builds"
        },
        {
            "location": "/actions/testflight/#managing-beta-testers",
            "text": "",
            "title": "Managing beta testers"
        },
        {
            "location": "/actions/testflight/#list-of-testers",
            "text": "This command will list all your testers, both internal and external.  fastlane pilot list  The output will look like this:  +--------+--------+--------------------------+-----------+\n|                    Internal Testers                    |\n+--------+--------+--------------------------+-----------+\n| First  | Last   | Email                    | # Devices |\n+--------+--------+--------------------------+-----------+\n| Felix  | Krause | felix@krausefx.com       | 2         |\n+--------+--------+--------------------------+-----------+\n\n+-----------+---------+----------------------------+-----------+\n|                       External Testers                       |\n+-----------+---------+----------------------------+-----------+\n| First     | Last    | Email                      | # Devices |\n+-----------+---------+----------------------------+-----------+\n| Max       | Manfred | email@email.com            | 0         |\n| Detlef    | M\u00fcller  | detlef@krausefx.com        | 1         |\n+-----------+---------+----------------------------+-----------+",
            "title": "List of Testers"
        },
        {
            "location": "/actions/testflight/#add-a-new-tester",
            "text": "To add a new tester to both your App Store Connect account and to your app (if given), use the  pilot add  command. This will create a new tester (if necessary) or add an existing tester to the app to test.  fastlane pilot add email@invite.com  Additionally you can specify the app identifier (if necessary):  fastlane pilot add email@email.com -a com.krausefx.app",
            "title": "Add a new tester"
        },
        {
            "location": "/actions/testflight/#find-a-tester",
            "text": "To find a specific tester use  fastlane pilot find felix@krausefx.com  The resulting output will look like this:  +---------------------+---------------------+\n|            felix@krausefx.com             |\n+---------------------+---------------------+\n| First name          | Felix               |\n| Last name           | Krause              |\n| Email               | felix@krausefx.com  |\n| Latest Version      | 0.9.14 (23          |\n| Latest Install Date | 03/28/15 19:00      |\n| 2 Devices           | \u2022 iPhone 6, iOS 8.3 |\n|                     | \u2022 iPhone 5, iOS 7.0 |\n+---------------------+---------------------+",
            "title": "Find a tester"
        },
        {
            "location": "/actions/testflight/#remove-a-tester",
            "text": "This command will only remove external beta testers.  fastlane pilot remove felix@krausefx.com",
            "title": "Remove a tester"
        },
        {
            "location": "/actions/testflight/#export-testers",
            "text": "To export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.  fastlane pilot export",
            "title": "Export testers"
        },
        {
            "location": "/actions/testflight/#import-testers",
            "text": "Add external testers from a CSV file. Create a file (ex:  testers.csv ) and fill it with the following format:  John,Appleseed,appleseed_john@mac.com,group-1;group-2  fastlane pilot import  You can also specify the directory using  fastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv",
            "title": "Import testers"
        },
        {
            "location": "/actions/testflight/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/testflight/#debug-information",
            "text": "If you run into any issues you can use the  verbose  mode to get a more detailed output:  fastlane pilot upload --verbose",
            "title": "Debug information"
        },
        {
            "location": "/actions/testflight/#firewall-issues",
            "text": "pilot  uses the iTunes  Transporter  to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol from the command line using  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...  If you are using  pilot  via the  fastlane action , add the following to your  Fastfile  ENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...  Note, however, that Apple recommends you don\u2019t specify the  -t transport  and instead allow Transporter to use automatic transport discovery to determine the best transport mode for your packages. For this reason, if the  t  option is passed, we will raise a warning.  Also note that  -t  is not the only additional parameter that can be used. The string specified in the  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS  environment variable will be forwarded to Transporter. For all the available options, check  Apple's Transporter User Guide .",
            "title": "Firewall Issues"
        },
        {
            "location": "/actions/testflight/#credentials-issues",
            "text": "If your password contains special characters,  pilot  may throw a confusing error saying your \"Your Apple ID or password was entered incorrectly\". The easiest way to fix this error is to change your password to something that  does not  contains special characters.",
            "title": "Credentials Issues"
        },
        {
            "location": "/actions/testflight/#how-is-my-password-stored",
            "text": "pilot  uses the  CredentialsManager  from  fastlane .",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/testflight/#provider-short-name",
            "text": "If you are on multiple App Store Connect teams, iTunes Transporter may need a provider short name to know where to upload your binary.  pilot  will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the  itc_provider  option.",
            "title": "Provider Short Name"
        },
        {
            "location": "/actions/testflight/#use-an-application-specific-password-to-upload",
            "text": "pilot / upload_to_testflight  can use an  Application Specific Password via the  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD  environment variable  to upload a binary if both the  skip_waiting_for_build_processing  and  apple_id  options are set. (If any of those are not set, it will use the normal Apple login process that might require 2FA authentication.)",
            "title": "Use an Application Specific Password to upload"
        },
        {
            "location": "/actions/testflight/#role-for-app-store-connect-user",
            "text": "pilot / upload_to_testflight  updates build information and testers after the build has finished processing. App Store Connect requires the  \"App Manager\" or \"Admin\" role for your Apple account to update this information. The \"Developer\" role will allow builds to be uploaded but  will not  allow updating of build information and testers.      testflight       Supported platforms  ios    Author  @KrauseFx",
            "title": "Role for App Store Connect User"
        },
        {
            "location": "/actions/testflight/#7-examples",
            "text": "upload_to_testflight  testflight # alias for \"upload_to_testflight\"  pilot # alias for \"upload_to_testflight\"  upload_to_testflight(skip_submission: true) # to only upload the build  upload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)  upload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)  upload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-defafult\",\n      privacy_policy_url: \"https://example.com/privacy-defafult\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)",
            "title": "7 Examples"
        },
        {
            "location": "/actions/testflight/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    app_identifier  The bundle identifier of the app to upload or manage testers (optional)  *    app_platform  The platform to use (optional)  ios    apple_id  Apple ID property in the App Information section in App Store Connect  *    ipa  Path to the ipa file to upload  *    demo_account_required  Do you need a demo account when Apple does review?  false    beta_app_review_info  Beta app review information for contact info and demo account     localized_app_info  Localized beta app test info for description, feedback email, marketing url, and privacy policy     beta_app_description  Provide the 'Beta App Description' when uploading a new build     beta_app_feedback_email  Provide the beta app email when uploading a new build     localized_build_info  Localized beta app test info for what's new     changelog  Provide the 'What to Test' text when uploading a new build     skip_submission  Skip the distributing action of pilot and only upload the ipa file  false    skip_waiting_for_build_processing  If set to true, the  distribute_external  option won't work and no build will be distributed to testers. (You might want to use this option if you are using this action on CI and have to pay for 'minutes used' on your CI plan). If set to  true  and a changelog is provided, it will partially wait for the build to appear on AppStore Connect so the changelog can be set, and skip the remaining processing steps  false    update_build_info_on_upload  DEPRECATED!  Update build info immediately after validation. This is deprecated and will be removed in a future release. App Store Connect no longer supports setting build info until after build processing has completed, which is when build info is updated by default  false    distribute_only  Distribute a previously uploaded build (equivalent to the  fastlane pilot distribute  command)  false    uses_non_exempt_encryption  Provide the 'Uses Non-Exempt Encryption' for export compliance. This is used if there is 'ITSAppUsesNonExemptEncryption' is not set in the Info.plist  false    distribute_external  Should the build be distributed to external testers?  false    notify_external_testers  Should notify external testers?  true    app_version  The version number of the application build to distribute. If the version number is not specified, then the most recent build uploaded to TestFlight will be distributed. If specified, the most recent build for the version number will be distributed     build_number  The build number of the application build to distribute. If the build number is not specified, the most recent build is distributed     expire_previous_builds  Should expire previous builds?  false    first_name  The tester's first name     last_name  The tester's last name     email  The tester's email     testers_file_path  Path to a CSV file of testers  ./testers.csv    groups  Associate tester to one group or more by group name / group id. E.g.  -g \"Team 1\",\"Team 2\"     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    dev_portal_team_id  The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!  *    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run  pathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off . The short names of providers should be listed in the second column     wait_processing_interval  Interval in seconds to wait for App Store Connect processing  30    wait_for_uploaded_build  DEPRECATED!  No longer needed with the transition over to the App Store Connect API - Use version info from uploaded ipa file to determine what build to use for distribution. If set to false, latest processing or any latest build will be used  false    reject_build_waiting_for_review  Expire previous if it's 'waiting for review'  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/testflight/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action testflight",
            "title": "Documentation"
        },
        {
            "location": "/actions/testflight/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run testflight  To pass parameters, make use of the  :  symbol, for example  fastlane run testflight parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/testflight/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/tryouts/",
            "text": "tryouts\n\n\nUpload a new build to \nTryouts\n\n\n\n\nMore information: \nhttp://tryouts.readthedocs.org/en/latest/releases.html#create-release\n\n\n\n\n\n\n\n\n\n\ntryouts\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android\n\n\n\n\n\n\nAuthor\n\n\n@alicertel\n\n\n\n\n\n\n\n\n1 Example\n\n\ntryouts(\n  api_token: \"...\",\n  app_id: \"application-id\",\n  build_file: \"test.ipa\",\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napp_id\n\n\nTryouts application hash\n\n\n\n\n\n\n\n\napi_token\n\n\nAPI Token (api_key:api_secret) for Tryouts Access\n\n\n\n\n\n\n\n\nbuild_file\n\n\nPath to your IPA or APK file. Optional if you use the \ngym\n or \nxcodebuild\n action\n\n\n*\n\n\n\n\n\n\nnotes\n\n\nRelease notes\n\n\n\n\n\n\n\n\nnotes_path\n\n\nRelease notes text file path. Overrides the :notes parameter\n\n\n\n\n\n\n\n\nnotify\n\n\nNotify testers? 0 for no\n\n\n1\n\n\n\n\n\n\nstatus\n\n\n2 to make your release public. Release will be distributed to available testers. 1 to make your release private. Release won't be distributed to testers. This also prevents release from showing up for SDK update\n\n\n2\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \ntryouts\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::TRYOUTS_BUILD_INFORMATION\n\n\nContains release info like :application_name, :download_url. See http://tryouts.readthedocs.org/en/latest/releases.html#create-release\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action tryouts\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run tryouts\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run tryouts parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "tryouts"
        },
        {
            "location": "/actions/tryouts/#tryouts",
            "text": "Upload a new build to  Tryouts   More information:  http://tryouts.readthedocs.org/en/latest/releases.html#create-release      tryouts       Supported platforms  ios, android    Author  @alicertel",
            "title": "tryouts"
        },
        {
            "location": "/actions/tryouts/#1-example",
            "text": "tryouts(\n  api_token: \"...\",\n  app_id: \"application-id\",\n  build_file: \"test.ipa\",\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/tryouts/#parameters",
            "text": "Key  Description  Default      app_id  Tryouts application hash     api_token  API Token (api_key:api_secret) for Tryouts Access     build_file  Path to your IPA or APK file. Optional if you use the  gym  or  xcodebuild  action  *    notes  Release notes     notes_path  Release notes text file path. Overrides the :notes parameter     notify  Notify testers? 0 for no  1    status  2 to make your release public. Release will be distributed to available testers. 1 to make your release private. Release won't be distributed to testers. This also prevents release from showing up for SDK update  2     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/tryouts/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  tryouts  action generates the following Lane Variables:     SharedValue  Description      SharedValues::TRYOUTS_BUILD_INFORMATION  Contains release info like :application_name, :download_url. See http://tryouts.readthedocs.org/en/latest/releases.html#create-release     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/tryouts/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action tryouts",
            "title": "Documentation"
        },
        {
            "location": "/actions/tryouts/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run tryouts  To pass parameters, make use of the  :  symbol, for example  fastlane run tryouts parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/tryouts/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/twitter/",
            "text": "twitter\n\n\nPost a tweet on \nTwitter.com\n\n\n\n\nPost a tweet on Twitter. Requires you to setup an app on \ntwitter.com\n and obtain \nconsumer\n and \naccess_token\n.\n\n\n\n\n\n\n\n\n\n\ntwitter\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@hjanuschka\n\n\n\n\n\n\n\n\n1 Example\n\n\ntwitter(\n  access_token: \"XXXX\",\n  access_token_secret: \"xxx\",\n  consumer_key: \"xxx\",\n  consumer_secret: \"xxx\",\n  message: \"You rock!\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nconsumer_key\n\n\nConsumer Key\n\n\n\n\n\n\n\n\nconsumer_secret\n\n\nConsumer Secret\n\n\n\n\n\n\n\n\naccess_token\n\n\nAccess Token\n\n\n\n\n\n\n\n\naccess_token_secret\n\n\nAccess Token Secret\n\n\n\n\n\n\n\n\nmessage\n\n\nThe tweet\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action twitter\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run twitter\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run twitter parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "twitter"
        },
        {
            "location": "/actions/twitter/#twitter",
            "text": "Post a tweet on  Twitter.com   Post a tweet on Twitter. Requires you to setup an app on  twitter.com  and obtain  consumer  and  access_token .      twitter       Supported platforms  ios, android, mac    Author  @hjanuschka",
            "title": "twitter"
        },
        {
            "location": "/actions/twitter/#1-example",
            "text": "twitter(\n  access_token: \"XXXX\",\n  access_token_secret: \"xxx\",\n  consumer_key: \"xxx\",\n  consumer_secret: \"xxx\",\n  message: \"You rock!\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/twitter/#parameters",
            "text": "Key  Description  Default      consumer_key  Consumer Key     consumer_secret  Consumer Secret     access_token  Access Token     access_token_secret  Access Token Secret     message  The tweet      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/twitter/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action twitter",
            "title": "Documentation"
        },
        {
            "location": "/actions/twitter/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run twitter  To pass parameters, make use of the  :  symbol, for example  fastlane run twitter parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/twitter/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/typetalk/",
            "text": "typetalk\n\n\nPost a message to \nTypetalk\n\n\n\n\n\n\n\n\ntypetalk\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@Nulab Inc.\n\n\n\n\n\n\n\n\n1 Example\n\n\ntypetalk(\n  message: \"App successfully released!\",\n  note_path: \"ChangeLog.md\",\n  topicId: 1,\n  success: true,\n  typetalk_token: \"Your Typetalk Token\"\n)\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action typetalk\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run typetalk\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run typetalk parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "typetalk"
        },
        {
            "location": "/actions/typetalk/#typetalk",
            "text": "Post a message to  Typetalk     typetalk       Supported platforms  ios, android, mac    Author  @Nulab Inc.",
            "title": "typetalk"
        },
        {
            "location": "/actions/typetalk/#1-example",
            "text": "typetalk(\n  message: \"App successfully released!\",\n  note_path: \"ChangeLog.md\",\n  topicId: 1,\n  success: true,\n  typetalk_token: \"Your Typetalk Token\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/typetalk/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action typetalk",
            "title": "Documentation"
        },
        {
            "location": "/actions/typetalk/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run typetalk  To pass parameters, make use of the  :  symbol, for example  fastlane run typetalk parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/typetalk/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/unlock_keychain/",
            "text": "unlock_keychain\n\n\nUnlock a keychain\n\n\n\n\nUnlocks the given keychain file and adds it to the keychain search list.\nKeychains can be replaced with \nadd_to_search_list: :replace\n.\n\n\n\n\n\n\n\n\n\n\nunlock_keychain\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@xfreebird\n\n\n\n\n\n\n\n\n4 Examples\n\n\nunlock_keychain( # Unlock an existing keychain and add it to the keychain search list\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\"\n)\n\n\n\n\nunlock_keychain( # By default the keychain is added to the existing. To replace them with the selected keychain you may use `:replace`\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\",\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)\n\n\n\n\nunlock_keychain( # In addition, the keychain can be selected as a default keychain\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\",\n  set_default: true\n)\n\n\n\n\nunlock_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.\n  path: \"KeychainName\",\n  password: \"mysecret\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the keychain file\n\n\nlogin\n\n\n\n\n\n\npassword\n\n\nKeychain password\n\n\n\n\n\n\n\n\nadd_to_search_list\n\n\nAdd to keychain search list\n\n\ntrue\n\n\n\n\n\n\nset_default\n\n\nSet as default keychain\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action unlock_keychain\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run unlock_keychain\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run unlock_keychain parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "unlock_keychain"
        },
        {
            "location": "/actions/unlock_keychain/#unlock_keychain",
            "text": "Unlock a keychain   Unlocks the given keychain file and adds it to the keychain search list. Keychains can be replaced with  add_to_search_list: :replace .      unlock_keychain       Supported platforms  ios, android, mac    Author  @xfreebird",
            "title": "unlock_keychain"
        },
        {
            "location": "/actions/unlock_keychain/#4-examples",
            "text": "unlock_keychain( # Unlock an existing keychain and add it to the keychain search list\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\"\n)  unlock_keychain( # By default the keychain is added to the existing. To replace them with the selected keychain you may use `:replace`\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\",\n  add_to_search_list: :replace # To only add a keychain use `true` or `:add`.\n)  unlock_keychain( # In addition, the keychain can be selected as a default keychain\n  path: \"/path/to/KeychainName.keychain\",\n  password: \"mysecret\",\n  set_default: true\n)  unlock_keychain( # If the keychain file is located in the standard location `~/Library/Keychains`, then it is sufficient to provide the keychain file name, or file name with its suffix.\n  path: \"KeychainName\",\n  password: \"mysecret\"\n)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/unlock_keychain/#parameters",
            "text": "Key  Description  Default      path  Path to the keychain file  login    password  Keychain password     add_to_search_list  Add to keychain search list  true    set_default  Set as default keychain  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/unlock_keychain/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action unlock_keychain",
            "title": "Documentation"
        },
        {
            "location": "/actions/unlock_keychain/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run unlock_keychain  To pass parameters, make use of the  :  symbol, for example  fastlane run unlock_keychain parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/unlock_keychain/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_app_group_identifiers/",
            "text": "update_app_group_identifiers\n\n\nThis action changes the app group identifiers in the entitlements file\n\n\n\n\nUpdates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.\n\n\n\n\n\n\n\n\n\n\nupdate_app_group_identifiers\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@mathiasAichinger\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_app_group_identifiers(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  app_group_identifiers: [\"group.your.app.group.identifier\"]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nentitlements_file\n\n\nThe path to the entitlement file which contains the app group identifiers\n\n\n\n\n\n\n\n\napp_group_identifiers\n\n\nAn Array of unique identifiers for the app groups. Eg. ['group.com.test.testapp']\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nupdate_app_group_identifiers\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::APP_GROUP_IDENTIFIERS\n\n\nThe new App Group Identifiers\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_app_group_identifiers\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_app_group_identifiers\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_app_group_identifiers parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_app_group_identifiers"
        },
        {
            "location": "/actions/update_app_group_identifiers/#update_app_group_identifiers",
            "text": "This action changes the app group identifiers in the entitlements file   Updates the App Group Identifiers in the given Entitlements file, so you can have app groups for the app store build and app groups for an enterprise build.      update_app_group_identifiers       Supported platforms  ios    Author  @mathiasAichinger",
            "title": "update_app_group_identifiers"
        },
        {
            "location": "/actions/update_app_group_identifiers/#1-example",
            "text": "update_app_group_identifiers(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  app_group_identifiers: [\"group.your.app.group.identifier\"]\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_app_group_identifiers/#parameters",
            "text": "Key  Description  Default      entitlements_file  The path to the entitlement file which contains the app group identifiers     app_group_identifiers  An Array of unique identifiers for the app groups. Eg. ['group.com.test.testapp']      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_app_group_identifiers/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  update_app_group_identifiers  action generates the following Lane Variables:     SharedValue  Description      SharedValues::APP_GROUP_IDENTIFIERS  The new App Group Identifiers     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/update_app_group_identifiers/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_app_group_identifiers",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_app_group_identifiers/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_app_group_identifiers  To pass parameters, make use of the  :  symbol, for example  fastlane run update_app_group_identifiers parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_app_group_identifiers/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_app_identifier/",
            "text": "update_app_identifier\n\n\nUpdate the project's bundle identifier\n\n\n\n\nUpdate an app identifier by either setting \nCFBundleIdentifier\n or \nPRODUCT_BUNDLE_IDENTIFIER\n, depending on which is already in use.\n\n\n\n\n\n\n\n\n\n\nupdate_app_identifier\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@squarefrog, @tobiasstrebitzer\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_app_identifier(\n  xcodeproj: \"Example.xcodeproj\", # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path: \"Example/Info.plist\", # Path to info plist file, relative to xcodeproj\n  app_identifier: \"com.test.example\" # The App Identifier\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to your Xcode project\n\n\n*\n\n\n\n\n\n\nplist_path\n\n\nPath to info plist, relative to your Xcode project\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe app Identifier you want to set\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_app_identifier\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_app_identifier\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_app_identifier parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_app_identifier"
        },
        {
            "location": "/actions/update_app_identifier/#update_app_identifier",
            "text": "Update the project's bundle identifier   Update an app identifier by either setting  CFBundleIdentifier  or  PRODUCT_BUNDLE_IDENTIFIER , depending on which is already in use.      update_app_identifier       Supported platforms  ios    Author  @squarefrog, @tobiasstrebitzer",
            "title": "update_app_identifier"
        },
        {
            "location": "/actions/update_app_identifier/#1-example",
            "text": "update_app_identifier(\n  xcodeproj: \"Example.xcodeproj\", # Optional path to xcodeproj, will use the first .xcodeproj if not set\n  plist_path: \"Example/Info.plist\", # Path to info plist file, relative to xcodeproj\n  app_identifier: \"com.test.example\" # The App Identifier\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_app_identifier/#parameters",
            "text": "Key  Description  Default      xcodeproj  Path to your Xcode project  *    plist_path  Path to info plist, relative to your Xcode project     app_identifier  The app Identifier you want to set  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_app_identifier/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_app_identifier",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_app_identifier/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_app_identifier  To pass parameters, make use of the  :  symbol, for example  fastlane run update_app_identifier parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_app_identifier/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_code_signing_settings/",
            "text": "update_code_signing_settings\n\n\nConfigures Xcode's Codesigning options\n\n\n\n\nConfigures Xcode's Codesigning options of all targets in the project\n\n\n\n\n\n\n\n\n\n\nupdate_code_signing_settings\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@mathiasAichinger, @hjanuschka, @p4checo, @portellaa, @aeons, @att55\n\n\n\n\n\n\nReturns\n\n\nThe current status (boolean) of codesigning after modification\n\n\n\n\n\n\n\n\n2 Examples\n\n\n # manual code signing\nupdate_code_signing_settings(\n  use_automatic_signing: false,\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n\n\n\n\n # automatic code signing\nupdate_code_signing_settings(\n  use_automatic_signing: true,\n  path: \"demo-project/demo/demo.xcodeproj\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to your Xcode project\n\n\n*\n\n\n\n\n\n\nuse_automatic_signing\n\n\nDefines if project should use automatic signing\n\n\nfalse\n\n\n\n\n\n\nteam_id\n\n\nTeam ID, is used when upgrading project\n\n\n\n\n\n\n\n\ntargets\n\n\nSpecify targets you want to toggle the signing mech. (default to all targets)\n\n\n\n\n\n\n\n\nbuild_configurations\n\n\nSpecify build_configurations you want to toggle the signing mech. (default to all targets)\n\n\n\n\n\n\n\n\ncode_sign_identity\n\n\nCode signing identity type (iPhone Developer, iPhone Distribution)\n\n\n\n\n\n\n\n\nprofile_name\n\n\nProvisioning profile name to use for code signing\n\n\n\n\n\n\n\n\nprofile_uuid\n\n\nProvisioning profile UUID to use for code signing\n\n\n\n\n\n\n\n\nbundle_identifier\n\n\nApplication Product Bundle Identifier\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_code_signing_settings\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_code_signing_settings\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_code_signing_settings parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_code_signing_settings"
        },
        {
            "location": "/actions/update_code_signing_settings/#update_code_signing_settings",
            "text": "Configures Xcode's Codesigning options   Configures Xcode's Codesigning options of all targets in the project      update_code_signing_settings       Supported platforms  ios, mac    Author  @mathiasAichinger, @hjanuschka, @p4checo, @portellaa, @aeons, @att55    Returns  The current status (boolean) of codesigning after modification",
            "title": "update_code_signing_settings"
        },
        {
            "location": "/actions/update_code_signing_settings/#2-examples",
            "text": "# manual code signing\nupdate_code_signing_settings(\n  use_automatic_signing: false,\n  path: \"demo-project/demo/demo.xcodeproj\"\n)   # automatic code signing\nupdate_code_signing_settings(\n  use_automatic_signing: true,\n  path: \"demo-project/demo/demo.xcodeproj\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/update_code_signing_settings/#parameters",
            "text": "Key  Description  Default      path  Path to your Xcode project  *    use_automatic_signing  Defines if project should use automatic signing  false    team_id  Team ID, is used when upgrading project     targets  Specify targets you want to toggle the signing mech. (default to all targets)     build_configurations  Specify build_configurations you want to toggle the signing mech. (default to all targets)     code_sign_identity  Code signing identity type (iPhone Developer, iPhone Distribution)     profile_name  Provisioning profile name to use for code signing     profile_uuid  Provisioning profile UUID to use for code signing     bundle_identifier  Application Product Bundle Identifier      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_code_signing_settings/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_code_signing_settings",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_code_signing_settings/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_code_signing_settings  To pass parameters, make use of the  :  symbol, for example  fastlane run update_code_signing_settings parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_code_signing_settings/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_fastlane/",
            "text": "update_fastlane\n\n\nMakes sure fastlane-tools are up-to-date when running fastlane\n\n\n\n\nThis action will update fastlane to the most recent version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues.\nIf you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in \nsudo\n mode.\nThe simplest possible fix for this is putting the following lines into your \n~/.bashrc\n or \n~/.zshrc\n file:\n\n\n\n\nexport GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin\n\n\n\n\n\n\nAfter the above changes, restart your terminal, then run \nmkdir $GEM_HOME\n to create the new gem directory. After this, you're good to go!\nRecommended usage of the \nupdate_fastlane\n action is at the top inside of the \nbefore_all\n block, before running any other action.\n\n\n\n\n\n\n\n\n\n\nupdate_fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@milch, @KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nbefore_all do\n  update_fastlane\n  # ...\nend\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nno_update\n\n\nDon't update during this run. This is used internally\n\n\nfalse\n\n\n\n\n\n\nnightly\n\n\nDEPRECATED!\n Nightly builds are no longer being made available - Opt-in to install and use nightly fastlane builds\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_fastlane\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_fastlane\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_fastlane parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_fastlane"
        },
        {
            "location": "/actions/update_fastlane/#update_fastlane",
            "text": "Makes sure fastlane-tools are up-to-date when running fastlane   This action will update fastlane to the most recent version - major version updates will not be performed automatically, as they might include breaking changes. If an update was performed, fastlane will be restarted before the run continues. If you are using rbenv or rvm, everything should be good to go. However, if you are using the system's default ruby, some additional setup is needed for this action to work correctly. In short, fastlane needs to be able to access your gem library without running in  sudo  mode. The simplest possible fix for this is putting the following lines into your  ~/.bashrc  or  ~/.zshrc  file:   export GEM_HOME=~/.gems\nexport PATH=$PATH:~/.gems/bin   After the above changes, restart your terminal, then run  mkdir $GEM_HOME  to create the new gem directory. After this, you're good to go! Recommended usage of the  update_fastlane  action is at the top inside of the  before_all  block, before running any other action.      update_fastlane       Supported platforms  ios, android, mac    Author  @milch, @KrauseFx",
            "title": "update_fastlane"
        },
        {
            "location": "/actions/update_fastlane/#1-example",
            "text": "before_all do\n  update_fastlane\n  # ...\nend",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_fastlane/#parameters",
            "text": "Key  Description  Default      no_update  Don't update during this run. This is used internally  false    nightly  DEPRECATED!  Nightly builds are no longer being made available - Opt-in to install and use nightly fastlane builds  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_fastlane/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_fastlane",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_fastlane/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_fastlane  To pass parameters, make use of the  :  symbol, for example  fastlane run update_fastlane parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_fastlane/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/",
            "text": "update_icloud_container_identifiers\n\n\nThis action changes the iCloud container identifiers in the entitlements file\n\n\n\n\nUpdates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.\n\n\n\n\n\n\n\n\n\n\nupdate_icloud_container_identifiers\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@JamesKuang\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_icloud_container_identifiers(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  icloud_container_identifiers: [\"iCloud.com.companyname.appname\"]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nentitlements_file\n\n\nThe path to the entitlement file which contains the iCloud container identifiers\n\n\n\n\n\n\n\n\nicloud_container_identifiers\n\n\nAn Array of unique identifiers for the iCloud containers. Eg. ['iCloud.com.test.testapp']\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nupdate_icloud_container_identifiers\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::UPDATE_ICLOUD_CONTAINER_IDENTIFIERS\n\n\nThe new iCloud Container Identifiers\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_icloud_container_identifiers\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_icloud_container_identifiers\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_icloud_container_identifiers parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_icloud_container_identifiers"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#update_icloud_container_identifiers",
            "text": "This action changes the iCloud container identifiers in the entitlements file   Updates the iCloud Container Identifiers in the given Entitlements file, so you can use different iCloud containers for different builds like Adhoc, App Store, etc.      update_icloud_container_identifiers       Supported platforms  ios    Author  @JamesKuang",
            "title": "update_icloud_container_identifiers"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#1-example",
            "text": "update_icloud_container_identifiers(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  icloud_container_identifiers: [\"iCloud.com.companyname.appname\"]\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#parameters",
            "text": "Key  Description  Default      entitlements_file  The path to the entitlement file which contains the iCloud container identifiers     icloud_container_identifiers  An Array of unique identifiers for the iCloud containers. Eg. ['iCloud.com.test.testapp']      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  update_icloud_container_identifiers  action generates the following Lane Variables:     SharedValue  Description      SharedValues::UPDATE_ICLOUD_CONTAINER_IDENTIFIERS  The new iCloud Container Identifiers     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_icloud_container_identifiers",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_icloud_container_identifiers  To pass parameters, make use of the  :  symbol, for example  fastlane run update_icloud_container_identifiers parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_icloud_container_identifiers/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_info_plist/",
            "text": "update_info_plist\n\n\nUpdate a Info.plist file with bundle identifier and display name\n\n\n\n\nThis action allows you to modify your \nInfo.plist\n file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.\n\n\n\n\n\n\n\n\n\n\nupdate_info_plist\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@tobiasstrebitzer\n\n\n\n\n\n\n\n\n4 Examples\n\n\nupdate_info_plist( # update app identifier string\n  plist_path: \"path/to/Info.plist\",\n  app_identifier: \"com.example.newappidentifier\"\n)\n\n\n\n\nupdate_info_plist( # Change the Display Name of your app\n  plist_path: \"path/to/Info.plist\",\n  display_name: \"MyApp-Beta\"\n)\n\n\n\n\nupdate_info_plist( # Target a specific `xcodeproj` rather than finding the first available one\n  xcodeproj: \"path/to/Example.proj\",\n  plist_path: \"path/to/Info.plist\",\n  display_name: \"MyApp-Beta\"\n)\n\n\n\n\nupdate_info_plist( # Advanced processing: find URL scheme for particular key and replace value\n  xcodeproj: \"path/to/Example.proj\",\n  plist_path: \"path/to/Info.plist\",\n  block: proc do |plist|\n    urlScheme = plist[\"CFBundleURLTypes\"].find{|scheme| scheme[\"CFBundleURLName\"] == \"com.acme.default-url-handler\"}\n    urlScheme[:CFBundleURLSchemes] = [\"acme-production\"]\n  end\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to your Xcode project\n\n\n\n\n\n\n\n\nplist_path\n\n\nPath to info plist\n\n\n\n\n\n\n\n\nscheme\n\n\nScheme of info plist\n\n\n\n\n\n\n\n\napp_identifier\n\n\nThe App Identifier of your app\n\n\n*\n\n\n\n\n\n\ndisplay_name\n\n\nThe Display Name of your app\n\n\n\n\n\n\n\n\nblock\n\n\nA block to process plist with custom logic\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_info_plist\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_info_plist\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_info_plist parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_info_plist"
        },
        {
            "location": "/actions/update_info_plist/#update_info_plist",
            "text": "Update a Info.plist file with bundle identifier and display name   This action allows you to modify your  Info.plist  file before building. This may be useful if you want a separate build for alpha, beta or nightly builds, but don't want a separate target.      update_info_plist       Supported platforms  ios    Author  @tobiasstrebitzer",
            "title": "update_info_plist"
        },
        {
            "location": "/actions/update_info_plist/#4-examples",
            "text": "update_info_plist( # update app identifier string\n  plist_path: \"path/to/Info.plist\",\n  app_identifier: \"com.example.newappidentifier\"\n)  update_info_plist( # Change the Display Name of your app\n  plist_path: \"path/to/Info.plist\",\n  display_name: \"MyApp-Beta\"\n)  update_info_plist( # Target a specific `xcodeproj` rather than finding the first available one\n  xcodeproj: \"path/to/Example.proj\",\n  plist_path: \"path/to/Info.plist\",\n  display_name: \"MyApp-Beta\"\n)  update_info_plist( # Advanced processing: find URL scheme for particular key and replace value\n  xcodeproj: \"path/to/Example.proj\",\n  plist_path: \"path/to/Info.plist\",\n  block: proc do |plist|\n    urlScheme = plist[\"CFBundleURLTypes\"].find{|scheme| scheme[\"CFBundleURLName\"] == \"com.acme.default-url-handler\"}\n    urlScheme[:CFBundleURLSchemes] = [\"acme-production\"]\n  end\n)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/update_info_plist/#parameters",
            "text": "Key  Description  Default      xcodeproj  Path to your Xcode project     plist_path  Path to info plist     scheme  Scheme of info plist     app_identifier  The App Identifier of your app  *    display_name  The Display Name of your app     block  A block to process plist with custom logic      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_info_plist/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_info_plist",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_info_plist/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_info_plist  To pass parameters, make use of the  :  symbol, for example  fastlane run update_info_plist parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_info_plist/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_keychain_access_groups/",
            "text": "update_keychain_access_groups\n\n\nThis action changes the keychain access groups in the entitlements file\n\n\n\n\nUpdates the Keychain Group Access Groups in the given Entitlements file, so you can have keychain access groups for the app store build and keychain access groups for an enterprise build.\n\n\n\n\n\n\n\n\n\n\nupdate_keychain_access_groups\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@yutae\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_keychain_access_groups(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  identifiers: [\"your.keychain.access.groups.identifiers\"]\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nentitlements_file\n\n\nThe path to the entitlement file which contains the keychain access groups\n\n\n\n\n\n\n\n\nidentifiers\n\n\nAn Array of unique identifiers for the keychain access groups. Eg. ['your.keychain.access.groups.identifiers']\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nupdate_keychain_access_groups\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::KEYCHAIN_ACCESS_GROUPS\n\n\nThe new Keychain Access Groups\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_keychain_access_groups\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_keychain_access_groups\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_keychain_access_groups parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_keychain_access_groups"
        },
        {
            "location": "/actions/update_keychain_access_groups/#update_keychain_access_groups",
            "text": "This action changes the keychain access groups in the entitlements file   Updates the Keychain Group Access Groups in the given Entitlements file, so you can have keychain access groups for the app store build and keychain access groups for an enterprise build.      update_keychain_access_groups       Supported platforms  ios    Author  @yutae",
            "title": "update_keychain_access_groups"
        },
        {
            "location": "/actions/update_keychain_access_groups/#1-example",
            "text": "update_keychain_access_groups(\n  entitlements_file: \"/path/to/entitlements_file.entitlements\",\n  identifiers: [\"your.keychain.access.groups.identifiers\"]\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_keychain_access_groups/#parameters",
            "text": "Key  Description  Default      entitlements_file  The path to the entitlement file which contains the keychain access groups     identifiers  An Array of unique identifiers for the keychain access groups. Eg. ['your.keychain.access.groups.identifiers']      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_keychain_access_groups/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  update_keychain_access_groups  action generates the following Lane Variables:     SharedValue  Description      SharedValues::KEYCHAIN_ACCESS_GROUPS  The new Keychain Access Groups     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/update_keychain_access_groups/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_keychain_access_groups",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_keychain_access_groups/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_keychain_access_groups  To pass parameters, make use of the  :  symbol, for example  fastlane run update_keychain_access_groups parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_keychain_access_groups/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_plist/",
            "text": "update_plist\n\n\nUpdate a plist file\n\n\n\n\nThis action allows you to modify any value inside any \nplist\n file.\n\n\n\n\n\n\n\n\n\n\nupdate_plist\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@rishabhtayal, @matthiaszarzecki\n\n\n\n\n\n\n\n\n6 Examples\n\n\nupdate_plist( # Updates the CLIENT_ID and GOOGLE_APP_ID string entries in the plist-file\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:CLIENT_ID] = \"new_client_id\"\n    plist[:GOOGLE_APP_ID] = \"new_google_app_id\"\n  end\n)\n\n\n\n\nupdate_plist( # Sets a boolean entry\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:boolean_entry] = true\n  end\n)\n\n\n\n\nupdate_plist( # Sets a number entry\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:number_entry] = 13\n  end\n)\n\n\n\n\nupdate_plist( # Sets an array-entry with multiple sub-types\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:array_entry] = [\"entry_01\", true, 1243]\n  end\n)\n\n\n\n\nupdate_plist( # The block can contain logic too\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    if options[:environment] == \"production\"\n      plist[:CLIENT_ID] = \"new_client_id_production\"\n    else\n      plist[:CLIENT_ID] = \"new_client_id_development\"\n    end\n  end\n)\n\n\n\n\nupdate_plist( # Advanced processing: find URL scheme for particular key and replace value\n  plist_path: \"path/to/Info.plist\",\n  block: proc do |plist|\n    urlScheme = plist[\"CFBundleURLTypes\"].find{|scheme| scheme[\"CFBundleURLName\"] == \"com.acme.default-url-handler\"}\n    urlScheme[:CFBundleURLSchemes] = [\"acme-production\"]\n  end\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplist_path\n\n\nPath to plist file\n\n\n\n\n\n\n\n\nblock\n\n\nA block to process plist with custom logic\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_plist\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_plist\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_plist parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_plist"
        },
        {
            "location": "/actions/update_plist/#update_plist",
            "text": "Update a plist file   This action allows you to modify any value inside any  plist  file.      update_plist       Supported platforms  ios    Author  @rishabhtayal, @matthiaszarzecki",
            "title": "update_plist"
        },
        {
            "location": "/actions/update_plist/#6-examples",
            "text": "update_plist( # Updates the CLIENT_ID and GOOGLE_APP_ID string entries in the plist-file\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:CLIENT_ID] = \"new_client_id\"\n    plist[:GOOGLE_APP_ID] = \"new_google_app_id\"\n  end\n)  update_plist( # Sets a boolean entry\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:boolean_entry] = true\n  end\n)  update_plist( # Sets a number entry\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:number_entry] = 13\n  end\n)  update_plist( # Sets an array-entry with multiple sub-types\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    plist[:array_entry] = [\"entry_01\", true, 1243]\n  end\n)  update_plist( # The block can contain logic too\n  plist_path: \"path/to/your_plist_file.plist\",\n  block: proc do |plist|\n    if options[:environment] == \"production\"\n      plist[:CLIENT_ID] = \"new_client_id_production\"\n    else\n      plist[:CLIENT_ID] = \"new_client_id_development\"\n    end\n  end\n)  update_plist( # Advanced processing: find URL scheme for particular key and replace value\n  plist_path: \"path/to/Info.plist\",\n  block: proc do |plist|\n    urlScheme = plist[\"CFBundleURLTypes\"].find{|scheme| scheme[\"CFBundleURLName\"] == \"com.acme.default-url-handler\"}\n    urlScheme[:CFBundleURLSchemes] = [\"acme-production\"]\n  end\n)",
            "title": "6 Examples"
        },
        {
            "location": "/actions/update_plist/#parameters",
            "text": "Key  Description  Default      plist_path  Path to plist file     block  A block to process plist with custom logic      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_plist/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_plist",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_plist/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_plist  To pass parameters, make use of the  :  symbol, for example  fastlane run update_plist parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_plist/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_project_code_signing/",
            "text": "update_project_code_signing\n\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n\n\n\nYou shouldn't use \nupdate_project_code_signing\n.\nHave you considered using the recommended way to do code signing: \nhttps://docs.fastlane.tools/codesigning/getting-started/\n?\n\n\n\n\n\n\n\n\n\n\nupdate_project_code_signing\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to your Xcode project\n\n\n\n\n\n\n\n\nudid\n\n\nDEPRECATED!\n Use \n:uuid\n instead\n\n\n*\n\n\n\n\n\n\nuuid\n\n\nThe UUID of the provisioning profile you want to use\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_project_code_signing\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_project_code_signing\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_project_code_signing parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_project_code_signing"
        },
        {
            "location": "/actions/update_project_code_signing/#update_project_code_signing",
            "text": "Updated code signing settings from 'Automatic' to a specific profile   You shouldn't use  update_project_code_signing . Have you considered using the recommended way to do code signing:  https://docs.fastlane.tools/codesigning/getting-started/ ?      update_project_code_signing       Supported platforms  ios    Author  @KrauseFx",
            "title": "update_project_code_signing"
        },
        {
            "location": "/actions/update_project_code_signing/#parameters",
            "text": "Key  Description  Default      path  Path to your Xcode project     udid  DEPRECATED!  Use  :uuid  instead  *    uuid  The UUID of the provisioning profile you want to use  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_project_code_signing/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_project_code_signing",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_project_code_signing/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_project_code_signing  To pass parameters, make use of the  :  symbol, for example  fastlane run update_project_code_signing parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_project_code_signing/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_project_provisioning/",
            "text": "update_project_provisioning\n\n\nUpdate projects code signing settings from your provisioning profile\n\n\n\n\nYou should check out the \ncode signing guide\n before using this action.\nThis action retrieves a provisioning profile UUID from a provisioning profile (\n.mobileprovision\n) to set up the Xcode projects' code signing settings in \n*.xcodeproj/project.pbxproj\n.\nThe \n:target_filter\n value can be used to only update code signing for the specified targets.\nThe \n:build_configuration\n value can be used to only update code signing for the specified build configurations of the targets passing through the \n:target_filter\n.\nExample usage is the WatchKit Extension or WatchKit App, where you need separate provisioning profiles.\nExample: \nupdate_project_provisioning(xcodeproj: \"..\", target_filter: \".*WatchKit App.*\")\n.\n\n\n\n\n\n\n\n\n\n\nupdate_project_provisioning\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@tobiasstrebitzer, @czechboy0\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_project_provisioning(\n  xcodeproj: \"Project.xcodeproj\",\n  profile: \"./watch_app_store.mobileprovision\", # optional if you use sigh\n  target_filter: \".*WatchKit Extension.*\", # matches name or type of a target\n  build_configuration: \"Release\",\n  code_signing_identity: \"iPhone Development\" # optionally specify the codesigning identity\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcodeproj\n\n\nPath to your Xcode project\n\n\n\n\n\n\n\n\nprofile\n\n\nPath to provisioning profile (.mobileprovision)\n\n\n*\n\n\n\n\n\n\ntarget_filter\n\n\nA filter for the target name. Use a standard regex\n\n\n\n\n\n\n\n\nbuild_configuration_filter\n\n\nLegacy option, use 'target_filter' instead\n\n\n\n\n\n\n\n\nbuild_configuration\n\n\nA filter for the build configuration name. Use a standard regex. Applied to all configurations if not specified\n\n\n\n\n\n\n\n\ncertificate\n\n\nPath to apple root certificate\n\n\n/tmp/AppleIncRootCertificate.cer\n\n\n\n\n\n\ncode_signing_identity\n\n\nCode sign identity for build configuration\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_project_provisioning\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_project_provisioning\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_project_provisioning parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_project_provisioning"
        },
        {
            "location": "/actions/update_project_provisioning/#update_project_provisioning",
            "text": "Update projects code signing settings from your provisioning profile   You should check out the  code signing guide  before using this action. This action retrieves a provisioning profile UUID from a provisioning profile ( .mobileprovision ) to set up the Xcode projects' code signing settings in  *.xcodeproj/project.pbxproj . The  :target_filter  value can be used to only update code signing for the specified targets. The  :build_configuration  value can be used to only update code signing for the specified build configurations of the targets passing through the  :target_filter . Example usage is the WatchKit Extension or WatchKit App, where you need separate provisioning profiles. Example:  update_project_provisioning(xcodeproj: \"..\", target_filter: \".*WatchKit App.*\") .      update_project_provisioning       Supported platforms  ios, mac    Author  @tobiasstrebitzer, @czechboy0",
            "title": "update_project_provisioning"
        },
        {
            "location": "/actions/update_project_provisioning/#1-example",
            "text": "update_project_provisioning(\n  xcodeproj: \"Project.xcodeproj\",\n  profile: \"./watch_app_store.mobileprovision\", # optional if you use sigh\n  target_filter: \".*WatchKit Extension.*\", # matches name or type of a target\n  build_configuration: \"Release\",\n  code_signing_identity: \"iPhone Development\" # optionally specify the codesigning identity\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_project_provisioning/#parameters",
            "text": "Key  Description  Default      xcodeproj  Path to your Xcode project     profile  Path to provisioning profile (.mobileprovision)  *    target_filter  A filter for the target name. Use a standard regex     build_configuration_filter  Legacy option, use 'target_filter' instead     build_configuration  A filter for the build configuration name. Use a standard regex. Applied to all configurations if not specified     certificate  Path to apple root certificate  /tmp/AppleIncRootCertificate.cer    code_signing_identity  Code sign identity for build configuration      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_project_provisioning/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_project_provisioning",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_project_provisioning/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_project_provisioning  To pass parameters, make use of the  :  symbol, for example  fastlane run update_project_provisioning parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_project_provisioning/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_project_team/",
            "text": "update_project_team\n\n\nUpdate Xcode Development Team ID\n\n\n\n\nThis action updates the Developer Team ID of your Xcode project.\n\n\n\n\n\n\n\n\n\n\nupdate_project_team\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@lgaches\n\n\n\n\n\n\n\n\n2 Examples\n\n\nupdate_project_team\n\n\n\n\nupdate_project_team(\n  path: \"Example.xcodeproj\",\n  teamid: \"A3ZZVJ7CNY\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to your Xcode project\n\n\n*\n\n\n\n\n\n\ntargets\n\n\nName of the targets you want to update\n\n\n\n\n\n\n\n\nteamid\n\n\nThe Team ID you want to use\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_project_team\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_project_team\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_project_team parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_project_team"
        },
        {
            "location": "/actions/update_project_team/#update_project_team",
            "text": "Update Xcode Development Team ID   This action updates the Developer Team ID of your Xcode project.      update_project_team       Supported platforms  ios, mac    Author  @lgaches",
            "title": "update_project_team"
        },
        {
            "location": "/actions/update_project_team/#2-examples",
            "text": "update_project_team  update_project_team(\n  path: \"Example.xcodeproj\",\n  teamid: \"A3ZZVJ7CNY\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/update_project_team/#parameters",
            "text": "Key  Description  Default      path  Path to your Xcode project  *    targets  Name of the targets you want to update     teamid  The Team ID you want to use  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_project_team/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_project_team",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_project_team/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_project_team  To pass parameters, make use of the  :  symbol, for example  fastlane run update_project_team parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_project_team/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_urban_airship_configuration/",
            "text": "update_urban_airship_configuration\n\n\nSet \nUrban Airship\n plist configuration values\n\n\n\n\nThis action updates the \nAirshipConfig.plist\n needed to configure the Urban Airship SDK at runtime, allowing keys and secrets to easily be set for the Enterprise and Production versions of the application.\n\n\n\n\n\n\n\n\n\n\nupdate_urban_airship_configuration\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@kcharwood\n\n\n\n\n\n\n\n\n1 Example\n\n\nupdate_urban_airship_configuration(\n  plist_path: \"AirshipConfig.plist\",\n  production_app_key: \"PRODKEY\",\n  production_app_secret: \"PRODSECRET\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nplist_path\n\n\nPath to Urban Airship configuration Plist\n\n\n\n\n\n\n\n\ndevelopment_app_key\n\n\nThe development app key\n\n\n\n\n\n\n\n\ndevelopment_app_secret\n\n\nThe development app secret\n\n\n\n\n\n\n\n\nproduction_app_key\n\n\nThe production app key\n\n\n\n\n\n\n\n\nproduction_app_secret\n\n\nThe production app secret\n\n\n\n\n\n\n\n\ndetect_provisioning_mode\n\n\nAutomatically detect provisioning mode\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_urban_airship_configuration\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_urban_airship_configuration\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_urban_airship_configuration parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_urban_airship_configuration"
        },
        {
            "location": "/actions/update_urban_airship_configuration/#update_urban_airship_configuration",
            "text": "Set  Urban Airship  plist configuration values   This action updates the  AirshipConfig.plist  needed to configure the Urban Airship SDK at runtime, allowing keys and secrets to easily be set for the Enterprise and Production versions of the application.      update_urban_airship_configuration       Supported platforms  ios    Author  @kcharwood",
            "title": "update_urban_airship_configuration"
        },
        {
            "location": "/actions/update_urban_airship_configuration/#1-example",
            "text": "update_urban_airship_configuration(\n  plist_path: \"AirshipConfig.plist\",\n  production_app_key: \"PRODKEY\",\n  production_app_secret: \"PRODSECRET\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/update_urban_airship_configuration/#parameters",
            "text": "Key  Description  Default      plist_path  Path to Urban Airship configuration Plist     development_app_key  The development app key     development_app_secret  The development app secret     production_app_key  The production app key     production_app_secret  The production app secret     detect_provisioning_mode  Automatically detect provisioning mode      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_urban_airship_configuration/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_urban_airship_configuration",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_urban_airship_configuration/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_urban_airship_configuration  To pass parameters, make use of the  :  symbol, for example  fastlane run update_urban_airship_configuration parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_urban_airship_configuration/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/update_url_schemes/",
            "text": "update_url_schemes\n\n\nUpdates the URL schemes in the given Info.plist\n\n\n\n\nThis action allows you to update the URL schemes of the app before building it.\nFor example, you can use this to set a different URL scheme for the alpha or beta version of the app.\n\n\n\n\n\n\n\n\n\n\nupdate_url_schemes\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@kmikael\n\n\n\n\n\n\n\n\n2 Examples\n\n\nupdate_url_schemes(\n  path: \"path/to/Info.plist\",\n  url_schemes: [\"com.myapp\"]\n)\n\n\n\n\nupdate_url_schemes(\n  path: \"path/to/Info.plist\",\n  update_url_schemes: proc do |schemes|\n    schemes + [\"anotherscheme\"]\n  end\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nThe Plist file's path\n\n\n\n\n\n\n\n\nurl_schemes\n\n\nThe new URL schemes\n\n\n\n\n\n\n\n\nupdate_url_schemes\n\n\nBlock that is called to update schemes with current schemes passed in as parameter\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action update_url_schemes\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run update_url_schemes\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run update_url_schemes parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "update_url_schemes"
        },
        {
            "location": "/actions/update_url_schemes/#update_url_schemes",
            "text": "Updates the URL schemes in the given Info.plist   This action allows you to update the URL schemes of the app before building it. For example, you can use this to set a different URL scheme for the alpha or beta version of the app.      update_url_schemes       Supported platforms  ios, mac    Author  @kmikael",
            "title": "update_url_schemes"
        },
        {
            "location": "/actions/update_url_schemes/#2-examples",
            "text": "update_url_schemes(\n  path: \"path/to/Info.plist\",\n  url_schemes: [\"com.myapp\"]\n)  update_url_schemes(\n  path: \"path/to/Info.plist\",\n  update_url_schemes: proc do |schemes|\n    schemes + [\"anotherscheme\"]\n  end\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/update_url_schemes/#parameters",
            "text": "Key  Description  Default      path  The Plist file's path     url_schemes  The new URL schemes     update_url_schemes  Block that is called to update schemes with current schemes passed in as parameter      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/update_url_schemes/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action update_url_schemes",
            "title": "Documentation"
        },
        {
            "location": "/actions/update_url_schemes/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run update_url_schemes  To pass parameters, make use of the  :  symbol, for example  fastlane run update_url_schemes parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/update_url_schemes/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/",
            "text": "upload_app_privacy_details_to_app_store\n\n\nUpload App Privacy Details for an app in App Store Connect\n\n\n\n\nUpload App Privacy Details for an app in App Store Connect. For more detail information, view https://docs.fastlane.tools/uploading-app-privacy-details\n\n\n\n\n\n\n\n\n\n\nupload_app_privacy_details_to_app_store\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\n\n\n2 Examples\n\n\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)\n\n\n\n\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  json_path: \"fastlane/app_data_usages.json\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username for App Store Connect\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\njson_path\n\n\nPath to the app usage data JSON\n\n\n\n\n\n\n\n\noutput_json_path\n\n\nPath to the app usage data JSON file generated by interactive questions\n\n\n./fastlane/app_privacy_details.json\n\n\n\n\n\n\nskip_json_file_saving\n\n\nWhether to skip the saving of the JSON file\n\n\nfalse\n\n\n\n\n\n\nskip_upload\n\n\nWhether to skip the upload and only create the JSON file with interactive questions\n\n\nfalse\n\n\n\n\n\n\nskip_publish\n\n\nWhether to skip the publishing\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_app_privacy_details_to_app_store\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_app_privacy_details_to_app_store\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_app_privacy_details_to_app_store parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_app_privacy_details_to_app_store"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/#upload_app_privacy_details_to_app_store",
            "text": "Upload App Privacy Details for an app in App Store Connect   Upload App Privacy Details for an app in App Store Connect. For more detail information, view https://docs.fastlane.tools/uploading-app-privacy-details      upload_app_privacy_details_to_app_store       Supported platforms  ios, mac    Author  @joshdholtz",
            "title": "upload_app_privacy_details_to_app_store"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/#2-examples",
            "text": "upload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)  upload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  json_path: \"fastlane/app_data_usages.json\"\n)",
            "title": "2 Examples"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/#parameters",
            "text": "Key  Description  Default      username  Your Apple ID Username for App Store Connect  *    app_identifier  The bundle identifier of your app  *    team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    json_path  Path to the app usage data JSON     output_json_path  Path to the app usage data JSON file generated by interactive questions  ./fastlane/app_privacy_details.json    skip_json_file_saving  Whether to skip the saving of the JSON file  false    skip_upload  Whether to skip the upload and only create the JSON file with interactive questions  false    skip_publish  Whether to skip the publishing  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_app_privacy_details_to_app_store",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_app_privacy_details_to_app_store  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_app_privacy_details_to_app_store parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_app_privacy_details_to_app_store/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/",
            "text": "upload_symbols_to_crashlytics\n\n\nUpload dSYM symbolication files to Crashlytics\n\n\n\n\nThis action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode. This action will not fail the build if one of the uploads failed. The reason for that is that sometimes some of dSYM files are invalid, and we don't want them to fail the complete build.\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_crashlytics\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nupload_symbols_to_crashlytics(dsym_path: \"./App.dSYM.zip\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\ndsym_path\n\n\nPath to the DSYM file or zip to upload\n\n\n*\n\n\n\n\n\n\ndsym_paths\n\n\nPaths to the DSYM files or zips to upload\n\n\n\n\n\n\n\n\napi_token\n\n\nCrashlytics API Key\n\n\n\n\n\n\n\n\ngsp_path\n\n\nPath to GoogleService-Info.plist\n\n\n\n\n\n\n\n\napp_id\n\n\nFirebase Crashlytics APP ID\n\n\n\n\n\n\n\n\nbinary_path\n\n\nThe path to the upload-symbols file of the Fabric app\n\n\n\n\n\n\n\n\nplatform\n\n\nThe platform of the app (ios, appletvos, mac)\n\n\nios\n\n\n\n\n\n\ndsym_worker_threads\n\n\nThe number of threads to use for simultaneous dSYM upload\n\n\n1\n\n\n\n\n\n\ndebug\n\n\nEnable debug mode for upload-symbols\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_symbols_to_crashlytics\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_symbols_to_crashlytics\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_symbols_to_crashlytics parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_symbols_to_crashlytics"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/#upload_symbols_to_crashlytics",
            "text": "Upload dSYM symbolication files to Crashlytics   This action allows you to upload symbolication files to Crashlytics. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode. This action will not fail the build if one of the uploads failed. The reason for that is that sometimes some of dSYM files are invalid, and we don't want them to fail the complete build.      upload_symbols_to_crashlytics       Supported platforms  ios    Author  @KrauseFx",
            "title": "upload_symbols_to_crashlytics"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/#1-example",
            "text": "upload_symbols_to_crashlytics(dsym_path: \"./App.dSYM.zip\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/#parameters",
            "text": "Key  Description  Default      dsym_path  Path to the DSYM file or zip to upload  *    dsym_paths  Paths to the DSYM files or zips to upload     api_token  Crashlytics API Key     gsp_path  Path to GoogleService-Info.plist     app_id  Firebase Crashlytics APP ID     binary_path  The path to the upload-symbols file of the Fabric app     platform  The platform of the app (ios, appletvos, mac)  ios    dsym_worker_threads  The number of threads to use for simultaneous dSYM upload  1    debug  Enable debug mode for upload-symbols  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_symbols_to_crashlytics",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_symbols_to_crashlytics  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_symbols_to_crashlytics parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_symbols_to_crashlytics/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/",
            "text": "upload_symbols_to_sentry\n\n\nUpload dSYM symbolication files to Sentry\n\n\n\n\nPlease use the \nsentry\n plugin instead.\nInstall using \nfastlane add_plugin sentry\n.\nReplace \nupload_symbols_to_sentry(...)\n with \nsentry_upload_dsym(...)\n.\n\n\nThis action allows you to upload symbolication files to Sentry. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode.\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_sentry\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@joshdholtz\n\n\n\n\n\n\nReturns\n\n\nThe uploaded dSYM path(s)\n\n\n\n\n\n\n\n\n1 Example\n\n\nupload_symbols_to_sentry(\n  auth_token: \"...\",\n  org_slug: \"...\",\n  project_slug: \"...\",\n  dsym_path: \"./App.dSYM.zip\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_host\n\n\nAPI host url for Sentry\n\n\nhttps://app.getsentry.com/api/0\n\n\n\n\n\n\napi_key\n\n\nAPI key for Sentry\n\n\n\n\n\n\n\n\nauth_token\n\n\nAuthentication token for Sentry\n\n\n\n\n\n\n\n\norg_slug\n\n\nOrganization slug for Sentry project\n\n\n\n\n\n\n\n\nproject_slug\n\n\nProject slug for Sentry\n\n\n\n\n\n\n\n\ndsym_path\n\n\nPath to your symbols file. For iOS and Mac provide path to app.dSYM.zip\n\n\n*\n\n\n\n\n\n\ndsym_paths\n\n\nPath to an array of your symbols file. For iOS and Mac provide path to app.dSYM.zip\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_symbols_to_sentry\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_symbols_to_sentry\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_symbols_to_sentry parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_symbols_to_sentry"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/#upload_symbols_to_sentry",
            "text": "Upload dSYM symbolication files to Sentry   Please use the  sentry  plugin instead. Install using  fastlane add_plugin sentry . Replace  upload_symbols_to_sentry(...)  with  sentry_upload_dsym(...) .  This action allows you to upload symbolication files to Sentry. It's extra useful if you use it to download the latest dSYM files from Apple when you use Bitcode.      upload_symbols_to_sentry       Supported platforms  ios    Author  @joshdholtz    Returns  The uploaded dSYM path(s)",
            "title": "upload_symbols_to_sentry"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/#1-example",
            "text": "upload_symbols_to_sentry(\n  auth_token: \"...\",\n  org_slug: \"...\",\n  project_slug: \"...\",\n  dsym_path: \"./App.dSYM.zip\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/#parameters",
            "text": "Key  Description  Default      api_host  API host url for Sentry  https://app.getsentry.com/api/0    api_key  API key for Sentry     auth_token  Authentication token for Sentry     org_slug  Organization slug for Sentry project     project_slug  Project slug for Sentry     dsym_path  Path to your symbols file. For iOS and Mac provide path to app.dSYM.zip  *    dsym_paths  Path to an array of your symbols file. For iOS and Mac provide path to app.dSYM.zip  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_symbols_to_sentry",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_symbols_to_sentry  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_symbols_to_sentry parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_symbols_to_sentry/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_to_app_store/",
            "text": "upload_to_app_store\n\n\nUpload metadata and binary to App Store Connect (via \ndeliver\n)\n\n\n\n  \n\n\n\n\n\ndeliver\n uploads screenshots, metadata and binaries to App Store Connect. Use \ndeliver\n to submit your app for App Store review.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nQuick Start\n \u2022\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\ndeliver\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nFeatures\n\n\n\n\nUpload hundreds of localized screenshots completely automatically\n\n\nUpload a new ipa/pkg file to App Store Connect without Xcode from any Mac\n\n\nMaintain your app metadata locally and push changes back to App Store Connect\n\n\nEasily implement a real Continuous Deployment process using \nfastlane\n\n\nStore the configuration in git to easily deploy from \nany\n Mac, including your Continuous Integration server\n\n\nGet a HTML preview of the fetched metadata before uploading the app metadata and screenshots to iTC\n\n\nAutomatically uses \nprecheck\n to ensure your app has the highest chances of passing app review the first time\n\n\n\n\nTo upload builds to TestFlight check out \npilot\n.\n\n\nQuick Start\n\n\nThe guide will create all the necessary files for you, using the existing app metadata from App Store Connect.\n\n\n\n\ncd [your_project_folder]\n\n\nfastlane deliver init\n\n\nEnter your App Store Connect credentials\n\n\nEnter your app identifier\n\n\nEnjoy a good drink, while the computer does all the work for you\n\n\n\n\nFrom now on, you can run \nfastlane deliver\n to deploy a new update, or just upload new app metadata and screenshots.\n\n\nUsage\n\n\nCheck out your local \n./fastlane/metadata\n and \n./fastlane/screenshots\n folders (if you don't use \nfastlane\n it's \n./metadata\n instead)\n\n\n\n\nYou'll see your metadata from App Store Connect. Feel free to store the metadata in git (not the screenshots). You can now modify it locally and push the changes back to App Store Connect.\n\n\nRun \nfastlane deliver\n to upload the app metadata from your local machine\n\n\nfastlane deliver\n\n\n\n\nProvide the path to an \nipa\n file to upload and submit your app for review:\n\n\nfastlane deliver --ipa \"App.ipa\" --submit_for_review\n\n\n\n\nor you can specify path to \npkg\n file for macOS apps:\n\n\nfastlane deliver --pkg \"MacApp.pkg\"\n\n\n\n\nIf you use \nfastlane\n you don't have to manually specify the path to your \nipa\n/\npkg\n file.\n\n\nThis is just a small sub-set of what you can do with \ndeliver\n, check out the full documentation in \n#more-options\n\n\nDownload existing screenshots from App Store Connect\n\n\nfastlane deliver download_screenshots\n\n\n\n\nDownload existing metadata from App Store Connect\n\n\nfastlane deliver download_metadata\n\n\n\n\nTo get a list of available options run\n\n\nfastlane action deliver\n\n\n\n\nUse in a \nFastfile\n\n\ndeliver\n\n\n\n\ndeliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)\n\n\n\n\nMore options\n\n\n\n\nView all available options and their valid values\n\n\nAvailable options\n\n\nAll the options below can easily be added to your \nDeliverfile\n. The great thing: if you use \nfastlane\n you can use all these options from your \nFastfile\n too, for example:\n\n\ndeliver(\n  submit_for_review: true,\n  metadata_path: \"../folder\"\n)\n\n\n\n\napp_identifier\n\n\nThe bundle identifier (e.g. \"com.krausefx.app\")\n\n\nusername\n\n\nYour Apple ID email address\n\n\nipa\n\n\nA path to a signed ipa file, which will be uploaded. If you don't provide this value, only app metadata will be uploaded. If you want to submit the app for review make sure to either use \nfastlane deliver --submit_for_review\n or add \nsubmit_for_review true\n to your \nDeliverfile\n\n\nipa(\"App.ipa\")\n\n\n\n\nif you use \nfastlane\n the ipa file will automatically be detected.\n\n\npkg\n\n\nA path to a signed pkg file, which will be uploaded. Submission logic of ipa applies to pkg files.\n\n\npkg(\"MacApp.pkg\")\n\n\n\n\napp_version\n\n\nOptional, as it is usually automatically detected. Specify the version that should be created / edited on App Store Connect:\n\n\napp_version(\"2.0\")\n\n\n\n\nskip_app_version_update\n\n\nIn the case if \ndeliver\n uploads your application to App Store Connect it will automatically update \"Prepare for submission\" app version (which could be found on App Store Connect->My Apps->App Store page)\n\n\nThe option allows uploading your app without updating \"Prepare for submission\" version.\n\n\nThis could be useful in the case if you are generating a lot of uploads while not submitting the latest build for Apple review.\n\n\nThe default value is false.\n\n\nskip_app_version_update(true)\n\n\n\n\nsubmit_for_review\n\n\nAdd this to your \nDeliverfile\n to automatically submit the app for review after uploading metadata/binary. This will select the latest build.\n\n\nsubmit_for_review(true)\n\n\n\n\nscreenshots_path\n\n\nA path to a folder containing subfolders for each language. This will automatically detect the device type based on the image resolution. Also includes \uf8ff Watch Support.\n\n\n\n\nmetadata_path\n\n\nPath to the metadata you want to use. The folder has to be structured like this\n\n\n\n\nIf you run \ndeliver init\n this will automatically be created for you.\n\n\nforce\n\n\nforce(true)\n\n\n\n\nIf set to \ntrue\n, no HTML report will be generated before the actual upload. You can also pass \n--force\n when calling \ndeliver\n.\n\n\nprice_tier\n\n\nPass the price tier as number. This will be active from the current day.\n\n\nprice_tier 0\n\n\n\n\ntrade_representative_contact_information\n\n\nTrade Representative Contact information for Korean App Store. Available options: \nfirst_name\n, \nlast_name\n, \naddress_line1\n, \naddress_line2\n, \naddress_line3\n, \ncity_name\n, \nstate\n, \ncountry\n, \npostal_code\n, \nphone_number\n, \nemail_address\n, \nis_displayed_on_app_store\n.\n\n\ntrade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)\n\n\n\n\nYou can also provide these values by creating files in a \nmetadata/trade_representative_contact_information/\n directory. The file names must match the pattern \n<key>.txt\n (e.g. \nfirst_name.txt\n, \naddress_line1.txt\n etc.). The contents of each file will be used as the value for the matching key. Values provided in the \nDeliverfile\n or \nFastfile\n will be take priority over values from these files.\n\n\nis_displayed_on_app_store\n is the option on App Store Connect described as: \nDisplay Trade Representative Contact Information on the Korean App Store\n\n\napp_review_information\n\n\nContact information for the app review team. Available options: \nfirst_name\n, \nlast_name\n, \nphone_number\n, \nemail_address\n, \ndemo_user\n, \ndemo_password\n, \nnotes\n.\n\n\napp_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)\n\n\n\n\nYou can also provide these values by creating files in a \nmetadata/review_information/\n directory. The file names must match the pattern \n<key>.txt\n (e.g. \nfirst_name.txt\n, \nnotes.txt\n etc.). The contents of each file will be used as the value for the matching key. Values provided in the \nDeliverfile\n or \nFastfile\n will be take priority over values from these files.\n\n\napp_review_attachment_file\n\n\nYou can provide additional information to the app review team as a file attachment. As of this writing, Apple supports following file attachment formats: .pdf, .doc, .docx, .rtf, .pages, .xls, .xlsx, .numbers, .zip, .rar, .plist, .crash, .jpg, .png, .mp4, or .avi.\n\n\nProvide an empty string (i.e. \"\", not null) to remove the existing attachment file (if any) from the review information being edited.\n\n\napp_review_attachment_file: \"./readme.txt\"\n\n\n\n\nsubmission_information\n\n\nMust be a hash. This is used as the last step for the deployment process, where you define if you use third party content or use encryption. \nA list of available options\n.\n\n\nsubmission_information({\n  add_id_info_serves_ads: true,\n  ...\n})\n\n\n\n\nautomatic_release\n\n\nShould the app be released to all users once Apple approves it? If set to \nfalse\n, you'll have to manually release the update once it got approved.\n\n\nautomatic_release(true)\n# or\nautomatic_release(false)\n\n\n\n\nphased_release\n\n\nEnable or disable the phased releases feature of App Store Connect. If set to \ntrue\n, the update will be released over a 7 day period. Default behavior is to leave whatever you defined on App Store Connect.\n\n\nphased_release(true)\n# or\nphased_release(false)\n\n\n\n\nreset_ratings\n\n\nReset your app's summary rating for all territories. If set to \ntrue\n, it will reset rating when this version is released. Default behavior is to keep existing rating.\n\n\nreset_ratings(true)\n# or\nreset_ratings(false)\n\n\n\n\napp_rating_config_path\n\n\nYou can set the app age ratings using \ndeliver\n. You'll have to create and store a \nJSON\n configuration file. Copy the \ntemplate\n to your project folder and pass the path to the \nJSON\n file using the \napp_rating_config_path\n option.\n\n\nThe keys/values on the top allow values from 0-2, and the items on the bottom allow only 0 or 1. More information in \n#reference\n.\n\n\nMetadata\n\n\nAll options below are useful if you want to specify certain app metadata in your \nDeliverfile\n or \nFastfile\n\n\nLocalized\n\n\nLocalized values should be set like this\n\n\ndescription({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})\n\n\n\n\nname\n\n\nThe title/name of the app\n\n\nsubtitle\n\n\nLocalized subtitle of the app\n\n\nsubtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)\n\n\n\n\ndescription\n\n\nThe description of the app\n\n\nrelease_notes\n\n\nThe release_notes (What's new / Changelog) of the latest version\n\n\nsupport_url, marketing_url, privacy_url\n\n\nThese URLs are shown in the AppStore\n\n\nkeywords\n\n\nKeywords separated using a comma.\n\n\nkeywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)\n\n\n\n\npromotional_text\n\n\nLocalized promotional text\n\n\npromotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)\n\n\n\n\napp_icon\n\n\nA path to a new app icon, which must be exactly 1024x1024px\n\n\napp_icon('./AppIcon.png')\n\n\n\n\napple_watch_app_icon\n\n\nA path to a new app icon for the \uf8ff Watch, which must be exactly 1024x1024px\n\n\napple_watch_app_icon('./AppleWatchAppIcon.png')\n\n\n\n\nplatform\n\n\nThe platform of your application (a.e. ios, osx).\n\n\nThis option is optional. The default value is \"ios\" and deliver should be able to figure out the platform from your binary.\n\n\nHowever, in the case if multiple binaries present, you can specify a platform which you want to deliver explicitly.\n\n\nThe available options:\n\n\n\n\n'ios'\n\n\n'appletvos'\n\n\n'osx'\n\n\n\n\nNon-Localized\n\n\ncopyright\n\n\nThe up to date copyright information.\n\n\ncopyright(\"#{Time.now.year} Felix Krause\")\n\n\n\n\nprimary_category\n\n\nThe english name of the category you want to set (e.g. \nBusiness\n, \nBooks\n)\n\n\nSee \n#reference\n for a list of available categories\n\n\nsecondary_category\n\n\nThe english name of the secondary category you want to set\n\n\nprimary_first_sub_category\n\n\nThe english name of the primary first sub category you want to set\n\n\nprimary_second_sub_category\n\n\nThe english name of the primary second sub category you want to set\n\n\nsecondary_first_sub_category\n\n\nThe english name of the secondary first sub category you want to set\n\n\nsecondary_second_sub_category\n\n\nThe english name of the secondary second sub category you want to set\n\n\n\nSubmit Build\n\n\ndeliver\n allows you to promote an existing build to production. Below are examples to select a previously uploaded build and submit it for review.\n\n\nfastlane deliver submit_build --build_number 830\n\n\n\n\nSubmit build in a \nFastfile\n\n\nlane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend\n\n\n\n\nOmit \nbuild_number\n to let \nfastlane\n automatically select the latest build number for the current version being edited for release from App Store Connect.\n\n\nCompliance and IDFA settings\n\n\nUse the \nsubmission_information\n parameter for additional submission specifiers, including compliance and IDFA settings. Look at the Spaceship's \napp_submission.rb\n file for options. See \nthis example\n.\n\n\nfastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"\n\n\n\n\nApp Privacy Details\n\n\nStarting on December 8, 2020, Apple announced that developers are required to provide app privacy details that will help users understand an app's privacy practies. \ndeliver\n does not allow for updating of this information but this can be done with the \nupload_app_privacy_details_to_app_store\n action. More information on \nUploading App Privacy Details\n\n\nCredentials\n\n\nA detailed description about how your credentials are handled is available in a \ncredentials_manager\n.\n\n\nHow does this thing even work? Is magic involved? \ud83c\udfa9\n\n\nYour password will be stored in the macOS keychain, but can also be passed using environment variables. (More information available on \nCredentialsManager\n)\n\n\nBefore actually uploading anything to iTunes, \ndeliver\n will generate a HTML summary of the collected data.\n\n\ndeliver\n uses the following techniques under the hood:\n\n\n\n\nThe iTMSTransporter tool is used to upload the binary to App Store Connect. iTMSTransporter is a command line tool provided by Apple.\n\n\nFor all metadata related actions \ndeliver\n uses \nspaceship\n\n\n\n\nTips\n\n\nAvailable language codes\n\n\nar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, uk, vi, zh-Hans, zh-Hant\n\n\n\n\nAvailable Metadata Folder Options\n\n\ndeliver\n allows for metadata to be set through \n.txt\n files in the metadata folder. This metadata folder location is defaulted to \n./fastlane/metadata\n but can be overridden through the \nmetadata_path\n parameter. Below are all allowed metadata options.\n\n\nNon-Localized Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\ncopyright\n\n\nYes\n\n\n<metadata_path>\n\n\ncopyright.txt\n\n\n\n\n\n\nprimary_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_category.txt\n\n\n\n\n\n\nsecondary_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_category.txt\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_first_sub_category.txt\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nprimary_second_sub_category.txt\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_first_sub_category.txt\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nNo\n\n\n<metadata_path>\n\n\nsecondary_second_sub_category.txt\n\n\n\n\n\n\n\n\nLocalized Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\n\n\n\n\n\n\n\n\nname\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nname.txt\n\n\n\n\n\n\nsubtitle\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nsubtitle.txt\n\n\n\n\n\n\nprivacy_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nprivacy_url.txt\n\n\n\n\n\n\napple_tv_privacy_policy\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\napple_tv_privacy_policy.txt\n\n\n\n\n\n\ndescription\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\ndescription.txt\n\n\n\n\n\n\nkeywords\n\n\nNo\n\n\n<metadata_path>/<lang>/\n\n\nkeywords.txt\n\n\n\n\n\n\nrelease_notes\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nrelease_notes.txt\n\n\n\n\n\n\nsupport_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nsupport_url.txt\n\n\n\n\n\n\nmarketing_url\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\nmarketing_url.txt\n\n\n\n\n\n\npromotional_text\n\n\nYes\n\n\n<metadata_path>/<lang>/\n\n\npromotional_text.txt\n\n\n\n\n\n\n\n\nReview Information Metadata\n\n\n\n\n\n\n\n\nKey\n\n\nEditable While Live\n\n\nDirectory\n\n\nFilename\n\n\nDeprecated Filename\n\n\n\n\n\n\n\n\n\n\nfirst_name\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nfirst_name.txt\n\n\nreview_first_name.txt\n\n\n\n\n\n\nlast_name\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nlast_name.txt\n\n\nreview_last_name.txt\n\n\n\n\n\n\nphone_number\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nphone_number.txt\n\n\nreview_phone_number.txt\n\n\n\n\n\n\nemail_address\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nemail_address.txt\n\n\nreview_email.txt\n\n\n\n\n\n\ndemo_user\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\ndemo_user.txt\n\n\nreview_demo_user.txt\n\n\n\n\n\n\ndemo_password\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\ndemo_password.txt\n\n\nreview_demo_password.txt\n\n\n\n\n\n\nnotes\n\n\nYes\n\n\n<metadata_path>/review_information\n\n\nnotes.txt\n\n\nreview_notes.txt\n\n\n\n\n\n\n\n\nReference\n\n\n\n\nView all available categories, etc.\n\n\nAvailable Categories\n\n\n\n\nFOOD_AND_DRINK\n\n\nBUSINESS\n\n\nEDUCATION\n\n\nSOCIAL_NETWORKING\n\n\nBOOKS\n\n\nSPORTS\n\n\nFINANCE\n\n\nREFERENCE\n\n\nGRAPHICS_AND_DESIGN\n\n\nDEVELOPER_TOOLS\n\n\nHEALTH_AND_FITNESS\n\n\nMUSIC\n\n\nWEATHER\n\n\nTRAVEL\n\n\nENTERTAINMENT\n\n\nSTICKERS\n\n\nGAMES\n\n\nLIFESTYLE\n\n\nMEDICAL\n\n\nMAGAZINES_AND_NEWSPAPERS\n\n\nUTILITIES\n\n\nSHOPPING\n\n\nPRODUCTIVITY\n\n\nNEWS\n\n\nPHOTO_AND_VIDEO\n\n\nNAVIGATION\n\n\n\n\nAvailable Game Subcategories\n\n\n\n\nMZGenre.Action\n\n\nMZGenre.Adventure\n\n\nMZGenre.Arcade\n\n\nMZGenre.Board\n\n\nMZGenre.Card\n\n\nMZGenre.Casino\n\n\nMZGenre.Dice\n\n\nMZGenre.Educational\n\n\nMZGenre.Family\n\n\nMZGenre.Music\n\n\nMZGenre.Puzzle\n\n\nMZGenre.Racing\n\n\nMZGenre.RolePlaying\n\n\nMZGenre.Simulation\n\n\nMZGenre.Sports\n\n\nMZGenre.Strategy\n\n\nMZGenre.Trivia\n\n\nMZGenre.Word\n\n\n\n\n\n\nGAMES_SPORTS\n\n\nGAMES_WORD\n\n\nGAMES_MUSIC\n\n\nGAMES_ADVENTURE\n\n\nGAMES_ACTION\n\n\nGAMES_ROLE_PLAYING\n\n\nGAMES_CASUAL\n\n\nGAMES_BOARD\n\n\nGAMES_TRIVIA\n\n\nGAMES_CARD\n\n\nGAMES_PUZZLE\n\n\nGAMES_CASINO\n\n\nGAMES_STRATEGY\n\n\nGAMES_SIMULATION\n\n\nGAMES_RACING\n\n\nGAMES_FAMILY\n\n\n\n\nAvailable Stickers Subcategories\n\n\n\n\nSTICKERS_PLACES_AND_OBJECTS\n\n\nSTICKERS_EMOJI_AND_EXPRESSIONS\n\n\nSTICKERS_CELEBRATIONS\n\n\nSTICKERS_CELEBRITIES\n\n\nSTICKERS_MOVIES_AND_TV\n\n\nSTICKERS_SPORTS_AND_ACTIVITIES\n\n\nSTICKERS_EATING_AND_DRINKING\n\n\nSTICKERS_CHARACTERS\n\n\nSTICKERS_ANIMALS\n\n\nSTICKERS_FASHION\n\n\nSTICKERS_ART\n\n\nSTICKERS_GAMING\n\n\nSTICKERS_KIDS_AND_FAMILY\n\n\nSTICKERS_PEOPLE\n\n\nSTICKERS_MUSIC\n\n\n\n\nAvailable age rating groups\n\n\nNon Boolean\n\n\nValues\n\n\n\n\n0: None\n\n\n1: Infrequent/Mild\n\n\n2: Frequent/Intense\n\n\n\n\n\n\nNONE\n\n\nINFREQUENT_OR_MILD\n\n\nFREQUENT_OR_INTENSE\n\n\n\n\nKeys\n\n\n\n\nviolenceCartoonOrFantasy\n\n\nviolenceRealistic\n\n\nviolenceRealisticProlongedGraphicOrSadistic\n\n\nprofanityOrCrudeHumor\n\n\nmatureOrSuggestiveThemes\n\n\nhorrorOrFearThemes\n\n\nmedicalOrTreatmentInformation\n\n\nalcoholTobaccoOrDrugUseOrReferences\n\n\ngamblingSimulated\n\n\nsexualContentOrNudity\n\n\nsexualContentGraphicAndNudity\n\n\n\n\nBoolean\n\n\nKeys\n\n\n\n\nunrestrictedWebAccess\n\n\ngamblingAndContests\n\n\n\n\n\n\n\n\nDefault values\n\n\nDeliver has a special \ndefault\n language code which allows you to provide values that are not localized, and which will be used as defaults when you don\u2019t provide a specific localized value.\n\n\nIn order to use \ndefault\n, you will need to tell \ndeliver\n which languages your app uses. You can do this in either of two ways:\n\n\n\n\nCreate the folders named with the language in the metadata folder (i.e. fastlane/metadata/en-US or fastlane/metadata/de-DE)\n\n\nAdd the following to your \nDeliverfile\n \nlanguages(['en-US','de-DE'])\n\n\n\n\nYou can use this either in json within your \nDeliverfile\n and/or as folders in your metadata folder. \ndeliver\n will take the union of both language sets from the \nDeliverfile\n and from the metadata folder and create on single set of languages which will be enabled.\n\n\nImagine that you have localized data for the following language codes:  \nen-US, de-DE, el, it\n\n\nYou can set the following in your \nDeliverfile\n\n\nrelease_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})\n\n\n\n\nDeliver will use \"Shiny and new\" for en-US, el and it.\n\n\nIt will use \"glaenzend und neu\" for de-DE.\n\n\nYou can do the same with folders\n\n\n   default\n      keywords.txt\n      marketing_url.txt\n      name.txt\n      privacy_url.txt\n      support_url.txt\n      release_notes.txt\n   en-US\n      description.txt\n   de-DE\n      description.txt\n   el\n      description.txt\n   it\n      description.txt\n\n\n\n\nIn this case, default values for keywords, urls, name and release notes are used in all localizations, but each language has a fully localized description\n\n\nUploading screenshots for \"iPad Pro (12.9-inch) (3rd generation)\"\n\n\nStarting March 20, 2019 Apple's App Store\n requires 12.9-inch iPad Pro (3rd generation) screenshots additionally to the iPad Pro 2nd generation \nscreenshots\n. As fastlane historically uses the screenshot dimensions to determine the \"display family\" of a screenshot, this poses a problem as both use the same dimensions and are recognized as the same device family.\n\n\nTo solve this a screenshot of a 12.9-inch iPad Pro (3rd generation) must contain either the string \niPad Pro (12.9-inch) (3rd generation)\n or \nipadPro129\n (Apple's internal naming of the display family for the 3rd generation iPad Pro) in its filename to be assigned the correct display family and to be uploaded to the correct screenshot slot in your app's metadata.\n\n\nAutomatically create screenshots\n\n\nIf you want to integrate \ndeliver\n with \nsnapshot\n, check out \nfastlane\n!\n\n\nJenkins integration\n\n\nDetailed instructions about how to set up \ndeliver\n and \nfastlane\n in \nJenkins\n can be found in the \nfastlane README\n.\n\n\nFirewall Issues\n\n\ndeliver\n uses the iTunes Transporter to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol using\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" fastlane deliver\n\n\n\n\nHTTP Proxy\n\n\niTunes Transporter is a Java application bundled with Xcode. In addition to utilizing the \nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\"\n, you need to configure the transporter application to use the proxy independently from the system proxy or any environment proxy settings. You can find the configuration file within Xcode:\n\n\nfor Xcode11 and later\n\n\nTOOLS_PATH=$( xcode-select -p )\nREL_PATH='../SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"\n\n\n\n\nfor Xcode10 or earlier\n\n\nTOOLS_PATH=$( xcode-select -p )\nREL_PATH='../Applications/Application Loader.app/Contents/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"\n\n\n\n\nAdd necessary proxy configuration values to the net.properties according to \nJava Proxy Configuration\n.\n\n\nAs an alternative to editing the properties files, proxy configuration can be specified on the command line directly:\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV -Dhttp.proxyHost=myproxy.com -Dhttp.proxyPort=8080\"\n\n\n\n\nLimit\n\n\nApp Store Connect has a limit of 150 binary uploads per day.\n\n\nEditing the \nDeliverfile\n\n\nChange syntax highlighting to \nRuby\n.\n\n\nProvider Short Name\n\n\nIf you are on multiple App Store Connect teams, \ndeliver\n needs a provider short name to know where to upload your binary. \ndeliver\n will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the \nitc_provider\n option.\n\n\n\n\n\n\n\n\n\n\n\nupload_to_app_store\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n3 Examples\n\n\nupload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\ndeliver   # alias for \"upload_to_app_store\"\n\n\n\n\nappstore  # alias for \"upload_to_app_store\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of your app\n\n\n*\n\n\n\n\n\n\napp_version\n\n\nThe version that should be edited or created\n\n\n\n\n\n\n\n\nipa\n\n\nPath to your ipa file\n\n\n*\n\n\n\n\n\n\npkg\n\n\nPath to your pkg file\n\n\n*\n\n\n\n\n\n\nbuild_number\n\n\nIf set the given build number (already uploaded to iTC) will be used instead of the current built one\n\n\n\n\n\n\n\n\nplatform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\nedit_live\n\n\nModify live metadata, this option disables ipa upload and screenshot upload\n\n\nfalse\n\n\n\n\n\n\nuse_live_version\n\n\nForce usage of live version rather than edit version\n\n\nfalse\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the folder containing the metadata files\n\n\n\n\n\n\n\n\nscreenshots_path\n\n\nPath to the folder containing the screenshots\n\n\n\n\n\n\n\n\nskip_binary_upload\n\n\nSkip uploading an ipa or pkg to App Store Connect\n\n\nfalse\n\n\n\n\n\n\nskip_screenshots\n\n\nDon't upload the screenshots\n\n\nfalse\n\n\n\n\n\n\nskip_metadata\n\n\nDon't upload the metadata (e.g. title, description). This will still upload screenshots\n\n\nfalse\n\n\n\n\n\n\nskip_app_version_update\n\n\nDon\u2019t create or update the app version that is being prepared for submission\n\n\nfalse\n\n\n\n\n\n\nforce\n\n\nSkip verification of HTML preview file\n\n\nfalse\n\n\n\n\n\n\noverwrite_screenshots\n\n\nClear all previously uploaded screenshots before uploading the new ones\n\n\nfalse\n\n\n\n\n\n\nsubmit_for_review\n\n\nSubmit the new version for Review after uploading everything\n\n\nfalse\n\n\n\n\n\n\nreject_if_possible\n\n\nRejects the previously submitted build if it's in a state where it's possible\n\n\nfalse\n\n\n\n\n\n\nautomatic_release\n\n\nShould the app be automatically released once it's approved? (Can not be used together with \nauto_release_date\n)\n\n\n\n\n\n\n\n\nauto_release_date\n\n\nDate in milliseconds for automatically releasing on pending approval (Can not be used together with \nautomatic_release\n)\n\n\n\n\n\n\n\n\nphased_release\n\n\nEnable the phased release feature of iTC\n\n\nfalse\n\n\n\n\n\n\nreset_ratings\n\n\nReset the summary rating when you release a new version of the application\n\n\nfalse\n\n\n\n\n\n\nprice_tier\n\n\nThe price tier of this application\n\n\n\n\n\n\n\n\napp_rating_config_path\n\n\nPath to the app rating's config\n\n\n\n\n\n\n\n\nsubmission_information\n\n\nExtra information for the submission (e.g. compliance specifications, IDFA settings)\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!\n\n\n*\n\n\n\n\n\n\ndev_portal_team_name\n\n\nThe name of your Developer Portal team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run \npathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off\n. The short names of providers should be listed in the second column\n\n\n*\n\n\n\n\n\n\nrun_precheck_before_submit\n\n\nRun precheck before submitting to app review\n\n\ntrue\n\n\n\n\n\n\nprecheck_default_rule_level\n\n\nThe default precheck rule level unless otherwise configured\n\n\n:warn\n\n\n\n\n\n\nindividual_metadata_items\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - An array of localized metadata items to upload individually by language so that errors can be identified. E.g. ['name', 'keywords', 'description']. Note: slow\n\n\n\n\n\n\n\n\napp_icon\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the app icon\n\n\n\n\n\n\n\n\napple_watch_app_icon\n\n\nDEPRECATED!\n Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the Apple Watch app icon\n\n\n\n\n\n\n\n\ncopyright\n\n\nMetadata: The copyright notice\n\n\n\n\n\n\n\n\nprimary_category\n\n\nMetadata: The english name of the primary category (e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\n\n\nsecondary_category\n\n\nMetadata: The english name of the secondary category (e.g. \nBusiness\n, \nBooks\n)\n\n\n\n\n\n\n\n\nprimary_first_sub_category\n\n\nMetadata: The english name of the primary first sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nprimary_second_sub_category\n\n\nMetadata: The english name of the primary second sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nsecondary_first_sub_category\n\n\nMetadata: The english name of the secondary first sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\nsecondary_second_sub_category\n\n\nMetadata: The english name of the secondary second sub category (e.g. \nEducational\n, \nPuzzle\n)\n\n\n\n\n\n\n\n\ntrade_representative_contact_information\n\n\nMetadata: A hash containing the trade representative contact information\n\n\n\n\n\n\n\n\napp_review_information\n\n\nMetadata: A hash containing the review information\n\n\n\n\n\n\n\n\napp_review_attachment_file\n\n\nMetadata: Path to the app review attachment file\n\n\n\n\n\n\n\n\ndescription\n\n\nMetadata: The localised app description\n\n\n\n\n\n\n\n\nname\n\n\nMetadata: The localised app name\n\n\n\n\n\n\n\n\nsubtitle\n\n\nMetadata: The localised app subtitle\n\n\n\n\n\n\n\n\nkeywords\n\n\nMetadata: An array of localised keywords\n\n\n\n\n\n\n\n\npromotional_text\n\n\nMetadata: An array of localised promotional texts\n\n\n\n\n\n\n\n\nrelease_notes\n\n\nMetadata: Localised release notes for this version\n\n\n\n\n\n\n\n\nprivacy_url\n\n\nMetadata: Localised privacy url\n\n\n\n\n\n\n\n\napple_tv_privacy_policy\n\n\nMetadata: Localised Apple TV privacy policy text\n\n\n\n\n\n\n\n\nsupport_url\n\n\nMetadata: Localised support url\n\n\n\n\n\n\n\n\nmarketing_url\n\n\nMetadata: Localised marketing url\n\n\n\n\n\n\n\n\nlanguages\n\n\nMetadata: List of languages to activate\n\n\n\n\n\n\n\n\nignore_language_directory_validation\n\n\nIgnore errors when invalid languages are found in metadata and screenshot directories\n\n\nfalse\n\n\n\n\n\n\nprecheck_include_in_app_purchases\n\n\nShould precheck check in-app purchases?\n\n\ntrue\n\n\n\n\n\n\napp\n\n\nThe (spaceship) app ID of the app you want to use/modify\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_to_app_store\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_to_app_store\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_to_app_store parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_to_app_store"
        },
        {
            "location": "/actions/upload_to_app_store/#upload_to_app_store",
            "text": "Upload metadata and binary to App Store Connect (via  deliver )  \n     deliver  uploads screenshots, metadata and binaries to App Store Connect. Use  deliver  to submit your app for App Store review.   \n     Features  \u2022\n     Quick Start  \u2022\n     Usage  \u2022\n     Tips",
            "title": "upload_to_app_store"
        },
        {
            "location": "/actions/upload_to_app_store/#features",
            "text": "Upload hundreds of localized screenshots completely automatically  Upload a new ipa/pkg file to App Store Connect without Xcode from any Mac  Maintain your app metadata locally and push changes back to App Store Connect  Easily implement a real Continuous Deployment process using  fastlane  Store the configuration in git to easily deploy from  any  Mac, including your Continuous Integration server  Get a HTML preview of the fetched metadata before uploading the app metadata and screenshots to iTC  Automatically uses  precheck  to ensure your app has the highest chances of passing app review the first time   To upload builds to TestFlight check out  pilot .",
            "title": "Features"
        },
        {
            "location": "/actions/upload_to_app_store/#quick-start",
            "text": "The guide will create all the necessary files for you, using the existing app metadata from App Store Connect.   cd [your_project_folder]  fastlane deliver init  Enter your App Store Connect credentials  Enter your app identifier  Enjoy a good drink, while the computer does all the work for you   From now on, you can run  fastlane deliver  to deploy a new update, or just upload new app metadata and screenshots.",
            "title": "Quick Start"
        },
        {
            "location": "/actions/upload_to_app_store/#usage",
            "text": "Check out your local  ./fastlane/metadata  and  ./fastlane/screenshots  folders (if you don't use  fastlane  it's  ./metadata  instead)   You'll see your metadata from App Store Connect. Feel free to store the metadata in git (not the screenshots). You can now modify it locally and push the changes back to App Store Connect.  Run  fastlane deliver  to upload the app metadata from your local machine  fastlane deliver  Provide the path to an  ipa  file to upload and submit your app for review:  fastlane deliver --ipa \"App.ipa\" --submit_for_review  or you can specify path to  pkg  file for macOS apps:  fastlane deliver --pkg \"MacApp.pkg\"  If you use  fastlane  you don't have to manually specify the path to your  ipa / pkg  file.  This is just a small sub-set of what you can do with  deliver , check out the full documentation in  #more-options  Download existing screenshots from App Store Connect  fastlane deliver download_screenshots  Download existing metadata from App Store Connect  fastlane deliver download_metadata  To get a list of available options run  fastlane action deliver",
            "title": "Usage"
        },
        {
            "location": "/actions/upload_to_app_store/#use-in-a-fastfile",
            "text": "deliver  deliver(\n  submit_for_review: true,\n  force: true,\n  metadata_path: \"./metadata\"\n)",
            "title": "Use in a Fastfile"
        },
        {
            "location": "/actions/upload_to_app_store/#more-options",
            "text": "View all available options and their valid values",
            "title": "More options"
        },
        {
            "location": "/actions/upload_to_app_store/#available-options",
            "text": "All the options below can easily be added to your  Deliverfile . The great thing: if you use  fastlane  you can use all these options from your  Fastfile  too, for example:  deliver(\n  submit_for_review: true,\n  metadata_path: \"../folder\"\n)",
            "title": "Available options"
        },
        {
            "location": "/actions/upload_to_app_store/#app_identifier",
            "text": "The bundle identifier (e.g. \"com.krausefx.app\")",
            "title": "app_identifier"
        },
        {
            "location": "/actions/upload_to_app_store/#username",
            "text": "Your Apple ID email address",
            "title": "username"
        },
        {
            "location": "/actions/upload_to_app_store/#ipa",
            "text": "A path to a signed ipa file, which will be uploaded. If you don't provide this value, only app metadata will be uploaded. If you want to submit the app for review make sure to either use  fastlane deliver --submit_for_review  or add  submit_for_review true  to your  Deliverfile  ipa(\"App.ipa\")  if you use  fastlane  the ipa file will automatically be detected.",
            "title": "ipa"
        },
        {
            "location": "/actions/upload_to_app_store/#pkg",
            "text": "A path to a signed pkg file, which will be uploaded. Submission logic of ipa applies to pkg files.  pkg(\"MacApp.pkg\")",
            "title": "pkg"
        },
        {
            "location": "/actions/upload_to_app_store/#app_version",
            "text": "Optional, as it is usually automatically detected. Specify the version that should be created / edited on App Store Connect:  app_version(\"2.0\")",
            "title": "app_version"
        },
        {
            "location": "/actions/upload_to_app_store/#skip_app_version_update",
            "text": "In the case if  deliver  uploads your application to App Store Connect it will automatically update \"Prepare for submission\" app version (which could be found on App Store Connect->My Apps->App Store page)  The option allows uploading your app without updating \"Prepare for submission\" version.  This could be useful in the case if you are generating a lot of uploads while not submitting the latest build for Apple review.  The default value is false.  skip_app_version_update(true)",
            "title": "skip_app_version_update"
        },
        {
            "location": "/actions/upload_to_app_store/#submit_for_review",
            "text": "Add this to your  Deliverfile  to automatically submit the app for review after uploading metadata/binary. This will select the latest build.  submit_for_review(true)",
            "title": "submit_for_review"
        },
        {
            "location": "/actions/upload_to_app_store/#screenshots_path",
            "text": "A path to a folder containing subfolders for each language. This will automatically detect the device type based on the image resolution. Also includes \uf8ff Watch Support.",
            "title": "screenshots_path"
        },
        {
            "location": "/actions/upload_to_app_store/#metadata_path",
            "text": "Path to the metadata you want to use. The folder has to be structured like this   If you run  deliver init  this will automatically be created for you.",
            "title": "metadata_path"
        },
        {
            "location": "/actions/upload_to_app_store/#force",
            "text": "force(true)  If set to  true , no HTML report will be generated before the actual upload. You can also pass  --force  when calling  deliver .",
            "title": "force"
        },
        {
            "location": "/actions/upload_to_app_store/#price_tier",
            "text": "Pass the price tier as number. This will be active from the current day.  price_tier 0",
            "title": "price_tier"
        },
        {
            "location": "/actions/upload_to_app_store/#trade_representative_contact_information",
            "text": "Trade Representative Contact information for Korean App Store. Available options:  first_name ,  last_name ,  address_line1 ,  address_line2 ,  address_line3 ,  city_name ,  state ,  country ,  postal_code ,  phone_number ,  email_address ,  is_displayed_on_app_store .  trade_representative_contact_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  address_line1: \"1 Infinite Loop\",\n  address_line2: \"\",\n  address_line3: null,\n  city_name: \"Cupertino\",\n  state: \"California\",\n  country: \"United States\",\n  postal_code: \"95014\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n)  You can also provide these values by creating files in a  metadata/trade_representative_contact_information/  directory. The file names must match the pattern  <key>.txt  (e.g.  first_name.txt ,  address_line1.txt  etc.). The contents of each file will be used as the value for the matching key. Values provided in the  Deliverfile  or  Fastfile  will be take priority over values from these files.  is_displayed_on_app_store  is the option on App Store Connect described as:  Display Trade Representative Contact Information on the Korean App Store",
            "title": "trade_representative_contact_information"
        },
        {
            "location": "/actions/upload_to_app_store/#app_review_information",
            "text": "Contact information for the app review team. Available options:  first_name ,  last_name ,  phone_number ,  email_address ,  demo_user ,  demo_password ,  notes .  app_review_information(\n  first_name: \"Felix\",\n  last_name: \"Krause\",\n  phone_number: \"+43 123123123\",\n  email_address: \"github@krausefx.com\",\n  demo_user: \"demoUser\",\n  demo_password: \"demoPass\",\n  notes: \"such notes, very text\"\n)  You can also provide these values by creating files in a  metadata/review_information/  directory. The file names must match the pattern  <key>.txt  (e.g.  first_name.txt ,  notes.txt  etc.). The contents of each file will be used as the value for the matching key. Values provided in the  Deliverfile  or  Fastfile  will be take priority over values from these files.",
            "title": "app_review_information"
        },
        {
            "location": "/actions/upload_to_app_store/#app_review_attachment_file",
            "text": "You can provide additional information to the app review team as a file attachment. As of this writing, Apple supports following file attachment formats: .pdf, .doc, .docx, .rtf, .pages, .xls, .xlsx, .numbers, .zip, .rar, .plist, .crash, .jpg, .png, .mp4, or .avi.  Provide an empty string (i.e. \"\", not null) to remove the existing attachment file (if any) from the review information being edited.  app_review_attachment_file: \"./readme.txt\"",
            "title": "app_review_attachment_file"
        },
        {
            "location": "/actions/upload_to_app_store/#submission_information",
            "text": "Must be a hash. This is used as the last step for the deployment process, where you define if you use third party content or use encryption.  A list of available options .  submission_information({\n  add_id_info_serves_ads: true,\n  ...\n})",
            "title": "submission_information"
        },
        {
            "location": "/actions/upload_to_app_store/#automatic_release",
            "text": "Should the app be released to all users once Apple approves it? If set to  false , you'll have to manually release the update once it got approved.  automatic_release(true)\n# or\nautomatic_release(false)",
            "title": "automatic_release"
        },
        {
            "location": "/actions/upload_to_app_store/#phased_release",
            "text": "Enable or disable the phased releases feature of App Store Connect. If set to  true , the update will be released over a 7 day period. Default behavior is to leave whatever you defined on App Store Connect.  phased_release(true)\n# or\nphased_release(false)",
            "title": "phased_release"
        },
        {
            "location": "/actions/upload_to_app_store/#reset_ratings",
            "text": "Reset your app's summary rating for all territories. If set to  true , it will reset rating when this version is released. Default behavior is to keep existing rating.  reset_ratings(true)\n# or\nreset_ratings(false)",
            "title": "reset_ratings"
        },
        {
            "location": "/actions/upload_to_app_store/#app_rating_config_path",
            "text": "You can set the app age ratings using  deliver . You'll have to create and store a  JSON  configuration file. Copy the  template  to your project folder and pass the path to the  JSON  file using the  app_rating_config_path  option.  The keys/values on the top allow values from 0-2, and the items on the bottom allow only 0 or 1. More information in  #reference .",
            "title": "app_rating_config_path"
        },
        {
            "location": "/actions/upload_to_app_store/#metadata",
            "text": "All options below are useful if you want to specify certain app metadata in your  Deliverfile  or  Fastfile",
            "title": "Metadata"
        },
        {
            "location": "/actions/upload_to_app_store/#localized",
            "text": "Localized values should be set like this  description({\n  'en-US' => \"English Description here\",\n  'de-DE' => \"Deutsche Beschreibung hier\"\n})",
            "title": "Localized"
        },
        {
            "location": "/actions/upload_to_app_store/#name",
            "text": "The title/name of the app",
            "title": "name"
        },
        {
            "location": "/actions/upload_to_app_store/#subtitle",
            "text": "Localized subtitle of the app  subtitle(\n  \"en-US\" => \"Awesome English subtitle here\",\n  \"de-DE\" => \"Jetzt mit deutschen Untertiteln!\"\n)",
            "title": "subtitle"
        },
        {
            "location": "/actions/upload_to_app_store/#description",
            "text": "The description of the app",
            "title": "description"
        },
        {
            "location": "/actions/upload_to_app_store/#release_notes",
            "text": "The release_notes (What's new / Changelog) of the latest version",
            "title": "release_notes"
        },
        {
            "location": "/actions/upload_to_app_store/#support_url-marketing_url-privacy_url",
            "text": "These URLs are shown in the AppStore",
            "title": "support_url, marketing_url, privacy_url"
        },
        {
            "location": "/actions/upload_to_app_store/#keywords",
            "text": "Keywords separated using a comma.  keywords(\n  \"en-US\" => \"Keyword1, Keyword2\"\n)",
            "title": "keywords"
        },
        {
            "location": "/actions/upload_to_app_store/#promotional_text",
            "text": "Localized promotional text  promotional_text(\n  \"en-US\" => \"Hey, you should totally buy our app, it's the best\",\n  \"de-DE\" => \"App kaufen bitte\"\n)",
            "title": "promotional_text"
        },
        {
            "location": "/actions/upload_to_app_store/#app_icon",
            "text": "A path to a new app icon, which must be exactly 1024x1024px  app_icon('./AppIcon.png')",
            "title": "app_icon"
        },
        {
            "location": "/actions/upload_to_app_store/#apple_watch_app_icon",
            "text": "A path to a new app icon for the \uf8ff Watch, which must be exactly 1024x1024px  apple_watch_app_icon('./AppleWatchAppIcon.png')",
            "title": "apple_watch_app_icon"
        },
        {
            "location": "/actions/upload_to_app_store/#platform",
            "text": "The platform of your application (a.e. ios, osx).  This option is optional. The default value is \"ios\" and deliver should be able to figure out the platform from your binary.  However, in the case if multiple binaries present, you can specify a platform which you want to deliver explicitly.  The available options:   'ios'  'appletvos'  'osx'",
            "title": "platform"
        },
        {
            "location": "/actions/upload_to_app_store/#non-localized",
            "text": "",
            "title": "Non-Localized"
        },
        {
            "location": "/actions/upload_to_app_store/#copyright",
            "text": "The up to date copyright information.  copyright(\"#{Time.now.year} Felix Krause\")",
            "title": "copyright"
        },
        {
            "location": "/actions/upload_to_app_store/#primary_category",
            "text": "The english name of the category you want to set (e.g.  Business ,  Books )  See  #reference  for a list of available categories",
            "title": "primary_category"
        },
        {
            "location": "/actions/upload_to_app_store/#secondary_category",
            "text": "The english name of the secondary category you want to set",
            "title": "secondary_category"
        },
        {
            "location": "/actions/upload_to_app_store/#primary_first_sub_category",
            "text": "The english name of the primary first sub category you want to set",
            "title": "primary_first_sub_category"
        },
        {
            "location": "/actions/upload_to_app_store/#primary_second_sub_category",
            "text": "The english name of the primary second sub category you want to set",
            "title": "primary_second_sub_category"
        },
        {
            "location": "/actions/upload_to_app_store/#secondary_first_sub_category",
            "text": "The english name of the secondary first sub category you want to set",
            "title": "secondary_first_sub_category"
        },
        {
            "location": "/actions/upload_to_app_store/#secondary_second_sub_category",
            "text": "The english name of the secondary second sub category you want to set",
            "title": "secondary_second_sub_category"
        },
        {
            "location": "/actions/upload_to_app_store/#submit-build",
            "text": "deliver  allows you to promote an existing build to production. Below are examples to select a previously uploaded build and submit it for review.  fastlane deliver submit_build --build_number 830",
            "title": "Submit Build"
        },
        {
            "location": "/actions/upload_to_app_store/#submit-build-in-a-fastfile",
            "text": "lane :submit_review do\n  deliver(\n    build_number: '830',\n    submit_for_review: true,\n    automatic_release: true,\n    force: true, # Skip HTMl report verification\n    skip_metadata: true,\n    skip_screenshots: true,\n    skip_binary_upload: true\n  )\nend  Omit  build_number  to let  fastlane  automatically select the latest build number for the current version being edited for release from App Store Connect.",
            "title": "Submit build in a Fastfile"
        },
        {
            "location": "/actions/upload_to_app_store/#compliance-and-idfa-settings",
            "text": "Use the  submission_information  parameter for additional submission specifiers, including compliance and IDFA settings. Look at the Spaceship's  app_submission.rb  file for options. See  this example .  fastlane deliver submit_build --build_number 830 --submission_information \"{\\\"export_compliance_uses_encryption\\\": false, \\\"add_id_info_uses_idfa\\\": false }\"",
            "title": "Compliance and IDFA settings"
        },
        {
            "location": "/actions/upload_to_app_store/#app-privacy-details",
            "text": "Starting on December 8, 2020, Apple announced that developers are required to provide app privacy details that will help users understand an app's privacy practies.  deliver  does not allow for updating of this information but this can be done with the  upload_app_privacy_details_to_app_store  action. More information on  Uploading App Privacy Details",
            "title": "App Privacy Details"
        },
        {
            "location": "/actions/upload_to_app_store/#credentials",
            "text": "A detailed description about how your credentials are handled is available in a  credentials_manager .",
            "title": "Credentials"
        },
        {
            "location": "/actions/upload_to_app_store/#how-does-this-thing-even-work-is-magic-involved",
            "text": "Your password will be stored in the macOS keychain, but can also be passed using environment variables. (More information available on  CredentialsManager )  Before actually uploading anything to iTunes,  deliver  will generate a HTML summary of the collected data.  deliver  uses the following techniques under the hood:   The iTMSTransporter tool is used to upload the binary to App Store Connect. iTMSTransporter is a command line tool provided by Apple.  For all metadata related actions  deliver  uses  spaceship",
            "title": "How does this thing even work? Is magic involved? \ud83c\udfa9"
        },
        {
            "location": "/actions/upload_to_app_store/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/upload_to_app_store/#available-language-codes",
            "text": "ar-SA, ca, cs, da, de-DE, el, en-AU, en-CA, en-GB, en-US, es-ES, es-MX, fi, fr-CA, fr-FR, he, hi, hr, hu, id, it, ja, ko, ms, nl-NL, no, pl, pt-BR, pt-PT, ro, ru, sk, sv, th, tr, uk, vi, zh-Hans, zh-Hant",
            "title": "Available language codes"
        },
        {
            "location": "/actions/upload_to_app_store/#available-metadata-folder-options",
            "text": "deliver  allows for metadata to be set through  .txt  files in the metadata folder. This metadata folder location is defaulted to  ./fastlane/metadata  but can be overridden through the  metadata_path  parameter. Below are all allowed metadata options.",
            "title": "Available Metadata Folder Options"
        },
        {
            "location": "/actions/upload_to_app_store/#non-localized-metadata",
            "text": "Key  Editable While Live  Directory  Filename      copyright  Yes  <metadata_path>  copyright.txt    primary_category  No  <metadata_path>  primary_category.txt    secondary_category  No  <metadata_path>  secondary_category.txt    primary_first_sub_category  No  <metadata_path>  primary_first_sub_category.txt    primary_second_sub_category  No  <metadata_path>  primary_second_sub_category.txt    secondary_first_sub_category  No  <metadata_path>  secondary_first_sub_category.txt    secondary_second_sub_category  No  <metadata_path>  secondary_second_sub_category.txt",
            "title": "Non-Localized Metadata"
        },
        {
            "location": "/actions/upload_to_app_store/#localized-metadata",
            "text": "Key  Editable While Live  Directory  Filename      name  No  <metadata_path>/<lang>/  name.txt    subtitle  No  <metadata_path>/<lang>/  subtitle.txt    privacy_url  Yes  <metadata_path>/<lang>/  privacy_url.txt    apple_tv_privacy_policy  No  <metadata_path>/<lang>/  apple_tv_privacy_policy.txt    description  Yes  <metadata_path>/<lang>/  description.txt    keywords  No  <metadata_path>/<lang>/  keywords.txt    release_notes  Yes  <metadata_path>/<lang>/  release_notes.txt    support_url  Yes  <metadata_path>/<lang>/  support_url.txt    marketing_url  Yes  <metadata_path>/<lang>/  marketing_url.txt    promotional_text  Yes  <metadata_path>/<lang>/  promotional_text.txt",
            "title": "Localized Metadata"
        },
        {
            "location": "/actions/upload_to_app_store/#review-information-metadata",
            "text": "Key  Editable While Live  Directory  Filename  Deprecated Filename      first_name  Yes  <metadata_path>/review_information  first_name.txt  review_first_name.txt    last_name  Yes  <metadata_path>/review_information  last_name.txt  review_last_name.txt    phone_number  Yes  <metadata_path>/review_information  phone_number.txt  review_phone_number.txt    email_address  Yes  <metadata_path>/review_information  email_address.txt  review_email.txt    demo_user  Yes  <metadata_path>/review_information  demo_user.txt  review_demo_user.txt    demo_password  Yes  <metadata_path>/review_information  demo_password.txt  review_demo_password.txt    notes  Yes  <metadata_path>/review_information  notes.txt  review_notes.txt",
            "title": "Review Information Metadata"
        },
        {
            "location": "/actions/upload_to_app_store/#reference",
            "text": "View all available categories, etc.",
            "title": "Reference"
        },
        {
            "location": "/actions/upload_to_app_store/#available-categories",
            "text": "FOOD_AND_DRINK  BUSINESS  EDUCATION  SOCIAL_NETWORKING  BOOKS  SPORTS  FINANCE  REFERENCE  GRAPHICS_AND_DESIGN  DEVELOPER_TOOLS  HEALTH_AND_FITNESS  MUSIC  WEATHER  TRAVEL  ENTERTAINMENT  STICKERS  GAMES  LIFESTYLE  MEDICAL  MAGAZINES_AND_NEWSPAPERS  UTILITIES  SHOPPING  PRODUCTIVITY  NEWS  PHOTO_AND_VIDEO  NAVIGATION",
            "title": "Available Categories"
        },
        {
            "location": "/actions/upload_to_app_store/#available-game-subcategories",
            "text": "MZGenre.Action  MZGenre.Adventure  MZGenre.Arcade  MZGenre.Board  MZGenre.Card  MZGenre.Casino  MZGenre.Dice  MZGenre.Educational  MZGenre.Family  MZGenre.Music  MZGenre.Puzzle  MZGenre.Racing  MZGenre.RolePlaying  MZGenre.Simulation  MZGenre.Sports  MZGenre.Strategy  MZGenre.Trivia  MZGenre.Word    GAMES_SPORTS  GAMES_WORD  GAMES_MUSIC  GAMES_ADVENTURE  GAMES_ACTION  GAMES_ROLE_PLAYING  GAMES_CASUAL  GAMES_BOARD  GAMES_TRIVIA  GAMES_CARD  GAMES_PUZZLE  GAMES_CASINO  GAMES_STRATEGY  GAMES_SIMULATION  GAMES_RACING  GAMES_FAMILY",
            "title": "Available Game Subcategories"
        },
        {
            "location": "/actions/upload_to_app_store/#available-stickers-subcategories",
            "text": "STICKERS_PLACES_AND_OBJECTS  STICKERS_EMOJI_AND_EXPRESSIONS  STICKERS_CELEBRATIONS  STICKERS_CELEBRITIES  STICKERS_MOVIES_AND_TV  STICKERS_SPORTS_AND_ACTIVITIES  STICKERS_EATING_AND_DRINKING  STICKERS_CHARACTERS  STICKERS_ANIMALS  STICKERS_FASHION  STICKERS_ART  STICKERS_GAMING  STICKERS_KIDS_AND_FAMILY  STICKERS_PEOPLE  STICKERS_MUSIC",
            "title": "Available Stickers Subcategories"
        },
        {
            "location": "/actions/upload_to_app_store/#available-age-rating-groups",
            "text": "",
            "title": "Available age rating groups"
        },
        {
            "location": "/actions/upload_to_app_store/#non-boolean",
            "text": "Values   0: None  1: Infrequent/Mild  2: Frequent/Intense    NONE  INFREQUENT_OR_MILD  FREQUENT_OR_INTENSE   Keys   violenceCartoonOrFantasy  violenceRealistic  violenceRealisticProlongedGraphicOrSadistic  profanityOrCrudeHumor  matureOrSuggestiveThemes  horrorOrFearThemes  medicalOrTreatmentInformation  alcoholTobaccoOrDrugUseOrReferences  gamblingSimulated  sexualContentOrNudity  sexualContentGraphicAndNudity",
            "title": "Non Boolean"
        },
        {
            "location": "/actions/upload_to_app_store/#boolean",
            "text": "Keys   unrestrictedWebAccess  gamblingAndContests",
            "title": "Boolean"
        },
        {
            "location": "/actions/upload_to_app_store/#default-values",
            "text": "Deliver has a special  default  language code which allows you to provide values that are not localized, and which will be used as defaults when you don\u2019t provide a specific localized value.  In order to use  default , you will need to tell  deliver  which languages your app uses. You can do this in either of two ways:   Create the folders named with the language in the metadata folder (i.e. fastlane/metadata/en-US or fastlane/metadata/de-DE)  Add the following to your  Deliverfile   languages(['en-US','de-DE'])   You can use this either in json within your  Deliverfile  and/or as folders in your metadata folder.  deliver  will take the union of both language sets from the  Deliverfile  and from the metadata folder and create on single set of languages which will be enabled.  Imagine that you have localized data for the following language codes:   en-US, de-DE, el, it  You can set the following in your  Deliverfile  release_notes({\n  'default' => \"Shiny and new\",\n  'de-DE' => \"glaenzend und neu\"\n})  Deliver will use \"Shiny and new\" for en-US, el and it.  It will use \"glaenzend und neu\" for de-DE.  You can do the same with folders     default\n      keywords.txt\n      marketing_url.txt\n      name.txt\n      privacy_url.txt\n      support_url.txt\n      release_notes.txt\n   en-US\n      description.txt\n   de-DE\n      description.txt\n   el\n      description.txt\n   it\n      description.txt  In this case, default values for keywords, urls, name and release notes are used in all localizations, but each language has a fully localized description",
            "title": "Default values"
        },
        {
            "location": "/actions/upload_to_app_store/#uploading-screenshots-for-ipad-pro-129-inch-3rd-generation",
            "text": "Starting March 20, 2019 Apple's App Store  requires 12.9-inch iPad Pro (3rd generation) screenshots additionally to the iPad Pro 2nd generation  screenshots . As fastlane historically uses the screenshot dimensions to determine the \"display family\" of a screenshot, this poses a problem as both use the same dimensions and are recognized as the same device family.  To solve this a screenshot of a 12.9-inch iPad Pro (3rd generation) must contain either the string  iPad Pro (12.9-inch) (3rd generation)  or  ipadPro129  (Apple's internal naming of the display family for the 3rd generation iPad Pro) in its filename to be assigned the correct display family and to be uploaded to the correct screenshot slot in your app's metadata.",
            "title": "Uploading screenshots for \"iPad Pro (12.9-inch) (3rd generation)\""
        },
        {
            "location": "/actions/upload_to_app_store/#automatically-create-screenshots",
            "text": "If you want to integrate  deliver  with  snapshot , check out  fastlane !",
            "title": "Automatically create screenshots"
        },
        {
            "location": "/actions/upload_to_app_store/#jenkins-integration",
            "text": "Detailed instructions about how to set up  deliver  and  fastlane  in  Jenkins  can be found in the  fastlane README .",
            "title": "Jenkins integration"
        },
        {
            "location": "/actions/upload_to_app_store/#firewall-issues",
            "text": "deliver  uses the iTunes Transporter to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol using  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" fastlane deliver",
            "title": "Firewall Issues"
        },
        {
            "location": "/actions/upload_to_app_store/#http-proxy",
            "text": "iTunes Transporter is a Java application bundled with Xcode. In addition to utilizing the  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" , you need to configure the transporter application to use the proxy independently from the system proxy or any environment proxy settings. You can find the configuration file within Xcode:  for Xcode11 and later  TOOLS_PATH=$( xcode-select -p )\nREL_PATH='../SharedFrameworks/ContentDeliveryServices.framework/Versions/A/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"  for Xcode10 or earlier  TOOLS_PATH=$( xcode-select -p )\nREL_PATH='../Applications/Application Loader.app/Contents/itms/java/lib/net.properties'\necho \"$TOOLS_PATH/$REL_PATH\"  Add necessary proxy configuration values to the net.properties according to  Java Proxy Configuration .  As an alternative to editing the properties files, proxy configuration can be specified on the command line directly:  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV -Dhttp.proxyHost=myproxy.com -Dhttp.proxyPort=8080\"",
            "title": "HTTP Proxy"
        },
        {
            "location": "/actions/upload_to_app_store/#limit",
            "text": "App Store Connect has a limit of 150 binary uploads per day.",
            "title": "Limit"
        },
        {
            "location": "/actions/upload_to_app_store/#editing-the-deliverfile",
            "text": "Change syntax highlighting to  Ruby .",
            "title": "Editing the Deliverfile"
        },
        {
            "location": "/actions/upload_to_app_store/#provider-short-name",
            "text": "If you are on multiple App Store Connect teams,  deliver  needs a provider short name to know where to upload your binary.  deliver  will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the  itc_provider  option.      upload_to_app_store       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "Provider Short Name"
        },
        {
            "location": "/actions/upload_to_app_store/#3-examples",
            "text": "upload_to_app_store(\n  force: true, # Set to true to skip verification of HTML preview\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)  deliver   # alias for \"upload_to_app_store\"  appstore  # alias for \"upload_to_app_store\"",
            "title": "3 Examples"
        },
        {
            "location": "/actions/upload_to_app_store/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    app_identifier  The bundle identifier of your app  *    app_version  The version that should be edited or created     ipa  Path to your ipa file  *    pkg  Path to your pkg file  *    build_number  If set the given build number (already uploaded to iTC) will be used instead of the current built one     platform  The platform to use (optional)  ios    edit_live  Modify live metadata, this option disables ipa upload and screenshot upload  false    use_live_version  Force usage of live version rather than edit version  false    metadata_path  Path to the folder containing the metadata files     screenshots_path  Path to the folder containing the screenshots     skip_binary_upload  Skip uploading an ipa or pkg to App Store Connect  false    skip_screenshots  Don't upload the screenshots  false    skip_metadata  Don't upload the metadata (e.g. title, description). This will still upload screenshots  false    skip_app_version_update  Don\u2019t create or update the app version that is being prepared for submission  false    force  Skip verification of HTML preview file  false    overwrite_screenshots  Clear all previously uploaded screenshots before uploading the new ones  false    submit_for_review  Submit the new version for Review after uploading everything  false    reject_if_possible  Rejects the previously submitted build if it's in a state where it's possible  false    automatic_release  Should the app be automatically released once it's approved? (Can not be used together with  auto_release_date )     auto_release_date  Date in milliseconds for automatically releasing on pending approval (Can not be used together with  automatic_release )     phased_release  Enable the phased release feature of iTC  false    reset_ratings  Reset the summary rating when you release a new version of the application  false    price_tier  The price tier of this application     app_rating_config_path  Path to the app rating's config     submission_information  Extra information for the submission (e.g. compliance specifications, IDFA settings)     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    dev_portal_team_id  The short ID of your Developer Portal team, if you're in multiple teams. Different from your iTC team ID!  *    dev_portal_team_name  The name of your Developer Portal team if you're in multiple teams  *    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run  pathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off . The short names of providers should be listed in the second column  *    run_precheck_before_submit  Run precheck before submitting to app review  true    precheck_default_rule_level  The default precheck rule level unless otherwise configured  :warn    individual_metadata_items  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - An array of localized metadata items to upload individually by language so that errors can be identified. E.g. ['name', 'keywords', 'description']. Note: slow     app_icon  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the app icon     apple_watch_app_icon  DEPRECATED!  Removed after the migration to the new App Store Connect API in June 2020 - Metadata: The path to the Apple Watch app icon     copyright  Metadata: The copyright notice     primary_category  Metadata: The english name of the primary category (e.g.  Business ,  Books )     secondary_category  Metadata: The english name of the secondary category (e.g.  Business ,  Books )     primary_first_sub_category  Metadata: The english name of the primary first sub category (e.g.  Educational ,  Puzzle )     primary_second_sub_category  Metadata: The english name of the primary second sub category (e.g.  Educational ,  Puzzle )     secondary_first_sub_category  Metadata: The english name of the secondary first sub category (e.g.  Educational ,  Puzzle )     secondary_second_sub_category  Metadata: The english name of the secondary second sub category (e.g.  Educational ,  Puzzle )     trade_representative_contact_information  Metadata: A hash containing the trade representative contact information     app_review_information  Metadata: A hash containing the review information     app_review_attachment_file  Metadata: Path to the app review attachment file     description  Metadata: The localised app description     name  Metadata: The localised app name     subtitle  Metadata: The localised app subtitle     keywords  Metadata: An array of localised keywords     promotional_text  Metadata: An array of localised promotional texts     release_notes  Metadata: Localised release notes for this version     privacy_url  Metadata: Localised privacy url     apple_tv_privacy_policy  Metadata: Localised Apple TV privacy policy text     support_url  Metadata: Localised support url     marketing_url  Metadata: Localised marketing url     languages  Metadata: List of languages to activate     ignore_language_directory_validation  Ignore errors when invalid languages are found in metadata and screenshot directories  false    precheck_include_in_app_purchases  Should precheck check in-app purchases?  true    app  The (spaceship) app ID of the app you want to use/modify      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_to_app_store/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_to_app_store",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_to_app_store/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_to_app_store  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_to_app_store parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_to_app_store/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_to_play_store/",
            "text": "upload_to_play_store\n\n\nUpload metadata, screenshots and binaries to Google Play (via \nsupply\n)\n\n\n\n  \n\n\n\n\n\nCommand line tool for updating Android apps and their metadata on the Google Play Store\n\n\nsupply\n uploads app metadata, screenshots, binaries, and app bundles to Google Play. You can also select tracks for builds and promote builds to production.\n\n\n\n\n\n    \nFeatures\n \u2022\n    \nSetup\n \u2022\n    \nQuick Start\n \u2022\n    \nCommands\n \u2022\n    \nUploading an APK\n \u2022\n    \nUploading an AAB\n \u2022\n    \nImages\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nUpdate existing Android applications on Google Play via the command line\n\n\nUpload new builds (APKs and AABs)\n\n\nRetrieve and edit metadata, such as title and description, for multiple languages\n\n\nUpload the app icon, promo graphics and screenshots for multiple languages\n\n\nHave a local copy of the metadata in your git repository\n\n\nRetrieve version code numbers from existing Google Play tracks\n\n\n\n\nSetup\n\n\nSetup consists of setting up your Google Developers Service Account\n\n\nTip: If you see Google Play Console or Google Developer Console in your local language, add \n&hl=en\n at the end of the URL (before any \n#...\n) to switch to English.\n\n\n\n\nOpen the \nGoogle Play Console\n\n\nClick the \nSettings\n menu entry, followed by \nAPI access\n\n\nClick the \nCREATE SERVICE ACCOUNT\n button \n\n\nFollow the \nGoogle Developers Console\n link in the dialog, which opens a new tab/window:\n\n\nClick the \nCREATE SERVICE ACCOUNT\n button at the top of the \nGoogle Developers Console\n\n\nProvide a \nService account name\n\n\nClick \nSelect a role\n and choose \nService Accounts > Service Account User\n\n\nCheck the \nFurnish a new private key\n checkbox\n\n\nMake sure \nJSON\n is selected as the \nKey type\n\n\nClick \nSAVE\n to close the dialog\n\n\nMake a note of the file name of the JSON file downloaded to your computer\n\n\n\n\n\n\nBack on the \nGoogle Play Console\n, click \nDONE\n to close the dialog\n\n\nClick on \nGrant Access\n for the newly added service account\n\n\nChoose \nRelease Manager\n (or alternatively \nProject Lead\n) from the \nRole\n dropdown. (Note that choosing \nRelease Manager\n grants access to the production track and all other tracks. Choosing \nProject Lead\n grants access to update all tracks \nexcept\n the production track.)\n\n\nClick \nADD USER\n to close the dialog\n\n\n\n\nYou can use \nfastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json\n to test the connection to Google Play Store with the downloaded private key.\n\n\nMigrating Google credential format (from .p12 key file to .json)\n\n\nIn previous versions of supply, credentials to your Play Console were stored as \n.p12\n files. Since version 0.4.0, supply now supports the recommended \n.json\n key Service Account credential files. If you wish to upgrade:\n\n\n\n\nfollow the \nSetup\n procedure once again to make sure you create the appropriate JSON file\n\n\nupdate your fastlane configuration or your command line invocation to use the appropriate argument if necessary.\n  Note that you don't need to take note nor pass the \nissuer\n argument anymore.\n\n\n\n\nThe previous p12 configuration is still currently supported.\n\n\nQuick Start\n\n\n\n\nBefore using \nsupply\n to connect to Google Play Store, you'll need to set up your app manually first by uploading at least one build to Google Play Store. See \nfastlane/fastlane#14686\n for more info.\n\n\n\n\n\n\ncd [your_project_folder]\n\n\nfastlane supply init\n\n\nMake changes to the downloaded metadata, add images, screenshots and/or an APK\n\n\nfastlane supply\n\n\n\n\nAvailable Commands\n\n\n\n\nfastlane supply\n: update an app with metadata, a build, images and screenshots\n\n\nfastlane supply init\n: download metadata for an existing app to a local directory\n\n\nfastlane action supply\n: show information on available commands, arguments and environment variables\n\n\n\n\nYou can either run \nsupply\n on its own and use it interactively, or you can pass arguments or specify environment variables for all the options to skip the questions.\n\n\nUploading an APK\n\n\nTo upload a new binary to Google Play, simply run\n\n\nfastlane supply --apk path/to/app.apk\n\n\n\n\nThis will also upload app metadata if you previously ran \nfastlane supply init\n.\n\n\nTo gradually roll out a new build use\n\n\nfastlane supply --apk path/app.apk --track beta --rollout 0.5\n\n\n\n\nTo set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option \nin_app_update_priority\n\n\nfastlane supply --apk path/app.apk --track beta --in_app_update_priority 3\n\n\n\n\nExpansion files (\n.obb\n)\n\n\nExpansion files (obbs) found under the same directory as your APK will also be uploaded together with your APK as long as:\n\n\n\n\nthey are identified as type 'main' or 'patch' (by containing 'main' or 'patch' in their file name)\n\n\nyou have at most one of each type\n\n\n\n\nIf you only want to update the APK, but keep the expansion files from the previous version on Google Play use\n\n\nfastlane supply --apk path/app.apk --obb_main_references_version 21 --obb_main_file_size 666154207\n\n\n\n\nor\n\n\nfastlane supply --apk path/app.apk --obb_patch_references_version 21 --obb_patch_file_size 666154207\n\n\n\n\nUploading an AAB\n\n\nTo upload a new \nAndroid application bundle\n to Google Play, simply run\n\n\nfastlane supply --aab path/to/app.aab\n\n\n\n\nThis will also upload app metadata if you previously ran \nfastlane supply init\n.\n\n\nTo gradually roll out a new build use\n\n\nfastlane supply --aab path/app.aab --track beta --rollout 0.5\n\n\n\n\nTo set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option \nin_app_update_priority\n\n\nfastlane supply --aab path/app.aab --track beta --in_app_update_priority 3\n\n\n\n\nImages and Screenshots\n\n\nAfter running \nfastlane supply init\n, you will have a metadata directory. This directory contains one or more locale directories (e.g. en-US, en-GB, etc.), and inside this directory are text files such as \ntitle.txt\n and \nshort_description.txt\n.\n\n\nInside of a given locale directory is a folder called \nimages\n. Here you can supply images with the following file names (extension can be png, jpg or jpeg):\n\n\n\n\nfeatureGraphic\n\n\nicon\n\n\npromoGraphic\n\n\ntvBanner\n\n\n\n\nYou can also supply screenshots by creating directories within the \nimages\n directory with the following names, containing PNGs or JPEGs (image names are irrelevant):\n\n\n\n\nphoneScreenshots/\n\n\nsevenInchScreenshots/\n (7-inch tablets)\n\n\ntenInchScreenshots/\n (10-inch tablets)\n\n\ntvScreenshots/\n\n\nwearScreenshots/\n\n\n\n\nNote that these will replace the current images and screenshots on the play store listing, not add to them.\n\n\nChangelogs (What's new)\n\n\nYou can add changelog files under the \nchangelogs/\n directory for each locale. The filename should exactly match the \nversion code\n of the APK that it represents. You can also provide default notes that will be used if no files match the version code by adding a \ndefault.txt\n file. \nfastlane supply init\n will populate changelog files from existing data on Google Play if no \nmetadata/\n directory exists when it is run.\n\n\n\u2514\u2500\u2500 fastlane\n    \u2514\u2500\u2500 metadata\n        \u2514\u2500\u2500 android\n            \u251c\u2500\u2500 en-US\n            \u2502   \u2514\u2500\u2500 changelogs\n            \u2502       \u251c\u2500\u2500 default.txt\n            \u2502       \u251c\u2500\u2500 100000.txt\n            \u2502       \u2514\u2500\u2500 100100.txt\n            \u2514\u2500\u2500 fr-FR\n                \u2514\u2500\u2500 changelogs\n                    \u251c\u2500\u2500 default.txt\n                    \u2514\u2500\u2500 100100.txt\n\n\n\n\nTrack Promotion\n\n\nA common Play publishing scenario might involve uploading an APK version to a test track, testing it, and finally promoting that version to production.\n\n\nThis can be done using the \n--track_promote_to\n parameter. The \n--track_promote_to\n parameter works with the \n--track\n parameter to command the Play API to promote existing Play track APK version(s) (those active on the track identified by the \n--track\n param value) to a new track (\n--track_promote_to\n value).\n\n\nRetrieve Track Release Names & Version Codes\n\n\nBefore performing a new APK upload you may want to check existing track version codes or release names, or you may simply want to provide an informational lane that displays the currently promoted version codes or release name for the production track. You can use the \ngoogle_play_track_version_codes\n action to retrieve existing version codes for a package and track. You can use the \ngoogle_play_track_release_names\n action to retrieve existing release names for a package and track.\nFor more information, see the \nfastlane action google_play_track_version_codes\n and \nfastlane action google_play_track_release_names\n help output.\n\n\nMigration from AndroidPublisherV2 to AndroidPublisherV3 in \nfastlane\n 2.135.0\n\n\nNew Options\n\n\n\n\n:version_name\n\n\nUsed when uploading with \n:apk_path\n, \n:apk_paths\n, \n:aab_path\n, and \n:aab_paths\n\n\nCan be any string such (example: \"October Release\" or \"Awesome New Feature\")\n\n\nDefaults to the version name in app/build.gradle or AndroidManifest.xml\n\n\n\n\n\n\n:release_status\n\n\nUsed when uploading with \n:apk_path\n, \n:apk_paths\n, \n:aab_path\n, and \n:aab_paths\n\n\nCan set as  \"draft\" to complete the release at some other time\n\n\nDefaults to \"completed\"\n\n\n\n\n\n\n:version_code\n\n\nUsed for \n:update_rollout\n, \n:track_promote_to\n, and uploading of meta data and screenshots\n\n\n\n\n\n\n:skip_upload_changelogs\n\n\nChangelogs were previously included with the \n:skip_upload_metadata\n but is now its own option\n\n\n\n\n\n\n\n\nDeprecated Options\n\n\n\n\n:check_superseded_tracks\n\n\nGoogle Play will automatically remove releases that are superseded now\n\n\n\n\n\n\n:deactivate_on_promote\n\n\nGoogle Play will automatically deactivate a release from its previous track on promote\n\n\n\n\n\n\n\n\n:\n\n\n\n\n\n\n\n\n\n\n\nupload_to_play_store\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nupload_to_play_store\n\n\n\n\nsupply # alias for \"upload_to_play_store\"\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the application to use\n\n\n*\n\n\n\n\n\n\nversion_name\n\n\nVersion name (used when uploading new apks/aabs) - defaults to 'versionName' in build.gradle or AndroidManifest.xml\n\n\n*\n\n\n\n\n\n\nversion_code\n\n\nVersion code (used when updating rollout or promoting specific versions)\n\n\n*\n\n\n\n\n\n\nrelease_status\n\n\nRelease status (used when uploading new apks/aabs) - valid values are completed, draft, halted, inProgress\n\n\n*\n\n\n\n\n\n\ntrack\n\n\nThe track of the application to use. The default available tracks are: production, beta, alpha, internal\n\n\nproduction\n\n\n\n\n\n\nrollout\n\n\nThe percentage of the user fraction when uploading to the rollout track (setting to 1 will complete the rollout)\n\n\n\n\n\n\n\n\nmetadata_path\n\n\nPath to the directory containing the metadata files\n\n\n*\n\n\n\n\n\n\nkey\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The p12 File used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nissuer\n\n\nDEPRECATED!\n Use \n--json_key\n instead - The issuer of the p12 file (email address of the service account)\n\n\n*\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\napk\n\n\nPath to the APK file to upload\n\n\n*\n\n\n\n\n\n\napk_paths\n\n\nAn array of paths to APK files to upload\n\n\n\n\n\n\n\n\naab\n\n\nPath to the AAB file to upload\n\n\n*\n\n\n\n\n\n\naab_paths\n\n\nAn array of paths to AAB files to upload\n\n\n\n\n\n\n\n\nskip_upload_apk\n\n\nWhether to skip uploading APK\n\n\nfalse\n\n\n\n\n\n\nskip_upload_aab\n\n\nWhether to skip uploading AAB\n\n\nfalse\n\n\n\n\n\n\nskip_upload_metadata\n\n\nWhether to skip uploading metadata, changelogs not included\n\n\nfalse\n\n\n\n\n\n\nskip_upload_changelogs\n\n\nWhether to skip uploading changelogs\n\n\nfalse\n\n\n\n\n\n\nskip_upload_images\n\n\nWhether to skip uploading images, screenshots not included\n\n\nfalse\n\n\n\n\n\n\nskip_upload_screenshots\n\n\nWhether to skip uploading SCREENSHOTS\n\n\nfalse\n\n\n\n\n\n\ntrack_promote_to\n\n\nThe track to promote to. The default available tracks are: production, beta, alpha, internal\n\n\n\n\n\n\n\n\nvalidate_only\n\n\nOnly validate changes with Google Play rather than actually publish\n\n\nfalse\n\n\n\n\n\n\nmapping\n\n\nPath to the mapping file to upload\n\n\n\n\n\n\n\n\nmapping_paths\n\n\nAn array of paths to mapping files to upload\n\n\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ncheck_superseded_tracks\n\n\nDEPRECATED!\n Google Play does this automatically now - Check the other tracks for superseded versions and disable them\n\n\nfalse\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\ndeactivate_on_promote\n\n\nDEPRECATED!\n Google Play does this automatically now - When promoting to a new track, deactivate the binary in the origin track\n\n\ntrue\n\n\n\n\n\n\nversion_codes_to_retain\n\n\nAn array of version codes to retain when publishing a new APK\n\n\n\n\n\n\n\n\nin_app_update_priority\n\n\nIn-app update priority for all the newly added apks in the release. Can take values between [0,5]\n\n\n\n\n\n\n\n\nobb_main_references_version\n\n\nReferences version of 'main' expansion file\n\n\n\n\n\n\n\n\nobb_main_file_size\n\n\nSize of 'main' expansion file in bytes\n\n\n\n\n\n\n\n\nobb_patch_references_version\n\n\nReferences version of 'patch' expansion file\n\n\n\n\n\n\n\n\nobb_patch_file_size\n\n\nSize of 'patch' expansion file in bytes\n\n\n\n\n\n\n\n\nack_bundle_installation_warning\n\n\nMust be set to true if the bundle installation may trigger a warning on user devices (e.g can only be downloaded over wifi). Typically this is required for bundles over 150MB\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_to_play_store\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_to_play_store\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_to_play_store parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_to_play_store"
        },
        {
            "location": "/actions/upload_to_play_store/#upload_to_play_store",
            "text": "Upload metadata, screenshots and binaries to Google Play (via  supply )",
            "title": "upload_to_play_store"
        },
        {
            "location": "/actions/upload_to_play_store/#command-line-tool-for-updating-android-apps-and-their-metadata-on-the-google-play-store",
            "text": "supply  uploads app metadata, screenshots, binaries, and app bundles to Google Play. You can also select tracks for builds and promote builds to production.   \n     Features  \u2022\n     Setup  \u2022\n     Quick Start  \u2022\n     Commands  \u2022\n     Uploading an APK  \u2022\n     Uploading an AAB  \u2022\n     Images",
            "title": "Command line tool for updating Android apps and their metadata on the Google Play Store"
        },
        {
            "location": "/actions/upload_to_play_store/#features",
            "text": "Update existing Android applications on Google Play via the command line  Upload new builds (APKs and AABs)  Retrieve and edit metadata, such as title and description, for multiple languages  Upload the app icon, promo graphics and screenshots for multiple languages  Have a local copy of the metadata in your git repository  Retrieve version code numbers from existing Google Play tracks",
            "title": "Features"
        },
        {
            "location": "/actions/upload_to_play_store/#setup",
            "text": "Setup consists of setting up your Google Developers Service Account  Tip: If you see Google Play Console or Google Developer Console in your local language, add  &hl=en  at the end of the URL (before any  #... ) to switch to English.   Open the  Google Play Console  Click the  Settings  menu entry, followed by  API access  Click the  CREATE SERVICE ACCOUNT  button   Follow the  Google Developers Console  link in the dialog, which opens a new tab/window:  Click the  CREATE SERVICE ACCOUNT  button at the top of the  Google Developers Console  Provide a  Service account name  Click  Select a role  and choose  Service Accounts > Service Account User  Check the  Furnish a new private key  checkbox  Make sure  JSON  is selected as the  Key type  Click  SAVE  to close the dialog  Make a note of the file name of the JSON file downloaded to your computer    Back on the  Google Play Console , click  DONE  to close the dialog  Click on  Grant Access  for the newly added service account  Choose  Release Manager  (or alternatively  Project Lead ) from the  Role  dropdown. (Note that choosing  Release Manager  grants access to the production track and all other tracks. Choosing  Project Lead  grants access to update all tracks  except  the production track.)  Click  ADD USER  to close the dialog   You can use  fastlane run validate_play_store_json_key json_key:/path/to/your/downloaded/file.json  to test the connection to Google Play Store with the downloaded private key.",
            "title": "Setup"
        },
        {
            "location": "/actions/upload_to_play_store/#migrating-google-credential-format-from-p12-key-file-to-json",
            "text": "In previous versions of supply, credentials to your Play Console were stored as  .p12  files. Since version 0.4.0, supply now supports the recommended  .json  key Service Account credential files. If you wish to upgrade:   follow the  Setup  procedure once again to make sure you create the appropriate JSON file  update your fastlane configuration or your command line invocation to use the appropriate argument if necessary.\n  Note that you don't need to take note nor pass the  issuer  argument anymore.   The previous p12 configuration is still currently supported.",
            "title": "Migrating Google credential format (from .p12 key file to .json)"
        },
        {
            "location": "/actions/upload_to_play_store/#quick-start",
            "text": "Before using  supply  to connect to Google Play Store, you'll need to set up your app manually first by uploading at least one build to Google Play Store. See  fastlane/fastlane#14686  for more info.    cd [your_project_folder]  fastlane supply init  Make changes to the downloaded metadata, add images, screenshots and/or an APK  fastlane supply",
            "title": "Quick Start"
        },
        {
            "location": "/actions/upload_to_play_store/#available-commands",
            "text": "fastlane supply : update an app with metadata, a build, images and screenshots  fastlane supply init : download metadata for an existing app to a local directory  fastlane action supply : show information on available commands, arguments and environment variables   You can either run  supply  on its own and use it interactively, or you can pass arguments or specify environment variables for all the options to skip the questions.",
            "title": "Available Commands"
        },
        {
            "location": "/actions/upload_to_play_store/#uploading-an-apk",
            "text": "To upload a new binary to Google Play, simply run  fastlane supply --apk path/to/app.apk  This will also upload app metadata if you previously ran  fastlane supply init .  To gradually roll out a new build use  fastlane supply --apk path/app.apk --track beta --rollout 0.5  To set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option  in_app_update_priority  fastlane supply --apk path/app.apk --track beta --in_app_update_priority 3",
            "title": "Uploading an APK"
        },
        {
            "location": "/actions/upload_to_play_store/#expansion-files-obb",
            "text": "Expansion files (obbs) found under the same directory as your APK will also be uploaded together with your APK as long as:   they are identified as type 'main' or 'patch' (by containing 'main' or 'patch' in their file name)  you have at most one of each type   If you only want to update the APK, but keep the expansion files from the previous version on Google Play use  fastlane supply --apk path/app.apk --obb_main_references_version 21 --obb_main_file_size 666154207  or  fastlane supply --apk path/app.apk --obb_patch_references_version 21 --obb_patch_file_size 666154207",
            "title": "Expansion files (.obb)"
        },
        {
            "location": "/actions/upload_to_play_store/#uploading-an-aab",
            "text": "To upload a new  Android application bundle  to Google Play, simply run  fastlane supply --aab path/to/app.aab  This will also upload app metadata if you previously ran  fastlane supply init .  To gradually roll out a new build use  fastlane supply --aab path/app.aab --track beta --rollout 0.5  To set the in-app update priority level for a release, set a valid update priority (an integer value from 0 to 5) using option  in_app_update_priority  fastlane supply --aab path/app.aab --track beta --in_app_update_priority 3",
            "title": "Uploading an AAB"
        },
        {
            "location": "/actions/upload_to_play_store/#images-and-screenshots",
            "text": "After running  fastlane supply init , you will have a metadata directory. This directory contains one or more locale directories (e.g. en-US, en-GB, etc.), and inside this directory are text files such as  title.txt  and  short_description.txt .  Inside of a given locale directory is a folder called  images . Here you can supply images with the following file names (extension can be png, jpg or jpeg):   featureGraphic  icon  promoGraphic  tvBanner   You can also supply screenshots by creating directories within the  images  directory with the following names, containing PNGs or JPEGs (image names are irrelevant):   phoneScreenshots/  sevenInchScreenshots/  (7-inch tablets)  tenInchScreenshots/  (10-inch tablets)  tvScreenshots/  wearScreenshots/   Note that these will replace the current images and screenshots on the play store listing, not add to them.",
            "title": "Images and Screenshots"
        },
        {
            "location": "/actions/upload_to_play_store/#changelogs-whats-new",
            "text": "You can add changelog files under the  changelogs/  directory for each locale. The filename should exactly match the  version code  of the APK that it represents. You can also provide default notes that will be used if no files match the version code by adding a  default.txt  file.  fastlane supply init  will populate changelog files from existing data on Google Play if no  metadata/  directory exists when it is run.  \u2514\u2500\u2500 fastlane\n    \u2514\u2500\u2500 metadata\n        \u2514\u2500\u2500 android\n            \u251c\u2500\u2500 en-US\n            \u2502   \u2514\u2500\u2500 changelogs\n            \u2502       \u251c\u2500\u2500 default.txt\n            \u2502       \u251c\u2500\u2500 100000.txt\n            \u2502       \u2514\u2500\u2500 100100.txt\n            \u2514\u2500\u2500 fr-FR\n                \u2514\u2500\u2500 changelogs\n                    \u251c\u2500\u2500 default.txt\n                    \u2514\u2500\u2500 100100.txt",
            "title": "Changelogs (What's new)"
        },
        {
            "location": "/actions/upload_to_play_store/#track-promotion",
            "text": "A common Play publishing scenario might involve uploading an APK version to a test track, testing it, and finally promoting that version to production.  This can be done using the  --track_promote_to  parameter. The  --track_promote_to  parameter works with the  --track  parameter to command the Play API to promote existing Play track APK version(s) (those active on the track identified by the  --track  param value) to a new track ( --track_promote_to  value).",
            "title": "Track Promotion"
        },
        {
            "location": "/actions/upload_to_play_store/#retrieve-track-release-names-version-codes",
            "text": "Before performing a new APK upload you may want to check existing track version codes or release names, or you may simply want to provide an informational lane that displays the currently promoted version codes or release name for the production track. You can use the  google_play_track_version_codes  action to retrieve existing version codes for a package and track. You can use the  google_play_track_release_names  action to retrieve existing release names for a package and track.\nFor more information, see the  fastlane action google_play_track_version_codes  and  fastlane action google_play_track_release_names  help output.",
            "title": "Retrieve Track Release Names &amp; Version Codes"
        },
        {
            "location": "/actions/upload_to_play_store/#migration-from-androidpublisherv2-to-androidpublisherv3-in-fastlane-21350",
            "text": "",
            "title": "Migration from AndroidPublisherV2 to AndroidPublisherV3 in fastlane 2.135.0"
        },
        {
            "location": "/actions/upload_to_play_store/#new-options",
            "text": ":version_name  Used when uploading with  :apk_path ,  :apk_paths ,  :aab_path , and  :aab_paths  Can be any string such (example: \"October Release\" or \"Awesome New Feature\")  Defaults to the version name in app/build.gradle or AndroidManifest.xml    :release_status  Used when uploading with  :apk_path ,  :apk_paths ,  :aab_path , and  :aab_paths  Can set as  \"draft\" to complete the release at some other time  Defaults to \"completed\"    :version_code  Used for  :update_rollout ,  :track_promote_to , and uploading of meta data and screenshots    :skip_upload_changelogs  Changelogs were previously included with the  :skip_upload_metadata  but is now its own option",
            "title": "New Options"
        },
        {
            "location": "/actions/upload_to_play_store/#deprecated-options",
            "text": ":check_superseded_tracks  Google Play will automatically remove releases that are superseded now    :deactivate_on_promote  Google Play will automatically deactivate a release from its previous track on promote     :      upload_to_play_store       Supported platforms  android    Author  @KrauseFx",
            "title": "Deprecated Options"
        },
        {
            "location": "/actions/upload_to_play_store/#2-examples",
            "text": "upload_to_play_store  supply # alias for \"upload_to_play_store\"",
            "title": "2 Examples"
        },
        {
            "location": "/actions/upload_to_play_store/#parameters",
            "text": "Key  Description  Default      package_name  The package name of the application to use  *    version_name  Version name (used when uploading new apks/aabs) - defaults to 'versionName' in build.gradle or AndroidManifest.xml  *    version_code  Version code (used when updating rollout or promoting specific versions)  *    release_status  Release status (used when uploading new apks/aabs) - valid values are completed, draft, halted, inProgress  *    track  The track of the application to use. The default available tracks are: production, beta, alpha, internal  production    rollout  The percentage of the user fraction when uploading to the rollout track (setting to 1 will complete the rollout)     metadata_path  Path to the directory containing the metadata files  *    key  DEPRECATED!  Use  --json_key  instead - The p12 File used to authenticate with Google  *    issuer  DEPRECATED!  Use  --json_key  instead - The issuer of the p12 file (email address of the service account)  *    json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    apk  Path to the APK file to upload  *    apk_paths  An array of paths to APK files to upload     aab  Path to the AAB file to upload  *    aab_paths  An array of paths to AAB files to upload     skip_upload_apk  Whether to skip uploading APK  false    skip_upload_aab  Whether to skip uploading AAB  false    skip_upload_metadata  Whether to skip uploading metadata, changelogs not included  false    skip_upload_changelogs  Whether to skip uploading changelogs  false    skip_upload_images  Whether to skip uploading images, screenshots not included  false    skip_upload_screenshots  Whether to skip uploading SCREENSHOTS  false    track_promote_to  The track to promote to. The default available tracks are: production, beta, alpha, internal     validate_only  Only validate changes with Google Play rather than actually publish  false    mapping  Path to the mapping file to upload     mapping_paths  An array of paths to mapping files to upload     root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     check_superseded_tracks  DEPRECATED!  Google Play does this automatically now - Check the other tracks for superseded versions and disable them  false    timeout  Timeout for read, open, and send (in seconds)  300    deactivate_on_promote  DEPRECATED!  Google Play does this automatically now - When promoting to a new track, deactivate the binary in the origin track  true    version_codes_to_retain  An array of version codes to retain when publishing a new APK     in_app_update_priority  In-app update priority for all the newly added apks in the release. Can take values between [0,5]     obb_main_references_version  References version of 'main' expansion file     obb_main_file_size  Size of 'main' expansion file in bytes     obb_patch_references_version  References version of 'patch' expansion file     obb_patch_file_size  Size of 'patch' expansion file in bytes     ack_bundle_installation_warning  Must be set to true if the bundle installation may trigger a warning on user devices (e.g can only be downloaded over wifi). Typically this is required for bundles over 150MB  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_to_play_store/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_to_play_store",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_to_play_store/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_to_play_store  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_to_play_store parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_to_play_store/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/",
            "text": "upload_to_play_store_internal_app_sharing\n\n\nUpload binaries to Google Play Internal App Sharing (via \nsupply\n)\n\n\n\n\nMore information: https://docs.fastlane.tools/actions/upload_to_play_store_internal_app_sharing/\n\n\n\n\n\n\n\n\n\n\nupload_to_play_store_internal_app_sharing\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@andrewhavens\n\n\n\n\n\n\nReturns\n\n\nReturns a string containing the download URL for the uploaded APK/AAB (or array of strings if multiple were uploaded).\n\n\n\n\n\n\n\n\n1 Example\n\n\nupload_to_play_store_internal_app_sharing\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npackage_name\n\n\nThe package name of the application to use\n\n\n*\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\napk\n\n\nPath to the APK file to upload\n\n\n*\n\n\n\n\n\n\napk_paths\n\n\nAn array of paths to APK files to upload\n\n\n\n\n\n\n\n\naab\n\n\nPath to the AAB file to upload\n\n\n*\n\n\n\n\n\n\naab_paths\n\n\nAn array of paths to AAB files to upload\n\n\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_to_play_store_internal_app_sharing\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_to_play_store_internal_app_sharing\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_to_play_store_internal_app_sharing parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_to_play_store_internal_app_sharing"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/#upload_to_play_store_internal_app_sharing",
            "text": "Upload binaries to Google Play Internal App Sharing (via  supply )   More information: https://docs.fastlane.tools/actions/upload_to_play_store_internal_app_sharing/      upload_to_play_store_internal_app_sharing       Supported platforms  android    Author  @andrewhavens    Returns  Returns a string containing the download URL for the uploaded APK/AAB (or array of strings if multiple were uploaded).",
            "title": "upload_to_play_store_internal_app_sharing"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/#1-example",
            "text": "upload_to_play_store_internal_app_sharing",
            "title": "1 Example"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/#parameters",
            "text": "Key  Description  Default      package_name  The package name of the application to use  *    json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    apk  Path to the APK file to upload  *    apk_paths  An array of paths to APK files to upload     aab  Path to the AAB file to upload  *    aab_paths  An array of paths to AAB files to upload     root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     timeout  Timeout for read, open, and send (in seconds)  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_to_play_store_internal_app_sharing",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_to_play_store_internal_app_sharing  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_to_play_store_internal_app_sharing parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_to_play_store_internal_app_sharing/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/upload_to_testflight/",
            "text": "upload_to_testflight\n\n\nUpload new binary to App Store Connect for TestFlight beta testing (via \npilot\n)\n\n\n\n  \n\n\n\n\n\nThe best way to manage your TestFlight testers and builds from your terminal\n\n\nPilot makes it easier to manage your app on Apple\u2019s TestFlight. You can:\n\n\n\n\nUpload & distribute builds\n\n\nAdd & remove testers\n\n\nRetrieve information about testers & devices\n\n\nImport/export all available testers\n\n\n\n\npilot\n uses \nspaceship.airforce\n to interact with App Store Connect \ud83d\ude80\n\n\n\n\n\n    \nUsage\n \u2022\n    \nTips\n\n\n\n\n\n\n\npilot\n is part of \nfastlane\n: The easiest way to automate beta deployments and releases for your iOS and Android apps.\n\n\n\nUsage\n\n\nFor all commands, you can either use an \nAPI Key\n or your \nApple ID\n.\n\n\nApp Store Connect API Key\n\n\nThe App Store Connect API Key is the preferred authentication method (if you are able to use it).\n\n\n\n\nUses official App Store Connect API\n\n\nNo need for 2FA\n\n\nBetter performance over Apple ID\n\n\n\n\nSpecify the API key using \n--api_key_path ./path/to/api_key_info.json\n or \n--api_key \"{\\\"key_id\\\": \\\"D83848D23\\\", \\\"issuer_id\\\": \\\"227b0bbf-ada8-458c-9d62-3d8022b7d07f\\\", \\\"key_filepath\\\": \\\"D83848D23.p8\\\"}\"\n\n\nGo to \nUsing App Store Connect API\n for information on obtaining an API key, the \nfastlane\n \napi_key_info.json\n format, and other API key usage.\n\n\nApple ID\n\n\nSpecify the Apple ID to use using \n-u felix@krausefx.com\n. If you execute \npilot\n in a project already using \nfastlane\n the username and app identifier will automatically be determined.\n\n\nUploading builds\n\n\nTo upload a new build, just run\n\n\nfastlane pilot upload\n\n\n\n\nThis will automatically look for an \nipa\n in your current directory and tries to fetch the login credentials from your \nfastlane setup\n.\n\n\nYou'll be asked for any missing information. Additionally, you can pass all kinds of parameters:\n\n\nfastlane action pilot\n\n\n\n\nYou can pass a changelog using\n\n\nfastlane pilot upload --changelog \"Something that is new here\"\n\n\n\n\nYou can also skip the submission of the binary, which means, the \nipa\n file will only be uploaded and not distributed to testers:\n\n\nfastlane pilot upload --skip_submission\n\n\n\n\npilot\n does all kinds of magic for you:\n\n\n\n\nAutomatically detects the bundle identifier from your \nipa\n file\n\n\nAutomatically fetch the AppID of your app based on the bundle identifier\n\n\n\n\npilot\n uses \nspaceship\n to submit the build metadata and the iTunes Transporter to upload the binary. Because iTunes Transporter's upload capability is only supported on OS X, \npilot upload\n does not work on Linux, as described \nin this issue\n\n\nList builds\n\n\nTo list all builds for specific application use\n\n\nfastlane pilot builds\n\n\n\n\nThe result lists all active builds and processing builds:\n\n\n+-----------+---------+----------+\n|      Great App Builds          |\n+-----------+---------+----------+\n| Version # | Build # | Installs |\n+-----------+---------+----------+\n| 0.9.13    | 1       | 0        |\n| 0.9.13    | 2       | 0        |\n| 0.9.20    | 3       | 0        |\n| 0.9.20    | 4       | 3        |\n+-----------+---------+----------+\n\n\n\n\nManaging beta testers\n\n\nList of Testers\n\n\nThis command will list all your testers, both internal and external.\n\n\nfastlane pilot list\n\n\n\n\nThe output will look like this:\n\n\n+--------+--------+--------------------------+-----------+\n|                    Internal Testers                    |\n+--------+--------+--------------------------+-----------+\n| First  | Last   | Email                    | # Devices |\n+--------+--------+--------------------------+-----------+\n| Felix  | Krause | felix@krausefx.com       | 2         |\n+--------+--------+--------------------------+-----------+\n\n+-----------+---------+----------------------------+-----------+\n|                       External Testers                       |\n+-----------+---------+----------------------------+-----------+\n| First     | Last    | Email                      | # Devices |\n+-----------+---------+----------------------------+-----------+\n| Max       | Manfred | email@email.com            | 0         |\n| Detlef    | M\u00fcller  | detlef@krausefx.com        | 1         |\n+-----------+---------+----------------------------+-----------+\n\n\n\n\nAdd a new tester\n\n\nTo add a new tester to both your App Store Connect account and to your app (if given), use the \npilot add\n command. This will create a new tester (if necessary) or add an existing tester to the app to test.\n\n\nfastlane pilot add email@invite.com\n\n\n\n\nAdditionally you can specify the app identifier (if necessary):\n\n\nfastlane pilot add email@email.com -a com.krausefx.app\n\n\n\n\nFind a tester\n\n\nTo find a specific tester use\n\n\nfastlane pilot find felix@krausefx.com\n\n\n\n\nThe resulting output will look like this:\n\n\n+---------------------+---------------------+\n|            felix@krausefx.com             |\n+---------------------+---------------------+\n| First name          | Felix               |\n| Last name           | Krause              |\n| Email               | felix@krausefx.com  |\n| Latest Version      | 0.9.14 (23          |\n| Latest Install Date | 03/28/15 19:00      |\n| 2 Devices           | \u2022 iPhone 6, iOS 8.3 |\n|                     | \u2022 iPhone 5, iOS 7.0 |\n+---------------------+---------------------+\n\n\n\n\nRemove a tester\n\n\nThis command will only remove external beta testers.\n\n\nfastlane pilot remove felix@krausefx.com\n\n\n\n\nExport testers\n\n\nTo export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.\n\n\nfastlane pilot export\n\n\n\n\nImport testers\n\n\nAdd external testers from a CSV file. Create a file (ex: \ntesters.csv\n) and fill it with the following format:\n\n\nJohn,Appleseed,appleseed_john@mac.com,group-1;group-2\n\n\n\n\nfastlane pilot import\n\n\n\n\nYou can also specify the directory using\n\n\nfastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv\n\n\n\n\nTips\n\n\nDebug information\n\n\nIf you run into any issues you can use the \nverbose\n mode to get a more detailed output:\n\n\nfastlane pilot upload --verbose\n\n\n\n\nFirewall Issues\n\n\npilot\n uses the iTunes \nTransporter\n to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol from the command line using\n\n\nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...\n\n\n\n\nIf you are using \npilot\n via the \nfastlane action\n, add the following to your \nFastfile\n\n\nENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...\n\n\n\n\nNote, however, that Apple recommends you don\u2019t specify the \n-t transport\n and instead allow Transporter to use automatic transport discovery to determine the best transport mode for your packages. For this reason, if the \nt\n option is passed, we will raise a warning.\n\n\nAlso note that \n-t\n is not the only additional parameter that can be used. The string specified in the \nDELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\n environment variable will be forwarded to Transporter. For all the available options, check \nApple's Transporter User Guide\n.\n\n\nCredentials Issues\n\n\nIf your password contains special characters, \npilot\n may throw a confusing error saying your \"Your Apple ID or password was entered incorrectly\". The easiest way to fix this error is to change your password to something that \ndoes not\n contains special characters.\n\n\nHow is my password stored?\n\n\npilot\n uses the \nCredentialsManager\n from \nfastlane\n.\n\n\nProvider Short Name\n\n\nIf you are on multiple App Store Connect teams, iTunes Transporter may need a provider short name to know where to upload your binary. \npilot\n will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the \nitc_provider\n option.\n\n\nUse an Application Specific Password to upload\n\n\npilot\n/\nupload_to_testflight\n can use an \nApplication Specific Password via the \nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\n environment variable\n to upload a binary if both the \nskip_waiting_for_build_processing\n and \napple_id\n options are set. (If any of those are not set, it will use the normal Apple login process that might require 2FA authentication.)\n\n\nRole for App Store Connect User\n\n\npilot\n/\nupload_to_testflight\n updates build information and testers after the build has finished processing. App Store Connect requires the  \"App Manager\" or \"Admin\" role for your Apple account to update this information. The \"Developer\" role will allow builds to be uploaded but \nwill not\n allow updating of build information and testers.\n\n\n\n\n\n\n\n\n\n\n\nupload_to_testflight\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n7 Examples\n\n\nupload_to_testflight\n\n\n\n\ntestflight # alias for \"upload_to_testflight\"\n\n\n\n\npilot # alias for \"upload_to_testflight\"\n\n\n\n\nupload_to_testflight(skip_submission: true) # to only upload the build\n\n\n\n\nupload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)\n\n\n\n\nupload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)\n\n\n\n\nupload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-defafult\",\n      privacy_policy_url: \"https://example.com/privacy-defafult\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\napi_key_path\n\n\nPath to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)\n\n\n\n\n\n\n\n\napi_key\n\n\nYour App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\napp_identifier\n\n\nThe bundle identifier of the app to upload or manage testers (optional)\n\n\n*\n\n\n\n\n\n\napp_platform\n\n\nThe platform to use (optional)\n\n\nios\n\n\n\n\n\n\napple_id\n\n\nApple ID property in the App Information section in App Store Connect\n\n\n*\n\n\n\n\n\n\nipa\n\n\nPath to the ipa file to upload\n\n\n*\n\n\n\n\n\n\ndemo_account_required\n\n\nDo you need a demo account when Apple does review?\n\n\nfalse\n\n\n\n\n\n\nbeta_app_review_info\n\n\nBeta app review information for contact info and demo account\n\n\n\n\n\n\n\n\nlocalized_app_info\n\n\nLocalized beta app test info for description, feedback email, marketing url, and privacy policy\n\n\n\n\n\n\n\n\nbeta_app_description\n\n\nProvide the 'Beta App Description' when uploading a new build\n\n\n\n\n\n\n\n\nbeta_app_feedback_email\n\n\nProvide the beta app email when uploading a new build\n\n\n\n\n\n\n\n\nlocalized_build_info\n\n\nLocalized beta app test info for what's new\n\n\n\n\n\n\n\n\nchangelog\n\n\nProvide the 'What to Test' text when uploading a new build\n\n\n\n\n\n\n\n\nskip_submission\n\n\nSkip the distributing action of pilot and only upload the ipa file\n\n\nfalse\n\n\n\n\n\n\nskip_waiting_for_build_processing\n\n\nIf set to true, the \ndistribute_external\n option won't work and no build will be distributed to testers. (You might want to use this option if you are using this action on CI and have to pay for 'minutes used' on your CI plan). If set to \ntrue\n and a changelog is provided, it will partially wait for the build to appear on AppStore Connect so the changelog can be set, and skip the remaining processing steps\n\n\nfalse\n\n\n\n\n\n\nupdate_build_info_on_upload\n\n\nDEPRECATED!\n Update build info immediately after validation. This is deprecated and will be removed in a future release. App Store Connect no longer supports setting build info until after build processing has completed, which is when build info is updated by default\n\n\nfalse\n\n\n\n\n\n\ndistribute_only\n\n\nDistribute a previously uploaded build (equivalent to the \nfastlane pilot distribute\n command)\n\n\nfalse\n\n\n\n\n\n\nuses_non_exempt_encryption\n\n\nProvide the 'Uses Non-Exempt Encryption' for export compliance. This is used if there is 'ITSAppUsesNonExemptEncryption' is not set in the Info.plist\n\n\nfalse\n\n\n\n\n\n\ndistribute_external\n\n\nShould the build be distributed to external testers?\n\n\nfalse\n\n\n\n\n\n\nnotify_external_testers\n\n\nShould notify external testers?\n\n\ntrue\n\n\n\n\n\n\napp_version\n\n\nThe version number of the application build to distribute. If the version number is not specified, then the most recent build uploaded to TestFlight will be distributed. If specified, the most recent build for the version number will be distributed\n\n\n\n\n\n\n\n\nbuild_number\n\n\nThe build number of the application build to distribute. If the build number is not specified, the most recent build is distributed\n\n\n\n\n\n\n\n\nexpire_previous_builds\n\n\nShould expire previous builds?\n\n\nfalse\n\n\n\n\n\n\nfirst_name\n\n\nThe tester's first name\n\n\n\n\n\n\n\n\nlast_name\n\n\nThe tester's last name\n\n\n\n\n\n\n\n\nemail\n\n\nThe tester's email\n\n\n\n\n\n\n\n\ntesters_file_path\n\n\nPath to a CSV file of testers\n\n\n./testers.csv\n\n\n\n\n\n\ngroups\n\n\nAssociate tester to one group or more by group name / group id. E.g. \n-g \"Team 1\",\"Team 2\"\n\n\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\nteam_name\n\n\nThe name of your App Store Connect team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndev_portal_team_id\n\n\nThe short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!\n\n\n*\n\n\n\n\n\n\nitc_provider\n\n\nThe provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run \npathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off\n. The short names of providers should be listed in the second column\n\n\n\n\n\n\n\n\nwait_processing_interval\n\n\nInterval in seconds to wait for App Store Connect processing\n\n\n30\n\n\n\n\n\n\nwait_for_uploaded_build\n\n\nDEPRECATED!\n No longer needed with the transition over to the App Store Connect API - Use version info from uploaded ipa file to determine what build to use for distribution. If set to false, latest processing or any latest build will be used\n\n\nfalse\n\n\n\n\n\n\nreject_build_waiting_for_review\n\n\nExpire previous if it's 'waiting for review'\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action upload_to_testflight\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run upload_to_testflight\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run upload_to_testflight parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "upload_to_testflight"
        },
        {
            "location": "/actions/upload_to_testflight/#upload_to_testflight",
            "text": "Upload new binary to App Store Connect for TestFlight beta testing (via  pilot )",
            "title": "upload_to_testflight"
        },
        {
            "location": "/actions/upload_to_testflight/#the-best-way-to-manage-your-testflight-testers-and-builds-from-your-terminal",
            "text": "Pilot makes it easier to manage your app on Apple\u2019s TestFlight. You can:   Upload & distribute builds  Add & remove testers  Retrieve information about testers & devices  Import/export all available testers   pilot  uses  spaceship.airforce  to interact with App Store Connect \ud83d\ude80   \n     Usage  \u2022\n     Tips",
            "title": "The best way to manage your TestFlight testers and builds from your terminal"
        },
        {
            "location": "/actions/upload_to_testflight/#usage",
            "text": "For all commands, you can either use an  API Key  or your  Apple ID .",
            "title": "Usage"
        },
        {
            "location": "/actions/upload_to_testflight/#app-store-connect-api-key",
            "text": "The App Store Connect API Key is the preferred authentication method (if you are able to use it).   Uses official App Store Connect API  No need for 2FA  Better performance over Apple ID   Specify the API key using  --api_key_path ./path/to/api_key_info.json  or  --api_key \"{\\\"key_id\\\": \\\"D83848D23\\\", \\\"issuer_id\\\": \\\"227b0bbf-ada8-458c-9d62-3d8022b7d07f\\\", \\\"key_filepath\\\": \\\"D83848D23.p8\\\"}\"  Go to  Using App Store Connect API  for information on obtaining an API key, the  fastlane   api_key_info.json  format, and other API key usage.",
            "title": "App Store Connect API Key"
        },
        {
            "location": "/actions/upload_to_testflight/#apple-id",
            "text": "Specify the Apple ID to use using  -u felix@krausefx.com . If you execute  pilot  in a project already using  fastlane  the username and app identifier will automatically be determined.",
            "title": "Apple ID"
        },
        {
            "location": "/actions/upload_to_testflight/#uploading-builds",
            "text": "To upload a new build, just run  fastlane pilot upload  This will automatically look for an  ipa  in your current directory and tries to fetch the login credentials from your  fastlane setup .  You'll be asked for any missing information. Additionally, you can pass all kinds of parameters:  fastlane action pilot  You can pass a changelog using  fastlane pilot upload --changelog \"Something that is new here\"  You can also skip the submission of the binary, which means, the  ipa  file will only be uploaded and not distributed to testers:  fastlane pilot upload --skip_submission  pilot  does all kinds of magic for you:   Automatically detects the bundle identifier from your  ipa  file  Automatically fetch the AppID of your app based on the bundle identifier   pilot  uses  spaceship  to submit the build metadata and the iTunes Transporter to upload the binary. Because iTunes Transporter's upload capability is only supported on OS X,  pilot upload  does not work on Linux, as described  in this issue",
            "title": "Uploading builds"
        },
        {
            "location": "/actions/upload_to_testflight/#list-builds",
            "text": "To list all builds for specific application use  fastlane pilot builds  The result lists all active builds and processing builds:  +-----------+---------+----------+\n|      Great App Builds          |\n+-----------+---------+----------+\n| Version # | Build # | Installs |\n+-----------+---------+----------+\n| 0.9.13    | 1       | 0        |\n| 0.9.13    | 2       | 0        |\n| 0.9.20    | 3       | 0        |\n| 0.9.20    | 4       | 3        |\n+-----------+---------+----------+",
            "title": "List builds"
        },
        {
            "location": "/actions/upload_to_testflight/#managing-beta-testers",
            "text": "",
            "title": "Managing beta testers"
        },
        {
            "location": "/actions/upload_to_testflight/#list-of-testers",
            "text": "This command will list all your testers, both internal and external.  fastlane pilot list  The output will look like this:  +--------+--------+--------------------------+-----------+\n|                    Internal Testers                    |\n+--------+--------+--------------------------+-----------+\n| First  | Last   | Email                    | # Devices |\n+--------+--------+--------------------------+-----------+\n| Felix  | Krause | felix@krausefx.com       | 2         |\n+--------+--------+--------------------------+-----------+\n\n+-----------+---------+----------------------------+-----------+\n|                       External Testers                       |\n+-----------+---------+----------------------------+-----------+\n| First     | Last    | Email                      | # Devices |\n+-----------+---------+----------------------------+-----------+\n| Max       | Manfred | email@email.com            | 0         |\n| Detlef    | M\u00fcller  | detlef@krausefx.com        | 1         |\n+-----------+---------+----------------------------+-----------+",
            "title": "List of Testers"
        },
        {
            "location": "/actions/upload_to_testflight/#add-a-new-tester",
            "text": "To add a new tester to both your App Store Connect account and to your app (if given), use the  pilot add  command. This will create a new tester (if necessary) or add an existing tester to the app to test.  fastlane pilot add email@invite.com  Additionally you can specify the app identifier (if necessary):  fastlane pilot add email@email.com -a com.krausefx.app",
            "title": "Add a new tester"
        },
        {
            "location": "/actions/upload_to_testflight/#find-a-tester",
            "text": "To find a specific tester use  fastlane pilot find felix@krausefx.com  The resulting output will look like this:  +---------------------+---------------------+\n|            felix@krausefx.com             |\n+---------------------+---------------------+\n| First name          | Felix               |\n| Last name           | Krause              |\n| Email               | felix@krausefx.com  |\n| Latest Version      | 0.9.14 (23          |\n| Latest Install Date | 03/28/15 19:00      |\n| 2 Devices           | \u2022 iPhone 6, iOS 8.3 |\n|                     | \u2022 iPhone 5, iOS 7.0 |\n+---------------------+---------------------+",
            "title": "Find a tester"
        },
        {
            "location": "/actions/upload_to_testflight/#remove-a-tester",
            "text": "This command will only remove external beta testers.  fastlane pilot remove felix@krausefx.com",
            "title": "Remove a tester"
        },
        {
            "location": "/actions/upload_to_testflight/#export-testers",
            "text": "To export all external testers to a CSV file. Useful if you need to import tester info to another system or a new account.  fastlane pilot export",
            "title": "Export testers"
        },
        {
            "location": "/actions/upload_to_testflight/#import-testers",
            "text": "Add external testers from a CSV file. Create a file (ex:  testers.csv ) and fill it with the following format:  John,Appleseed,appleseed_john@mac.com,group-1;group-2  fastlane pilot import  You can also specify the directory using  fastlane pilot export -c ~/Desktop/testers.csv\nfastlane pilot import -c ~/Desktop/testers.csv",
            "title": "Import testers"
        },
        {
            "location": "/actions/upload_to_testflight/#tips",
            "text": "",
            "title": "Tips"
        },
        {
            "location": "/actions/upload_to_testflight/#debug-information",
            "text": "If you run into any issues you can use the  verbose  mode to get a more detailed output:  fastlane pilot upload --verbose",
            "title": "Debug information"
        },
        {
            "location": "/actions/upload_to_testflight/#firewall-issues",
            "text": "pilot  uses the iTunes  Transporter  to upload metadata and binaries. In case you are behind a firewall, you can specify a different transporter protocol from the command line using  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS=\"-t DAV\" pilot ...  If you are using  pilot  via the  fastlane action , add the following to your  Fastfile  ENV[\"DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS\"] = \"-t DAV\"\npilot...  Note, however, that Apple recommends you don\u2019t specify the  -t transport  and instead allow Transporter to use automatic transport discovery to determine the best transport mode for your packages. For this reason, if the  t  option is passed, we will raise a warning.  Also note that  -t  is not the only additional parameter that can be used. The string specified in the  DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS  environment variable will be forwarded to Transporter. For all the available options, check  Apple's Transporter User Guide .",
            "title": "Firewall Issues"
        },
        {
            "location": "/actions/upload_to_testflight/#credentials-issues",
            "text": "If your password contains special characters,  pilot  may throw a confusing error saying your \"Your Apple ID or password was entered incorrectly\". The easiest way to fix this error is to change your password to something that  does not  contains special characters.",
            "title": "Credentials Issues"
        },
        {
            "location": "/actions/upload_to_testflight/#how-is-my-password-stored",
            "text": "pilot  uses the  CredentialsManager  from  fastlane .",
            "title": "How is my password stored?"
        },
        {
            "location": "/actions/upload_to_testflight/#provider-short-name",
            "text": "If you are on multiple App Store Connect teams, iTunes Transporter may need a provider short name to know where to upload your binary.  pilot  will try to use the long name of the selected team to detect the provider short name. To override the detected value with an explicit one, use the  itc_provider  option.",
            "title": "Provider Short Name"
        },
        {
            "location": "/actions/upload_to_testflight/#use-an-application-specific-password-to-upload",
            "text": "pilot / upload_to_testflight  can use an  Application Specific Password via the  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD  environment variable  to upload a binary if both the  skip_waiting_for_build_processing  and  apple_id  options are set. (If any of those are not set, it will use the normal Apple login process that might require 2FA authentication.)",
            "title": "Use an Application Specific Password to upload"
        },
        {
            "location": "/actions/upload_to_testflight/#role-for-app-store-connect-user",
            "text": "pilot / upload_to_testflight  updates build information and testers after the build has finished processing. App Store Connect requires the  \"App Manager\" or \"Admin\" role for your Apple account to update this information. The \"Developer\" role will allow builds to be uploaded but  will not  allow updating of build information and testers.      upload_to_testflight       Supported platforms  ios    Author  @KrauseFx",
            "title": "Role for App Store Connect User"
        },
        {
            "location": "/actions/upload_to_testflight/#7-examples",
            "text": "upload_to_testflight  testflight # alias for \"upload_to_testflight\"  pilot # alias for \"upload_to_testflight\"  upload_to_testflight(skip_submission: true) # to only upload the build  upload_to_testflight(\n  username: \"felix@krausefx.com\",\n  app_identifier: \"com.krausefx.app\",\n  itc_provider: \"abcde12345\" # pass a specific value to the iTMSTransporter -itc_provider option\n)  upload_to_testflight(\n  beta_app_feedback_email: \"email@email.com\",\n  beta_app_description: \"This is a description of my app\",\n  demo_account_required: true,\n  notify_external_testers: false,\n  changelog: \"This is my changelog of things that have changed in a log\"\n)  upload_to_testflight(\n  beta_app_review_info: {\n    contact_email: \"email@email.com\",\n    contact_first_name: \"Connect\",\n    contact_last_name: \"API\",\n    contact_phone: \"5558675309\",\n    demo_account_name: \"demo@email.com\",\n    demo_account_password: \"connectapi\",\n    notes: \"this is review note for the reviewer <3 thank you for reviewing\"\n  },\n  localized_app_info: {\n    \"default\": {\n      feedback_email: \"default@email.com\",\n      marketing_url: \"https://example.com/marketing-defafult\",\n      privacy_policy_url: \"https://example.com/privacy-defafult\",\n      description: \"Default description\",\n    },\n    \"en-GB\": {\n      feedback_email: \"en-gb@email.com\",\n      marketing_url: \"https://example.com/marketing-en-gb\",\n      privacy_policy_url: \"https://example.com/privacy-en-gb\",\n      description: \"en-gb description\",\n    }\n  },\n  localized_build_info: {\n    \"default\": {\n      whats_new: \"Default changelog\",\n    },\n    \"en-GB\": {\n      whats_new: \"en-gb changelog\",\n    }\n  }\n)",
            "title": "7 Examples"
        },
        {
            "location": "/actions/upload_to_testflight/#parameters",
            "text": "Key  Description  Default      api_key_path  Path to your App Store Connect API Key JSON file (https://docs.fastlane.tools/app-store-connect-api/#using-fastlane-api-key-json-file)     api_key  Your App Store Connect API Key information (https://docs.fastlane.tools/app-store-connect-api/#use-return-value-and-pass-in-as-an-option)     username  Your Apple ID Username  *    app_identifier  The bundle identifier of the app to upload or manage testers (optional)  *    app_platform  The platform to use (optional)  ios    apple_id  Apple ID property in the App Information section in App Store Connect  *    ipa  Path to the ipa file to upload  *    demo_account_required  Do you need a demo account when Apple does review?  false    beta_app_review_info  Beta app review information for contact info and demo account     localized_app_info  Localized beta app test info for description, feedback email, marketing url, and privacy policy     beta_app_description  Provide the 'Beta App Description' when uploading a new build     beta_app_feedback_email  Provide the beta app email when uploading a new build     localized_build_info  Localized beta app test info for what's new     changelog  Provide the 'What to Test' text when uploading a new build     skip_submission  Skip the distributing action of pilot and only upload the ipa file  false    skip_waiting_for_build_processing  If set to true, the  distribute_external  option won't work and no build will be distributed to testers. (You might want to use this option if you are using this action on CI and have to pay for 'minutes used' on your CI plan). If set to  true  and a changelog is provided, it will partially wait for the build to appear on AppStore Connect so the changelog can be set, and skip the remaining processing steps  false    update_build_info_on_upload  DEPRECATED!  Update build info immediately after validation. This is deprecated and will be removed in a future release. App Store Connect no longer supports setting build info until after build processing has completed, which is when build info is updated by default  false    distribute_only  Distribute a previously uploaded build (equivalent to the  fastlane pilot distribute  command)  false    uses_non_exempt_encryption  Provide the 'Uses Non-Exempt Encryption' for export compliance. This is used if there is 'ITSAppUsesNonExemptEncryption' is not set in the Info.plist  false    distribute_external  Should the build be distributed to external testers?  false    notify_external_testers  Should notify external testers?  true    app_version  The version number of the application build to distribute. If the version number is not specified, then the most recent build uploaded to TestFlight will be distributed. If specified, the most recent build for the version number will be distributed     build_number  The build number of the application build to distribute. If the build number is not specified, the most recent build is distributed     expire_previous_builds  Should expire previous builds?  false    first_name  The tester's first name     last_name  The tester's last name     email  The tester's email     testers_file_path  Path to a CSV file of testers  ./testers.csv    groups  Associate tester to one group or more by group name / group id. E.g.  -g \"Team 1\",\"Team 2\"     team_id  The ID of your App Store Connect team if you're in multiple teams  *    team_name  The name of your App Store Connect team if you're in multiple teams  *    dev_portal_team_id  The short ID of your team in the developer portal, if you're in multiple teams. Different from your iTC team ID!  *    itc_provider  The provider short name to be used with the iTMSTransporter to identify your team. This value will override the automatically detected provider short name. To get provider short name run  pathToXcode.app/Contents/Applications/Application\\ Loader.app/Contents/itms/bin/iTMSTransporter -m provider -u 'USERNAME' -p 'PASSWORD' -account_type itunes_connect -v off . The short names of providers should be listed in the second column     wait_processing_interval  Interval in seconds to wait for App Store Connect processing  30    wait_for_uploaded_build  DEPRECATED!  No longer needed with the transition over to the App Store Connect API - Use version info from uploaded ipa file to determine what build to use for distribution. If set to false, latest processing or any latest build will be used  false    reject_build_waiting_for_review  Expire previous if it's 'waiting for review'  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/upload_to_testflight/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action upload_to_testflight",
            "title": "Documentation"
        },
        {
            "location": "/actions/upload_to_testflight/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run upload_to_testflight  To pass parameters, make use of the  :  symbol, for example  fastlane run upload_to_testflight parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/upload_to_testflight/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/validate_play_store_json_key/",
            "text": "validate_play_store_json_key\n\n\nValidate that the Google Play Store \njson_key\n works\n\n\n\n\nUse this action to test and validate your private key json key file used to connect and authenticate with the Google Play API\n\n\n\n\n\n\n\n\n\n\nvalidate_play_store_json_key\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nandroid\n\n\n\n\n\n\nAuthor\n\n\n@janpio\n\n\n\n\n\n\n\n\n1 Example\n\n\nvalidate_play_store_json_key(\n  json_key: 'path/to/you/json/key/file'\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\njson_key\n\n\nThe path to a file containing service account JSON, used to authenticate with Google\n\n\n*\n\n\n\n\n\n\njson_key_data\n\n\nThe raw service account JSON data used to authenticate with Google\n\n\n*\n\n\n\n\n\n\nroot_url\n\n\nRoot URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/\n\n\n\n\n\n\n\n\ntimeout\n\n\nTimeout for read, open, and send (in seconds)\n\n\n300\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action validate_play_store_json_key\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run validate_play_store_json_key\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run validate_play_store_json_key parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "validate_play_store_json_key"
        },
        {
            "location": "/actions/validate_play_store_json_key/#validate_play_store_json_key",
            "text": "Validate that the Google Play Store  json_key  works   Use this action to test and validate your private key json key file used to connect and authenticate with the Google Play API      validate_play_store_json_key       Supported platforms  android    Author  @janpio",
            "title": "validate_play_store_json_key"
        },
        {
            "location": "/actions/validate_play_store_json_key/#1-example",
            "text": "validate_play_store_json_key(\n  json_key: 'path/to/you/json/key/file'\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/validate_play_store_json_key/#parameters",
            "text": "Key  Description  Default      json_key  The path to a file containing service account JSON, used to authenticate with Google  *    json_key_data  The raw service account JSON data used to authenticate with Google  *    root_url  Root URL for the Google Play API. The provided URL will be used for API calls in place of https://www.googleapis.com/     timeout  Timeout for read, open, and send (in seconds)  300     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/validate_play_store_json_key/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action validate_play_store_json_key",
            "title": "Documentation"
        },
        {
            "location": "/actions/validate_play_store_json_key/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run validate_play_store_json_key  To pass parameters, make use of the  :  symbol, for example  fastlane run validate_play_store_json_key parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/validate_play_store_json_key/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/verify_build/",
            "text": "verify_build\n\n\nAble to verify various settings in ipa file\n\n\n\n\nVerifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.\n\n\n\n\n\n\n\n\n\n\nverify_build\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios\n\n\n\n\n\n\nAuthor\n\n\n@CodeReaper\n\n\n\n\n\n\n\n\n1 Example\n\n\nverify_build(\n  provisioning_type: \"distribution\",\n  bundle_identifier: \"com.example.myapp\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nprovisioning_type\n\n\nRequired type of provisioning\n\n\n\n\n\n\n\n\nprovisioning_uuid\n\n\nRequired UUID of provisioning profile\n\n\n\n\n\n\n\n\nteam_identifier\n\n\nRequired team identifier\n\n\n\n\n\n\n\n\nteam_name\n\n\nRequired team name\n\n\n\n\n\n\n\n\napp_name\n\n\nRequired app name\n\n\n\n\n\n\n\n\nbundle_identifier\n\n\nRequired bundle identifier\n\n\n\n\n\n\n\n\nipa_path\n\n\nExplicitly set the ipa path\n\n\n\n\n\n\n\n\nbuild_path\n\n\nExplicitly set the ipa, app or xcarchive path\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action verify_build\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run verify_build\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run verify_build parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "verify_build"
        },
        {
            "location": "/actions/verify_build/#verify_build",
            "text": "Able to verify various settings in ipa file   Verifies that the built app was built using the expected build resources. This is relevant for people who build on machines that are used to build apps with different profiles, certificates and/or bundle identifiers to guard against configuration mistakes.      verify_build       Supported platforms  ios    Author  @CodeReaper",
            "title": "verify_build"
        },
        {
            "location": "/actions/verify_build/#1-example",
            "text": "verify_build(\n  provisioning_type: \"distribution\",\n  bundle_identifier: \"com.example.myapp\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/verify_build/#parameters",
            "text": "Key  Description  Default      provisioning_type  Required type of provisioning     provisioning_uuid  Required UUID of provisioning profile     team_identifier  Required team identifier     team_name  Required team name     app_name  Required app name     bundle_identifier  Required bundle identifier     ipa_path  Explicitly set the ipa path     build_path  Explicitly set the ipa, app or xcarchive path      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/verify_build/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action verify_build",
            "title": "Documentation"
        },
        {
            "location": "/actions/verify_build/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run verify_build  To pass parameters, make use of the  :  symbol, for example  fastlane run verify_build parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/verify_build/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/verify_pod_keys/",
            "text": "verify_pod_keys\n\n\nVerifies all keys referenced from the Podfile are non-empty\n\n\n\n\nRuns a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.\n\n\n\n\n\n\n\n\n\n\nverify_pod_keys\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@ashfurrow\n\n\n\n\n\n\n\n\n1 Example\n\n\nverify_pod_keys\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action verify_pod_keys\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run verify_pod_keys\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run verify_pod_keys parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "verify_pod_keys"
        },
        {
            "location": "/actions/verify_pod_keys/#verify_pod_keys",
            "text": "Verifies all keys referenced from the Podfile are non-empty   Runs a check against all keys specified in your Podfile to make sure they're more than a single character long. This is to ensure you don't deploy with stubbed keys.      verify_pod_keys       Supported platforms  ios, mac    Author  @ashfurrow",
            "title": "verify_pod_keys"
        },
        {
            "location": "/actions/verify_pod_keys/#1-example",
            "text": "verify_pod_keys",
            "title": "1 Example"
        },
        {
            "location": "/actions/verify_pod_keys/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action verify_pod_keys",
            "title": "Documentation"
        },
        {
            "location": "/actions/verify_pod_keys/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run verify_pod_keys  To pass parameters, make use of the  :  symbol, for example  fastlane run verify_pod_keys parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/verify_pod_keys/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/verify_xcode/",
            "text": "verify_xcode\n\n\nVerifies that the Xcode installation is properly signed by Apple\n\n\n\n\nThis action was implemented after the recent Xcode attack to make sure you're not using a \nhacked Xcode installation\n.\n\n\n\n\n\n\n\n\n\n\nverify_xcode\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nverify_xcode\n\n\n\n\nverify_xcode(xcode_path: \"/Applications/Xcode.app\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nxcode_path\n\n\nThe path to the Xcode installation to test\n\n\n*\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action verify_xcode\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run verify_xcode\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run verify_xcode parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "verify_xcode"
        },
        {
            "location": "/actions/verify_xcode/#verify_xcode",
            "text": "Verifies that the Xcode installation is properly signed by Apple   This action was implemented after the recent Xcode attack to make sure you're not using a  hacked Xcode installation .      verify_xcode       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "verify_xcode"
        },
        {
            "location": "/actions/verify_xcode/#2-examples",
            "text": "verify_xcode  verify_xcode(xcode_path: \"/Applications/Xcode.app\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/verify_xcode/#parameters",
            "text": "Key  Description  Default      xcode_path  The path to the Xcode installation to test  *     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/verify_xcode/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action verify_xcode",
            "title": "Documentation"
        },
        {
            "location": "/actions/verify_xcode/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run verify_xcode  To pass parameters, make use of the  :  symbol, for example  fastlane run verify_xcode parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/verify_xcode/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/version_bump_podspec/",
            "text": "version_bump_podspec\n\n\nIncrement or set the version in a podspec file\n\n\n\n\nYou can use this action to manipulate any 'version' variable contained in a ruby file.\nFor example, you can use it to bump the version of a CocoaPods' podspec file.\nIt also supports versions that are not semantic: \n1.4.14.4.1\n.\nFor such versions, there is an option to change the appendix (e.g. \n4.1\n).\n\n\n\n\n\n\n\n\n\n\nversion_bump_podspec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul, @KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nversion = version_bump_podspec(path: \"TSMessages.podspec\", bump_type: \"patch\")\n\n\n\n\nversion = version_bump_podspec(path: \"TSMessages.podspec\", version_number: \"1.4\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nYou must specify the path to the podspec file to update\n\n\n*\n\n\n\n\n\n\nbump_type\n\n\nThe type of this version bump. Available: patch, minor, major\n\n\npatch\n\n\n\n\n\n\nversion_number\n\n\nChange to a specific version. This will replace the bump type value\n\n\n\n\n\n\n\n\nversion_appendix\n\n\nChange version appendix to a specific value. For example 1.4.14.4.1 -> 1.4.14.5\n\n\n\n\n\n\n\n\nrequire_variable_prefix\n\n\ntrue by default, this is used for non CocoaPods version bumps only\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nversion_bump_podspec\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::PODSPEC_VERSION_NUMBER\n\n\nThe new podspec version number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action version_bump_podspec\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run version_bump_podspec\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run version_bump_podspec parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "version_bump_podspec"
        },
        {
            "location": "/actions/version_bump_podspec/#version_bump_podspec",
            "text": "Increment or set the version in a podspec file   You can use this action to manipulate any 'version' variable contained in a ruby file. For example, you can use it to bump the version of a CocoaPods' podspec file. It also supports versions that are not semantic:  1.4.14.4.1 . For such versions, there is an option to change the appendix (e.g.  4.1 ).      version_bump_podspec       Supported platforms  ios, mac    Author  @Liquidsoul, @KrauseFx",
            "title": "version_bump_podspec"
        },
        {
            "location": "/actions/version_bump_podspec/#2-examples",
            "text": "version = version_bump_podspec(path: \"TSMessages.podspec\", bump_type: \"patch\")  version = version_bump_podspec(path: \"TSMessages.podspec\", version_number: \"1.4\")",
            "title": "2 Examples"
        },
        {
            "location": "/actions/version_bump_podspec/#parameters",
            "text": "Key  Description  Default      path  You must specify the path to the podspec file to update  *    bump_type  The type of this version bump. Available: patch, minor, major  patch    version_number  Change to a specific version. This will replace the bump type value     version_appendix  Change version appendix to a specific value. For example 1.4.14.4.1 -> 1.4.14.5     require_variable_prefix  true by default, this is used for non CocoaPods version bumps only  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/version_bump_podspec/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  version_bump_podspec  action generates the following Lane Variables:     SharedValue  Description      SharedValues::PODSPEC_VERSION_NUMBER  The new podspec version number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/version_bump_podspec/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action version_bump_podspec",
            "title": "Documentation"
        },
        {
            "location": "/actions/version_bump_podspec/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run version_bump_podspec  To pass parameters, make use of the  :  symbol, for example  fastlane run version_bump_podspec parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/version_bump_podspec/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/version_get_podspec/",
            "text": "version_get_podspec\n\n\nReceive the version number from a podspec file\n\n\n\n\n\n\n\n\nversion_get_podspec\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Liquidsoul, @KrauseFx\n\n\n\n\n\n\n\n\n1 Example\n\n\nversion = version_get_podspec(path: \"TSMessages.podspec\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nYou must specify the path to the podspec file\n\n\n*\n\n\n\n\n\n\nrequire_variable_prefix\n\n\ntrue by default, this is used for non CocoaPods version bumps only\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nversion_get_podspec\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::PODSPEC_VERSION_NUMBER\n\n\nThe podspec version number\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action version_get_podspec\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run version_get_podspec\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run version_get_podspec parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "version_get_podspec"
        },
        {
            "location": "/actions/version_get_podspec/#version_get_podspec",
            "text": "Receive the version number from a podspec file     version_get_podspec       Supported platforms  ios, mac    Author  @Liquidsoul, @KrauseFx",
            "title": "version_get_podspec"
        },
        {
            "location": "/actions/version_get_podspec/#1-example",
            "text": "version = version_get_podspec(path: \"TSMessages.podspec\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/version_get_podspec/#parameters",
            "text": "Key  Description  Default      path  You must specify the path to the podspec file  *    require_variable_prefix  true by default, this is used for non CocoaPods version bumps only  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/version_get_podspec/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  version_get_podspec  action generates the following Lane Variables:     SharedValue  Description      SharedValues::PODSPEC_VERSION_NUMBER  The podspec version number     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/version_get_podspec/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action version_get_podspec",
            "title": "Documentation"
        },
        {
            "location": "/actions/version_get_podspec/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run version_get_podspec  To pass parameters, make use of the  :  symbol, for example  fastlane run version_get_podspec parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/version_get_podspec/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcarchive/",
            "text": "xcarchive\n\n\nArchives the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcarchive\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcarchive\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcarchive\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcarchive\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcarchive parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcarchive"
        },
        {
            "location": "/actions/xcarchive/#xcarchive",
            "text": "Archives the project using  xcodebuild     xcarchive       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xcarchive"
        },
        {
            "location": "/actions/xcarchive/#1-example",
            "text": "xcarchive",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcarchive/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcarchive",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcarchive/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcarchive  To pass parameters, make use of the  :  symbol, for example  fastlane run xcarchive parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcarchive/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcbuild/",
            "text": "xcbuild\n\n\nBuilds the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcbuild\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcbuild\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcbuild\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcbuild\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcbuild parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcbuild"
        },
        {
            "location": "/actions/xcbuild/#xcbuild",
            "text": "Builds the project using  xcodebuild     xcbuild       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xcbuild"
        },
        {
            "location": "/actions/xcbuild/#1-example",
            "text": "xcbuild",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcbuild/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcbuild",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcbuild/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcbuild  To pass parameters, make use of the  :  symbol, for example  fastlane run xcbuild parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcbuild/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcclean/",
            "text": "xcclean\n\n\nCleans the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcclean\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcclean\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcclean\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcclean\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcclean parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcclean"
        },
        {
            "location": "/actions/xcclean/#xcclean",
            "text": "Cleans the project using  xcodebuild     xcclean       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xcclean"
        },
        {
            "location": "/actions/xcclean/#1-example",
            "text": "xcclean",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcclean/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcclean",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcclean/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcclean  To pass parameters, make use of the  :  symbol, for example  fastlane run xcclean parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcclean/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcexport/",
            "text": "xcexport\n\n\nExports the project using \nxcodebuild\n\n\n\n\n\n\n\n\nxcexport\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcexport\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcexport\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcexport\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcexport parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcexport"
        },
        {
            "location": "/actions/xcexport/#xcexport",
            "text": "Exports the project using  xcodebuild     xcexport       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xcexport"
        },
        {
            "location": "/actions/xcexport/#1-example",
            "text": "xcexport",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcexport/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcexport",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcexport/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcexport  To pass parameters, make use of the  :  symbol, for example  fastlane run xcexport parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcexport/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcode_install/",
            "text": "xcode_install\n\n\nMake sure a certain version of Xcode is installed\n\n\n\n\nMakes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the \nxcode_install\n gem. This will make sure to use the correct Xcode for later actions.\n\n\n\n\n\n\n\n\n\n\nxcode_install\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@Krausefx\n\n\n\n\n\n\nReturns\n\n\nThe path to the newly installed Xcode version\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcode_install(version: \"7.1\")\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nThe version number of the version of Xcode to install\n\n\n\n\n\n\n\n\nusername\n\n\nYour Apple ID Username\n\n\n*\n\n\n\n\n\n\nteam_id\n\n\nThe ID of your team if you're in multiple teams\n\n\n*\n\n\n\n\n\n\ndownload_retry_attempts\n\n\nNumber of times the download will be retried in case of failure\n\n\n3\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nxcode_install\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::XCODE_INSTALL_XCODE_PATH\n\n\nThe path to the newly installed Xcode\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcode_install\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcode_install\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcode_install parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcode_install"
        },
        {
            "location": "/actions/xcode_install/#xcode_install",
            "text": "Make sure a certain version of Xcode is installed   Makes sure a specific version of Xcode is installed. If that's not the case, it will automatically be downloaded by the  xcode_install  gem. This will make sure to use the correct Xcode for later actions.      xcode_install       Supported platforms  ios, mac    Author  @Krausefx    Returns  The path to the newly installed Xcode version",
            "title": "xcode_install"
        },
        {
            "location": "/actions/xcode_install/#1-example",
            "text": "xcode_install(version: \"7.1\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcode_install/#parameters",
            "text": "Key  Description  Default      version  The version number of the version of Xcode to install     username  Your Apple ID Username  *    team_id  The ID of your team if you're in multiple teams  *    download_retry_attempts  Number of times the download will be retried in case of failure  3     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/xcode_install/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  xcode_install  action generates the following Lane Variables:     SharedValue  Description      SharedValues::XCODE_INSTALL_XCODE_PATH  The path to the newly installed Xcode     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/xcode_install/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcode_install",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcode_install/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcode_install  To pass parameters, make use of the  :  symbol, for example  fastlane run xcode_install parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcode_install/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcode_select/",
            "text": "xcode_select\n\n\nChange the xcode-path to use. Useful for beta versions of Xcode\n\n\n\n\nSelect and build with the Xcode installed at the provided path.\nUse the \nxcversion\n action if you want to select an Xcode:\n- Based on a version specifier or\n- You don't have known, stable paths, as may happen in a CI environment.\n\n\n\n\n\n\n\n\n\n\nxcode_select\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcode_select(\"/Applications/Xcode-8.3.2.app\")\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcode_select\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcode_select\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcode_select parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcode_select"
        },
        {
            "location": "/actions/xcode_select/#xcode_select",
            "text": "Change the xcode-path to use. Useful for beta versions of Xcode   Select and build with the Xcode installed at the provided path. Use the  xcversion  action if you want to select an Xcode: - Based on a version specifier or - You don't have known, stable paths, as may happen in a CI environment.      xcode_select       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xcode_select"
        },
        {
            "location": "/actions/xcode_select/#1-example",
            "text": "xcode_select(\"/Applications/Xcode-8.3.2.app\")",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcode_select/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcode_select",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcode_select/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcode_select  To pass parameters, make use of the  :  symbol, for example  fastlane run xcode_select parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcode_select/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcode_server_get_assets/",
            "text": "xcode_server_get_assets\n\n\nDownloads Xcode Bot assets like the \n.xcarchive\n and logs\n\n\n\n\nThis action downloads assets from your Xcode Server Bot (works with Xcode Server using Xcode 6 and 7. By default, this action downloads all assets, unzips them and deletes everything except for the \n.xcarchive\n.\nIf you'd like to keep all downloaded assets, pass \nkeep_all_assets: true\n.\nThis action returns the path to the downloaded assets folder and puts into shared values the paths to the asset folder and to the \n.xcarchive\n inside it.\n\n\n\n\n\n\n\n\n\n\nxcode_server_get_assets\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@czechboy0\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcode_server_get_assets(\n  host: \"10.99.0.59\", # Specify Xcode Server's Host or IP Address\n  bot_name: \"release-1.3.4\" # Specify the particular Bot\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nhost\n\n\nIP Address/Hostname of Xcode Server\n\n\n\n\n\n\n\n\nbot_name\n\n\nName of the Bot to pull assets from\n\n\n\n\n\n\n\n\nintegration_number\n\n\nOptionally you can override which integration's assets should be downloaded. If not provided, the latest integration is used\n\n\n\n\n\n\n\n\nusername\n\n\nUsername for your Xcode Server\n\n\n''\n\n\n\n\n\n\npassword\n\n\nPassword for your Xcode Server\n\n\n''\n\n\n\n\n\n\ntarget_folder\n\n\nRelative path to a folder into which to download assets\n\n\n./xcs_assets\n\n\n\n\n\n\nkeep_all_assets\n\n\nWhether to keep all assets or let the script delete everything except for the .xcarchive\n\n\nfalse\n\n\n\n\n\n\ntrust_self_signed_certs\n\n\nWhether to trust self-signed certs on your Xcode Server\n\n\ntrue\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nLane Variables\n\n\nActions can communicate with each other using a shared hash \nlane_context\n, that can be accessed in other actions, plugins or your lanes: \nlane_context[SharedValues:XYZ]\n. The \nxcode_server_get_assets\n action generates the following Lane Variables:\n\n\n\n\n\n\n\n\nSharedValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nSharedValues::XCODE_SERVER_GET_ASSETS_PATH\n\n\nAbsolute path to the downloaded assets folder\n\n\n\n\n\n\nSharedValues::XCODE_SERVER_GET_ASSETS_ARCHIVE_PATH\n\n\nAbsolute path to the downloaded xcarchive file\n\n\n\n\n\n\n\n\nTo get more information check the \nLanes documentation\n.\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcode_server_get_assets\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcode_server_get_assets\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcode_server_get_assets parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcode_server_get_assets"
        },
        {
            "location": "/actions/xcode_server_get_assets/#xcode_server_get_assets",
            "text": "Downloads Xcode Bot assets like the  .xcarchive  and logs   This action downloads assets from your Xcode Server Bot (works with Xcode Server using Xcode 6 and 7. By default, this action downloads all assets, unzips them and deletes everything except for the  .xcarchive . If you'd like to keep all downloaded assets, pass  keep_all_assets: true . This action returns the path to the downloaded assets folder and puts into shared values the paths to the asset folder and to the  .xcarchive  inside it.      xcode_server_get_assets       Supported platforms  ios, mac    Author  @czechboy0",
            "title": "xcode_server_get_assets"
        },
        {
            "location": "/actions/xcode_server_get_assets/#1-example",
            "text": "xcode_server_get_assets(\n  host: \"10.99.0.59\", # Specify Xcode Server's Host or IP Address\n  bot_name: \"release-1.3.4\" # Specify the particular Bot\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcode_server_get_assets/#parameters",
            "text": "Key  Description  Default      host  IP Address/Hostname of Xcode Server     bot_name  Name of the Bot to pull assets from     integration_number  Optionally you can override which integration's assets should be downloaded. If not provided, the latest integration is used     username  Username for your Xcode Server  ''    password  Password for your Xcode Server  ''    target_folder  Relative path to a folder into which to download assets  ./xcs_assets    keep_all_assets  Whether to keep all assets or let the script delete everything except for the .xcarchive  false    trust_self_signed_certs  Whether to trust self-signed certs on your Xcode Server  true     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/xcode_server_get_assets/#lane-variables",
            "text": "Actions can communicate with each other using a shared hash  lane_context , that can be accessed in other actions, plugins or your lanes:  lane_context[SharedValues:XYZ] . The  xcode_server_get_assets  action generates the following Lane Variables:     SharedValue  Description      SharedValues::XCODE_SERVER_GET_ASSETS_PATH  Absolute path to the downloaded assets folder    SharedValues::XCODE_SERVER_GET_ASSETS_ARCHIVE_PATH  Absolute path to the downloaded xcarchive file     To get more information check the  Lanes documentation .",
            "title": "Lane Variables"
        },
        {
            "location": "/actions/xcode_server_get_assets/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcode_server_get_assets",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcode_server_get_assets/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcode_server_get_assets  To pass parameters, make use of the  :  symbol, for example  fastlane run xcode_server_get_assets parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcode_server_get_assets/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcodebuild/",
            "text": "xcodebuild\n\n\nUse the \nxcodebuild\n command to build and sign your app\n\n\n\n\nNote\n: \nxcodebuild\n is a complex command, so it is recommended to use \ngym\n for building your ipa file and \nscan\n for testing your app instead.\n\n\n\n\n\n\n\n\n\n\nxcodebuild\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcodebuild(\n  archive: true,\n  archive_path: \"./build-dir/MyApp.xcarchive\",\n  scheme: \"MyApp\",\n  workspace: \"MyApp.xcworkspace\"\n)\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcodebuild\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcodebuild\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcodebuild parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcodebuild"
        },
        {
            "location": "/actions/xcodebuild/#xcodebuild",
            "text": "Use the  xcodebuild  command to build and sign your app   Note :  xcodebuild  is a complex command, so it is recommended to use  gym  for building your ipa file and  scan  for testing your app instead.      xcodebuild       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xcodebuild"
        },
        {
            "location": "/actions/xcodebuild/#1-example",
            "text": "xcodebuild(\n  archive: true,\n  archive_path: \"./build-dir/MyApp.xcarchive\",\n  scheme: \"MyApp\",\n  workspace: \"MyApp.xcworkspace\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcodebuild/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcodebuild",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcodebuild/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcodebuild  To pass parameters, make use of the  :  symbol, for example  fastlane run xcodebuild parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcodebuild/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcov/",
            "text": "xcov\n\n\nNice code coverage reports without hassle\n\n\n\n\nCreate nice code coverage reports and post coverage summaries on Slack \n(xcov gem is required)\n.\nMore information: \nhttps://github.com/nakiostudio/xcov\n.\n\n\n\n\n\n\n\n\n\n\nxcov\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@nakiostudio\n\n\n\n\n\n\n\n\n1 Example\n\n\nxcov(\n  workspace: \"YourWorkspace.xcworkspace\",\n  scheme: \"YourScheme\",\n  output_directory: \"xcov_output\"\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nworkspace\n\n\nPath the workspace file\n\n\n\n\n\n\n\n\nproject\n\n\nPath the project file\n\n\n\n\n\n\n\n\nscheme\n\n\nThe project's scheme. Make sure it's marked as \nShared\n\n\n\n\n\n\n\n\nconfiguration\n\n\nThe configuration used when building the app. Defaults to 'Release'\n\n\n\n\n\n\n\n\nsource_directory\n\n\nThe path to project's root directory\n\n\n\n\n\n\n\n\nderived_data_path\n\n\nThe directory where build products and other derived data will go\n\n\n\n\n\n\n\n\noutput_directory\n\n\nThe directory in which all reports will be stored\n\n\n*\n\n\n\n\n\n\nhtml_report\n\n\nProduce an HTML report\n\n\ntrue\n\n\n\n\n\n\nmarkdown_report\n\n\nProduce a Markdown report\n\n\nfalse\n\n\n\n\n\n\njson_report\n\n\nProduce a JSON report\n\n\nfalse\n\n\n\n\n\n\nminimum_coverage_percentage\n\n\nRaise exception if overall coverage percentage is under this value (ie. 75)\n\n\n0\n\n\n\n\n\n\nslack_url\n\n\nCreate an Incoming WebHook for your Slack group to post results there\n\n\n\n\n\n\n\n\nslack_channel\n\n\n#channel or @username\n\n\n\n\n\n\n\n\nskip_slack\n\n\nDon't publish to slack, even when an URL is given\n\n\nfalse\n\n\n\n\n\n\nslack_username\n\n\nThe username which is used to publish to slack\n\n\nxcov\n\n\n\n\n\n\nslack_message\n\n\nThe message which is published together with a successful report\n\n\nYour *xcov* coverage report\n\n\n\n\n\n\nignore_file_path\n\n\nRelative or absolute path to the file containing the list of ignored files\n\n\n*\n\n\n\n\n\n\ninclude_test_targets\n\n\nEnables coverage reports for .xctest targets\n\n\nfalse\n\n\n\n\n\n\nexclude_targets\n\n\nComma separated list of targets to exclude from coverage report\n\n\n\n\n\n\n\n\ninclude_targets\n\n\nComma separated list of targets to include in coverage report. If specified then exlude_targets will be ignored\n\n\n\n\n\n\n\n\nonly_project_targets\n\n\nDisplay the coverage only for main project targets (e.g. skip Pods targets)\n\n\nfalse\n\n\n\n\n\n\ndisable_coveralls\n\n\nAdd this flag to disable automatic submission to Coveralls\n\n\nfalse\n\n\n\n\n\n\ncoveralls_service_name\n\n\nName of the CI service compatible with Coveralls. i.e. travis-ci. This option must be defined along with coveralls_service_job_id\n\n\n\n\n\n\n\n\ncoveralls_service_job_id\n\n\nName of the current job running on a CI service compatible with Coveralls. This option must be defined along with coveralls_service_name\n\n\n\n\n\n\n\n\ncoveralls_repo_token\n\n\nRepository token to be used by integrations not compatible with Coveralls\n\n\n\n\n\n\n\n\nxcconfig\n\n\nUse an extra XCCONFIG file to build your app\n\n\n\n\n\n\n\n\nideFoundationPath\n\n\nAbsolute path to the IDEFoundation.framework binary\n\n\n*\n\n\n\n\n\n\nlegacy_support\n\n\nWhether xcov should parse a xccoverage file instead on xccovreport\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcov\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcov\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcov parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcov"
        },
        {
            "location": "/actions/xcov/#xcov",
            "text": "Nice code coverage reports without hassle   Create nice code coverage reports and post coverage summaries on Slack  (xcov gem is required) . More information:  https://github.com/nakiostudio/xcov .      xcov       Supported platforms  ios, mac    Author  @nakiostudio",
            "title": "xcov"
        },
        {
            "location": "/actions/xcov/#1-example",
            "text": "xcov(\n  workspace: \"YourWorkspace.xcworkspace\",\n  scheme: \"YourScheme\",\n  output_directory: \"xcov_output\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/xcov/#parameters",
            "text": "Key  Description  Default      workspace  Path the workspace file     project  Path the project file     scheme  The project's scheme. Make sure it's marked as  Shared     configuration  The configuration used when building the app. Defaults to 'Release'     source_directory  The path to project's root directory     derived_data_path  The directory where build products and other derived data will go     output_directory  The directory in which all reports will be stored  *    html_report  Produce an HTML report  true    markdown_report  Produce a Markdown report  false    json_report  Produce a JSON report  false    minimum_coverage_percentage  Raise exception if overall coverage percentage is under this value (ie. 75)  0    slack_url  Create an Incoming WebHook for your Slack group to post results there     slack_channel  #channel or @username     skip_slack  Don't publish to slack, even when an URL is given  false    slack_username  The username which is used to publish to slack  xcov    slack_message  The message which is published together with a successful report  Your *xcov* coverage report    ignore_file_path  Relative or absolute path to the file containing the list of ignored files  *    include_test_targets  Enables coverage reports for .xctest targets  false    exclude_targets  Comma separated list of targets to exclude from coverage report     include_targets  Comma separated list of targets to include in coverage report. If specified then exlude_targets will be ignored     only_project_targets  Display the coverage only for main project targets (e.g. skip Pods targets)  false    disable_coveralls  Add this flag to disable automatic submission to Coveralls  false    coveralls_service_name  Name of the CI service compatible with Coveralls. i.e. travis-ci. This option must be defined along with coveralls_service_job_id     coveralls_service_job_id  Name of the current job running on a CI service compatible with Coveralls. This option must be defined along with coveralls_service_name     coveralls_repo_token  Repository token to be used by integrations not compatible with Coveralls     xcconfig  Use an extra XCCONFIG file to build your app     ideFoundationPath  Absolute path to the IDEFoundation.framework binary  *    legacy_support  Whether xcov should parse a xccoverage file instead on xccovreport  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/xcov/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcov",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcov/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcov  To pass parameters, make use of the  :  symbol, for example  fastlane run xcov parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcov/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xctest/",
            "text": "xctest\n\n\nRuns tests on the given simulator\n\n\n\n\n\n\n\n\nxctest\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@dtrenz\n\n\n\n\n\n\n\n\n1 Example\n\n\nxctest(\n  destination: \"name=iPhone 7s,OS=10.0\"\n)\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xctest\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xctest\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xctest parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xctest"
        },
        {
            "location": "/actions/xctest/#xctest",
            "text": "Runs tests on the given simulator     xctest       Supported platforms  ios, mac    Author  @dtrenz",
            "title": "xctest"
        },
        {
            "location": "/actions/xctest/#1-example",
            "text": "xctest(\n  destination: \"name=iPhone 7s,OS=10.0\"\n)",
            "title": "1 Example"
        },
        {
            "location": "/actions/xctest/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xctest",
            "title": "Documentation"
        },
        {
            "location": "/actions/xctest/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xctest  To pass parameters, make use of the  :  symbol, for example  fastlane run xctest parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xctest/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xctool/",
            "text": "xctool\n\n\nRun tests using xctool\n\n\n\n\nYou can run any \nxctool\n action. This will require having \nxctool\n installed through \nHomebrew\n.\nIt is recommended to store the build configuration in the \n.xctool-args\n file.\nMore information: \nhttps://docs.fastlane.tools/actions/xctool/\n.\n\n\n\n\n\n\n\n\n\n\nxctool\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\n\n\n2 Examples\n\n\nxctool(:test)\n\n\n\n\n# If you prefer to have the build configuration stored in the `Fastfile`:\nxctool(:test, [\n  \"--workspace\", \"'AwesomeApp.xcworkspace'\",\n  \"--scheme\", \"'Schema Name'\",\n  \"--configuration\", \"Debug\",\n  \"--sdk\", \"iphonesimulator\",\n  \"--arch\", \"i386\"\n].join(\" \"))\n\n\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xctool\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xctool\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xctool parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xctool"
        },
        {
            "location": "/actions/xctool/#xctool",
            "text": "Run tests using xctool   You can run any  xctool  action. This will require having  xctool  installed through  Homebrew . It is recommended to store the build configuration in the  .xctool-args  file. More information:  https://docs.fastlane.tools/actions/xctool/ .      xctool       Supported platforms  ios, mac    Author  @KrauseFx",
            "title": "xctool"
        },
        {
            "location": "/actions/xctool/#2-examples",
            "text": "xctool(:test)  # If you prefer to have the build configuration stored in the `Fastfile`:\nxctool(:test, [\n  \"--workspace\", \"'AwesomeApp.xcworkspace'\",\n  \"--scheme\", \"'Schema Name'\",\n  \"--configuration\", \"Debug\",\n  \"--sdk\", \"iphonesimulator\",\n  \"--arch\", \"i386\"\n].join(\" \"))",
            "title": "2 Examples"
        },
        {
            "location": "/actions/xctool/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xctool",
            "title": "Documentation"
        },
        {
            "location": "/actions/xctool/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xctool  To pass parameters, make use of the  :  symbol, for example  fastlane run xctool parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xctool/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/xcversion/",
            "text": "xcversion\n\n\nSelect an Xcode to use by version specifier\n\n\n\n\nFinds and selects a version of an installed Xcode that best matches the provided \nGem::Version\n requirement specifier\n\n\n\n\n\n\n\n\n\n\nxcversion\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, mac\n\n\n\n\n\n\nAuthor\n\n\n@oysta\n\n\n\n\n\n\n\n\n2 Examples\n\n\nxcversion(version: \"8.1\") # Selects Xcode 8.1.0\n\n\n\n\nxcversion(version: \"~> 8.1.0\") # Selects the latest installed version from the 8.1.x set\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\nversion\n\n\nThe version of Xcode to select specified as a Gem::Version requirement string (e.g. '~> 7.1.0')\n\n\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action xcversion\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run xcversion\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run xcversion parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "xcversion"
        },
        {
            "location": "/actions/xcversion/#xcversion",
            "text": "Select an Xcode to use by version specifier   Finds and selects a version of an installed Xcode that best matches the provided  Gem::Version  requirement specifier      xcversion       Supported platforms  ios, mac    Author  @oysta",
            "title": "xcversion"
        },
        {
            "location": "/actions/xcversion/#2-examples",
            "text": "xcversion(version: \"8.1\") # Selects Xcode 8.1.0  xcversion(version: \"~> 8.1.0\") # Selects the latest installed version from the 8.1.x set",
            "title": "2 Examples"
        },
        {
            "location": "/actions/xcversion/#parameters",
            "text": "Key  Description  Default      version  The version of Xcode to select specified as a Gem::Version requirement string (e.g. '~> 7.1.0')      * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/xcversion/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action xcversion",
            "title": "Documentation"
        },
        {
            "location": "/actions/xcversion/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run xcversion  To pass parameters, make use of the  :  symbol, for example  fastlane run xcversion parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/xcversion/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/actions/zip/",
            "text": "zip\n\n\nCompress a file or folder to a zip\n\n\n\n\n\n\n\n\nzip\n\n\n\n\n\n\n\n\n\n\n\n\nSupported platforms\n\n\nios, android, mac\n\n\n\n\n\n\nAuthor\n\n\n@KrauseFx\n\n\n\n\n\n\nReturns\n\n\nThe path to the output zip file\n\n\n\n\n\n\n\n\n4 Examples\n\n\nzip\n\n\n\n\nzip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\"\n)\n\n\n\n\nzip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\",\n  verbose: false\n)\n\n\n\n\nzip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\",\n  verbose: false,\n  symlinks: true\n)\n\n\n\n\nParameters\n\n\n\n\n\n\n\n\nKey\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\npath\n\n\nPath to the directory or file to be zipped\n\n\n\n\n\n\n\n\noutput_path\n\n\nThe name of the resulting zip file\n\n\n\n\n\n\n\n\nverbose\n\n\nEnable verbose output of zipped file\n\n\ntrue\n\n\n\n\n\n\npassword\n\n\nEncrypt the contents of the zip archive using a password\n\n\n\n\n\n\n\n\nsymlinks\n\n\nStore symbolic links as such in the zip archive\n\n\nfalse\n\n\n\n\n\n\n\n\n* = default value is dependent on the user's system\n\n\n\n\n\nDocumentation\n\n\nTo show the documentation in your terminal, run\n\n\nfastlane action zip\n\n\n\n\n\n\n\nCLI\n\n\nIt is recommended to add the above action into your \nFastfile\n, however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal\n\n\nfastlane run zip\n\n\n\n\nTo pass parameters, make use of the \n:\n symbol, for example\n\n\nfastlane run zip parameter1:\"value1\" parameter2:\"value2\"\n\n\n\n\nIt's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g. \nparam:\"1,2,3\"\n). Hashes are not currently supported.\n\n\nIt is recommended to add all \nfastlane\n actions you use to your \nFastfile\n.\n\n\n\n\n\nSource code\n\n\nThis action, just like the rest of \nfastlane\n, is fully open source, \nview the source code on GitHub\n\n\n\n\n\nBack to actions",
            "title": "zip"
        },
        {
            "location": "/actions/zip/#zip",
            "text": "Compress a file or folder to a zip     zip       Supported platforms  ios, android, mac    Author  @KrauseFx    Returns  The path to the output zip file",
            "title": "zip"
        },
        {
            "location": "/actions/zip/#4-examples",
            "text": "zip  zip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\"\n)  zip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\",\n  verbose: false\n)  zip(\n  path: \"MyApp.app\",\n  output_path: \"Latest.app.zip\",\n  verbose: false,\n  symlinks: true\n)",
            "title": "4 Examples"
        },
        {
            "location": "/actions/zip/#parameters",
            "text": "Key  Description  Default      path  Path to the directory or file to be zipped     output_path  The name of the resulting zip file     verbose  Enable verbose output of zipped file  true    password  Encrypt the contents of the zip archive using a password     symlinks  Store symbolic links as such in the zip archive  false     * = default value is dependent on the user's system",
            "title": "Parameters"
        },
        {
            "location": "/actions/zip/#documentation",
            "text": "To show the documentation in your terminal, run  fastlane action zip",
            "title": "Documentation"
        },
        {
            "location": "/actions/zip/#cli",
            "text": "It is recommended to add the above action into your  Fastfile , however sometimes you might want to run one-offs. To do so, you can run the following command from your terminal  fastlane run zip  To pass parameters, make use of the  :  symbol, for example  fastlane run zip parameter1:\"value1\" parameter2:\"value2\"  It's important to note that the CLI supports primitive types like integers, floats, booleans, and strings. Arrays can be passed as a comma delimited string (e.g.  param:\"1,2,3\" ). Hashes are not currently supported.  It is recommended to add all  fastlane  actions you use to your  Fastfile .",
            "title": "CLI"
        },
        {
            "location": "/actions/zip/#source-code",
            "text": "This action, just like the rest of  fastlane , is fully open source,  view the source code on GitHub   Back to actions",
            "title": "Source code"
        },
        {
            "location": "/app-store-connect-api/",
            "text": "App Store Connect API\n\n\nIntroduction\n\n\nThe \nApp Store Connect API\n (which Apple announced at WWDC18 and is continuously working on) is an official public API used to manage app metadata, pricing and availability, provisioning, and more. This API follows the \nJSON API\n spec and introduces a new authorization option using API Keys to generate a \nJSON Web Token (JWT)\n.\n\n\nfastlane\n has historically used Apple IDs with username and password to authenticate using a cookie-based web session. \nfastlane\n will continue using this same cookie-based web session to authenticate with an unofficial version of the App Store Connect API.\n\n\nHowever, it is \nrecommended\n to use the API Key authentication when you are able to. The benefits include:\n\n\n\n\nNo 2FA needed\n\n\nBetter performance\n\n\nDocumented API\n\n\nIncreased reliability\n\n\n\n\nSupported Actions/Tools\n\n\nThe App Store Connect API has not been integrated into all tools and actions yet. \n\n\nBelow are the statuses of each tool:\n\n\n\n\n\n\n\n\nName\n\n\nApple ID\n\n\nAPI Key\n\n\n\n\n\n\n\n\n\n\npilot\n\n\nYes\n\n\nYes\n\n\n\n\n\n\ndeliver\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nsigh\n\n\nYes\n\n\nYes\n\n\n\n\n\n\ncert\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nmatch\n\n\nYes\n\n\nYes\n\n\n\n\n\n\nproduce\n\n\nPartial\n\n\nNo\n\n\n\n\n\n\npem\n\n\nNo\n\n\nNo\n\n\n\n\n\n\nprecheck\n\n\nYes (except for IAP)\n\n\nYes (except for IAP)\n\n\n\n\n\n\n\n\nCreating an App Store Connect API Key\n\n\n\n\nCreate a new App Store Connect API Key in the \nUsers page\n\n\nFor more info, go to the \nApp Store Connect API Docs\n\n\n\n\n\n\nDownload the newly created API Key file (\n.p8\n)\n\n\nThis file cannot be downloaded again after the page has been refreshed\n\n\n\n\n\n\n\n\nUsing an App Store Connect API Key\n\n\nThe API Key (located in the \n.p8\n) file, the key id, and the issuer id are needed to create the JWT token for authorization. There are multiple ways that these pieces of information can be input into \nfastlane\n.\n\n\nNote:\n The App Store Connect API does not yet have the ability to determine if the team is App Store or Enterprise. The \napp_store_connect_api_key\n action and the \nfastlane\n API Key JSON file format allow for an optional \nin_house\n key as a temporary workaround.\n\n\nUsing \napp_store_connect_api_key\n\n\nThere is a new \napp_store_connect_api_key\n action which takes the key id, the issuer id, and API Key file (\n.p8\n) to generate a dictionary/hash used for JWT authorization. This action can be used in two ways:\n\n\nUse return value and pass in as an option\n\n\nlane :release do\n  api_key = app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  pilot(api_key: api_key)\nend\n\n\n\n\nUse the shared value in lane context\n\n\nThe \napp_store_connect_api_key\n action sets \nActions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]\n and actions (like \npilot\n) will automatically load the API Key from \nActions.lane_context\n\n\nlane :release do\n  app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  # Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]\n  pilot\nend\n\n\n\n\nUsing \nfastlane\n API Key JSON file\n\n\nBelow is an example of the \nfastlane\n API Key JSON file format that tools and actions will also be able to read. The JSON file requires:\n\n\n\n\nkey_id\n\n\nissuer_id\n\n\nkey\n (the content of the \n.p8\n file)\n\n\n\n\nThe JSON file allows optional:\n\n\n\n\nduration\n (session length in seconds)\n\n\nin_house\n (boolean value if team is Enterprise or not)\n\n\n\n\n{\n  \"key_id\": \"D383SF739\",\n  \"issuer_id\": \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n  \"key\": \"-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----\",\n  \"duration\": 1200, # optional\n  \"in_house\": false, # optional but may be required if using match/sigh\n}\n\n\n\n\nBelow is an example of a JSON file being used by an action:\n\n\nlane :release do\n  pilot( api_key_path: \"fastlane/D383SF739.json\" )\nend\n\n\n\n\nBelow is an example of a JSON file being used with CLI:\n\n\n$ fastlane pilot distribute --api_key_path fastlane/D383SF739.json",
            "title": "Using App Store Connect API"
        },
        {
            "location": "/app-store-connect-api/#app-store-connect-api",
            "text": "",
            "title": "App Store Connect API"
        },
        {
            "location": "/app-store-connect-api/#introduction",
            "text": "The  App Store Connect API  (which Apple announced at WWDC18 and is continuously working on) is an official public API used to manage app metadata, pricing and availability, provisioning, and more. This API follows the  JSON API  spec and introduces a new authorization option using API Keys to generate a  JSON Web Token (JWT) .  fastlane  has historically used Apple IDs with username and password to authenticate using a cookie-based web session.  fastlane  will continue using this same cookie-based web session to authenticate with an unofficial version of the App Store Connect API.  However, it is  recommended  to use the API Key authentication when you are able to. The benefits include:   No 2FA needed  Better performance  Documented API  Increased reliability",
            "title": "Introduction"
        },
        {
            "location": "/app-store-connect-api/#supported-actionstools",
            "text": "The App Store Connect API has not been integrated into all tools and actions yet.   Below are the statuses of each tool:     Name  Apple ID  API Key      pilot  Yes  Yes    deliver  Yes  Yes    sigh  Yes  Yes    cert  Yes  Yes    match  Yes  Yes    produce  Partial  No    pem  No  No    precheck  Yes (except for IAP)  Yes (except for IAP)",
            "title": "Supported Actions/Tools"
        },
        {
            "location": "/app-store-connect-api/#creating-an-app-store-connect-api-key",
            "text": "Create a new App Store Connect API Key in the  Users page  For more info, go to the  App Store Connect API Docs    Download the newly created API Key file ( .p8 )  This file cannot be downloaded again after the page has been refreshed",
            "title": "Creating an App Store Connect API Key"
        },
        {
            "location": "/app-store-connect-api/#using-an-app-store-connect-api-key",
            "text": "The API Key (located in the  .p8 ) file, the key id, and the issuer id are needed to create the JWT token for authorization. There are multiple ways that these pieces of information can be input into  fastlane .  Note:  The App Store Connect API does not yet have the ability to determine if the team is App Store or Enterprise. The  app_store_connect_api_key  action and the  fastlane  API Key JSON file format allow for an optional  in_house  key as a temporary workaround.",
            "title": "Using an App Store Connect API Key"
        },
        {
            "location": "/app-store-connect-api/#using-app_store_connect_api_key",
            "text": "There is a new  app_store_connect_api_key  action which takes the key id, the issuer id, and API Key file ( .p8 ) to generate a dictionary/hash used for JWT authorization. This action can be used in two ways:",
            "title": "Using app_store_connect_api_key"
        },
        {
            "location": "/app-store-connect-api/#use-return-value-and-pass-in-as-an-option",
            "text": "lane :release do\n  api_key = app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  pilot(api_key: api_key)\nend",
            "title": "Use return value and pass in as an option"
        },
        {
            "location": "/app-store-connect-api/#use-the-shared-value-in-lane-context",
            "text": "The  app_store_connect_api_key  action sets  Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]  and actions (like  pilot ) will automatically load the API Key from  Actions.lane_context  lane :release do\n  app_store_connect_api_key(\n    key_id: \"D383SF739\",\n    issuer_id: \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n    key_filepath: \"./AuthKey_D383SF739.p8\",\n    duration: 1200, # optional\n    in_house: false, # optional but may be required if using match/sigh\n  )\n\n  # Automatically loads Actions.lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]\n  pilot\nend",
            "title": "Use the shared value in lane context"
        },
        {
            "location": "/app-store-connect-api/#using-fastlane-api-key-json-file",
            "text": "Below is an example of the  fastlane  API Key JSON file format that tools and actions will also be able to read. The JSON file requires:   key_id  issuer_id  key  (the content of the  .p8  file)   The JSON file allows optional:   duration  (session length in seconds)  in_house  (boolean value if team is Enterprise or not)   {\n  \"key_id\": \"D383SF739\",\n  \"issuer_id\": \"6053b7fe-68a8-4acb-89be-165aa6465141\",\n  \"key\": \"-----BEGIN PRIVATE KEY-----\\nMIGTAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBHknlhdlYdLu\\n-----END PRIVATE KEY-----\",\n  \"duration\": 1200, # optional\n  \"in_house\": false, # optional but may be required if using match/sigh\n}  Below is an example of a JSON file being used by an action:  lane :release do\n  pilot( api_key_path: \"fastlane/D383SF739.json\" )\nend  Below is an example of a JSON file being used with CLI:  $ fastlane pilot distribute --api_key_path fastlane/D383SF739.json",
            "title": "Using fastlane API Key JSON file"
        },
        {
            "location": "/uploading-app-privacy-details/",
            "text": "Uploading App Privacy Details\n\n\nIntroduction\n\n\nApple \nannounced\n that as of December 8, 2020, the App Store would start displaying detailed information about an app's privacy practices. App Store Connect will ask developers a series of questions on how privacy is respected over an array of categories. A category then allows for a selection of multiple purposes. After the purposes are selected, there are then questions on how the data is selected.\n\n\nAn example would be:\n\n\n\n\nContact Info - Name\n\n\nPurposes:\n\n\nProduct Personalization\n\n\nApp Functionality\n\n\n\n\n\n\nData Protections\n\n\nData linked to user\n\n\nData used to track user\n\n\n\n\n\n\n\n\n\n\nFinancial Info - Credit Card\n\n\nPurposes:\n\n\nApp Functionality\n\n\n\n\n\n\nData Protections\n\n\nData not linked to user\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUploading App Privacy Details with \nfastlane\n\n\nfastlane\n has the ability to upload your app's app privacy details with the \nupload_app_privacy_details_to_app_store\n action. This action has two steps. The first is answering an interactive questionnaire (similar to what App Store Connect dashboard offers) and saving the answers to a JSON config file. The second is the upload of the app privacy answers to App Store Connect.\n\n\nThe action outputs a JSON config file to \nfastlane/app_privacy_details.json\n (by default) which will save your configuration. This JSON file is output so the answers can be saved in source control, reviewed by you or team members, and used for other apps. The JSON file can then be used again by this action (with the \njson_path\n option) to skip the interactive questions.\n\n\nThese two steps can be done together or separate.\n\n\nOption 1: Answer and Upload Together\n\n\nBy default, \nupload_app_privacy_details_to_app_store\n will prompt you with questions and then upload them directly to App Store Connect. The action will also output a JSON config file to \nfastlane/app_privacy_details.json\n.\n\n\nIn CLI...\n\n\nfastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\"\n\n\n\n\nor in \nFastfile\n...\n\n\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)\n\n\n\n\nor in \nFastfile.swift\n...\n\n\nuploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\")\n\n\n\n\nOption 2: Answer and Upload Separate\n\n\nIf you do not want to upload the app privacy details to App Store Connect right away, \nskip_upload:true\n can be passed to the action. This will prompt you with the interactive questions and save the JSON configuration file but that is it.\n\n\nAfter reviewing the file, the same action can be used again with the \njson_path\n option to bypass the questions (since the answers are in the JSON file) and upload them right away to App Store Connect.\n\n\nStep 1: Answering Questions\n\n\nIn CLI...\n\n\nfastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\" \\\n  skip_upload:true\n\n\n\n\nor in \nFastfile\n...\n\n\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  skip_upload: true\n)\n\n\n\n\nor in \nFastfile.swift\n...\n\n\nuploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\",\n                                  skipUpload: true)\n\n\n\n\n\n\nStep 2: Uploading\n\n\nIn CLI...\n\n\nfastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\" \\\n  json_path:\"fastlane/app_privacy_details.json\"\n\n\n\n\nor in \nFastfile\n...\n\n\nupload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  json_path: \"fastlane/app_privacy_details.json\"\n)\n\n\n\n\nor in \nFastfile.swift\n...\n\n\nuploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\",\n                                  jsonPath: \"fastlane/app_privacy_details.json\")\n\n\n\n\n\n\nRequirements\n\n\nThis action requires an Apple ID with owner or admin permissions on the Apple Development team. The APIs this action uses are also \nnot available\n on the official App Store Connect API so the App Store Connect API Key \ncannot\n be used at this time.\n\n\nExample JSON configuration file\n\n\nBelow are two examples of the \napp_privacy_details.json\n file that \nupload_app_privacy_details_to_app_store\n action will create.\n\n\nNot collecting data\n\n\nThis is what will be output if your app does not collect any data.\n\n\n[\n  {\n    \"data_protections\": [\n      \"DATA_NOT_COLLECTED\"\n    ]\n  }\n]\n\n\n\n\nCollecting data\n\n\nThis is what will be output that matches the example at the top of this page.\n\n\n[\n  {\n    \"category\": \"PAYMENT_INFORMATION\",\n    \"purposes\": [\n      \"APP_FUNCTIONALITY\"\n    ],\n    \"data_protections\": [\n      \"DATA_NOT_LINKED_TO_YOU\"\n    ]\n  },\n  {\n    \"category\": \"NAME\",\n    \"purposes\": [\n      \"PRODUCT_PERSONALIZATION\",\n      \"APP_FUNCTIONALITY\"\n    ],\n    \"data_protections\": [\n      \"DATA_LINKED_TO_YOU\",\n      \"DATA_USED_TO_TRACK_YOU\"\n    ]\n  }\n]\n\n\n\n\nData Values\n\n\nThese are the values you will see in your JSON configuration file. You won't need to ever manually enter these values in your JSON configuration file (as this is what the interactive questionnaire will output for you).\n\n\nCategories\n\n\n\n\nPAYMENT_INFORMATION\n\n\nCREDIT_AND_FRAUD\n\n\nOTHER_FINANCIAL_INFO\n\n\nPRECISE_LOCATION\n\n\nSENSITIVE_INFO\n\n\nPHYSICAL_ADDRESS\n\n\nEMAIL_ADDRESS\n\n\nNAME\n\n\nPHONE_NUMBER\n\n\nOTHER_CONTACT_INFO\n\n\nCONTACTS\n\n\nEMAILS_OR_TEXT_MESSAGES\n\n\nPHOTOS_OR_VIDEOS\n\n\nAUDIO\n\n\nGAMEPLAY_CONTENT\n\n\nCUSTOMER_SUPPORT\n\n\nOTHER_USER_CONTENT\n\n\nBROWSING_HISTORY\n\n\nSEARCH_HISTORY\n\n\nUSER_ID\n\n\nDEVICE_ID\n\n\nPURCHASE_HISTORY\n\n\nPRODUCT_INTERACTION\n\n\nADVERTISING_DATA\n\n\nOTHER_USAGE_DATA\n\n\nCRASH_DATA\n\n\nPERFORMANCE_DATA\n\n\nOTHER_DIAGNOSTIC_DATA\n\n\nOTHER_DATA\n\n\nHEALTH\n\n\nFITNESS\n\n\nCOARSE_LOCATION\n\n\n\n\nPurposes\n\n\n\n\nTHIRD_PARTY_ADVERTISING\n\n\nDEVELOPERS_ADVERTISING\n\n\nANALYTICS\n\n\nPRODUCT_PERSONALIZATION\n\n\nAPP_FUNCTIONALITY\n\n\nOTHER_PURPOSES\n\n\n\n\nData Protections\n\n\n\n\nUses \nDATA_LINKED_TO_YOU\n or \nDATA_NOT_LINKED_TO_YOU\n\n\nOptionally uses \nDATA_USED_TO_TRACK_YOU",
            "title": "Uploading App Privacy Details"
        },
        {
            "location": "/uploading-app-privacy-details/#uploading-app-privacy-details",
            "text": "",
            "title": "Uploading App Privacy Details"
        },
        {
            "location": "/uploading-app-privacy-details/#introduction",
            "text": "Apple  announced  that as of December 8, 2020, the App Store would start displaying detailed information about an app's privacy practices. App Store Connect will ask developers a series of questions on how privacy is respected over an array of categories. A category then allows for a selection of multiple purposes. After the purposes are selected, there are then questions on how the data is selected.  An example would be:   Contact Info - Name  Purposes:  Product Personalization  App Functionality    Data Protections  Data linked to user  Data used to track user      Financial Info - Credit Card  Purposes:  App Functionality    Data Protections  Data not linked to user",
            "title": "Introduction"
        },
        {
            "location": "/uploading-app-privacy-details/#uploading-app-privacy-details-with-fastlane",
            "text": "fastlane  has the ability to upload your app's app privacy details with the  upload_app_privacy_details_to_app_store  action. This action has two steps. The first is answering an interactive questionnaire (similar to what App Store Connect dashboard offers) and saving the answers to a JSON config file. The second is the upload of the app privacy answers to App Store Connect.  The action outputs a JSON config file to  fastlane/app_privacy_details.json  (by default) which will save your configuration. This JSON file is output so the answers can be saved in source control, reviewed by you or team members, and used for other apps. The JSON file can then be used again by this action (with the  json_path  option) to skip the interactive questions.  These two steps can be done together or separate.",
            "title": "Uploading App Privacy Details with fastlane"
        },
        {
            "location": "/uploading-app-privacy-details/#option-1-answer-and-upload-together",
            "text": "By default,  upload_app_privacy_details_to_app_store  will prompt you with questions and then upload them directly to App Store Connect. The action will also output a JSON config file to  fastlane/app_privacy_details.json .  In CLI...  fastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\"  or in  Fastfile ...  upload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\"\n)  or in  Fastfile.swift ...  uploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\")",
            "title": "Option 1: Answer and Upload Together"
        },
        {
            "location": "/uploading-app-privacy-details/#option-2-answer-and-upload-separate",
            "text": "If you do not want to upload the app privacy details to App Store Connect right away,  skip_upload:true  can be passed to the action. This will prompt you with the interactive questions and save the JSON configuration file but that is it.  After reviewing the file, the same action can be used again with the  json_path  option to bypass the questions (since the answers are in the JSON file) and upload them right away to App Store Connect.",
            "title": "Option 2: Answer and Upload Separate"
        },
        {
            "location": "/uploading-app-privacy-details/#step-1-answering-questions",
            "text": "In CLI...  fastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\" \\\n  skip_upload:true  or in  Fastfile ...  upload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  skip_upload: true\n)  or in  Fastfile.swift ...  uploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\",\n                                  skipUpload: true)",
            "title": "Step 1: Answering Questions"
        },
        {
            "location": "/uploading-app-privacy-details/#step-2-uploading",
            "text": "In CLI...  fastlane run upload_app_privacy_details_to_app_store \\\n  username:\"your@email.com\" \\\n  team_name:\"Your Team\" \\\n  app_identifier:\"com.your.bundle\" \\\n  json_path:\"fastlane/app_privacy_details.json\"  or in  Fastfile ...  upload_app_privacy_details_to_app_store(\n  username: \"your@email.com\",\n  team_name: \"Your Team\",\n  app_identifier: \"com.your.bundle\",\n  json_path: \"fastlane/app_privacy_details.json\"\n)  or in  Fastfile.swift ...  uploadAppPrivacyDetailsToAppStore(username: \"your@email.com\",\n                                  appIdentifier: \"com.your.bundle\",\n                                  teamName: \"Your Team\",\n                                  jsonPath: \"fastlane/app_privacy_details.json\")",
            "title": "Step 2: Uploading"
        },
        {
            "location": "/uploading-app-privacy-details/#requirements",
            "text": "This action requires an Apple ID with owner or admin permissions on the Apple Development team. The APIs this action uses are also  not available  on the official App Store Connect API so the App Store Connect API Key  cannot  be used at this time.",
            "title": "Requirements"
        },
        {
            "location": "/uploading-app-privacy-details/#example-json-configuration-file",
            "text": "Below are two examples of the  app_privacy_details.json  file that  upload_app_privacy_details_to_app_store  action will create.",
            "title": "Example JSON configuration file"
        },
        {
            "location": "/uploading-app-privacy-details/#not-collecting-data",
            "text": "This is what will be output if your app does not collect any data.  [\n  {\n    \"data_protections\": [\n      \"DATA_NOT_COLLECTED\"\n    ]\n  }\n]",
            "title": "Not collecting data"
        },
        {
            "location": "/uploading-app-privacy-details/#collecting-data",
            "text": "This is what will be output that matches the example at the top of this page.  [\n  {\n    \"category\": \"PAYMENT_INFORMATION\",\n    \"purposes\": [\n      \"APP_FUNCTIONALITY\"\n    ],\n    \"data_protections\": [\n      \"DATA_NOT_LINKED_TO_YOU\"\n    ]\n  },\n  {\n    \"category\": \"NAME\",\n    \"purposes\": [\n      \"PRODUCT_PERSONALIZATION\",\n      \"APP_FUNCTIONALITY\"\n    ],\n    \"data_protections\": [\n      \"DATA_LINKED_TO_YOU\",\n      \"DATA_USED_TO_TRACK_YOU\"\n    ]\n  }\n]",
            "title": "Collecting data"
        },
        {
            "location": "/uploading-app-privacy-details/#data-values",
            "text": "These are the values you will see in your JSON configuration file. You won't need to ever manually enter these values in your JSON configuration file (as this is what the interactive questionnaire will output for you).",
            "title": "Data Values"
        },
        {
            "location": "/uploading-app-privacy-details/#categories",
            "text": "PAYMENT_INFORMATION  CREDIT_AND_FRAUD  OTHER_FINANCIAL_INFO  PRECISE_LOCATION  SENSITIVE_INFO  PHYSICAL_ADDRESS  EMAIL_ADDRESS  NAME  PHONE_NUMBER  OTHER_CONTACT_INFO  CONTACTS  EMAILS_OR_TEXT_MESSAGES  PHOTOS_OR_VIDEOS  AUDIO  GAMEPLAY_CONTENT  CUSTOMER_SUPPORT  OTHER_USER_CONTENT  BROWSING_HISTORY  SEARCH_HISTORY  USER_ID  DEVICE_ID  PURCHASE_HISTORY  PRODUCT_INTERACTION  ADVERTISING_DATA  OTHER_USAGE_DATA  CRASH_DATA  PERFORMANCE_DATA  OTHER_DIAGNOSTIC_DATA  OTHER_DATA  HEALTH  FITNESS  COARSE_LOCATION",
            "title": "Categories"
        },
        {
            "location": "/uploading-app-privacy-details/#purposes",
            "text": "THIRD_PARTY_ADVERTISING  DEVELOPERS_ADVERTISING  ANALYTICS  PRODUCT_PERSONALIZATION  APP_FUNCTIONALITY  OTHER_PURPOSES",
            "title": "Purposes"
        },
        {
            "location": "/uploading-app-privacy-details/#data-protections",
            "text": "Uses  DATA_LINKED_TO_YOU  or  DATA_NOT_LINKED_TO_YOU  Optionally uses  DATA_USED_TO_TRACK_YOU",
            "title": "Data Protections"
        },
        {
            "location": "/faqs/",
            "text": "FAQs\n\n\nI'm getting an SSL error\n\n\nIf your output contains something like\n\n\nSSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed\n\n\n\n\nthat usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using \nhomebrew\n.\n\n\nbrew update && brew upgrade openssl\n\n\n\n\nIf you use \nrvm\n, try the following\n\n\nrvm osx-ssl-certs update all\n\n\n\n\nfastlane is slow (to start)\n\n\nIf you experience slow launch times of \nfastlane\n, try this to solve this problem:\n\n\nUninstall unused gems\n\n\n[sudo] gem cleanup\n\n\n\n\nError when running \nfastlane\n with Jenkins\n\n\nThis is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application. \n\n\nFor more information about the recommended setup with Jenkins open the \nJenkins Guide\n.\n\n\nCode signing issues\n\n\nCheck out the \ncodesigning.guide\n website for more information on how to properly setup code-signing in your team using \nmatch\n.\n\n\nWhen should I use \ncert\n, \nsigh\n and \nmatch\n?\n\n\n\n\ncert\n allows you to create a new code signing certificate + private key (note that the private key is only stored on your machine and won't be synced to any other mac)\n\n\nsigh\n allows you to create and download a provisioning profile (those are synced via the \uf8ff developer portal)\n\n\nmatch\n uses those 2 tools in combination with a git repo you provide, to sync all private key, certificates and provisioning profiles across all your team's Macs and CI servers\n\n\n\n\nWe recommend using \nmatch\n as it removes the complexity out of code signing, while still being in full control. This way you can sync all the signing identities across your team and your CI server. For more information check out \ncodesigning.guide\n.\n\n\nMultiple targets of the same underlying app\n\n\nIf you have one code base, but multiple branded applications\n\n\nCreate different \n.env\n files for each environment and reference those environment variables in the \nDeliverfile\n, \nFastfile\n, etc. \n\n\nExample: Create a \n.env.app1\n, \n.env.app2\n, and \n.env.app3\n. Define each of these like the following...\n\n\nDLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games\n\n\n\n\nNow your Deliver file should look something like this:\n\n\napp_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']\n\n\n\n\nNow to run this, all you need to do is specify the environment argument when running \nfastlane\n and it will pull from the \n.env\n file that matches the same name...\nEx: \nfastlane build --env app1\n will use \n.env.app1\n\nEx: \nfastlane build --env app2\n will use \n.env.app2\n\n\nYou can also references these environment variables almost anywhere in \nfastlane\n. \n\n\nYou can even define a lane to perform actions on multiple targets:\n\n\ndesc \"Deploy both versions\"\nlane :deploy_all do\n    sh \"fastlane deploy --env paid\"\n    sh \"fastlane deploy --env free\"\nend\n\n\n\n\nAnd you can combine multiple envs in one go\nEx: \nfastlane build --env app1,env1,env2\n will use \n.env.app1\n \n.env.env1\n and \n.env.env2\n\n\nMore on the \n.env\n file can be found \nhere\n.\n\n\nDisable colored output\n\n\nSet the \nFASTLANE_DISABLE_COLORS\n or  the \nNO_COLOR\n environment variable to disable ANSI colors (e.g. for CI machines)\n\n\nexport FASTLANE_DISABLE_COLORS=1\n\n\n\n\nexport NO_COLOR=1\n\n\n\n\nEnable tab auto complete for fastlane lane names\n\n\nSupported shells: \nbash\n, \nzsh\n, \nfish\n.\n\n\nfastlane enable_auto_complete\n\n\n\n\nFollow the on screen prompt to add a line to your \nbash\n/\nzsh\n/\nfish\n profile.\n\n\n\"User interaction is not allowed\" when using \nfastlane\n via SSH\n\n\nThis error can occur when you run \nfastlane\n via SSH. To fix it check out \nthis reply on StackOverflow\n.\n\n\nSome fastlane commands like \ndeliver\n, \nscan\n, \ngym\n, or \npilot\n hang indefinitely or produce strange errors and symbols\n\n\nMake sure your \nLC_ALL\n and \nLANG\n variables are set up correctly. \nfastlane\n requires an UTF-8 environment, so setting those variables to \nen_US.UTF-8\n should fix your issues. Refer to the \nfastlane\n \nsetup instructions\n for details.",
            "title": "FAQs"
        },
        {
            "location": "/faqs/#faqs",
            "text": "",
            "title": "FAQs"
        },
        {
            "location": "/faqs/#im-getting-an-ssl-error",
            "text": "If your output contains something like  SSL_connect returned=1 errno=0 state=SSLv3 read server certificate B: certificate verify failed  that usually means you are using an outdated version of OpenSSL. Make sure to install the latest one using  homebrew .  brew update && brew upgrade openssl  If you use  rvm , try the following  rvm osx-ssl-certs update all",
            "title": "I'm getting an SSL error"
        },
        {
            "location": "/faqs/#fastlane-is-slow-to-start",
            "text": "If you experience slow launch times of  fastlane , try this to solve this problem:",
            "title": "fastlane is slow (to start)"
        },
        {
            "location": "/faqs/#uninstall-unused-gems",
            "text": "[sudo] gem cleanup",
            "title": "Uninstall unused gems"
        },
        {
            "location": "/faqs/#error-when-running-fastlane-with-jenkins",
            "text": "This is usually caused when running Jenkins as its own user. While this is possible, you'll have to take care of creating a temporary Keychain, filling it and then using it when building your application.   For more information about the recommended setup with Jenkins open the  Jenkins Guide .",
            "title": "Error when running fastlane with Jenkins"
        },
        {
            "location": "/faqs/#code-signing-issues",
            "text": "Check out the  codesigning.guide  website for more information on how to properly setup code-signing in your team using  match .",
            "title": "Code signing issues"
        },
        {
            "location": "/faqs/#when-should-i-use-cert-sigh-and-match",
            "text": "cert  allows you to create a new code signing certificate + private key (note that the private key is only stored on your machine and won't be synced to any other mac)  sigh  allows you to create and download a provisioning profile (those are synced via the \uf8ff developer portal)  match  uses those 2 tools in combination with a git repo you provide, to sync all private key, certificates and provisioning profiles across all your team's Macs and CI servers   We recommend using  match  as it removes the complexity out of code signing, while still being in full control. This way you can sync all the signing identities across your team and your CI server. For more information check out  codesigning.guide .",
            "title": "When should I use cert, sigh and match?"
        },
        {
            "location": "/faqs/#multiple-targets-of-the-same-underlying-app",
            "text": "If you have one code base, but multiple branded applications  Create different  .env  files for each environment and reference those environment variables in the  Deliverfile ,  Fastfile , etc.   Example: Create a  .env.app1 ,  .env.app2 , and  .env.app3 . Define each of these like the following...  DLV_FIRST_NAME=Josh\nDLV_LAST_NAME=Holtz\nDLV_PRIM_CATG=Business\nDLV_SCND_CATG=Games  Now your Deliver file should look something like this:  app_review_information(\n  first_name: ENV['DLV_FIRST_NAME'],\n  last_name: ENV['DLV_LAST_NAME']\n)\n\nprimary_category ENV['DLV_PRIM_CATG']\nsecondary_category ENV['DLV_SCND_CATG']  Now to run this, all you need to do is specify the environment argument when running  fastlane  and it will pull from the  .env  file that matches the same name...\nEx:  fastlane build --env app1  will use  .env.app1 \nEx:  fastlane build --env app2  will use  .env.app2  You can also references these environment variables almost anywhere in  fastlane .   You can even define a lane to perform actions on multiple targets:  desc \"Deploy both versions\"\nlane :deploy_all do\n    sh \"fastlane deploy --env paid\"\n    sh \"fastlane deploy --env free\"\nend  And you can combine multiple envs in one go\nEx:  fastlane build --env app1,env1,env2  will use  .env.app1   .env.env1  and  .env.env2  More on the  .env  file can be found  here .",
            "title": "Multiple targets of the same underlying app"
        },
        {
            "location": "/faqs/#disable-colored-output",
            "text": "Set the  FASTLANE_DISABLE_COLORS  or  the  NO_COLOR  environment variable to disable ANSI colors (e.g. for CI machines)  export FASTLANE_DISABLE_COLORS=1  export NO_COLOR=1",
            "title": "Disable colored output"
        },
        {
            "location": "/faqs/#enable-tab-auto-complete-for-fastlane-lane-names",
            "text": "Supported shells:  bash ,  zsh ,  fish .  fastlane enable_auto_complete  Follow the on screen prompt to add a line to your  bash / zsh / fish  profile.",
            "title": "Enable tab auto complete for fastlane lane names"
        },
        {
            "location": "/faqs/#user-interaction-is-not-allowed-when-using-fastlane-via-ssh",
            "text": "This error can occur when you run  fastlane  via SSH. To fix it check out  this reply on StackOverflow .",
            "title": "\"User interaction is not allowed\" when using fastlane via SSH"
        },
        {
            "location": "/faqs/#some-fastlane-commands-like-deliver-scan-gym-or-pilot-hang-indefinitely-or-produce-strange-errors-and-symbols",
            "text": "Make sure your  LC_ALL  and  LANG  variables are set up correctly.  fastlane  requires an UTF-8 environment, so setting those variables to  en_US.UTF-8  should fix your issues. Refer to the  fastlane   setup instructions  for details.",
            "title": "Some fastlane commands like deliver, scan, gym, or pilot hang indefinitely or produce strange errors and symbols"
        },
        {
            "location": "/codesigning/getting-started/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nCodesigning concepts\n\n\nIf you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.\n\n\nFor existing projects it might make sense to switch from a manual process to the \nmatch approach\n to make it easier for new team-members to onboard.\n\n\nIf you are new to code signing, check out the \nWWDC session\n that describes the fundamentals of code signing in Xcode.\n\n\n\n\nUsing match\n\n\nUsing cert and sigh\n\n\nUsing Xcode's code signing feature\n\n\nManually\n\n\n\n\nUsing \nmatch\n\n\nThe concept of \nmatch\n is described in the \ncodesigning guide\n. \n\n\nWith \nmatch\n you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach \nis secure\n and uses technology you already use.\n\n\nGetting started with \nmatch\n requires you to revoke your existing certificates.\n\n\nMake sure to follow \nSetting up your Xcode Project\n to set up your project properly.\n\n\nUsing \ncert\n and \nsigh\n\n\nIf you don't want to revoke your existing certificates, but still want an automated setup, \ncert\n and \nsigh\n are for you. \n\n\n\n\ncert\n will make sure you have a valid certificate and its private key installed on the local machine\n\n\nsigh\n will make sure you have a valid provisioning profile installed locally, that matches the installed certificate\n\n\n\n\nAdd the following lines to your \nFastfile\n\n\nlane :beta do\n  get_certificates           # invokes cert\n  get_provisioning_profile   # invokes sigh\n  build_app\nend\n\n\n\n\nMake sure to follow \nSetting up your Xcode Project\n to set up your project properly.\n\n\nUsing Xcode's code signing feature\n\n\nOccasionally the \nAutomatic\n setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed. \n\n\nThat's why it is recommended to specify a specific provisioning profile somehow:\n\n\nXcode 8 and up\n\n\nThe instructions below are more advanced, and take more time to setup than other approaches.\n\n\nAutomatic & Manual Signing\n\n\nTo simplify development workflow you could use \nAutomatic\n code signing for development, and \nManual\n for release builds.\nYou have to configure your Xcode project to use automatic code signing, and on the release configuration specify the \n$()\n match env variable.\n\n\ne.g: \n\n\n\nin your Fastfile you then use a lane like this:\n\n\nlane :release do\n  sync_code_signing\n  disable_automatic_code_signing(path: \"my_project.xcodeproj\")\n  build_app\n  enable_automatic_code_signing(path: \"my_project.xcodeproj\")\n  upload_to_testflight\nend\n\n\n\n\nthis way you can profit off of the automatic code signing on development machines, and also stay in control on release builds to be sure the right cert/provisioning profiles are used.\n\n\nXcode 7 and lower\n\n\nYou should avoid clicking the \nFix Issue\n button (There is an \nXcode plugin\n that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.\n\n\nUnfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).\n\n\nTo work around this issue, check out \nSetting up your Xcode Project\n on how to pass a provisioning profile to Xcode when building your app.\n\n\nManually\n\n\nYou can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key (\n.p12\n) of your certificates in a safe place, as they can't be restored if you lose them. \n\n\nYou can always download the certificate (\n.cer\n) and provisioning profile (\n.mobileprovision\n) from the Apple Developer Portal.\n\n\nWhere to go from here\n\n\n\n\nSetting up your Xcode Project\n\n\nDebugging codesigning issues\n\n\nCommon code signing issues\n\n\nUpgrading to Xcode 9",
            "title": "Getting Started"
        },
        {
            "location": "/codesigning/getting-started/#codesigning-concepts",
            "text": "If you are just starting a new project, it's important to think about how you want to handle code signing. This guide will help you choose the best approach for you.  For existing projects it might make sense to switch from a manual process to the  match approach  to make it easier for new team-members to onboard.  If you are new to code signing, check out the  WWDC session  that describes the fundamentals of code signing in Xcode.   Using match  Using cert and sigh  Using Xcode's code signing feature  Manually",
            "title": "Codesigning concepts"
        },
        {
            "location": "/codesigning/getting-started/#using-match",
            "text": "The concept of  match  is described in the  codesigning guide .   With  match  you store your private keys and certificates in a git repo to sync them across machines. This makes it easy to onboard new team-members and set up new Mac machines. This approach  is secure  and uses technology you already use.  Getting started with  match  requires you to revoke your existing certificates.  Make sure to follow  Setting up your Xcode Project  to set up your project properly.",
            "title": "Using match"
        },
        {
            "location": "/codesigning/getting-started/#using-cert-and-sigh",
            "text": "If you don't want to revoke your existing certificates, but still want an automated setup,  cert  and  sigh  are for you.    cert  will make sure you have a valid certificate and its private key installed on the local machine  sigh  will make sure you have a valid provisioning profile installed locally, that matches the installed certificate   Add the following lines to your  Fastfile  lane :beta do\n  get_certificates           # invokes cert\n  get_provisioning_profile   # invokes sigh\n  build_app\nend  Make sure to follow  Setting up your Xcode Project  to set up your project properly.",
            "title": "Using cert and sigh"
        },
        {
            "location": "/codesigning/getting-started/#using-xcodes-code-signing-feature",
            "text": "Occasionally the  Automatic  setting as the provisioning profile doesn't work reliably as it will just select the most recently updated provisioning profile, no matter if the certificate is installed.   That's why it is recommended to specify a specific provisioning profile somehow:",
            "title": "Using Xcode's code signing feature"
        },
        {
            "location": "/codesigning/getting-started/#xcode-8-and-up",
            "text": "The instructions below are more advanced, and take more time to setup than other approaches.",
            "title": "Xcode 8 and up"
        },
        {
            "location": "/codesigning/getting-started/#automatic-manual-signing",
            "text": "To simplify development workflow you could use  Automatic  code signing for development, and  Manual  for release builds.\nYou have to configure your Xcode project to use automatic code signing, and on the release configuration specify the  $()  match env variable.  e.g:   in your Fastfile you then use a lane like this:  lane :release do\n  sync_code_signing\n  disable_automatic_code_signing(path: \"my_project.xcodeproj\")\n  build_app\n  enable_automatic_code_signing(path: \"my_project.xcodeproj\")\n  upload_to_testflight\nend  this way you can profit off of the automatic code signing on development machines, and also stay in control on release builds to be sure the right cert/provisioning profiles are used.",
            "title": "Automatic &amp; Manual Signing"
        },
        {
            "location": "/codesigning/getting-started/#xcode-7-and-lower",
            "text": "You should avoid clicking the  Fix Issue  button (There is an  Xcode plugin  that disables the button), as it sometimes revokes existing certificates, and with it the provisioning profiles.  Unfortunately you can't specify the name of the provisioning profile in Xcode 7. Instead you can specify the UUID of the profile, which changes every time the profile gets re-generated (e.g. when you add a new device).  To work around this issue, check out  Setting up your Xcode Project  on how to pass a provisioning profile to Xcode when building your app.",
            "title": "Xcode 7 and lower"
        },
        {
            "location": "/codesigning/getting-started/#manually",
            "text": "You can always manually create and manage your certificates and provisioning profiles using the Apple Developer Portal. Make sure to store the private key ( .p12 ) of your certificates in a safe place, as they can't be restored if you lose them.   You can always download the certificate ( .cer ) and provisioning profile ( .mobileprovision ) from the Apple Developer Portal.",
            "title": "Manually"
        },
        {
            "location": "/codesigning/getting-started/#where-to-go-from-here",
            "text": "Setting up your Xcode Project  Debugging codesigning issues  Common code signing issues  Upgrading to Xcode 9",
            "title": "Where to go from here"
        },
        {
            "location": "/codesigning/xcode-project/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nSetting up your Xcode Project\n\n\nXcode 9 and up\n\n\nIn most cases, \nfastlane\n will work out of the box with Xcode 9 and up if you selected manual code signing and choose a provisioning profile name for each of your targets (\nsee Xcode 8 section\n).\n\n\nIf you don't use \nmatch\n, we recommend defining a mapping of app target to provisioning profile in your \nFastfile\n. By defining those profiles, you can guarantee reproducible builds every time you run it.\n\n\nlane :beta do\n  build_app(\n    export_method: \"app-store\",\n    export_options: {\n      provisioningProfiles: { \n        \"com.example.bundleid\" => \"Provisioning Profile Name\",\n        \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n      }\n    }\n  )\nend\n\n\n\n\nYou can also use Xcode\u2019s \nAutomatically Manage Signing\n feature. By default, automatic signing via \nxcodebuild\n is disabled. To enable it, pass \n-allowProvisioningUpdates\n via the \nexport_xcargs\n option:\n\n\nlane :beta do\n  build_app(export_xcargs: \"-allowProvisioningUpdates\")\nend\n\n\n\n\nXcode 8\n\n\nWith Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)\n\n\nYou can now specify which provisioning profile to use in the \nGeneral\n tab after disabling \nAutomatically manage signing\n.\n\n\n\n\nAlternatively you can also specify the provisioning profile in the \nBuild Settings\n tab.\n\n\n\n\nIf your provisioning profile is not listed in the drop down, there might be a few reasons:\n\n\n\n\nIt doesn't match the bundle identifier of the target\n\n\nThe associated certificate or its private key is not installed on the local machine\n\n\nThe provisioning profile is not installed on the local machine\n\n\n\n\nCheck out \nDebugging codesigning issues\n for more information on how to debug signing issues.\n\n\nBuild settings\n\n\nSpecify the name of the provisioning profile using the \nPROVISIONING_PROFILE_SPECIFIER\n:\n\n\nDEVELOPMENT_TEAM = N8XAAASEU2;\nPROVISIONING_PROFILE_SPECIFIER = \"match AppStore me.themoji.app.release\";\n\n\n\n\nIt is recommended to select the provisioning profile in the \nGeneral\n tab in your Xcode project, so Xcode will automatically set the values mentioned above for you.\n\n\nSet using environment variable\n\n\nYou could pass the profile specifier via environment variables, but usually it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.\n\n\nIf you're using \nmatch\n the following environment variables are being set for you:\n\n\n+---------------------+------------------------------------------------+--------------------------------------+\n|                                       Installed Provisioning Profile                                        |\n+---------------------+------------------------------------------------+--------------------------------------+\n| Parameter           | Environment Variable                           | Value                                |\n+---------------------+------------------------------------------------+--------------------------------------+\n| App Identifier      |                                                | me.themoji.release                   |\n| Type                |                                                | appstore                             |\n| Profile UUID        | sigh_me.themoji.beta_appstore                  | 22a19b3a-7cf6-4997-95f2-9cbb4d33fe7e |\n| Profile Name        | sigh_me.themoji.beta_appstore_profile-name     | match AppStore me.themoji.release    |\n| Development Team ID | sigh_me.themoji.beta_appstore_team-id          | N8XAAASEU2                           |\n+---------------------+------------------------------------------------+--------------------------------------+\n\n\n\n\nUsing \nmatch development\n or Xcode Automatic Provisioning\n\n\n\n\nApple's Automatic Provisioning will automatically generate a private key, development certificate, and managed development provisioning profile for each computer used to build a project. Since Xcode can auto-generate these for you, there is no need to share them between teammates' computers. As such, when using Xcode Automatic Provisioning, there is no need to use \nmatch development\n to keep development keys, certificates, and provisioning profiles in sync.\n\n\nIf you are already using \nmatch\n to manage development code signing, Automatic Provisioning will use the \nmatch\n-generated key and certificate. However, Xcode will create and manage its own provisioning profile and will not use the \nmatch\n-generated profile.\n\n\nmatch appstore\n and Xcode Automatic Provisioning\n\n\nXcode Automatic Provisioning doesn't sync your private keys across machines (if you have multiple computers or share them between teammates). To securely store your private key and have access to it from all your devices, use \nmatch appstore\n or \nmatch adhoc\n. This will sync your keys, certificates and provisioning profiles via git, encrypted using OpenSSL.",
            "title": "Xcode Project"
        },
        {
            "location": "/codesigning/xcode-project/#setting-up-your-xcode-project",
            "text": "",
            "title": "Setting up your Xcode Project"
        },
        {
            "location": "/codesigning/xcode-project/#xcode-9-and-up",
            "text": "In most cases,  fastlane  will work out of the box with Xcode 9 and up if you selected manual code signing and choose a provisioning profile name for each of your targets ( see Xcode 8 section ).  If you don't use  match , we recommend defining a mapping of app target to provisioning profile in your  Fastfile . By defining those profiles, you can guarantee reproducible builds every time you run it.  lane :beta do\n  build_app(\n    export_method: \"app-store\",\n    export_options: {\n      provisioningProfiles: { \n        \"com.example.bundleid\" => \"Provisioning Profile Name\",\n        \"com.example.bundleid2\" => \"Provisioning Profile Name 2\"\n      }\n    }\n  )\nend  You can also use Xcode\u2019s  Automatically Manage Signing  feature. By default, automatic signing via  xcodebuild  is disabled. To enable it, pass  -allowProvisioningUpdates  via the  export_xcargs  option:  lane :beta do\n  build_app(export_xcargs: \"-allowProvisioningUpdates\")\nend",
            "title": "Xcode 9 and up"
        },
        {
            "location": "/codesigning/xcode-project/#xcode-8",
            "text": "With Xcode 8 you can set a provisioning profile name for each of your targets instead of a provisioning profile UUID. By doing so, Xcode automatically selects the latest provisioning profile matching its name. This way you don't have to update your Xcode project, every time you re-generate your provisioning profile (e.g. when adding a new device)  You can now specify which provisioning profile to use in the  General  tab after disabling  Automatically manage signing .   Alternatively you can also specify the provisioning profile in the  Build Settings  tab.   If your provisioning profile is not listed in the drop down, there might be a few reasons:   It doesn't match the bundle identifier of the target  The associated certificate or its private key is not installed on the local machine  The provisioning profile is not installed on the local machine   Check out  Debugging codesigning issues  for more information on how to debug signing issues.",
            "title": "Xcode 8"
        },
        {
            "location": "/codesigning/xcode-project/#build-settings",
            "text": "Specify the name of the provisioning profile using the  PROVISIONING_PROFILE_SPECIFIER :  DEVELOPMENT_TEAM = N8XAAASEU2;\nPROVISIONING_PROFILE_SPECIFIER = \"match AppStore me.themoji.app.release\";  It is recommended to select the provisioning profile in the  General  tab in your Xcode project, so Xcode will automatically set the values mentioned above for you.",
            "title": "Build settings"
        },
        {
            "location": "/codesigning/xcode-project/#set-using-environment-variable",
            "text": "You could pass the profile specifier via environment variables, but usually it's enough to define it statically in your project, per target, since usually neither your Team ID, nor the provisioning profile change.  If you're using  match  the following environment variables are being set for you:  +---------------------+------------------------------------------------+--------------------------------------+\n|                                       Installed Provisioning Profile                                        |\n+---------------------+------------------------------------------------+--------------------------------------+\n| Parameter           | Environment Variable                           | Value                                |\n+---------------------+------------------------------------------------+--------------------------------------+\n| App Identifier      |                                                | me.themoji.release                   |\n| Type                |                                                | appstore                             |\n| Profile UUID        | sigh_me.themoji.beta_appstore                  | 22a19b3a-7cf6-4997-95f2-9cbb4d33fe7e |\n| Profile Name        | sigh_me.themoji.beta_appstore_profile-name     | match AppStore me.themoji.release    |\n| Development Team ID | sigh_me.themoji.beta_appstore_team-id          | N8XAAASEU2                           |\n+---------------------+------------------------------------------------+--------------------------------------+",
            "title": "Set using environment variable"
        },
        {
            "location": "/codesigning/xcode-project/#using-match-development-or-xcode-automatic-provisioning",
            "text": "Apple's Automatic Provisioning will automatically generate a private key, development certificate, and managed development provisioning profile for each computer used to build a project. Since Xcode can auto-generate these for you, there is no need to share them between teammates' computers. As such, when using Xcode Automatic Provisioning, there is no need to use  match development  to keep development keys, certificates, and provisioning profiles in sync.  If you are already using  match  to manage development code signing, Automatic Provisioning will use the  match -generated key and certificate. However, Xcode will create and manage its own provisioning profile and will not use the  match -generated profile.",
            "title": "Using match development or Xcode Automatic Provisioning"
        },
        {
            "location": "/codesigning/xcode-project/#match-appstore-and-xcode-automatic-provisioning",
            "text": "Xcode Automatic Provisioning doesn't sync your private keys across machines (if you have multiple computers or share them between teammates). To securely store your private key and have access to it from all your devices, use  match appstore  or  match adhoc . This will sync your keys, certificates and provisioning profiles via git, encrypted using OpenSSL.",
            "title": "match appstore and Xcode Automatic Provisioning"
        },
        {
            "location": "/codesigning/troubleshooting/",
            "text": "Debugging codesigning issues\n\n\nThis guide will help you resolve the most common code signing errors. In general, make sure to read the \ncomplete\n output when something goes wrong, in particular the very top and the very bottom of the build output. You'll always get access to the raw \nxcodebuild\n output, make sure to analyze it, as \nfastlane\n can only assist with helping you resolve problems.\n\n\nError message\n\n\nMake sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue. \n\n\nTo get even more details, try archiving using Xcode 8. \n\n\nDifferent machine\n\n\nDoes code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the \nKeychain\n part of this document to make sure you don't have any expired certificates installed.\n\n\nXcode project\n\n\nMake sure to follow \nSetting up your Xcode Project\n to properly set up your project.\n\n\nA check list on what you should verify on your Xcode project\n\n\n\n\nMake sure to have consistent code signing settings across your targets\n\n\nDon't set any code signing settings on your project level, just on the target level\n\n\nMake sure the bundle identifier matches the one of your provisioning profile\n\n\nMake sure the code signing identity is set to \niOS Distribution\n for \nRelease\n builds\n\n\nMake sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...\n\n\nCheck your working copy in git - did you make any changes by mistake?\n\n\n\n\nDeveloper Portal\n\n\nIf a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.\n\n\n\n\nOpen the \nDeveloper Portal\n\n\nVerify your certificates are valid, and didn't expire or get revoked\n\n\nSwitch to the Provisioning Profiles and make sure the profiles you want to use are all still valid\n\n\nIf your profile is invalid or expired, you can easily fix it:\n\n\nIf you're using \nmatch\n, run \nmatch\n with \nforce\n enabled\n\n\nIf you're using \nsigh\n, run \nsigh\n with \nforce\n enabled\n\n\nIf you're doing manual code signing, edit the provisioning profile, and click on \nGenerate\n on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile\n\n\n\n\n\n\nIf your profile is valid, but you still have issues make sure\n\n\nthat the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click \nGenerate\n, unless you want to re-generate the provisioning profile)\n\n\nthat all devices you need are included (Development and Ad-Hoc only)\n\n\nthat you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.\n\n\n\n\n\n\n\n\n\n\n\n\nKeychain\n\n\n\n\nRun \nsecurity find-identity -v -p codesigning\n to get a list of locally installed code signing identities. Does yours show up?\n\n\nOpen the \nKeychain Access\n app, switch to \nCertificates\n and find your \niOS Developer\n or \niOS Distribution\n entry and unfold the entry to verify the private key is locally installed: \n\n\n  \n\n\n\n\nMake sure to have deleted all expired WWDR certificates, more information \nhere\n. There might be 2 expired WWDR certificates, one in the \nlogin\n, and one in the \nsystem\n keychain\n\n\n\n\nHave you tried turning it off and on again?\n\n\nAs funny as it sounds, sometimes restarting your Mac helps.\n\n\nfastlane\n\n\nRun \nfastlane\n in verbose mode to get even more debug information:\n\n\nfastlane [lane] --verbose\n\n\n\n\nCommon Issues\n\n\nCheck out \nCommon code signing issues\n for the most common code signing issues and how you can solve them.",
            "title": "Troubleshooting"
        },
        {
            "location": "/codesigning/troubleshooting/#debugging-codesigning-issues",
            "text": "This guide will help you resolve the most common code signing errors. In general, make sure to read the  complete  output when something goes wrong, in particular the very top and the very bottom of the build output. You'll always get access to the raw  xcodebuild  output, make sure to analyze it, as  fastlane  can only assist with helping you resolve problems.",
            "title": "Debugging codesigning issues"
        },
        {
            "location": "/codesigning/troubleshooting/#error-message",
            "text": "Make sure to find the exact error message in your build output. Many times the error message actually tells you how to resolve the issue.   To get even more details, try archiving using Xcode 8.",
            "title": "Error message"
        },
        {
            "location": "/codesigning/troubleshooting/#different-machine",
            "text": "Does code signing work on a different Mac, but not on yours? If so, chances are high you don't have the latest private key, the certificate or the provisioning profile. Also follow the  Keychain  part of this document to make sure you don't have any expired certificates installed.",
            "title": "Different machine"
        },
        {
            "location": "/codesigning/troubleshooting/#xcode-project",
            "text": "Make sure to follow  Setting up your Xcode Project  to properly set up your project.  A check list on what you should verify on your Xcode project   Make sure to have consistent code signing settings across your targets  Don't set any code signing settings on your project level, just on the target level  Make sure the bundle identifier matches the one of your provisioning profile  Make sure the code signing identity is set to  iOS Distribution  for  Release  builds  Make sure to set a provisioning profile for all your targets, e.g. Watch, Today widget, ...  Check your working copy in git - did you make any changes by mistake?",
            "title": "Xcode project"
        },
        {
            "location": "/codesigning/troubleshooting/#developer-portal",
            "text": "If a certificate gets revoked, all connected provisioning profiles get invalidated. This however might not immediately show up in your local keychain.   Open the  Developer Portal  Verify your certificates are valid, and didn't expire or get revoked  Switch to the Provisioning Profiles and make sure the profiles you want to use are all still valid  If your profile is invalid or expired, you can easily fix it:  If you're using  match , run  match  with  force  enabled  If you're using  sigh , run  sigh  with  force  enabled  If you're doing manual code signing, edit the provisioning profile, and click on  Generate  on the bottom of the screen. Make sure to select the correct certificate, then download and open the new provisioning profile    If your profile is valid, but you still have issues make sure  that the certificate matches the certificate you have installed locally. You can view the used certificate by editing the profile (Don't click  Generate , unless you want to re-generate the provisioning profile)  that all devices you need are included (Development and Ad-Hoc only)  that you are actually looking at the correct provisioning profile, that matches the bundle identifier of your app. You might have multiple provisioning profiles for the same app / certificate combination. By default Xcode will use the last modified one.",
            "title": "Developer Portal"
        },
        {
            "location": "/codesigning/troubleshooting/#keychain",
            "text": "Run  security find-identity -v -p codesigning  to get a list of locally installed code signing identities. Does yours show up?  Open the  Keychain Access  app, switch to  Certificates  and find your  iOS Developer  or  iOS Distribution  entry and unfold the entry to verify the private key is locally installed:  \n     Make sure to have deleted all expired WWDR certificates, more information  here . There might be 2 expired WWDR certificates, one in the  login , and one in the  system  keychain",
            "title": "Keychain"
        },
        {
            "location": "/codesigning/troubleshooting/#have-you-tried-turning-it-off-and-on-again",
            "text": "As funny as it sounds, sometimes restarting your Mac helps.",
            "title": "Have you tried turning it off and on again?"
        },
        {
            "location": "/codesigning/troubleshooting/#fastlane",
            "text": "Run  fastlane  in verbose mode to get even more debug information:  fastlane [lane] --verbose",
            "title": "fastlane"
        },
        {
            "location": "/codesigning/troubleshooting/#common-issues",
            "text": "Check out  Common code signing issues  for the most common code signing issues and how you can solve them.",
            "title": "Common Issues"
        },
        {
            "location": "/codesigning/common-issues/",
            "text": "Common code signing issues\n\n\nXcode errors\n\n\n\n\nCode Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.\n\n\n\n\nThe provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See \nSetting up your Xcode Project\n).\n\n\nYou might have the provisioning profile installed locally, but miss the private key or certificate for it. \n\n\n\n\nNo matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found\n\n\n\n\nThe code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.\n\n\n\n\nError Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"\n\n\n\n\nThis error can have a lot of reasons, some things you should try:\n\n\n\n\nVerify your Keychain is valid and you don't have an expired WWDR certificate using \nthis guide\n\n\nVerify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out \nDebugging codesigning issues\n for more information)\n\n\nFollow the other steps of \nDebugging codesigning issues\n\n\n\n\n\n\nProvisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"\n\n\n\n\nYour project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.\n\n\n\n\nYour build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.\n\n\n\n\nYour project defines a provisioning profile which doesn't exist on your local machine. Check out \nSetting up your Xcode Project\n for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.\n\n\n\n\nCodeSign Error: code signing is required for product type 'Application'...\n\n\n\n\nMake sure to have a valid code signing identity defined in your project targets. This might happen when you select \nDon't Code Sign\n as Code Signing Identity.\n\n\nfastlane\n errors\n\n\n\n\nUser interaction is not allowed. Command /usr/bin/codesign failed with exit code 1\n\n\n\n\nMake sure that codesign can access your signing private key. Open Keychain Access. Select your signing private key, right-click, choose Get Info, change to the Access Control tab and select the \"Allow all applications to access this item\".\n\n\n\n\nCould not find a matching code signing identity for type 'X'\n\n\n\n\nThere are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it. \n\n\nDebugging steps for \"No applicable devices found.\" error\n\n\nIt's not immediately obvious what this error is or what it's caused by, so hopefully these simple steps will help you find the root cause faster.\n\n\nNot just \nfastlane\n\n\nThis error happens to all projects built with \nxcodebuild\n / \nxcrun\n, so it's likely not caused by \nfastlane\n. \nfastlane\n might help alleviate it with some env var unsetting / setting or other tricks, but this is an error from the new export APIs that Xcode uses.\n\n\nLegacy export API\n\n\nAs of Xcode 8.3, the deprecated / legacy export api (e.g. \nuse_legacy_build_api\n) is removed, so you have to use the latest Xcode export API, which unfortunately still has some issues.\n\n\nMisleading errors\n\n\nThe error message, \n\"No applicable devices found.\"\n, is actually misleading: it's not the real error. Something else is erroring out at a lower level so you'll need to dig in to find out what.\n\n\nThe archive built successfully, but the export step failed\n\n\nTypically, your archive will build nicely, and with the correct provisioning profile; you can inspect the \n.xcarchive\n package to verify the \nembedded.mobileprovision\n file matches.\n\n\nWhat happens is the export step will possibly sign it with a different profile depending on which \nexport_method\n you're choosing (with \ndevelopment\n being the default) and it is during this step that the process will fail.\n\n\nThis allows you to isolate the error to the export step, under most circumstances.\n\n\nDependency on other gems\n\n\nThe export step sometimes fails due to not having these Ruby gems installed and caused many of the old instances of this problem.\n\n\n\n\nCFPropertyList\n\n\nsqlite3\n\n\ndigest\n\n\n\n\nYou can use \n$ gem list\n to show which gems are installed\n\n\nRuby version\n\n\nMany of the old instances of this problem were caused by not using \nsystem\n Ruby, but this likely won't impact many in the future since \nfastlane\n helps ensure your environment is set up properly now.\n\n\nUsing \nRVM\n or newer versions of Ruby should work fine. If you have RVM installed and want to try reverting back to \nsystem\n Ruby just in case, you can set and check this using:\n\n\n$ rvm use system\n$ ruby -v\nruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\n$ which ruby\n/usr/bin/ruby\n\n\n\n\nCheck the Logs\n\n\nIn many issues that were seen on the \nfastlane\n repo and across the web, this error was given during the bundling process. Luckily, that bundler creates a log file that you can access to see what error \nactually\n happened:\n\n\n2017-03-30 21:47:09.855 xcodebuild[78957:9114437] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/MyApp-Internal_2017-03-30_21-47-09.854.xcdistributionlogs'.\n1.2.840.113635.100.1.61\n1.2.840.113635.100.1.61\n2017-03-30 21:47:14.702 xcodebuild[78957:9114437] [MT] IDEDistribution: Step failed: <IDEDistributionThinningStep: 0x7fc3218d0b60>: Error Domain=IDEDistributionErrorDomain Code=14 \"No applicable devices found.\" UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.\n\n\n\n\nIf you look closely, you'll see the misleading error message and then just above it, there's a path to a log file (\n*.xcdistributionlogs\n). Opening that up, you'll see more detail. (Side note: you can also search for all logs via \n$ sudo find /private/var -name \"*.xcdistributionlogs\"\n)\n\n\nIn this case, it was because the export was built \nwithout\n bitcode, but there were static lib frameworks that were built \nwith\n bitcode:\n\n\n# inside IDEDistribution.standard.log within the .xcdistributionlogs file\n2017-03-31 16:49:06 +0000  Validating IPA structure...\n2017-03-31 16:49:06 +0000  error: Failed to verify bitcode in opus.framework/opus:\nerror: Bundle only contains bitcode-marker /var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/IDEDistributionThinningStep.KRt/Payload/Viv.app/Frameworks/opus.framework/opus (armv7)\n\n\n\n\nWhen that framework was rebuilt without bitcode, it worked like a charm! \ud83d\ude05 \n\n\nRun commands yourself\n\n\ngym\n does a great job of showing which commands it's going to run. Inspect the files it generates and run these commands yourself, as many times as you need to, in order to isolate the problems.\n\n\nFor example, here's the export command that \ngym\n shows:\n\n\n/usr/bin/xcrun /Users/rob/.fastlane/bin/bundle/lib/ruby/gems/2.2.0/gems/fastlane-2.24.0/gym/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_config20170330-65021-1xbw0ov.plist' -archivePath /Users/rob/Library/Developer/Xcode/Archives/2017-03-30/MyApp\\ 2017-03-30\\ 21.12.02.xcarchive -exportPath '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_output20170330-65021-u80ojn'\n\n\n\n\nFrom that, you can see which \nexportOptionsPlist\n it's using, which had this in it:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>method</key>\n    <string>development</string>\n</dict>\n</plist>\n\n\n\n\nAnd you can see which \n.xcarchive\n it's using to check if it built that with the correct provisioning profile.\n\n\nMost importantly, you can keep running that entire command until you figure out why it's breaking (e.g. try installing these gems, try using system Ruby).\n\n\nOther Causes\n\n\nKeep in mind, this list could be infinite since this \nNo applicable devices found\n error just manifests itself from underlying errors. Your best bet is to dig into the logs and see which error is actually being thrown.\n\n\n\n\nUsing the wrong \nexport_method\n or some other error in the generated \nexportPlist\n (e.g. using \nenterprise\n method when you're actually building for the \napp store\n and don't have the proper certificates)\n\n\nRoot Apple WWDR certificate had expired; check the Keychain for expired certificates\n\n\nEnv vars not being unset, \nrelevant PR\n\n\nIncluding bitcode sometimes caused it (can use \ninclude_bitcode: false\n) in your \ngym\n command and check if all frameworks match your bitcode requirements\n\n\nProvisioning profiles not matching capabilities and beta-reports-active flag on .entitlements file.\n\n\nNot having the gems (\nCFPropertyList\n etc) we discussed earlier installed \n\n\n\n\nApple Tech Notes\n\n\nIf all else fails, use these tech notes to troubleshoot app thinning and bitcode: \n\n\n\n\nhttps://developer.apple.com/library/content/technotes/tn2432/_index.html\n\n\nhttps://stackoverflow.com/questions/34959767/whats-the-difference-between-fembed-bitcode-and-bitcode-generation-mode\n\n\nhttps://forums.developer.apple.com/thread/70583\n\n\n\n\nRadar\n\n\nFeel free to duplicate the radar \nhttps://openradar.appspot.com/31389725\n so the export APIs will return an accurate error message",
            "title": "Common Issues"
        },
        {
            "location": "/codesigning/common-issues/#common-code-signing-issues",
            "text": "",
            "title": "Common code signing issues"
        },
        {
            "location": "/codesigning/common-issues/#xcode-errors",
            "text": "Code Sign error: No matching provisioning profiles found: No provisioning profiles with a valid signing identity (i.e. certificate and private key pair) matching the bundle identifier \"X\" were found.   The provisioning profile for the given app identifier \"X\" is not available on the local machine. Make sure you have a valid provisioning profile for the correct distribution type (App Store, Development or Ad Hoc) on the Apple Developer Portal, download and install it, and select the profile in the Xcode settings (See  Setting up your Xcode Project ).  You might have the provisioning profile installed locally, but miss the private key or certificate for it.    No matching codesigning identity found: No codesigning identities (i.e. certificate and private key pairs) matching \"iPhone Distribution: X\" were found   The code signing identity you specified in the Xcode project can't be found in your local keychain. Make sure to transfer the certificate and private key from another Mac (or wherever you store the private key), or to update the project file to use the correct code signing identity.   Error Domain=IDEDistributionErrorDomain Code=1 \"The operation couldn\u2019t be completed. (IDEDistributionErrorDomain error 1.)\"   This error can have a lot of reasons, some things you should try:   Verify your Keychain is valid and you don't have an expired WWDR certificate using  this guide  Verify both your certificate and provisioning profile are valid in both your Keychain and on the Apple Developer Portal (Check out  Debugging codesigning issues  for more information)  Follow the other steps of  Debugging codesigning issues    Provisioning profile does not match bundle identifier: The provisioning profile specified in your build settings (\"X\") has an AppID of \"Y\" which does not match your bundle identifier \"Z\"   Your project defines a provisioning profile that doesn't match the bundle identifier of your app. There is mismatch between the bundle identifiers, this might happen if you specify the wrong provisioning profile in your target.   Your build settings specify a provisioning profile with the UUID \"X\", however, no such provisioning profile was found.   Your project defines a provisioning profile which doesn't exist on your local machine. Check out  Setting up your Xcode Project  for more information how to properly specify a provisioning profile to avoid hard coded UUIDs in your project.   CodeSign Error: code signing is required for product type 'Application'...   Make sure to have a valid code signing identity defined in your project targets. This might happen when you select  Don't Code Sign  as Code Signing Identity.",
            "title": "Xcode errors"
        },
        {
            "location": "/codesigning/common-issues/#fastlane-errors",
            "text": "User interaction is not allowed. Command /usr/bin/codesign failed with exit code 1   Make sure that codesign can access your signing private key. Open Keychain Access. Select your signing private key, right-click, choose Get Info, change to the Access Control tab and select the \"Allow all applications to access this item\".   Could not find a matching code signing identity for type 'X'   There are no certificates available on the Apple Developer Portal. This could either mean someone revoked a certificate, or you don't have access to it.",
            "title": "fastlane errors"
        },
        {
            "location": "/codesigning/common-issues/#debugging-steps-for-no-applicable-devices-found-error",
            "text": "It's not immediately obvious what this error is or what it's caused by, so hopefully these simple steps will help you find the root cause faster.",
            "title": "Debugging steps for \"No applicable devices found.\" error"
        },
        {
            "location": "/codesigning/common-issues/#not-just-fastlane",
            "text": "This error happens to all projects built with  xcodebuild  /  xcrun , so it's likely not caused by  fastlane .  fastlane  might help alleviate it with some env var unsetting / setting or other tricks, but this is an error from the new export APIs that Xcode uses.",
            "title": "Not just fastlane"
        },
        {
            "location": "/codesigning/common-issues/#legacy-export-api",
            "text": "As of Xcode 8.3, the deprecated / legacy export api (e.g.  use_legacy_build_api ) is removed, so you have to use the latest Xcode export API, which unfortunately still has some issues.",
            "title": "Legacy export API"
        },
        {
            "location": "/codesigning/common-issues/#misleading-errors",
            "text": "The error message,  \"No applicable devices found.\" , is actually misleading: it's not the real error. Something else is erroring out at a lower level so you'll need to dig in to find out what.",
            "title": "Misleading errors"
        },
        {
            "location": "/codesigning/common-issues/#the-archive-built-successfully-but-the-export-step-failed",
            "text": "Typically, your archive will build nicely, and with the correct provisioning profile; you can inspect the  .xcarchive  package to verify the  embedded.mobileprovision  file matches.  What happens is the export step will possibly sign it with a different profile depending on which  export_method  you're choosing (with  development  being the default) and it is during this step that the process will fail.  This allows you to isolate the error to the export step, under most circumstances.",
            "title": "The archive built successfully, but the export step failed"
        },
        {
            "location": "/codesigning/common-issues/#dependency-on-other-gems",
            "text": "The export step sometimes fails due to not having these Ruby gems installed and caused many of the old instances of this problem.   CFPropertyList  sqlite3  digest   You can use  $ gem list  to show which gems are installed",
            "title": "Dependency on other gems"
        },
        {
            "location": "/codesigning/common-issues/#ruby-version",
            "text": "Many of the old instances of this problem were caused by not using  system  Ruby, but this likely won't impact many in the future since  fastlane  helps ensure your environment is set up properly now.  Using  RVM  or newer versions of Ruby should work fine. If you have RVM installed and want to try reverting back to  system  Ruby just in case, you can set and check this using:  $ rvm use system\n$ ruby -v\nruby 2.0.0p648 (2015-12-16 revision 53162) [universal.x86_64-darwin16]\n$ which ruby\n/usr/bin/ruby",
            "title": "Ruby version"
        },
        {
            "location": "/codesigning/common-issues/#check-the-logs",
            "text": "In many issues that were seen on the  fastlane  repo and across the web, this error was given during the bundling process. Luckily, that bundler creates a log file that you can access to see what error  actually  happened:  2017-03-30 21:47:09.855 xcodebuild[78957:9114437] [MT] IDEDistribution: -[IDEDistributionLogging _createLoggingBundleAtPath:]: Created bundle at path '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/MyApp-Internal_2017-03-30_21-47-09.854.xcdistributionlogs'.\n1.2.840.113635.100.1.61\n1.2.840.113635.100.1.61\n2017-03-30 21:47:14.702 xcodebuild[78957:9114437] [MT] IDEDistribution: Step failed: <IDEDistributionThinningStep: 0x7fc3218d0b60>: Error Domain=IDEDistributionErrorDomain Code=14 \"No applicable devices found.\" UserInfo={NSLocalizedDescription=No applicable devices found.}\nerror: exportArchive: No applicable devices found.  If you look closely, you'll see the misleading error message and then just above it, there's a path to a log file ( *.xcdistributionlogs ). Opening that up, you'll see more detail. (Side note: you can also search for all logs via  $ sudo find /private/var -name \"*.xcdistributionlogs\" )  In this case, it was because the export was built  without  bitcode, but there were static lib frameworks that were built  with  bitcode:  # inside IDEDistribution.standard.log within the .xcdistributionlogs file\n2017-03-31 16:49:06 +0000  Validating IPA structure...\n2017-03-31 16:49:06 +0000  error: Failed to verify bitcode in opus.framework/opus:\nerror: Bundle only contains bitcode-marker /var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/IDEDistributionThinningStep.KRt/Payload/Viv.app/Frameworks/opus.framework/opus (armv7)  When that framework was rebuilt without bitcode, it worked like a charm! \ud83d\ude05",
            "title": "Check the Logs"
        },
        {
            "location": "/codesigning/common-issues/#run-commands-yourself",
            "text": "gym  does a great job of showing which commands it's going to run. Inspect the files it generates and run these commands yourself, as many times as you need to, in order to isolate the problems.  For example, here's the export command that  gym  shows:  /usr/bin/xcrun /Users/rob/.fastlane/bin/bundle/lib/ruby/gems/2.2.0/gems/fastlane-2.24.0/gym/lib/assets/wrap_xcodebuild/xcbuild-safe.sh -exportArchive -exportOptionsPlist '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_config20170330-65021-1xbw0ov.plist' -archivePath /Users/rob/Library/Developer/Xcode/Archives/2017-03-30/MyApp\\ 2017-03-30\\ 21.12.02.xcarchive -exportPath '/var/folders/s1/0h7d0scx6xqdthft328yfk0m0000gn/T/gym_output20170330-65021-u80ojn'  From that, you can see which  exportOptionsPlist  it's using, which had this in it:  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n    <key>method</key>\n    <string>development</string>\n</dict>\n</plist>  And you can see which  .xcarchive  it's using to check if it built that with the correct provisioning profile.  Most importantly, you can keep running that entire command until you figure out why it's breaking (e.g. try installing these gems, try using system Ruby).",
            "title": "Run commands yourself"
        },
        {
            "location": "/codesigning/common-issues/#other-causes",
            "text": "Keep in mind, this list could be infinite since this  No applicable devices found  error just manifests itself from underlying errors. Your best bet is to dig into the logs and see which error is actually being thrown.   Using the wrong  export_method  or some other error in the generated  exportPlist  (e.g. using  enterprise  method when you're actually building for the  app store  and don't have the proper certificates)  Root Apple WWDR certificate had expired; check the Keychain for expired certificates  Env vars not being unset,  relevant PR  Including bitcode sometimes caused it (can use  include_bitcode: false ) in your  gym  command and check if all frameworks match your bitcode requirements  Provisioning profiles not matching capabilities and beta-reports-active flag on .entitlements file.  Not having the gems ( CFPropertyList  etc) we discussed earlier installed",
            "title": "Other Causes"
        },
        {
            "location": "/codesigning/common-issues/#apple-tech-notes",
            "text": "If all else fails, use these tech notes to troubleshoot app thinning and bitcode:    https://developer.apple.com/library/content/technotes/tn2432/_index.html  https://stackoverflow.com/questions/34959767/whats-the-difference-between-fembed-bitcode-and-bitcode-generation-mode  https://forums.developer.apple.com/thread/70583",
            "title": "Apple Tech Notes"
        },
        {
            "location": "/codesigning/common-issues/#radar",
            "text": "Feel free to duplicate the radar  https://openradar.appspot.com/31389725  so the export APIs will return an accurate error message",
            "title": "Radar"
        },
        {
            "location": "/plugins/available-plugins/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nAvailable Plugins\n\n\n\n\n16031\n\n\n\nappcenter\n\n\n\nvia Microsoft Corporation\n\n\n\n\n\nFastlane plugin for App Center\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappcenter_fetch_version_number\n\n\n-\n\n\nFetches the latest version number of an app or the last build number of a version from App Center\n\n\n\n\n\n\nappcenter_fetch_devices\n\n\n-\n\n\nFetches a list of devices from App Center to distribute an iOS app to\n\n\n\n\n\n\nappcenter_upload\n\n\n-\n\n\nDistribute new release to App Center\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n252\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n63\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n357\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n470\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-34\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14721\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n13170\n\n\n\nfirebase_app_distribution\n\n\n\nvia Stefan Natchev, Manny Jimenez, Alonso Salas Infante\n\n\n\n\n\nRelease your beta builds to Firebase App Distribution. https://firebase.google.com/docs/app-distribution\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirebase_app_distribution_login\n\n\n-\n\n\nAuthenticate with Firebase App Distribution using a Google account.\n\n\n\n\n\n\nfirebase_app_distribution\n\n\n-\n\n\nRelease your beta builds with Firebase App Distribution\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n78\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n73\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n45\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-14\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12806\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n9124\n\n\n\nversioning\n\n\n\nvia Siarhei Fiedartsou, John Douglas\n\n\n\n\n\nAllows to set/get app version and build number directly to/from Info.plist\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_version_number_from_git_branch\n\n\n-\n\n\nExtract version number from git branch name\n\n\n\n\n\n\nincrement_build_number_in_xcodeproj\n\n\n-\n\n\nIncrement build number in xcodeproj\n\n\n\n\n\n\nget_version_number_from_plist\n\n\n-\n\n\nGet the version number of your project\n\n\n\n\n\n\nget_build_number_from_plist\n\n\n-\n\n\nGet the build number of your project\n\n\n\n\n\n\nci_build_number\n\n\nbuilding\n\n\nDetects current build number defined by CI system\n\n\n\n\n\n\nget_version_number_from_xcodeproj\n\n\n-\n\n\nGet the version number of your project\n\n\n\n\n\n\nincrement_version_number_in_xcodeproj\n\n\n-\n\n\nIncrement build number in xcodeproj\n\n\n\n\n\n\nincrement_version_number_in_plist\n\n\n-\n\n\nIncrement the version number of your project\n\n\n\n\n\n\nget_app_store_version_number\n\n\n-\n\n\nGet the version number of your app in the App Store\n\n\n\n\n\n\nget_info_plist_path\n\n\n-\n\n\nGet the version number of your project\n\n\n\n\n\n\nget_build_number_from_xcodeproj\n\n\n-\n\n\nGet the build number of your project\n\n\n\n\n\n\nincrement_build_number_in_plist\n\n\n-\n\n\nIncrement the build number of your project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n72\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n320\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n175\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-6\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8370\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n8942\n\n\n\nbadge\n\n\n\nvia Daniel Griesser\n\n\n\n\n\nAdd a badge overlay to your app icon\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadd_badge\n\n\n-\n\n\nAutomatically add a badge to your app icon\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n130\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n50\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8617\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n5315\n\n\n\naws_s3\n\n\n\nvia Josh Holtz\n\n\n\n\n\nUpload IPA and APK to S3\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naws_s3\n\n\n-\n\n\nGenerates a plist file and uploads all to AWS S3\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n120\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n98\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n230\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-15\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4730\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n5025\n\n\n\nbugsnag\n\n\n\nvia Delisa Mason\n\n\n\n\n\nUploads dSYM files to Bugsnag\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_bugsnag\n\n\n-\n\n\nUploads dSYM debug symbol files to Bugsnag\n\n\n\n\n\n\nsend_build_to_bugsnag\n\n\nbuilding\n\n\nNotifies Bugsnag of a build\n\n\n\n\n\n\ndsym_magic\n\n\n-\n\n\nSets the dsym path\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n60\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n27\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-8\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4790\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n4723\n\n\n\ntest_center\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\n\ud83c\udfaf  Understand, tame, and train your iOS & Mac tests \ud83c\udf89\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsuppressed_tests\n\n\ntesting\n\n\n\ud83d\udddc Retrieves a list of tests that are suppressed in a specific or all Xcode Schemes in a project\n\n\n\n\n\n\nsuppress_tests\n\n\ntesting\n\n\n\ud83d\udddc Suppresses specific tests in a specific or all Xcode Schemes in a given project\n\n\n\n\n\n\ntests_from_xcresult\n\n\ntesting\n\n\n\u2611\ufe0f Retrieves the failing and passing tests as reportedn an xcresult bundle\n\n\n\n\n\n\nsuppress_tests_from_junit\n\n\ntesting\n\n\n\ud83d\udddc Uses a junit xml report file to suppress either passing or failing tests in an Xcode Scheme\n\n\n\n\n\n\ntests_from_xctestrun\n\n\ntesting\n\n\n\ufe0f\ufe0f\u2611\ufe0f Retrieves all of the tests from xctest bundles referenced by the xctestrun file\n\n\n\n\n\n\nquit_core_simulator_service\n\n\ntesting\n\n\n\ud83d\udcf2 Force-quits the com.apple.CoreSimulator.CoreSimulatorService to fix mysterious iOS Simulator issues.\n\n\n\n\n\n\ncollate_test_result_bundles\n\n\ntesting\n\n\n\ud83d\udd38 Combines multiple test_result bundles into one test_result bundle\n\n\n\n\n\n\ntests_from_junit\n\n\ntesting\n\n\n\u2611\ufe0f Retrieves the failing and passing tests as reported in a junit xml file\n\n\n\n\n\n\nmulti_scan\n\n\ntesting\n\n\n\u267b\ufe0f Uses scan to run Xcode tests a given number of times, with the option of batching and/or parallelizing them, only re-testing failing tests.\n\n\n\n\n\n\ntest_options_from_testplan\n\n\ntesting\n\n\n\u2611\ufe0f Gets test info from a given test plan\n\n\n\n\n\n\ncollate_html_reports\n\n\ntesting\n\n\n\ud83d\udd36 Combines multiple html report files into one html report file\n\n\n\n\n\n\ncollate_junit_reports\n\n\ntesting\n\n\n\ud83d\udd37 Combines multiple junit report files into one junit report file\n\n\n\n\n\n\ncollate_json_reports\n\n\ntesting\n\n\n\ud83d\udd39 Combines multiple json report files into one json report file\n\n\n\n\n\n\ntestplans_from_scheme\n\n\ntesting\n\n\n\u2611\ufe0fGets all the testplans that a Scheme references\n\n\n\n\n\n\ncollate_xcresults\n\n\n-\n\n\n\ud83d\udd38 Combines multiple xcresult bundles into one xcresult bundle\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n66\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n33\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n198\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n190\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-14\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4051\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n4435\n\n\n\nsentry\n\n\n\nvia Sentry\n\n\n\n\n\nUpload symbols to Sentry\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsentry_upload_dsym\n\n\n-\n\n\nUpload dSYM symbolication files to Sentry\n\n\n\n\n\n\nsentry_set_commits\n\n\n-\n\n\nSet commits of a release\n\n\n\n\n\n\nsentry_upload_sourcemap\n\n\n-\n\n\nUpload a sourcemap to a release of a project on Sentry\n\n\n\n\n\n\nsentry_finalize_release\n\n\n-\n\n\nFinalize a release for a project on Sentry\n\n\n\n\n\n\nsentry_upload_file\n\n\n-\n\n\nUpload files to a release of a project on Sentry\n\n\n\n\n\n\nsentry_upload_proguard\n\n\n-\n\n\nUpload mapping to a project on Sentry\n\n\n\n\n\n\nsentry_create_release\n\n\n-\n\n\nCreate new releases for a project on Sentry\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n96\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n42\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n70\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n155\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-12\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3876\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n3928\n\n\n\ntrainer\n\n\n\nvia KrauseFx\n\n\n\n\n\nConvert xcodebuild plist files to JUnit reports\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrainer\n\n\n-\n\n\nConvert the Xcode plist log to a JUnit report. This will raise an exception if the tests failed\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n42\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n18\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n132\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n110\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-8\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3513\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n3926\n\n\n\nincrement_version_code\n\n\n\nvia Jems\n\n\n\n\n\nIncrement the version code of your android project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nincrement_version_code\n\n\n-\n\n\nIncrement the version code of your android project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n40\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3760\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n2672\n\n\n\nchangelog\n\n\n\nvia Pavel Prochazka\n\n\n\n\n\nAutomate changes to your project CHANGELOG.md\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nread_changelog\n\n\n-\n\n\nReads content of a section from your project CHANGELOG.md file\n\n\n\n\n\n\nupdate_changelog\n\n\n-\n\n\nUpdates content of a section of your project CHANGELOG.md file\n\n\n\n\n\n\nemojify_changelog\n\n\n-\n\n\nEmojifies the output of read_changelog action\n\n\n\n\n\n\nstamp_changelog\n\n\n-\n\n\nStamps the [Unreleased] section with provided identifier in your project CHANGELOG.md file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n42\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n122\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n100\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2226\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n2542\n\n\n\nappicon\n\n\n\nvia Boris Bu\u0308gling, Felix Krause\n\n\n\n\n\nGenerate required icon sizes and iconset from a master application icon.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_appicon\n\n\n-\n\n\nGenerate required icon sizes from a master application icon\n\n\n\n\n\n\nappicon\n\n\n-\n\n\nGenerate required icon sizes and iconset from a master application icon\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n114\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n30\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n271\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n205\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-15\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1840\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n2390\n\n\n\nversioning_android\n\n\n\nvia Igor Lamos\n\n\n\n\n\nAndroid Versioning Plugin for Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_get_version_name\n\n\n-\n\n\nGet the Version Name of your Android project\n\n\n\n\n\n\nandroid_set_version_code\n\n\n-\n\n\nSet the Version Code of your Android project\n\n\n\n\n\n\nandroid_set_version_name\n\n\n-\n\n\nSet the Version Name of your Android project\n\n\n\n\n\n\nandroid_get_version_code\n\n\n-\n\n\nGet the Version Code of your Android project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2280\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n36\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1731\n\n\n\nload_json\n\n\n\nvia Felix Krause\n\n\n\n\n\nLoads a local JSON file and parses it\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nload_json\n\n\n-\n\n\nLoads a local JSON file and parses it\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1652\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1666\n\n\n\nget_version_name\n\n\n\nvia Jems\n\n\n\n\n\nGet the version name of an Android project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_version_name\n\n\n-\n\n\nGet the version name of an Android project. This action will return the version name of your project according to the one set in your build.gradle file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1563\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1546\n\n\n\nyarn\n\n\n\nvia Josh Lesch\n\n\n\n\n\nExecute Yarn commands from your Fastfile\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nyarn\n\n\n-\n\n\nExecute Yarn commands from your Fastfile\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n16\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1325\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1371\n\n\n\nandroid_versioning\n\n\n\nvia Manabu OHTAKE\n\n\n\n\n\nAllows to set/get app version name and version code directly to/from build.gradle\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_value_from_build\n\n\n-\n\n\n-\n\n\n\n\n\n\nincrement_version_code\n\n\n-\n\n\nIncrement the version code of your project\n\n\n\n\n\n\nset_value_in_build\n\n\n-\n\n\nSet the value of your project\n\n\n\n\n\n\nget_version_name\n\n\n-\n\n\nGet the version name of your project\n\n\n\n\n\n\nincrement_version_name\n\n\n-\n\n\nIncrement the version name of your project\n\n\n\n\n\n\nget_version_code\n\n\n-\n\n\nGet the version code of your project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n35\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1109\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n66\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1319\n\n\n\ndropbox\n\n\n\nvia Dominik Kapusta\n\n\n\n\n\nUploads files to Dropbox\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndropbox\n\n\n-\n\n\nUploads files to Dropbox\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1160\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1254\n\n\n\naws_device_farm\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nRun UI Tests on AWS Devicefarm\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naws_device_farm\n\n\n-\n\n\nUpload the application to the AWS device farm\n\n\n\n\n\n\naws_device_farm_package\n\n\n-\n\n\nPackages .app from deriveddata to an aws-compatible ipa\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n80\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n170\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-5\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n895\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1249\n\n\n\nbrowserstack\n\n\n\nvia BrowserStack\n\n\n\n\n\nUploads IPA and APK files to BrowserStack for automation and manual testing.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_to_browserstack_app_automate\n\n\n-\n\n\nUploads IPA and APK files to BrowserStack AppAutomate for running automated tests.\n\n\n\n\n\n\nupload_to_browserstack_app_live\n\n\n-\n\n\nUploads IPA and APK files to BrowserStack AppLive for running manual tests.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n18\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1063\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n51\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1248\n\n\n\nrome\n\n\n\nvia Fran\u00e7ois Benaiteau, Tommaso Piazza\n\n\n\n\n\nA cache tool for Carthage\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrome\n\n\n-\n\n\nAn S3 cache tool for Carthage\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n14\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1085\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1202\n\n\n\nxcconfig\n\n\n\nvia Sergii Ovcharenko\n\n\n\n\n\nAdds 2 actions to fastlane to read and update xcconfig files.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_xcconfig_value\n\n\n-\n\n\nUpdates value of a setting in xcconfig file.\n\n\n\n\n\n\nset_xcconfig_value\n\n\n-\n\n\nSets the value of a setting in xcconfig file.\n\n\n\n\n\n\nget_xcconfig_value\n\n\n-\n\n\nReads a value of a setting from xcconfig file.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1031\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1192\n\n\n\nget_version_code\n\n\n\nvia Jems\n\n\n\n\n\nGet the version code of anAndroid project. This action will return the version code of your project according to the one set in your build.gradle file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_version_code\n\n\n-\n\n\nGet the version code of an Android project. This action will return the version code of your project according to the one set in your build.gradle file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1089\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1189\n\n\n\nslack_upload\n\n\n\nvia Dawid Cieslak\n\n\n\n\n\nUploads specified file to Slack\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nslack_upload\n\n\n-\n\n\nUploads given file to Slack\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1101\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1085\n\n\n\ncordova\n\n\n\nvia Almouro\n\n\n\n\n\nBuild your Cordova app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncordova\n\n\nbuilding\n\n\nBuild your Cordova app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n78\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n108\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n160\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-19\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n612\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1076\n\n\n\nxcake\n\n\n\nvia James Campbell\n\n\n\n\n\nCreate your Xcode projects automatically using a stupid simple DSL.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcake\n\n\n-\n\n\nRuns \nxcake\n for the project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n114\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n48\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n464\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n190\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n32\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-5\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n83\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1071\n\n\n\nautomated_test_emulator_run\n\n\n\nvia Kamil Krzyk\n\n\n\n\n\nStarts n AVDs based on JSON file config. AVDs are created and configured according to user liking before instrumentation test process (started either via shell command or gradle) and killed/deleted after test process finishes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nautomated_test_emulator_run\n\n\n-\n\n\nStarts AVD, based on AVD_setup.json file, before test launch and kills it after testing is done.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n75\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n85\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-5\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n747\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1067\n\n\n\nupdate_provisioning_profile_specifier\n\n\n\nvia Jordan Bondo\n\n\n\n\n\nUpdate the provisioning profile in the Xcode Project file for a specified target\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_provisioning_profile_specifier\n\n\n-\n\n\nUpdate the provisioning profile in the Xcode Project file for a specified target\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n20\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n907\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n1061\n\n\n\ntpa\n\n\n\nvia The Perfect App\n\n\n\n\n\nTPA gives you advanced user behaviour analytics, app distribution, crash analytics and more\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_to_tpa\n\n\nbeta\n\n\nUpload app builds to The Perfect App (tpa.io)\n\n\n\n\n\n\nupload_symbols_to_tpa\n\n\nmisc\n\n\nUpload dsym files downloaded from App Store Connect directly to TPA\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n799\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n986\n\n\n\nsemantic_release\n\n\n\nvia Jir\u030ci\u0301 Ota\u0301hal\n\n\n\n\n\nAutomated version managment and generator of release notes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconventional_changelog\n\n\n-\n\n\nUses conventional commits. It groups commits by their types and generates release notes in markdown or slack format.\n\n\n\n\n\n\nanalyze_commits\n\n\n-\n\n\nFinds a tag of last release and determinates version of next release\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n68\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n80\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n643\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n969\n\n\n\nsynx\n\n\n\nvia Afonso Gra\u00e7a\n\n\n\n\n\nOrganise your Xcode project folder to match your Xcode groups.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsynx\n\n\n-\n\n\nOrganise your Xcode project folder to match your Xcode groups.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n26\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n841\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n945\n\n\n\ncommit_android_version_bump\n\n\n\nvia jems\n\n\n\n\n\nThis Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncommit_android_version_bump\n\n\n-\n\n\nThis Android plugins allow you to commit every modification done in your build.gradle file during the execution of a lane. In fast, it do the same as the commit_version_bump action, but for Android\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n834\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n936\n\n\n\nxchtmlreport\n\n\n\nvia Titouan Van Belle\n\n\n\n\n\nPlugin for XCHTMLReport\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxchtmlreport\n\n\n-\n\n\nXcode-like HTML report for Unit and UI Tests\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n846\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n876\n\n\n\ndownload_github_release_asset\n\n\n\nvia Anton Domashnev\n\n\n\n\n\nThis action downloads a GitHub release's asset using the GitHub API and puts it in a destination path.\\nIf the file has been previously downloaded, it will be overrided.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_github_release_asset\n\n\n-\n\n\nDownloads a GitHub release's asset\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n734\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n847\n\n\n\ncarthage_cache\n\n\n\nvia Thi Doan\n\n\n\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncarthage_cache_install\n\n\n-\n\n\nDownload Carthage cache from Amazon S3\n\n\n\n\n\n\ncarthage_cache_publish\n\n\n-\n\n\nUpload Carthage cache to Amazon S3\n\n\n\n\n\n\ncarthage_cache_exist\n\n\n-\n\n\nCheck if Carthage cache exists for Cartfile.resolved in Amazon S3\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n724\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n811\n\n\n\nupdate_android_strings\n\n\n\nvia bang\n\n\n\n\n\nUpdate Android res strings.xml\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n791\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n799\n\n\n\nlizard\n\n\n\nvia Moses Liao\n\n\n\n\n\nRun swift code complexity analytics using Lizard\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlizard\n\n\n-\n\n\nRun lizard code cyclomatic complexity analysis.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n19\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n514\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n72\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n777\n\n\n\nfirebase_test_lab\n\n\n\nvia Shihua Zheng\n\n\n\n\n\nTest your app with Firebase Test Lab with ease using fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirebase_test_lab_ios_xctest\n\n\n-\n\n\nSubmit an iOS XCTest job to Firebase Test Lab\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n42\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n39\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n54\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n105\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-8\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n430\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n743\n\n\n\nsetup_fragile_tests_for_rescan\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nSuppress stabile tests so that 'scan' can run the fragile tests again\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetup_fragile_tests_for_rescan\n\n\ndeprecated\n\n\nSuppress stabile tests so that 'scan' can run the fragile tests again\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n571\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n36\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n722\n\n\n\nincrement_version_name\n\n\n\nvia fierysolid\n\n\n\n\n\nIncrement the version name of your android project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nincrement_version_name\n\n\nproject\n\n\nIncrement the version name of your android project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n644\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n706\n\n\n\nrun_tests_firebase_testlab\n\n\n\nvia Bruno Correia\n\n\n\n\n\nRuns Android tests in Firebase Test Lab.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrun_tests_firebase_testlab\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n25\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n40\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n467\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n699\n\n\n\nupdate_xcodeproj\n\n\n\nvia Fumiya Nakamura\n\n\n\n\n\nUpdate Xcode projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_xcodeproj\n\n\n-\n\n\nUpdate Xcode projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n530\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n694\n\n\n\nteams\n\n\n\nvia Morten B\u00f8gh\n\n\n\n\n\nSend a success/error message to your Microsoft Teams channel\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nteams\n\n\nnotifications\n\n\nSend a message to your Microsoft Teams channel via the webhook connector\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n582\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n628\n\n\n\nprepare_build_resources\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nPrepares certificates and provisioning profiles for building and removes them afterwards.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nprepare_build_resources\n\n\n-\n\n\nPrepares certificates and provisioning profiles for building and removes them afterwards.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n525\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n624\n\n\n\nbrew\n\n\n\nvia Michael Ruhl\n\n\n\n\n\nRun Homebrew/Linuxbrew command\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbrew\n\n\n-\n\n\nRun Homebrew/Linuxbrew command\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n36\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n484\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n612\n\n\n\nproperty_file_read\n\n\n\nvia United Classifieds\n\n\n\n\n\nReads property file into dictionary\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproperty_file_read\n\n\n-\n\n\nReads property file into dictionary\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n507\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n589\n\n\n\nsettings_bundle\n\n\n\nvia Jimmy Dee\n\n\n\n\n\nFastlane plugin to update static settings in an iOS settings bundle\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_settings_bundle\n\n\nproject\n\n\nactions.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n20\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n40\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n319\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n547\n\n\n\nionic\n\n\n\nvia Jan Piotrowski\n\n\n\n\n\nBuild your Ionic app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nionic\n\n\nbuilding\n\n\nBuild your Ionic app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n72\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n41\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-23\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n292\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n545\n\n\n\nmango\n\n\n\nvia Serghei Moret, Daniel Hartwich\n\n\n\n\n\nThis plugin Android tasks on docker images\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrun_dockerized_task\n\n\n-\n\n\nAction that runs Android tasks on a specified Docker image\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n75\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n42\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n176\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n536\n\n\n\nandroid_change_package_identifier\n\n\n\nvia MaximusMcCann\n\n\n\n\n\nChange the package identifier in the AndroidManifest.xml file. Can revert as well.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n516\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n529\n\n\n\nact\n\n\n\nvia Richard Szalay\n\n\n\n\n\nApplies changes to plists and app icons inside a compiled IPA or xcarchive\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nact\n\n\n-\n\n\nReconfigures .plists and icons inside a compiled IPA\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n20\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n272\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n524\n\n\n\nbundletool\n\n\n\nvia Martin Gonzalez\n\n\n\n\n\nExtracts a universal apk from an .aab file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbundletool\n\n\n-\n\n\nExtracts an universal apk from an .aab file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n379\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n520\n\n\n\nmobile_center\n\n\n\nvia Microsoft Corporation\n\n\n\n\n\nFastlane plugin for Mobile Center\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappcenter_upload\n\n\n-\n\n\nDistribute new release to App Center\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n42\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n33\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n47\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n45\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-11\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n192\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n518\n\n\n\nmerge_junit_report\n\n\n\nvia Derek Yang\n\n\n\n\n\nMerges multiple junit reports into one\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmerge_junit_report\n\n\n-\n\n\nProvides the ability to merge multiple junit reports into one\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n376\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n517\n\n\n\ncodecov_reporter\n\n\n\nvia BinaryBeard\n\n\n\n\n\nUploads coverage report to Codecov.io\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncodecov_reporter\n\n\n-\n\n\nUploads coverage report to Codecov.io\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n388\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n516\n\n\n\nxcodegen\n\n\n\nvia Michael Ruhl\n\n\n\n\n\nRun xcodegen for the project\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodegen\n\n\n-\n\n\nRuns \nxcodegen\n for the project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n321\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n505\n\n\n\nupload_symbols_to_new_relic\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nUploads dSym to New Relic\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n485\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n494\n\n\n\ngoogle_drive\n\n\n\nvia Bumsoo Kim\n\n\n\n\n\nUpload files to Google Drive\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_google_drive_file\n\n\n-\n\n\nUpdate a Google Drive file\n\n\n\n\n\n\nupload_to_google_drive\n\n\n-\n\n\nUpload files to Google Drive\n\n\n\n\n\n\ncreate_google_drive_folder\n\n\n-\n\n\nCreate new folder on Google Drive\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n34\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n40\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n272\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n60\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n493\n\n\n\ndiawi\n\n\n\nvia pacification\n\n\n\n\n\nUpload .ipa or .apk file to diawi.com\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndiawi\n\n\n-\n\n\nUpload .ipa/.apk file to diawi.com\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n32\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n304\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n475\n\n\n\nsemantic_release2\n\n\n\nvia William Lauze\n\n\n\n\n\nFork for: Automated version managment and generator of release notes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconventional_changelog\n\n\n-\n\n\nUses conventional commits. It groups commits by their types and generates release notes in markdown or slack format.\n\n\n\n\n\n\nanalyze_commits\n\n\n-\n\n\nFinds a tag of last release and determinates version of next release\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n83\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n120\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n47\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n448\n\n\n\ndanger-device_grid\n\n\n\nvia Felix Krause, Boris Bu\u0308gling\n\n\n\n\n\nDanger plugin for the fastlane device grid.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n298\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n446\n\n\n\ngit_tags\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nList git tags sorted by taggerdate\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_tags\n\n\nsource_control\n\n\nList git tags\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n336\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n419\n\n\n\nunzip\n\n\n\nvia Massimo Oliviero\n\n\n\n\n\nExtract compressed files in a ZIP\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunzip\n\n\n-\n\n\nExtract compressed files in a ZIP\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n278\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n408\n\n\n\npgyer\n\n\n\nvia rexshi\n\n\n\n\n\ndistribute app to pgyer beta testing service\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npgyer\n\n\n-\n\n\ndistribute app to pgyer beta testing service\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n22\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n251\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n400\n\n\n\ncryptex\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nfastlane Crypt Store Git repo\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncryptex\n\n\n-\n\n\nSecure Git-Backed Storage\n\n\n\n\n\n\ncryptex_generate_keystore\n\n\n-\n\n\nGenerate a new Android Keystore\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n36\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n26\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n177\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n398\n\n\n\ndownload_file\n\n\n\nvia Massimo Oliviero\n\n\n\n\n\nThis action downloads a file from an HTTP/HTTPS url (e.g. ZIP file) and puts it in a destination path\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_file\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n251\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n392\n\n\n\nruby\n\n\n\nvia Felix Krause\n\n\n\n\n\nUseful fastlane actions for Ruby projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrubocop\n\n\n-\n\n\nRuns the code style checks\n\n\n\n\n\n\nrspec\n\n\n-\n\n\nRun tests using rspec\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n268\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n386\n\n\n\nhuawei_appgallery_connect\n\n\n\nvia Shreejan Shrestha\n\n\n\n\n\nHuawei AppGallery Connect Plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhuawei_appgallery_connect_submit_for_review\n\n\n-\n\n\nHuawei AppGallery Connect Plugin\n\n\n\n\n\n\nhuawei_appgallery_connect\n\n\n-\n\n\nHuawei AppGallery Connect Plugin\n\n\n\n\n\n\nhuawei_appgallery_connect_get_app_info\n\n\n-\n\n\nHuawei AppGallery Connect Plugin\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n16\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n200\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n384\n\n\n\nproperties\n\n\n\nvia Pavlo Pakholka\n\n\n\n\n\nAdds 4 actions to fastlane to read and update properties files.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nincrement_version_name_in_properties_file\n\n\n-\n\n\nSets a value of a setting in .properties file.\n\n\n\n\n\n\nset_properties_value\n\n\n-\n\n\nSets a value of a setting in .properties file.\n\n\n\n\n\n\nget_properties_value\n\n\n-\n\n\nReads a value of a setting from .properties file.\n\n\n\n\n\n\nwrite_properties_file\n\n\n-\n\n\nWrite any Hash-like structure as a properties file. This action won't create a new file.\n\n\n\n\n\n\nparse_properties_file\n\n\n-\n\n\nLoad .properties file and returns it as a ruby hash-map.\n\n\n\n\n\n\nincrement_version_code_in_properties_file\n\n\n-\n\n\nIncrease version code inside .properties file.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n256\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n383\n\n\n\nclean_testflight_testers\n\n\n\nvia Felix Krause\n\n\n\n\n\nAutomatically remove TestFlight testers that are not actually testing your app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclean_testflight_testers\n\n\n-\n\n\nAutomatically remove TestFlight testers that are not actually testing your app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n26\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n230\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n380\n\n\n\nupgrade_super_old_xcode_project\n\n\n\nvia Jan Piotrowski\n\n\n\n\n\nUpgrades super old Xcode projects to Xcode 8\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupgrade_super_old_xcode_project\n\n\n-\n\n\nUpgrades super old Xcode projects to Xcode 8\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n267\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n377\n\n\n\nnotarize\n\n\n\nvia Zeplin, Inc.\n\n\n\n\n\nfastlane plugin to notarize a macOS app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnotarize\n\n\ndeprecated\n\n\nNotarizes a macOS app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n60\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n64\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n109\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n362\n\n\n\nretry\n\n\n\nvia gmgchow\n\n\n\n\n\nRetries failed XCUITest test cases\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n312\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n356\n\n\n\njira_release_notes\n\n\n\nvia Alexander Ignition\n\n\n\n\n\nRelease notes from JIRA for version\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_release_notes\n\n\n-\n\n\nJira release notes\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n18\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n214\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n33\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n356\n\n\n\ncode_push\n\n\n\nvia Manuel Koch\n\n\n\n\n\nCodePush functionality for fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncode_push_promote\n\n\n-\n\n\nCodePush promote\n\n\n\n\n\n\ncode_push_login\n\n\n-\n\n\nCodePush login with accessKey\n\n\n\n\n\n\ncode_push_release_react\n\n\n-\n\n\nCodePush release-react functionality for fastlane\n\n\n\n\n\n\ncode_push_release_cordova\n\n\n-\n\n\nCodePush release-cordova functionality for fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n23\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n192\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n355\n\n\n\nremove_provisioning_profile\n\n\n\nvia Anton Domashnev\n\n\n\n\n\nRemove provision profile from your local machine\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nremove_provisioning_profile\n\n\n-\n\n\nRemove the provisioning profile for the given app_identifier and type from local machine\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n133\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n60\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n345\n\n\n\nflutter\n\n\n\nvia Artem Sheremet\n\n\n\n\n\nFlutter actions plugin for Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflutter_bootstrap\n\n\n-\n\n\nFlutter SDK installation, upgrade and application bootstrap\n\n\n\n\n\n\nflutter\n\n\n-\n\n\nRun \"flutter\" binary with the specified arguments\n\n\n\n\n\n\nflutter_build\n\n\nbuilding\n\n\nRun \"flutter build\" to build a Flutter application\n\n\n\n\n\n\nflutter_generate\n\n\n-\n\n\n(1) Run \nflutter packages get\n;  (2) Run \nbuild_runner build\n if build_runner is in dev_dependencies;   (3) According to \npackage:intl\n, take \n$strings_file\n and generate \n${strings_file.dirname}/arb/intl_messages.arb\n, then take all files matching \n${strings_file.dirname}/intl_*.arb\n, fix them and generate .dart files from them.  (4) Generate an empty test importing all files, which would be used to calculate correct full coverage numbers.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n19\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n172\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n42\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n342\n\n\n\nsimctl\n\n\n\nvia Renzo Crisostomo\n\n\n\n\n\nFastlane plugin to interact with xcrun simctl\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n322\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n337\n\n\n\nonesky\n\n\n\nvia Daniel Kiedrowski\n\n\n\n\n\nHelps to update the translations of your app using the OneSky service.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nonesky_upload\n\n\n-\n\n\nUpload a strings file to OneSky\n\n\n\n\n\n\nonesky_download\n\n\n-\n\n\nDownload a translation file from OneSky\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n15\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n65\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n148\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n337\n\n\n\nfirebase_test_lab_android\n\n\n\nvia wasabeef\n\n\n\n\n\nTest your app with Firebase Test Lab with ease using fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirebase_test_lab_android\n\n\n-\n\n\nRuns Android tests in Firebase Test Lab.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n51\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n25\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n134\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n333\n\n\n\njira_versions\n\n\n\nvia Sandy Chapman\n\n\n\n\n\nManage your JIRA project's releases/versions with this plugin.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrelease_jira_version\n\n\n-\n\n\nReleases a version in your JIRA project\n\n\n\n\n\n\ncreate_jira_version\n\n\n-\n\n\nCreates a new version in your JIRA project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n214\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n328\n\n\n\nicon_versioning\n\n\n\nvia Iulian Onofrei\n\n\n\n\n\nOverlay build information on top of your app icon\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nversion_icon\n\n\n-\n\n\nOverlay build information on top of your app icon. Based on original work by Krzysztof Zab\u0142ocki (https://github.com/krzysztofzablocki/Bootstrap).\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n43\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n71\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n324\n\n\n\nxcode_log_parser\n\n\n\nvia KrauseFx\n\n\n\n\n\nConvert the Xcode plist log to a JUnit report\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrainer\n\n\n-\n\n\nConvert the Xcode plist log to a JUnit report. This will raise an exception if the tests failed\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n102\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n60\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-5\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n317\n\n\n\ngradle_properties\n\n\n\nvia Ryo Sakaguchi\n\n\n\n\n\nRead properties in your Fastfile easily\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngradle_properties\n\n\n-\n\n\nRead properties in your Fastfile easily\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n253\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n310\n\n\n\ntunes\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nPlay music using fastlane, because you can.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntunes\n\n\n-\n\n\nPlay music using fastlane, because you can\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n177\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n298\n\n\n\nrocket_chat\n\n\n\nvia Thiago Felix\n\n\n\n\n\nSend message to Rocket.Chat right from fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrocket_chat\n\n\n-\n\n\nSend a success/error message to your RocketChat group\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n188\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n295\n\n\n\ns3_actions\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nDownload and upload files to AWS S3\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns3_download\n\n\n-\n\n\nDownload a file from AWS S3\n\n\n\n\n\n\ns3_check_file\n\n\n-\n\n\nCheck if file exists in AWS S3\n\n\n\n\n\n\ns3_upload\n\n\n-\n\n\nUpload a file to AWS S3\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n185\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n286\n\n\n\npretty_junit\n\n\n\nvia GaryJohnson\n\n\n\n\n\nPretty JUnit test results for your Android projects.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npretty_junit\n\n\n-\n\n\nPretty JUnit test results for your Android projects.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n184\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n285\n\n\n\npatch\n\n\n\nvia Jimmy Dee\n\n\n\n\n\nApply and revert pattern-based patches to any text file.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napply_patch\n\n\ndeprecated\n\n\nApply pattern-based patches to any text file.\n\n\n\n\n\n\nrevert_patch\n\n\ndeprecated\n\n\nRevert the action of apply_patch\n\n\n\n\n\n\npatch\n\n\nproject\n\n\nApply pattern-based patches to any text file.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n119\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n60\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n282\n\n\n\ngs_deliver\n\n\n\nvia \u0421\u0435\u0440\u0433\u0435\u0438\u0306 \u0412\u0435\u0441\u0435\u043b\u043e\u0432\u0441\u043a\u0438\u0438\u0306\n\n\n\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngs_move_to_ready_for_sale\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_remove_from_testflight_review\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_get_release_notes\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_get_app_status\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_move_rc_to_beta_review\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_start_external_testing\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_reject_latest_version\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\ngs_execute_command\n\n\n-\n\n\nGradoservice plugin to rule apps releases\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n206\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n281\n\n\n\nlatest_hockeyapp_version_number\n\n\n\nvia Travis Palmer\n\n\n\n\n\nEasily fetch the most recent HockeyApp version number for your app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlatest_hockeyapp_version_number\n\n\n-\n\n\nEasily fetch the most recent HockeyApp version number for your app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n157\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n280\n\n\n\nclubmate\n\n\n\nvia KrauseFx\n\n\n\n\n\nPrint the Club Mate logo in your build output\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclubmate\n\n\n-\n\n\nPrint a Club Mate in your build output\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n147\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n276\n\n\n\nuninow-sentry\n\n\n\nvia Tom Krusch\n\n\n\n\n\nUpload symbols to Sentry\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsentry_upload_sourcemap\n\n\n-\n\n\nUpload a sourcemap to a release of a project on Sentry\n\n\n\n\n\n\nsentry_finalize_release\n\n\n-\n\n\nFinalize a release for a project on Sentry\n\n\n\n\n\n\nsentry_create_release\n\n\n-\n\n\nCreate new releases for a project on Sentry\n\n\n\n\n\n\nsentry_upload_file\n\n\n-\n\n\nUpload files to a release of a project on Sentry\n\n\n\n\n\n\nsentry_upload_dsym\n\n\n-\n\n\nUpload dSYM symbolication files to Sentry\n\n\n\n\n\n\nsentry_set_commits\n\n\n-\n\n\nSet commits of a release\n\n\n\n\n\n\nsentry_upload_proguard\n\n\n-\n\n\nUpload mapping to a project on Sentry\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n66\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n274\n\n\n\nlokalise\n\n\n\nvia Abbas Jaffery\n\n\n\n\n\nSync metadata with Lokalise\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadd_keys_to_lokalise\n\n\n-\n\n\nAdd keys to lokalise\n\n\n\n\n\n\nlokalise\n\n\n-\n\n\nDownload Lokalise localization\n\n\n\n\n\n\nlokalise_metadata\n\n\n-\n\n\nUpload metadata to lokalise.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n156\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n269\n\n\n\napplivery\n\n\n\nvia Alejandro Jimenez\n\n\n\n\n\nUpload new build to Applivery\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napplivery\n\n\nbeta\n\n\nUpload new iOS or Android build to Applivery\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n13\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n97\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n268\n\n\n\nci_changelog\n\n\n\nvia icyleaf\n\n\n\n\n\nAutomate generate changelog between previous build failed and the latest commit of scm in CI\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nci_changelog\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n75\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n268\n\n\n\nandroid_change_string_app_name\n\n\n\nvia MaximusMcCann\n\n\n\n\n\nChange the app_name in the strings.xml file & revert method\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_change_string_app_name\n\n\n-\n\n\nChange the app_name in the strings.xml file & revert method\n\n\n\n\n\n\nandroid_change_string_app_name_revert\n\n\n-\n\n\nRevert strings.xml app_name using ANDROID_CHANGE_STRING_APP_NAME_ORIGINAL_NAME\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n175\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n264\n\n\n\nget_unprovisioned_devices_from_hockey\n\n\n\nvia GaryJohnson\n\n\n\n\n\nRetrieves a list of unprovisioned devices from Hockey which can be passed directly into register_devices.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_unprovisioned_devices_from_hockey\n\n\n-\n\n\nRetrieves a list of unprovisioned devices from Hockey which can be passed directly into register_devices.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n113\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n264\n\n\n\ncosigner\n\n\n\nvia Andr\u00e9 Pacheco Neves, Lu\u00eds Portela Afonso\n\n\n\n\n\nA fastlane plugin to help you sign your iOS builds\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncosigner\n\n\n-\n\n\nA fastlane plugin to help you sign your iOS builds\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n39\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n21\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n63\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n264\n\n\n\nbranch\n\n\n\nvia Branch, Jimmy Dee\n\n\n\n\n\nAdds Branch keys, custom URI schemes and domains to iOS and Android projects. Validates the Universal Link configuration for any Xcode project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_action_docs\n\n\n-\n\n\nGenerate a standard action page for each action\n\n\n\n\n\n\nupdate_readme\n\n\n-\n\n\nUpdate the contents of the README in this repo\n\n\n\n\n\n\nbranch_report\n\n\nproject\n\n\nGenerate a brief summary or a full build report for your project.\n\n\n\n\n\n\nsetup_branch\n\n\nproject\n\n\nconfiguration for Xcode projects.\n\n\n\n\n\n\nvalidate_universal_links\n\n\nproject\n\n\nValidates Universal Link configuration for an Xcode project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n49\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n263\n\n\n\ncerberus\n\n\n\nvia Harry Singh\n\n\n\n\n\nCerberus is a fastlane plugin for extracting Jira issues from commit messages and sharing information on its respective Jenkins job and HockeyApp upload.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfind_commits\n\n\n-\n\n\nExtracts additional issues from the log\n\n\n\n\n\n\njira_comment\n\n\n-\n\n\nThis action adds comments on Jira issues with the current build number and url of that build\n\n\n\n\n\n\nfind_tickets\n\n\n-\n\n\nExtracts the Jira issue keys between commits\n\n\n\n\n\n\nrelease_notes\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n57\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n71\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n261\n\n\n\njira_set_fix_version\n\n\n\nvia Tommy Sadiq Hinrichsen\n\n\n\n\n\nTags all Jira issues mentioned in git changelog with with a fix version from parameter :name\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_set_fix_version\n\n\n-\n\n\nTags all Jira issues mentioned in git changelog with with a fix version from parameter :name\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n118\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n261\n\n\n\nandroid_emulator\n\n\n\nvia Michael Ruhl\n\n\n\n\n\nCreates and starts an Android Emulator (AVD)\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_emulator\n\n\n-\n\n\nCreates and starts an Android Emulator (AVD)\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n83\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n254\n\n\n\nchangelog_generator\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nChangelog generation based on merged pull requests & tags\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngenerate_changelog\n\n\n-\n\n\nChangelog generation based on merged pull requests & tags\n\n\n\n\n\n\ngenerate_release_changelog\n\n\n-\n\n\nChangelog generation based on merged pull requests & tags, filtered by one or two tags\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n136\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n252\n\n\n\nwaldo\n\n\n\nvia J. G. Pusey\n\n\n\n\n\nUpload build to Waldo\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwaldo\n\n\ntesting\n\n\nUpload a new build to \nWaldo\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n102\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n252\n\n\n\ngmail\n\n\n\nvia Alexander Ignition\n\n\n\n\n\nsend mail from gmail\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngmail\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n18\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n131\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n246\n\n\n\nget_product_bundle_id\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nGets PRODUCT_BUNDLE_IDENTIFIER from the first buildable target in a given scheme\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_product_bundle_id\n\n\n-\n\n\nGets PRODUCT_BUNDLE_IDENTIFIER from a buildable target in an Xcode project using a provided scheme\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n121\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n27\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n246\n\n\n\nairwatch_workspaceone\n\n\n\nvia Ram Awadhesh Sharan\n\n\n\n\n\nThe main purpose of this plugin is to upload an IPA or an APK file to an AirWatch or Workspace ONE enterprise instance/console.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadd_or_update_assignments\n\n\n-\n\n\nThe main purpose of this action is to add a new smart group assignment to an application or to update an existing smart group assignment of an application with a given dictionary of deployment/assignment parameters. If a smart group name is provided which does not exist yet on Console, assignment for that smart group is ignored.\n\n\n\n\n\n\nunretire_specific_version\n\n\n-\n\n\nThe main purpose of this action is to unretire a specific version of an application. This action takes a string parameter where you can specify the version number to unretire.\n\n\n\n\n\n\nretire_previous_versions\n\n\n-\n\n\nThe main purpose of this action is to retire previous active versions of an application. This action takes a string parameter where you can specify the number of latest versions to keep if you do not want to retire all the previous active versions.\n\n\n\n\n\n\ndelete_specific_version\n\n\n-\n\n\nThe main purpose of this action is to delete a specific version of an application. This action takes a string parameter where you can specify the version number to delete.\n\n\n\n\n\n\nlatest_version\n\n\n-\n\n\nThe main purpose of this action is to find the version number of the latest version of the app on the console and output the same. It also finds and outputs arrays of active app version numbers and retired app version numbers of the app.\n\n\n\n\n\n\ndeploy_build\n\n\n-\n\n\nThe main purpose of this action is to upload an IPA or an APK file to an AirWatch or Workspace ONE enterprise console.\n\n\n\n\n\n\ndelete_previous_versions\n\n\n-\n\n\nThe main purpose of this action is to delete versions of an application. This action takes a string parameter where you can specify the number of latest versions to keep if you do not want to delete all the versions.\n\n\n\n\n\n\nretire_specific_version\n\n\n-\n\n\nThe main purpose of this action is to retire a specific version of an application. This action takes a string parameter where you can specify the version number to retire.\n\n\n\n\n\n\nunretire_all_versions\n\n\n-\n\n\nThe main purpose of this action is to unretire all retired versions of an application.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n96\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n245\n\n\n\nframer\n\n\n\nvia DrAL3X\n\n\n\n\n\nCreate images combining app screenshots with templates to make nice pictures for the App Store\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nframer\n\n\n-\n\n\nCreate images combining app screenshots to templates to make a nice \\'screenshot\\' to upload in App Store\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n31\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n18\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n48\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n243\n\n\n\nlatest_hockey_build_number\n\n\n\nvia Sergii Stotskyi, Kirill Pahnev\n\n\n\n\n\nGets latest version number of the app with the bundle id from HockeyApp\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlatest_hockey_build_number\n\n\n-\n\n\nGets latest version number of the app with the bundle id from HockeyApp\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n126\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n241\n\n\n\ngoogle_cloud_storage\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nGoogle Cloud Storage\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoogle_cloud_storage_check_file\n\n\n-\n\n\nCheck if file exists in Google Cloud Storage\n\n\n\n\n\n\ngoogle_cloud_storage_download\n\n\n-\n\n\nDownload a file from Google Cloud Storage\n\n\n\n\n\n\ngoogle_cloud_storage_upload\n\n\n-\n\n\nUpload a file to Google Cloud Storage\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n142\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n240\n\n\n\ngoogle_sheet_localize\n\n\n\nvia Mario Hahn\n\n\n\n\n\nCreates .strings files for iOS and strings.xml files for Android\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoogle_sheet_localize\n\n\n-\n\n\nCreates .strings files for iOS and strings.xml files for Android\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n14\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n111\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n237\n\n\n\nandroid_sdk_update\n\n\n\nvia Philipp Burgk, Michael Ruhl\n\n\n\n\n\nInstall required Android-SDK packages\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_sdk_update\n\n\n-\n\n\nInstall and update required Android-SDK packages\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n33\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n49\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n232\n\n\n\nversioning_ios\n\n\n\nvia Igor Lamo\u0161\n\n\n\n\n\niOS Versioning Plugin for Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nios_set_build_number\n\n\n-\n\n\nSet the Build Number of your iOS project\n\n\n\n\n\n\nios_get_build_number\n\n\n-\n\n\nGet the Build Number of your iOS project\n\n\n\n\n\n\nios_set_version\n\n\n-\n\n\nSet the Version of your iOS project\n\n\n\n\n\n\nios_get_version\n\n\n-\n\n\nGet the Version of your iOS project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n105\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n51\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n231\n\n\n\nsouyuz\n\n\n\nvia Felix Rudat\n\n\n\n\n\nA fastlane component to make Xamarin builds a breeze\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_version\n\n\n-\n\n\nEasily set or print app version with \napp_version\n\n\n\n\n\n\nsouyuz\n\n\n-\n\n\nEasily build and sign your app using \nsouyuz\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n32\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n35\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n61\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n231\n\n\n\nsharethemeal\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nShareTheMeal\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsharethemeal\n\n\n-\n\n\nDonate food via ShareTheMeal\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n94\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n230\n\n\n\ngiffy\n\n\n\nvia SiarheiFiedartsou\n\n\n\n\n\nFastlane plugin for Giffy.com API\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngiffy_random_sticker_url\n\n\n-\n\n\nAllows to obtain URL to some random GIF sticker from Giffy.com\n\n\n\n\n\n\ngiffy_random_gif_url\n\n\n-\n\n\nAllows to obtain URL to some random funny GIF from Giffy.com\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n96\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n230\n\n\n\nupload_folder_to_s3\n\n\n\nvia teriiehina\n\n\n\n\n\nUpload a folder to S3\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_folder_to_s3\n\n\n-\n\n\nUpload a folder to S3\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n64\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n228\n\n\n\nswiftlint_codequality\n\n\n\nvia Mads B\u00f8geskov\n\n\n\n\n\nConverts SwiftLint reports into GitLab support CodeQuality reports\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nswiftlint_codequality\n\n\n-\n\n\nConverts SwiftLint reports into GitLab support CodeQuality reports\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n113\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n226\n\n\n\ngs_project_flow_ios\n\n\n\nvia \u0421\u0435\u0440\u0433\u0435\u0438\u0306 \u0412\u0435\u0441\u0435\u043b\u043e\u0432\u0441\u043a\u0438\u0438\u0306\n\n\n\n\n\nPlugin contains project flow code for code sharing between projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n206\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n223\n\n\n\nftp\n\n\n\nvia Allan Vialatte\n\n\n\n\n\nSimple ftp upload and download for Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nftp\n\n\n-\n\n\nUpload and Download files via FTP\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n27\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n50\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n43\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n223\n\n\n\nxcconfig_actions\n\n\n\nvia Maksym Grebenets\n\n\n\n\n\nAdds actions to fastlane to work with xcconfig files\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuild_settings_to_flags\n\n\nbuilding\n\n\nMap xcconfig build settings to compiler and linker build flags\n\n\n\n\n\n\nread_xcconfig\n\n\nbuilding\n\n\nRead and resolve contents of xcconfig file and return as JSON\n\n\n\n\n\n\nvalidate_xcconfig\n\n\nlinting\n\n\nValidate xcconfig file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n221\n\n\n\nautomated_test_emulator_run_xing\n\n\n\nvia Daniel Hartwich\n\n\n\n\n\nStarts n AVDs based on JSON file config. AVDs are created and configured according to user liking before instrumentation test process (started either via shell command or gradle) and killed/deleted after test process finishes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nautomated_test_emulator_run_xing\n\n\n-\n\n\nStarts AVD, based on AVD_setup.json file, before test launch and kills it after testing is done.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n36\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n47\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n221\n\n\n\nslack_train\n\n\n\nvia Felix Krause\n\n\n\n\n\nShow a train of the fastlane progress\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n201\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n221\n\n\n\nblackberry_mam\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nA fastlane plugin that works with Blackberry Dynamics (formerly Good Dynamics) provides Mobile Application Management\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_info_plist_for_blackberry_mam\n\n\n-\n\n\nupdates the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.\n\n\n\n\n\n\nblackberry_mam_network_check\n\n\n-\n\n\nChecks to see if the required network ports for BlackBerry Dynamics are open on the network\n\n\n\n\n\n\nblackberry_mam_version\n\n\n-\n\n\nChecks the version of the installed Good framework\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n218\n\n\n\nflutter_version\n\n\n\nvia tianhaoz95\n\n\n\n\n\nA plugin to retrieve versioning information for Flutter projects.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflutter_version\n\n\n-\n\n\nA plugin to retrieve versioning information for Flutter projects.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n15\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n40\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-6\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n22\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n216\n\n\n\nuninow_sentry\n\n\n\nvia Tom Krusch\n\n\n\n\n\nUpload symbols to Sentry\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsentry_upload_sourcemap\n\n\n-\n\n\nUpload a sourcemap to a release of a project on Sentry\n\n\n\n\n\n\nsentry_finalize_release\n\n\n-\n\n\nFinalize a release for a project on Sentry\n\n\n\n\n\n\nsentry_create_release\n\n\n-\n\n\nCreate new releases for a project on Sentry\n\n\n\n\n\n\nsentry_upload_file\n\n\n-\n\n\nUpload files to a release of a project on Sentry\n\n\n\n\n\n\nsentry_upload_dsym\n\n\n-\n\n\nUpload dSYM symbolication files to Sentry\n\n\n\n\n\n\nsentry_set_commits\n\n\n-\n\n\nSet commits of a release\n\n\n\n\n\n\nsentry_upload_proguard\n\n\n-\n\n\nUpload mapping to a project on Sentry\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n215\n\n\n\nfir_cli\n\n\n\nvia atpking\n\n\n\n\n\nupload ipa or apk to fir.im\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfir_cli\n\n\n-\n\n\ninvoke fir-cli from fastlane plugin directly. \\nfir-cli: https://github.com/FIRHQ/fir-cli\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n27\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n49\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n211\n\n\n\nfacelift\n\n\n\nvia Richard Szalay\n\n\n\n\n\nDeprecated in favor of 'fastlane-plugin-act'\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nact\n\n\n-\n\n\nReconfigures .plists and icons inside a compiled IPA\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n17\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n72\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n211\n\n\n\nlocalization\n\n\n\nvia Viktor Malyi\n\n\n\n\n\nExport/import app localizations with help of xcodebuild -exportLocalizations/-importLocalizations tool\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimport_localizations\n\n\n-\n\n\nImport app localizations with help of xcodebuild -importLocalizations tool\n\n\n\n\n\n\nexport_localizations\n\n\n-\n\n\nExport app localizations with help of xcodebuild -exportLocalizations tool\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n82\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n211\n\n\n\nbugsee\n\n\n\nvia Dmitry Fink\n\n\n\n\n\nBugsee symbols uploader\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_bugsee\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n80\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n210\n\n\n\njira_transition\n\n\n\nvia Valerio Mazzeo\n\n\n\n\n\nApply a JIRA transition to issues mentioned in the changelog\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_transition\n\n\n-\n\n\nApply a JIRA transition to issues mentioned in the changelog\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n110\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n210\n\n\n\nlatest_appcenter_build_number\n\n\n\nvia Jack Spargo\n\n\n\n\n\nUse AppCenter API to get the latest version and build number for an App Center app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlatest_appcenter_build_number\n\n\n-\n\n\nGets latest version number of the app from AppCenter\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n35\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n48\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n209\n\n\n\nsftp\n\n\n\nvia Oliver Limberg\n\n\n\n\n\nPlugin to upload files via SFTP\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsftp_download\n\n\nmisc\n\n\ndownload files from a remote Server via SFTP\n\n\n\n\n\n\nsftp_upload\n\n\nmisc\n\n\nupload files to a remote Server via SFTP\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n63\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n209\n\n\n\ninstrumented_tests\n\n\n\nvia Silviu Paragina\n\n\n\n\n\nNew action to run instrumented tests for android. This plugin creates and boots an emulator before running a gradle command so that you can run instrumented tests against that emulator. After the gradle command is executed, the avd gets shut down and deleted. This is really helpful on CI services, keeping them clean and always having a fresh avd for testing.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstrumented_tests\n\n\n-\n\n\nRun android instrumented tests via a gradle command againts a newly created avd\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n14\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n75\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n208\n\n\n\npolidea\n\n\n\nvia Piotrek Dubiel\n\n\n\n\n\nPolidea's fastlane action\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n158\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n208\n\n\n\nxamarin_build\n\n\n\nvia punksta\n\n\n\n\n\nBuild xamarin android\\ios projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nextract_certificate\n\n\n-\n\n\nExtract certificate public key from provision profile\n\n\n\n\n\n\nxamarin_update_configuration\n\n\n-\n\n\nSet properties of specific build configuration in Xamarin configuration file\n\n\n\n\n\n\nxamarin_build\n\n\n-\n\n\nBuild xamarin android and ios projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n24\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n40\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n29\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n207\n\n\n\naltool\n\n\n\nvia Shashikant Jagtap\n\n\n\n\n\nUpload IPA to iTunes Connect using altool\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naltool\n\n\n-\n\n\nUpload IPA to iTunes Connect using altool\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n12\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n30\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n39\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n203\n\n\n\nfirebase_management\n\n\n\nvia Ackee\n\n\n\n\n\nUnofficial tool to access Firebase project settings\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirebase_management_add_app\n\n\n-\n\n\nAdd new app to Firebase project\n\n\n\n\n\n\nfirebase_management_list\n\n\n-\n\n\nList all Firebase projects and their apps\n\n\n\n\n\n\nfirebase_management_download_config\n\n\n-\n\n\nDownload configuration file for Firebase app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n202\n\n\n\ninstabug_official\n\n\n\nvia Instabug\n\n\n\n\n\nPlugin to upload DSYMs to Instabug Dashboard.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstabug_official\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n91\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n201\n\n\n\ngit_info_extract\n\n\n\nvia alexander sun\n\n\n\n\n\nExtract JIRA information from git merge\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_info_extract\n\n\n-\n\n\nExtract JIRA information from git merge\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n128\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n201\n\n\n\ndemo_mode\n\n\n\nvia Florian Rauscha\n\n\n\n\n\nSets your connected android devices to demo mode\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndemo_mode\n\n\n-\n\n\nSets your device to demo mode\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n51\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n201\n\n\n\ninstabug\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nUploads dSYM to Instabug\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstabug\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n62\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n200\n\n\n\ngithub_job_status\n\n\n\nvia Justin Singer\n\n\n\n\n\nPost the status of your test jobs to your pull requests\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n168\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n199\n\n\n\nhuawei_appgallery\n\n\n\nvia Arne Kaiser\n\n\n\n\n\nPlugin to deploy an app to the Huawei AppGallery\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhuawei_appgallery\n\n\n-\n\n\nPlugin to deploy an app to the Huawei AppGallery\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n21\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n55\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n199\n\n\n\nmsbuild\n\n\n\nvia Jeff Ward\n\n\n\n\n\nBuild a Xamarin.iOS or Xamarin.Android project using msbuild\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsbuild\n\n\n-\n\n\nBuild a Xamarin.iOS or Xamarin.Android project using msbuild\n\n\n\n\n\n\nassembly_info_poke_version\n\n\n-\n\n\nSet the version in an AssemblyInfo.cs file. Optionally only set the revision number\n\n\n\n\n\n\nnuget_pack\n\n\n-\n\n\nPackage a nuspec\n\n\n\n\n\n\nnuspec_poke_version\n\n\n-\n\n\nSet the version in a Nuspec file. Optionally only set the revision number\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n27\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n91\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n197\n\n\n\nsemantic_convention_release\n\n\n\nvia Jir\u030ci\u0301 Ota\u0301hal, Sergio Fierro\n\n\n\n\n\nAutomated version managment and generator of release notes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconventional_changelog\n\n\n-\n\n\nUses conventional commits. It groups commits by their types and generates release notes in markdown or slack format.\n\n\n\n\n\n\nanalyze_commits\n\n\n-\n\n\nFinds a tag of last release and determinates version of next release\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n196\n\n\n\ntelegram\n\n\n\nvia sergpetrov\n\n\n\n\n\nAllows post messages to telegram channel\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntelegram\n\n\n-\n\n\nAllows post messages to telegram channel\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n103\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n196\n\n\n\nensure_xcode_build_version\n\n\n\nvia Fumiya Nakamura\n\n\n\n\n\nEnsure Xcode Build Version for working with Beta, GM and Release\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nensure_xcode_build_version\n\n\n-\n\n\nEnsure the selected Xcode Build version with xcode-select matches a value\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n44\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n192\n\n\n\nsemaphore\n\n\n\nvia Dmitry Bespalov\n\n\n\n\n\nSemaphore CI integration\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetup_semaphore\n\n\n-\n\n\nSemaphore CI integration\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n81\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n189\n\n\n\napp_info\n\n\n\nvia icyleaf\n\n\n\n\n\nTeardown tool for mobile app(ipa/apk), analysis metedata like version, name, icon etc.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_info\n\n\n-\n\n\nParse and dump mobile app(ipa/apk) metedata.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n40\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n189\n\n\n\nciutils\n\n\n\nvia Nicolae Ghimbovschi\n\n\n\n\n\nVarious utilities for iOS CI\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nen_build_number\n\n\n-\n\n\nGet the value for build number from environment\n\n\n\n\n\n\nen_install_provisioning_profiles\n\n\n-\n\n\nCopies recursively all provisioning profiles from current folder to system Provisioning Profiles\n\n\n\n\n\n\nen_profile_name\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nen_remove_keychain\n\n\n-\n\n\nRemoves the keychain setup by en_setup_keychain\n\n\n\n\n\n\nen_ci_utils_init\n\n\n-\n\n\nSets env variables for gym, scan, swiftlint and lizard actions\n\n\n\n\n\n\nen_setup_project\n\n\n-\n\n\nUpdates Xcode project, plist and entitlements file if config file is provided\n\n\n\n\n\n\nen_setup_keychain\n\n\n-\n\n\nCreates the keychain, and imports the provided certificate\n\n\n\n\n\n\nen_git_changelog\n\n\n-\n\n\nCreates a change log from git commits by filtering commits by a pattern (e.g. JIRA task prefix)\n\n\n\n\n\n\nen_close_simulator\n\n\n-\n\n\nCloses all simulator instances\n\n\n\n\n\n\nen_create_sonar_reports\n\n\n-\n\n\nCreates swiftlint, lizard and oclint reports and adjusts junit reports for sonarqube (with the open source swift/objc plugin)\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n80\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n188\n\n\n\nandroid_version_manager\n\n\n\nvia Jonathan Cardoso Machado\n\n\n\n\n\nAndroid's App Version Managment\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_base\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n188\n\n\n\ntransporter\n\n\n\nvia Maksym Grebenets\n\n\n\n\n\nManage Apple iTMSTransporter installation\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconfigure_transporter\n\n\n-\n\n\nConfigure Apple iTMSTransporter installation\n\n\n\n\n\n\nupdate_transporter_path\n\n\n-\n\n\nConfigure Fastlane to use custom Transporter installation\n\n\n\n\n\n\ninstall_transporter\n\n\n-\n\n\nInstall Apple iTMSTransporter\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n60\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n187\n\n\n\nset_jira_fix_version\n\n\n\nvia yuriy-tolstoguzov\n\n\n\n\n\nAdds fix version to specified JIRA issues. Creates version if needed\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nset_jira_fix_version\n\n\nmisc\n\n\nAdds fix version to specified JIRA issues. Creates version if needed\n\n\n\n\n\n\njira_issue_keys_from_changelog\n\n\nmisc\n\n\nGets list of JIRA issues kyes from git log starting from specified tag\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n71\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n186\n\n\n\nsnapshot_test\n\n\n\nvia Moyuru Aizawa\n\n\n\n\n\nCompare snapshots\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntake_screenshot\n\n\n-\n\n\nTake screenshots\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n60\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n31\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n186\n\n\n\njson\n\n\n\nvia Martin Gonzalez\n\n\n\n\n\nactions related to json files\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwrite_json\n\n\n-\n\n\nWrite a json file from a hash at the provided path\n\n\n\n\n\n\ndownload_json\n\n\n-\n\n\nDownloads a json file and expose a hash with symbolized names as result\n\n\n\n\n\n\nmerge_jsons\n\n\n-\n\n\nMerge a group of jsons files and expose a hash with symbolized names as result. Last json predominate over the rest\n\n\n\n\n\n\nread_json\n\n\n-\n\n\nRead a json file and expose a hash with symbolized names as result\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n34\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n45\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n185\n\n\n\nicon_banner\n\n\n\nvia E\u0301mile Be\u0301lair\n\n\n\n\n\nIconBanner adds custom nice-looking banners over your mobile app icons\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nicon_banner_restore\n\n\n-\n\n\nRestores the original app icons (can be used after build to clean up the repository)\n\n\n\n\n\n\nicon_banner\n\n\n-\n\n\nAdds custom nice-looking banners over your mobile app icons\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n95\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n185\n\n\n\nstore_sizer\n\n\n\nvia Marcelo Oliveira\n\n\n\n\n\nEstimates download and install sizes for your app, also checks if sizes fit the requirements\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstore_size_xcarchive_check\n\n\n-\n\n\nChecks if the size report fits the requirements\n\n\n\n\n\n\nstore_size_xcarchive\n\n\n-\n\n\nEstimates download and install sizes for your app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n11\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n29\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n183\n\n\n\nxcov_report\n\n\n\nvia Gianfranco Manganiello\n\n\n\n\n\nGenerate custom HTML for coverage\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcov_report\n\n\n-\n\n\nGenerate custom HTML for coverage\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n33\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n181\n\n\n\ntrigger_bitrise_build\n\n\n\nvia Nick Hammond\n\n\n\n\n\nTrigger a Bitrise build from Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrigger_bitrise_build\n\n\n-\n\n\nTrigger a Bitrise build from Fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n39\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n181\n\n\n\nfind_replace_string\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nFind a string in a file and replace it with a new one.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfind_replace_string\n\n\n-\n\n\nFind and replace a string in a project file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n99\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n181\n\n\n\ntwine\n\n\n\nvia Jonas Rottmann\n\n\n\n\n\nA fastlane plugin providing actions related to twine\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntwine_generate\n\n\nbuilding\n\n\nGenerates all localization files specified by the configuration file\n\n\n\n\n\n\ntwine_check\n\n\nbuilding\n\n\nChecks the source twine file against the localization file to make sure they are in sync\n\n\n\n\n\n\ntwine_validate\n\n\nbuilding\n\n\nValidates all twine files mentioned in the config file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n36\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n180\n\n\n\nget_android_version\n\n\n\nvia MaximusMcCann\n\n\n\n\n\ngets the android versionName and versionCode from the \nAndroidManifest.xml\n file located in the provided apk\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_android_version\n\n\n-\n\n\nGets the android versionName, versionCode and parsed appName (label) from AndroidManifest.xml file in provided apk\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n95\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n178\n\n\n\njira_issue_details\n\n\n\nvia Zaim Ramlan\n\n\n\n\n\nGet the details for the given jira issue key(s)\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_jira_issue\n\n\n-\n\n\nGet the details for the given jira issue key(s).\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n71\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n178\n\n\n\ngit_status\n\n\n\nvia Bruno Coelho\n\n\n\n\n\nShow the status of one or multiple files/directories\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_status\n\n\n-\n\n\nShow the status of one or multiple files/directories\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n65\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n177\n\n\n\ncode_static_analyzer\n\n\n\nvia Olga Kniazska\n\n\n\n\n\nRuns different Static Analyzers and generate report\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nruby_analyzer\n\n\n-\n\n\nThis analyzer detect warnings, errors and check syntax in ruby files. This is based on rubocop\n\n\n\n\n\n\ncpd_analyzer\n\n\n-\n\n\nThis analyzer detect copy paste code (it uses PMD CPD)\n\n\n\n\n\n\nclang_analyzer\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nwarning_analyzer\n\n\n-\n\n\nThis analyzer detect warnings in Xcode projects.\n\n\n\n\n\n\ncode_static_analyzer\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n66\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n177\n\n\n\ngithub_status\n\n\n\nvia Michael Furtak\n\n\n\n\n\nProvides the ability to display and act upon GitHub server status as part of your build\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngithub_status\n\n\n-\n\n\nProvides the ability to check on GitHub server status as part of your build\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n48\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n177\n\n\n\ncreate_xcframework\n\n\n\nvia Boris Bielik, Alexey Alter-Pesotskiy\n\n\n\n\n\nFastlane plugin that creates xcframework for given list of destinations.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_xcframework\n\n\nbuilding\n\n\nFastlane plugin that creates xcframework for given list of destinations.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n11\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n50\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n176\n\n\n\nhours\n\n\n\nvia Rishabh Tayal\n\n\n\n\n\nRecord total time saved by fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhours\n\n\n-\n\n\nRecord total time saved by fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n42\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n175\n\n\n\nhumanable_build_number\n\n\n\nvia icyleaf\n\n\n\n\n\nAutomatic generate app build number unque and human readable friendly, like yymmHHMM. both support iOS and Android.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhumanable_build_number\n\n\n-\n\n\nAutomatic generate app build number unque and human readable friendly, like yymmHHMM. both support iOS and Android.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n64\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n175\n\n\n\nautomated_test_emulator_run_mik\n\n\n\nvia Kamil Krzyk\n\n\n\n\n\nStarts n AVDs based on JSON file config. AVDs are created and configured according to user liking before instrumentation test process (started either via shell command or gradle) and killed/deleted after test process finishes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nautomated_test_emulator_run\n\n\n-\n\n\nStarts AVD, based on AVD_setup.json file, before test launch and kills it after testing is done.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n42\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n173\n\n\n\naws_sns\n\n\n\nvia Josh Holtz\n\n\n\n\n\nCreates AWS SNS platform applications\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naws_sns\n\n\n-\n\n\nCreates AWS SNS platform applications\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n76\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n172\n\n\n\npoeditor_export\n\n\n\nvia James Campbell\n\n\n\n\n\nExports translations from POEditor.com\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npoeditor_export\n\n\n-\n\n\nExports translations from POEditor.com\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n47\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n169\n\n\n\nxcodebuild_analyze\n\n\n\nvia Meniga\n\n\n\n\n\nRun code analyzer using xcodebuild\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcodebuild_analyze\n\n\nbuilding\n\n\nRun code analyzer using xcodebuild\n\n\n\n\n\n\nxcodebuild_analyze_and_ensure_no_results\n\n\nbuilding\n\n\nRun code analyzer using xcodebuild and fail if any vulnerability is found\n\n\n\n\n\n\nensure_no_results_from_xcodebuild_analyze\n\n\nbuilding\n\n\nCheck if the are any vulnerabilities under provided analyzer output path\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n45\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n167\n\n\n\nionic_integration\n\n\n\nvia Adrian Regan\n\n\n\n\n\nIntegrating Fastlane with Ionic Generated Projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nionic_ios_config_snapshot\n\n\n-\n\n\nCreate a Sample iOS UI Unit Test to get started with in a generated Ionic/Cordova project\n\n\n\n\n\n\nionic_ios_snapshot\n\n\n-\n\n\nBridge between Ionic/Cordova Projects and Fastlane for Automated Snapshot Generation for iOS Projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n22\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n166\n\n\n\nverify_ipa\n\n\n\nvia Derek Yang\n\n\n\n\n\nVerify various aspects of iOS ipa file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nverify_ipa_files\n\n\n-\n\n\nVerify files in ipa file\n\n\n\n\n\n\nverify_ipa_entitlements\n\n\n-\n\n\nVerify ipa entitlements\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n51\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n166\n\n\n\nforsis\n\n\n\nvia Azadeh Bagheri\n\n\n\n\n\nThis plugin produces generic test execution reports supported by SonarQube from JUnit test reports generated by fastlane.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nforsis\n\n\n-\n\n\nThis plugin produces generic test execution reports supported by SonarQube from JUnit test reports generated by fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n46\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n24\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n166\n\n\n\nxcpretty_report\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nGenerate xcodebuild reports using xcpretty\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcpretty_report\n\n\n-\n\n\nxcpretty\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n60\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n163\n\n\n\ndynatrace\n\n\n\nvia Dynatrace LLC\n\n\n\n\n\nThis action processes and uploads your symbol files to Dynatrace\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndynatrace_process_symbols\n\n\n-\n\n\nThis action processes and uploads your symbol files to Dynatrace.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n22\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n163\n\n\n\nmenigit\n\n\n\nvia Meniga\n\n\n\n\n\nMissing git actions\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nadd_git_remote\n\n\nsource_control\n\n\nThis will add a remote repository\n\n\n\n\n\n\nremove_git_remote\n\n\nsource_control\n\n\nThis will remove a remote repository\n\n\n\n\n\n\nensure_no_changes\n\n\nsource_control\n\n\nRaises an exception if there are uncommitted git changes at path\n\n\n\n\n\n\nensure_tag_not_exists\n\n\nsource_control\n\n\nChecks if the git tag with the given name not exists in the current repo\n\n\n\n\n\n\nset_git_config_user\n\n\nsource_control\n\n\nThis will set git config user\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n33\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n163\n\n\n\nappbox\n\n\n\nvia Vineet Choudhary\n\n\n\n\n\nDeploy Development, Ad-Hoc and In-house (Enterprise) iOS applications directly to the devices from your Dropbox account.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappbox\n\n\n-\n\n\nDeploy Development, Ad-Hoc and In-house (Enterprise) iOS applications directly to the devices from your Dropbox account.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n25\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n163\n\n\n\nfast_city\n\n\n\nvia Flaregames GmbH\n\n\n\n\n\nfastlane tools for TeamCity CI\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nextract_version_info_android\n\n\n-\n\n\nExtract VersionName, VersionCode and PackageName from artifact\n\n\n\n\n\n\nresign_android\n\n\n-\n\n\nResign Android executable\n\n\n\n\n\n\nresign_ios\n\n\n-\n\n\nResign iOS executable\n\n\n\n\n\n\nextract_version_info_windows\n\n\n-\n\n\nExtract Version and Name from AppxManifest.xml\n\n\n\n\n\n\nappcenter_upload_multi\n\n\n-\n\n\nUpload multiple apks or ipas to App Center\n\n\n\n\n\n\nextract_version_info_ios\n\n\n-\n\n\nExtract CFBundleShortVersionString, CFBundleVersion and CFBundleIdentifier from Info.plist\n\n\n\n\n\n\nupdate_dsym_bundle_id\n\n\n-\n\n\nUpdate Bundle Identifier in Info.plist of dSYM file\n\n\n\n\n\n\nextract_appx\n\n\n-\n\n\nExtract appx bundle and add it to output path\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n93\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n162\n\n\n\nclang_format\n\n\n\nvia Meniga\n\n\n\n\n\nFormat your C/C++/Java/JavaScript/Objective-C/Protobuf/C code with clang-format\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclang_format\n\n\n-\n\n\nA tool to format C/C++/Java/JavaScript/Objective-C/Protobuf/C\n\n\n\n\n\n\nrun_clang_format\n\n\n-\n\n\nRun clang format python script: https://github.com/Sarcasm/run-clang-format\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n42\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n160\n\n\n\ncompilation_time_report\n\n\n\nvia Tinkoff.ru\n\n\n\n\n\nGenerate custom HTML report compilation time of each Swift func\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncompilation_time_report\n\n\n-\n\n\nGenerate custom HTML report compilation time of each Swift func\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n160\n\n\n\nflurry\n\n\n\nvia Akash Duseja\n\n\n\n\n\nUpload dSYM symbolication files to Flurry\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflurry_upload_dsym\n\n\nmisc\n\n\nUpload dSYM symbolication files to Flurry\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n30\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n159\n\n\n\nbluepill\n\n\n\nvia tbrand\n\n\n\n\n\nFastlane plugin to use bluepill in fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbluepill\n\n\n-\n\n\nPlugin to use bluepill in fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n13\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n159\n\n\n\nremove_setting\n\n\n\nvia Colin Harris\n\n\n\n\n\nFastlane plugin to remove settings from an iOS settings bundle\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nremove_setting\n\n\nproject\n\n\nFastlane plugin action to remove settings in an iOS settings bundle\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n60\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n158\n\n\n\nperfecto\n\n\n\nvia Perfecto\n\n\n\n\n\nThis plugin allows you to automatically upload ipa/apk files to Perfecto for manual/automation testing\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nperfecto\n\n\n-\n\n\nThis plugin allows you to automatically upload ipa/apk files to Perfecto for manual/automation testing\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n18\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n42\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n157\n\n\n\nvalidate_app\n\n\n\nvia Thi\n\n\n\n\n\nValidate your build before uploading to iTunes Connect\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nvalidate_app\n\n\n-\n\n\nValidate your ipa file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n11\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n50\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n154\n\n\n\nwait_xcrun\n\n\n\nvia Maksym Grebenets\n\n\n\n\n\nWait for Xcode toolchain to come back online after switching Xcode versions.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwait_xcrun\n\n\n-\n\n\nWait for Xcode toolchain to come back online after switching Xcode versions.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n18\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n154\n\n\n\nclang_analyzer\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nRuns Clang Static Analyzer(http://clang-analyzer.llvm.org/) and generates report\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclang_analyzer\n\n\n-\n\n\nRuns Clang Static Analyzer(http://clang-analyzer.llvm.org/) and generates report\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n23\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n153\n\n\n\nraven\n\n\n\nvia Marten Klitzke\n\n\n\n\n\nPlugin to manage Releases and upload JS Sourcemaps\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nraven\n\n\n-\n\n\nCreate new Sentry/Raven Release and Upload Sourcemaps\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n30\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n28\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n153\n\n\n\ngoogle_chat\n\n\n\nvia Narlei Am\u00e9rico Moreira\n\n\n\n\n\nSend messages to Google Chat\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoogle_chat\n\n\n-\n\n\nSend messages to Google Chat\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n13\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n65\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n153\n\n\n\nandroid_keystore\n\n\n\nvia Josh Holtz\n\n\n\n\n\nGenerate an Android keystore file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_keystore\n\n\n-\n\n\nGenerate an Android keystore file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n50\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n152\n\n\n\nanalyze_apk\n\n\n\nvia kochavi-daniel\n\n\n\n\n\nAnalyzes an apk to fetch: versionCode, versionName, apk size, etc.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nanalyze_apk\n\n\n-\n\n\nAnalyzes an apk to fetch: versionCode, versionName, apk size, permissions, etc.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n51\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n152\n\n\n\ntranslation\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nHandling translations from Google sheet.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_translation\n\n\n-\n\n\nCreate sheet for translations in Google sheets.\n\n\n\n\n\n\ntranslation\n\n\n-\n\n\nOutput translations from Google sheet into templates.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n151\n\n\n\nbuild_log_info\n\n\n\nvia tarappo\n\n\n\n\n\nshow build log info\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuild_log_info\n\n\n-\n\n\nbuild log information\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n59\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n150\n\n\n\nbranding\n\n\n\nvia Stefan Natchev\n\n\n\n\n\nAdd some branding to your fastlane output\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbranding\n\n\n-\n\n\nAdd some branding to your fastlane output\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n11\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n23\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n149\n\n\n\ndocker\n\n\n\nvia Manu Wallner\n\n\n\n\n\nfastlane Actions to support building images, logging into Docker Hub, and pushing those images to the Hub\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndocker_build\n\n\n-\n\n\nBuild docker images in the current directory\n\n\n\n\n\n\ndocker_login\n\n\n-\n\n\nLogin to Docker Hub\n\n\n\n\n\n\nensure_docker_machine_available\n\n\n-\n\n\nMakes sure a docker machine is created and available for us to use\n\n\n\n\n\n\ndocker_compose\n\n\n-\n\n\nDefine and run multi-container applications with Docker\n\n\n\n\n\n\ndocker_push\n\n\n-\n\n\nPush a docker image to its' repository\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n21\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n148\n\n\n\nxml_editor\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nGeneric xml editor for iOS and Android projects.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxml_editor\n\n\n-\n\n\nGeneric XML file editor\n\n\n\n\n\n\nxml_add\n\n\n-\n\n\nGeneric XML file add content using XPath\n\n\n\n\n\n\nxml_remove\n\n\n-\n\n\nGeneric XML file remover using XPath\n\n\n\n\n\n\nxml_set_attribute\n\n\n-\n\n\nAdd XML attribute using XPath\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n62\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n147\n\n\n\ndownload_circleci_artifacts\n\n\n\nvia Manabu OHTAKE\n\n\n\n\n\nDownloads a Circle CI artifact's\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshow_builds\n\n\n-\n\n\nThis action show recent builds a Circle CI artifact's using the Circle CI API\n\n\n\n\n\n\nget_recent_builds\n\n\n-\n\n\nThis action recent builds a Circle CI artifact's using the Circle CI API\n\n\n\n\n\n\ndownload_circleci_artifacts\n\n\n-\n\n\nThis action downloads a Circle CI artifact's using the Circle CI API and puts it in a destination path.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n70\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n146\n\n\n\ncoveralls\n\n\n\nvia Atsushi Nagase\n\n\n\n\n\nSend coverage information to Coveralls\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n96\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n145\n\n\n\nrepack_ios\n\n\n\nvia Omer Duzyol\n\n\n\n\n\nEnables your build pipeline to repack your pre-built ipa with new assets without rebuilding the native code.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrepack_ios\n\n\n-\n\n\nEnables your build pipeline to repack your pre-built ipa with new assets without rebuilding the native code.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n9\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n145\n\n\n\nfirebase\n\n\n\nvia Tomas Kohout\n\n\n\n\n\nUnofficial tool to access Firebase project settings\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfirebase_delete_client\n\n\n-\n\n\nAn unofficial tool to access Firebase\n\n\n\n\n\n\nfirebase_add_client\n\n\n-\n\n\nAn unofficial tool to access Firebase\n\n\n\n\n\n\nfirebase_list\n\n\n-\n\n\nAn unofficial tool to access Firebase\n\n\n\n\n\n\nfirebase_download_config\n\n\n-\n\n\nAn unofficial tool to access Firebase\n\n\n\n\n\n\nfirebase_upload_certificate\n\n\n-\n\n\nAn unofficial tool to access Firebase\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n23\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n144\n\n\n\ncreate_merge_request\n\n\n\nvia masashi mizuno\n\n\n\n\n\nThis will create a new merge request on GitLab.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_merge_request\n\n\nsource_control\n\n\nThis will create a new marge request on GitLab\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n18\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n31\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n144\n\n\n\ndmg\n\n\n\nvia Alexey Dvoryanskiy\n\n\n\n\n\nEasily create dmg for your Mac app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndmg\n\n\nmisc\n\n\nCreate DMG for your Mac app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n27\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n144\n\n\n\nrelease_helper\n\n\n\nvia Artem Ivanov\n\n\n\n\n\nrelease heper\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrelease_helper\n\n\n-\n\n\nrelease heper\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n74\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n143\n\n\n\ngs_versioning\n\n\n\nvia SAVeselovskiy\n\n\n\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngs_save_beta_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_increment_rc_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_get_beta_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_increment_release_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_get_release_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_save_rc_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_increment_beta_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_get_rc_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\ngs_save_release_version\n\n\n-\n\n\nPlugin for GradoService versioning system\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n67\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n143\n\n\n\ndelete_files\n\n\n\nvia GaryJohnson\n\n\n\n\n\nDeletes a file, folder or multiple files using shell glob pattern.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndelete_files\n\n\n-\n\n\nDeletes a file, folder or multiple files using shell glob pattern.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n42\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n142\n\n\n\nandroid_emulator-kami\n\n\n\nvia Michael Ruhl\n\n\n\n\n\nCreates and starts an Android Emulator (AVD)\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_emulator_kami\n\n\n-\n\n\nCreates and starts an Android Emulator (AVD)\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n142\n\n\n\nprovisioning\n\n\n\nvia Pawel Jankowski\n\n\n\n\n\nHelps provision your app in the CI environment\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nset_key_partition_list\n\n\n-\n\n\nSets key partition list (required by macOS Sierra)\n\n\n\n\n\n\ninstall_profiles\n\n\n-\n\n\nInstall profiles from specified directory\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n141\n\n\n\nascii_art\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nAdd some fun to your fastlane output.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nascii_art\n\n\n-\n\n\nAdd some fun to your fastlane output.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n20\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n141\n\n\n\nbugsnag_sourcemaps_upload\n\n\n\nvia Evgrafov Denis\n\n\n\n\n\nHelps to upload sourcemaps to Bugsnag\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbugsnag_sourcemaps_upload\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n141\n\n\n\ninstall_provisioning_profiles\n\n\n\nvia Dylan Gyesbreghs\n\n\n\n\n\nInstall all the provisioning profiles located in you're project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninstall_provisioning_profiles\n\n\n-\n\n\nInstall all the provisioning profiles located in you're project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n41\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n141\n\n\n\nnapp_distribution\n\n\n\nvia Mads M\u00f8ller\n\n\n\n\n\nUpload IPA AND APK builds to Napp Distribution\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnapp_distribution\n\n\n-\n\n\nUpload builds to Napp Distribution Center\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n140\n\n\n\nandroid_emulator_kami\n\n\n\nvia Michael Ruhl\n\n\n\n\n\nCreates and starts an Android Emulator (AVD)\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_emulator_kami\n\n\n-\n\n\nCreates and starts an Android Emulator (AVD)\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n140\n\n\n\nnumber_of_swift_lines\n\n\n\nvia Dennis Charmington\n\n\n\n\n\nOutputs the total number of swift lines and other useful statistics\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnumber_of_swift_lines\n\n\n-\n\n\nOutputs the total number of lines of swift code, number of swift files, and a list of the largest swift files, and some other useful statistics\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n64\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n138\n\n\n\nbitrise_automation\n\n\n\nvia Mario Cecchi\n\n\n\n\n\nTrigger builds on Bitrise, check their status and download artifacts using Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbitrise_build_artifacts\n\n\n-\n\n\nGet the list or full contents of the artifacts produced by a build on Bitrise\n\n\n\n\n\n\ntrigger_bitrise_workflow\n\n\n-\n\n\nTrigger a Bitrise workflow with the specified parameters, synchronously or asynchronously\n\n\n\n\n\n\nbitrise_build_status\n\n\n-\n\n\nGet the status of the Bitrise build\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n36\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n80\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n138\n\n\n\nxcode_test_reporter\n\n\n\nvia Taisuke Hori\n\n\n\n\n\nGenerates JUnit or HTML report from Xcode \nplist\n test report files.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcode_test_reporter\n\n\n-\n\n\nGenerates JUnit or HTML report from Xcode \nplist\n test report files\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n138\n\n\n\nsecret_keeper\n\n\n\nvia Daniel Jankowski\n\n\n\n\n\nsecret_keeper is a wrapped on keychain access.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nremove_item_from_keychain\n\n\n-\n\n\nRemoves the credentials from the keychain on behalf of the user\n\n\n\n\n\n\nadd_item_to_keychain\n\n\n-\n\n\nAdds the credentials to the keychain on behalf of the user\n\n\n\n\n\n\nread_item_from_keychain\n\n\n-\n\n\nReads the password from the keychain for a given item\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n18\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n137\n\n\n\nno_u\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nno u\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nno_u\n\n\n-\n\n\nno u\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n137\n\n\n\nmoronepo\n\n\n\nvia Meniga\n\n\n\n\n\nRun dart pub moronepo with fastlane!\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmoronepo_update_flutter_sdk\n\n\nbuilding\n\n\nRuns command for all subprojects or a specified project\n\n\n\n\n\n\nmoronepo_run\n\n\nbuilding\n\n\nRuns command for all subprojects or a specified project\n\n\n\n\n\n\nmoronepo_activate\n\n\nbuilding\n\n\nRun flutter pub global activate moronepo\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n136\n\n\n\nupload_dsym_to_bugly\n\n\n\nvia liubo\n\n\n\n\n\nupload_dsym_to_bugly\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_dsym_to_bugly\n\n\n-\n\n\nupload_dsym_to_bugly\n\n\n\n\n\n\nupload_app_to_bugly\n\n\n-\n\n\nupload_app_to_bugly\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n10\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n136\n\n\n\nreplace_file\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nReplace any file in your mobile project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreplace_file\n\n\n-\n\n\nReplace any file in your mobile project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n59\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n136\n\n\n\nupload_to_server\n\n\n\nvia Maxim Toyberman\n\n\n\n\n\nUpload IPA and APK to your own server\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_to_server\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n19\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n29\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n135\n\n\n\ntry_scan\n\n\n\nvia Alexey Alter-Pesotskiy\n\n\n\n\n\nThe easiest way to retry your fastlane scan action\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntry_scan\n\n\ntesting\n\n\nSimple way to retry your scan action\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n27\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n134\n\n\n\nxcresult_to_junit\n\n\n\nvia Shane Birdsall\n\n\n\n\n\nProduces junit xml files from Xcode 11+ xcresult files\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcresult_to_junit\n\n\n-\n\n\nProduces junit xml files from Xcode 11+ xcresult files\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n7\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n134\n\n\n\nfile_manager\n\n\n\nvia Jason Nam\n\n\n\n\n\nCopy and remove files\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nremove_files\n\n\n-\n\n\nRemove files\n\n\n\n\n\n\ncopy_files\n\n\n-\n\n\nCopy files\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n44\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n133\n\n\n\napprepo\n\n\n\nvia Matej Sychra\n\n\n\n\n\nFastlane plugin SFTP/AppRepo uploader\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_manifest\n\n\n-\n\n\nRuns the Apprepo plugin\n\n\n\n\n\n\napprepo\n\n\n-\n\n\n-\n\n\n\n\n\n\ninit\n\n\n-\n\n\nInitializes Repofile\n\n\n\n\n\n\nrun\n\n\n-\n\n\nRuns the default Apprepo action\n\n\n\n\n\n\nsubmit\n\n\n-\n\n\nSubmits IPA to Apprepo\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n54\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n133\n\n\n\nmackerel_api\n\n\n\nvia yutailang0119\n\n\n\n\n\nCall a Mackerel API endpoint and get the resulting JSON response\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmackerel_api\n\n\nsource_control\n\n\nCall a Mackerel API endpoint and get the resulting JSON response\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n132\n\n\n\njira_util\n\n\n\nvia %q{Alexey Martynov}\n\n\n\n\n\n%q{Create JIRA issues and manage versions with this plugin}\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrelease_jira_version\n\n\n-\n\n\nReleases a version in your JIRA project\n\n\n\n\n\n\nget_jira_release_report_link\n\n\n-\n\n\nReturn link to JIRA release report.\n\n\n\n\n\n\ncreate_jira_issue\n\n\n-\n\n\nCreates a new issue in your JIRA project\n\n\n\n\n\n\nupdate_jira_version\n\n\n-\n\n\nCreates a new version in your JIRA project\n\n\n\n\n\n\ncreate_jira_version\n\n\n-\n\n\nCreates a new version in your JIRA project\n\n\n\n\n\n\nget_jira_version\n\n\n-\n\n\nFinds project version in your JIRA project by id or by name\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n132\n\n\n\ncodepush\n\n\n\nvia Pranit Harekar\n\n\n\n\n\nFastlane plugin for App Center CodePush actions \ud83d\ude80\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncodepush_exists_deployment\n\n\n-\n\n\nCodePush check if deployment exists\n\n\n\n\n\n\ncodepush_release_react\n\n\n-\n\n\nCodePush release-react action\n\n\n\n\n\n\ncodepush_login\n\n\n-\n\n\nCodePush login action\n\n\n\n\n\n\ncodepush_get_deployment_key\n\n\n-\n\n\nCodePush get deployment key given deployment name\n\n\n\n\n\n\ncodepush_list_deployment\n\n\n-\n\n\nCodePush list deployment action\n\n\n\n\n\n\ncodepush_remove_deployment\n\n\n-\n\n\nCodePush remove deployment action\n\n\n\n\n\n\ncodepush_logout\n\n\n-\n\n\nCodePush logout action\n\n\n\n\n\n\ncodepush_rename_deployment\n\n\n-\n\n\nCodePush rename deployment action\n\n\n\n\n\n\ncodepush_add_deployment\n\n\n-\n\n\nCodePush add deployment action\n\n\n\n\n\n\ncodepush_promote\n\n\n-\n\n\nCodePush promote action\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n26\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n131\n\n\n\nteak\n\n\n\nvia Pat Wilson\n\n\n\n\n\nFastlane plugins for the Teak SDK\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nteak_extensions\n\n\n-\n\n\nAdd App Extension\n\n\n\n\n\n\nteak_sdk\n\n\n-\n\n\nDownload the Teak SDK\n\n\n\n\n\n\nteak\n\n\n-\n\n\nFastlane plugins for the Teak SDK\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n28\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n130\n\n\n\ngitlab_release\n\n\n\nvia Andrea Del Fante\n\n\n\n\n\nFastlane wrapper of gitlab-release-tools\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_release_changelog\n\n\n-\n\n\n-\n\n\n\n\n\n\ngitlab_release_close\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n45\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n130\n\n\n\ninfluxdb\n\n\n\nvia giginet\n\n\n\n\n\nPost values to InfluxDB\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninfluxdb\n\n\n-\n\n\nPost values to IndluxDB\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n130\n\n\n\nya_tu_sabes\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nYa tu sabes.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nya_tu_sabes\n\n\n-\n\n\nYa tu sabes.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n130\n\n\n\nhockey_devices\n\n\n\nvia Viktoras Laukevi\u010dius\n\n\n\n\n\nRetrieves a list of devices from Hockey which can then be used with Match\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhockey_devices\n\n\n-\n\n\nRetrieves a list of devices from Hockey which can then be used with Match\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n129\n\n\n\ncreate_github_issue\n\n\n\nvia Ryo Sakaguchi\n\n\n\n\n\nCreate GitHub issue\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_github_issue\n\n\n-\n\n\nCreate GitHub issue\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n68\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n128\n\n\n\naccessibility_test\n\n\n\nvia Takeshi Tsukamoto\n\n\n\n\n\nAccessibility test with Firebase Test Lab for Android.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naccessibility_test\n\n\n-\n\n\nAccessibility test with Firebase Test Lab for Android.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n49\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n128\n\n\n\nupload_symbols_to_hockey\n\n\n\nvia Justin Williams\n\n\n\n\n\nUpload dSYM symbolication files to Hockey\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_hockey\n\n\n-\n\n\nUpload dSYM symbolication files to Hockey\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n128\n\n\n\nsimple_loco\n\n\n\nvia Yves Delcoigne\n\n\n\n\n\nA simple implementation for exporting translations from Loco.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsimple_loco\n\n\n-\n\n\nA simple implementation for exporting translations from Loco.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\ndevice_image_selector\n\n\n\nvia Mario Zimmermann\n\n\n\n\n\nTakes the screenshots from devices which match the specified names and puts them in a new directory for frameit to process. The screenshot files can then be cleaned up after the device images are created.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndevice_image_selector\n\n\n-\n\n\nSelects screenshots with specified names for processing with frameit\n\n\n\n\n\n\ndevice_image_selector_cleanup\n\n\n-\n\n\nCleanup screenshot files after frameit\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\noclint_json_compilation_database\n\n\n\nvia Meniga\n\n\n\n\n\nRun OCLint validation with oclint-json-compilation-database and fastlane :dart: :rocket:\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\noclint_json_compilation_database\n\n\ntesting\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\nswiftformat\n\n\n\nvia Felix Mau\n\n\n\n\n\nRun swift code formatting using SwiftFormat\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nswiftformat\n\n\ntesting\n\n\nRun swift code formatting using SwiftFormat\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\nnapp_notifications\n\n\n\nvia Mads M\u00f8ller\n\n\n\n\n\nNapp Notifications\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nnapp_notifications\n\n\npush\n\n\nNapp Notifications\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n127\n\n\n\nset_sonar_properties\n\n\n\nvia Paldom\n\n\n\n\n\nLoad and edit sonar-project.properties files\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nset_sonar_properties\n\n\n-\n\n\nLoad and edit sonar properties file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n126\n\n\n\nauth0_shipper\n\n\n\nvia Hernan Zalazar\n\n\n\n\n\nOSS libraries release process for Auth0\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nperform_release\n\n\n-\n\n\nPerforms the release for an Auth0 OSS library\n\n\n\n\n\n\npublish_release\n\n\n-\n\n\nPerforms a pending release represented by the latest tag\n\n\n\n\n\n\nprepare_release\n\n\n-\n\n\nPrepares the release for an Auth0 OSS library\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n45\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n125\n\n\n\ncertificate_expirydate\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nRetrieves the expiry date of the given p12 certificate file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncertificate_expirydate\n\n\n-\n\n\nRetrieves the expiry date of the given p12 certificate file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n125\n\n\n\nshuttle\n\n\n\nvia Shuttle Project\n\n\n\n\n\nPublish your builds on Shuttle.tools\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nshuttle\n\n\n-\n\n\nPublish your builds on \nShuttle.tools\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n24\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n125\n\n\n\nwechat\n\n\n\nvia xiongzenghui\n\n\n\n\n\nthis is a wechat api wrapper\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwechat\n\n\n-\n\n\nthis is a wechat api wrapper\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n39\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n125\n\n\n\nverify_two_step_session\n\n\n\nvia Takashi Hasegawa\n\n\n\n\n\nVerifies the session cookie for 'Two-Step verification for Apple ID'\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nverify_two_step_session\n\n\nmisc\n\n\nVerifies the session cookie for 'Two-Factor authentication/Two-Step verification for Apple ID'\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n125\n\n\n\nelux_actions\n\n\n\nvia Dennis Granath\n\n\n\n\n\nPlugin including actions for releasing the android SDK\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n75\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n124\n\n\n\nbitbucket_auth\n\n\n\nvia rlestesr\n\n\n\n\n\nGenerate a OAuth Token for Bitbucket API Access.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbitbucket_auth\n\n\n-\n\n\nGenerate a OAuth Token for Bitbucket API Access.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n123\n\n\n\ngit_switch_branch\n\n\n\nvia zhangqi\n\n\n\n\n\nswitch to branch\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_switch_branch\n\n\n-\n\n\nswitch to branch\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n44\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n120\n\n\n\nipa_info\n\n\n\nvia tarappo\n\n\n\n\n\nshow ipa info\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nipa_info\n\n\n-\n\n\nShow information of an ipa file.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n25\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nmsi\n\n\n\nvia Paul Niezborala\n\n\n\n\n\nCreate Windows Installer\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsi\n\n\n-\n\n\nCreate Windows Installer\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nconnected\n\n\n\nvia Abgier Avraha\n\n\n\n\n\nFastlane plugin that allows you to use your App Store Connect API key to download certificates and upload apps to TestFlight\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nconnected_certs\n\n\n-\n\n\nApp Store Connect API Certificates Module\n\n\n\n\n\n\nconnected_upload\n\n\n-\n\n\nApp Store Connect API Uploader Module\n\n\n\n\n\n\nconnected_auth\n\n\n-\n\n\nApp Store Connect API Authentication Module\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nretry_tests\n\n\n\nvia Gloria Chow\n\n\n\n\n\nThis fastlane plugin includes the following actions:\n1) multi_scan: uses scan to run Xcode tests, optionally in batches, a given number of times: only re-testing failing tests.\n2) suppress_tests_from_junit: uses a junit xml report file to suppress either passing or failing tests in an Xcode Scheme.\n3) suppress_tests: suppresses specific tests in a specific or all Xcode Schemes in a given project.\n4) suppressed_tests: retrieves a list of tests that are suppressed in a specific or all Xcode Schemes in a project.\n5) tests_from_junit: retrieves the failing and passing tests as reported in a junit xml file.\n6) tests_from_xctestrun: retrieves all of the tests from xctest bundles referenced by the xctestrun file\n7) collate_junit_reports: collects and correctly organizes junit reports from multiple test passes.\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n57\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nstatic_assets\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nGenerate code for buildtime-safe assignments of assets.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunused_images\n\n\n-\n\n\n-\n\n\n\n\n\n\nstatic_images\n\n\n-\n\n\nGenerate code for buildtime-safe assignments of images.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\ncordova_screenshots\n\n\n\nvia Jan Piotrowski\n\n\n\n\n\nTake screenshots of your Cordova/Ionic app with fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ninit_cordova_screenshots_ios\n\n\n-\n\n\nCreates an iOS UI Unit Tests in '#\n\n\n\n\n\n\nretrofit_cordova_screenshots_android\n\n\n-\n\n\nRetrofit test into Android project\n\n\n\n\n\n\nretrofit_cordova_screenshots_ios\n\n\n-\n\n\nRetrofit test into iOS Xcode project\n\n\n\n\n\n\ninit_cordova_screenshots_android\n\n\n-\n\n\nCreates an Android UI test in '#\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-10\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nsetup_app_feedback_sdk\n\n\n\nvia Yahoo Japan Corporation\n\n\n\n\n\nSetup the Info.plist for App Feedback SDK\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsetup_app_feedback_sdk\n\n\n-\n\n\nSetup the Info.plist for App Feedback SDK\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nbearychat\n\n\n\nvia dvlprliu\n\n\n\n\n\nsend messages to a bearychat channal\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbearychat\n\n\n-\n\n\nsend messages to a bearychat channal\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\ntestdroid_runner\n\n\n\nvia josepmc\n\n\n\n\n\nAllows to run BitBar tests on fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntestdroid_runner\n\n\n-\n\n\nBitBar Test Runner\n\n\n\n\n\n\nupload_testdroid\n\n\n-\n\n\nUploads a file to bitbar\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nget_application_id_flavor\n\n\n\nvia Helder Pinhal\n\n\n\n\n\nGet the applicationId of an Android project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_application_id_flavor\n\n\n-\n\n\nGet the applicationId of an Android project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n37\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n119\n\n\n\nbuild_cache\n\n\n\nvia Fernando Saragoca\n\n\n\n\n\nHelper for caching builds when using 'build for testing' & 'test without building'\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclean_build_cache_workspace\n\n\n-\n\n\nCleans workspace by removing old builds, using last access time for comparison\n\n\n\n\n\n\narchive_derived_data\n\n\n-\n\n\nArchives derived data folder in a zip file for later use\n\n\n\n\n\n\ncheck_build_cache_workspace\n\n\n-\n\n\nCheck if cache for current build is avaiable\n\n\n\n\n\n\nunarchive_derived_data\n\n\n-\n\n\nUnarchives derived data folder from a zip file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n118\n\n\n\nplural_converter\n\n\n\nvia Benoit Deldicque\n\n\n\n\n\nConvert Android plural XML resource file to iOS stringsdict file.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplural_converter\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n30\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n118\n\n\n\nunity\n\n\n\nvia safu9\n\n\n\n\n\nFastlane plugin for Unity\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunity\n\n\n-\n\n\nFastlane plugin for Unity\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n118\n\n\n\nad_licenselint\n\n\n\nvia Pierre Felgines\n\n\n\n\n\nLint the licenses for iOS projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nad_licenselint\n\n\n-\n\n\nLint the licenses for iOS projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n118\n\n\n\nti_build_app\n\n\n\nvia Adam Armstrong\n\n\n\n\n\nBuild Axway Appcelerator Mobile Applications from within fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nti_build_app\n\n\n-\n\n\nBuild Axway Appcelerator Mobile Applications from within fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\nremove_git_tag\n\n\n\nvia Marker Digital\n\n\n\n\n\nThis will remove a specific tag from your remote branch\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nremove_git_tag\n\n\nsource_control\n\n\nThis will remove a tag from the remote repository\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n40\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\nlocalize\n\n\n\nvia Wolfgang Lutz\n\n\n\n\n\nSearches the code for extractable strings and allows interactive extraction to .strings file.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlocalize\n\n\n-\n\n\nSearches the code for extractable strings and allows interactive extraction to .strings file.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\nqueue\n\n\n\nvia Josh Holtz\n\n\n\n\n\nQueue up fastlane jobs\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nqueue_stop\n\n\n-\n\n\nStops web server and worker for queueing fastlane jobs\n\n\n\n\n\n\nqueue_start\n\n\n-\n\n\nStarts web server and worker for queueing fastlane jobs\n\n\n\n\n\n\nqueue\n\n\n-\n\n\nAdds fastlane jobs to a queue\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n117\n\n\n\nsupply_aptoide\n\n\n\nvia wschurman\n\n\n\n\n\nUpload metadata, screenshots and binaries to Aptoide\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsupply_aptoide\n\n\n-\n\n\nUpload metadata, screenshots and binaries to Aptoide.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n116\n\n\n\nfirim\n\n\n\nvia whlsxl\n\n\n\n\n\nfirim\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n84\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n116\n\n\n\nupdate_jenkins_build\n\n\n\nvia icyleaf\n\n\n\n\n\nUpdate Description of Build\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_jenkins_build\n\n\n-\n\n\nUpdate build's description of jenkins\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n116\n\n\n\nios_dependency_parser\n\n\n\nvia kochavi-daniel\n\n\n\n\n\nAnalyzes results of 'pod outdated' in a structured manner\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nparse_pod_dependencies\n\n\n-\n\n\nAnalyzes 'pod outdated' results and structures it for further usage.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n116\n\n\n\nfir\n\n\n\nvia dongorigin\n\n\n\n\n\nUpload a new build to fir.im\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfir\n\n\nbeta\n\n\nUpload a new build to fir.im\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n115\n\n\n\nflutter_version_manager\n\n\n\nvia Davor Maric\n\n\n\n\n\nManages app versioning of Flutter project\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflutter_version_manager\n\n\n-\n\n\nManages app versioning of a Flutter project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n115\n\n\n\ngithub_action\n\n\n\nvia Josh Holtz\n\n\n\n\n\nHelper to setup GitHub actions for fastlane and match\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngithub_action\n\n\n-\n\n\nHelper to setup GitHub actions for fastlane and match\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\nupdateplistfromstrings\n\n\n\nvia Jonas Schmid\n\n\n\n\n\nAllow to take values from the localization.strings and put them into Info.plist\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdateplistfromstrings\n\n\n-\n\n\nUpdate InfoPlist.strings from translation file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\nfind_firebase_app_id\n\n\n\nvia Tigran Hambardzumyan\n\n\n\n\n\nHelper plugin which will allow to find Firebase App ID from GoogleService-Info.plist [iOS] or google-services.json [Android].\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfind_firebase_app_id\n\n\n-\n\n\nHelper plugin which will allow to find Firebase App ID from GoogleService-Info.plist [iOS] or google-services.json [Android].\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n12\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n114\n\n\n\nsparkplugg\n\n\n\nvia Boris Bu\u0308gling\n\n\n\n\n\nQuickly try out fastlane plugins.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\nteams_bot\n\n\n\nvia Hugo EXTRAT\n\n\n\n\n\nEasily alert a Microsoft Teams channel\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nteams_bot\n\n\n-\n\n\nEasily send a message to a Microsoft Teams channel through the Webhook connector\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\nappdynamics\n\n\n\nvia Artur Rybak\n\n\n\n\n\nUpload dSYM files to AppDynamics\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappdynamics\n\n\n-\n\n\nUpload dSYM symbolication files to AppDynamics\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n26\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\nanalyze_ios_linkmap\n\n\n\nvia xiongzenghui\n\n\n\n\n\niOS parse linkmap.txt to ruby Hash\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nanalyze_ios_linkmap\n\n\n-\n\n\niOS parse linkmap.txt to ruby Hash or JSON\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n45\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n113\n\n\n\nimessage\n\n\n\nvia Alexander Ignition\n\n\n\n\n\nsend imessage\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimessage\n\n\nnotifications\n\n\nsend imessage\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n18\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n112\n\n\n\nios_readme_generate\n\n\n\nvia Erik Flores\n\n\n\n\n\nCreate readme for ios projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nios_readme_generate\n\n\n-\n\n\nCreate readme for ios projects :D\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n110\n\n\n\ntest_report\n\n\n\nvia Naylin Medina\n\n\n\n\n\ncustomized template for iOS test reports\u001b\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntest_report\n\n\n-\n\n\nCreate customized HTML template for test reports\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n109\n\n\n\ngoogle_analytics\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nFire universal Analytics\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoogle_analytics\n\n\n-\n\n\nFire universal Analytics\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n109\n\n\n\nproperty_file_write\n\n\n\nvia Jan Meier\n\n\n\n\n\nwrites property files\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproperty_file_write\n\n\n-\n\n\nWrites value into properties file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n109\n\n\n\ngradle_manager\n\n\n\nvia Helder Pinhal\n\n\n\n\n\nExposes some Android configurations from the gradle file.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_version_name\n\n\n-\n\n\nGet the parsed Gradle file of an Android project.\n\n\n\n\n\n\nget_version_code\n\n\n-\n\n\nGet the parsed Gradle file of an Android project.\n\n\n\n\n\n\nget_gradle_data\n\n\n-\n\n\nGet the parsed Gradle file of an Android project.\n\n\n\n\n\n\nget_application_id\n\n\n-\n\n\nGet the parsed Gradle file of an Android project.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n109\n\n\n\ntestfairy\n\n\n\nvia Josh Holtz\n\n\n\n\n\nUpload IPA to TestFairy\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntestfairy\n\n\n-\n\n\nUpload an IPA to TestFairy\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n109\n\n\n\ntrello\n\n\n\nvia Oscar De Moya\n\n\n\n\n\nFastlane plugin for moving a trello card to a given list\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntrello_comment\n\n\n-\n\n\nAdds a comment to a given Trello card\n\n\n\n\n\n\ntrello_move_card\n\n\n-\n\n\nMoves a Trello card to a given list\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n21\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n108\n\n\n\nxclogparser\n\n\n\nvia Josh Lesch\n\n\n\n\n\nParse Xcode or xcodebuild build and test logs with XCLogParser\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxclogparser\n\n\n-\n\n\nParse Xcode or xcodebuild build and test logs with XCLogParser\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n30\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n107\n\n\n\nyafirim\n\n\n\nvia wd\n\n\n\n\n\nYet another fastlane fir.im plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nyafirim\n\n\n-\n\n\nYet another fastlane fir.im plugin\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n107\n\n\n\njira_transitions\n\n\n\nvia Ostap Taran\n\n\n\n\n\nRuns transitions for specified JIRA tickets\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_transitions\n\n\n-\n\n\nRuns transitions for specified JIRA tickets\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n107\n\n\n\ntwitter\n\n\n\nvia rb_de0\n\n\n\n\n\nA simple twitter plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntweet\n\n\n-\n\n\nTweet a message specified in the parameter\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n107\n\n\n\ndownload_hockey_ipa\n\n\n\nvia horimislime\n\n\n\n\n\nA fastlane plugin that helps downloading .ipa from HockeyApp\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_hockey_ipa\n\n\n-\n\n\nA fastlane plugin that helps downloading .ipa from HockeyApp\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n107\n\n\n\nsouyuz-ventaapps\n\n\n\nvia Felix Rudat\n\n\n\n\n\nA fastlane component to make Xamarin builds a breeze\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_version\n\n\n-\n\n\nEasily set or print app version with \napp_version\n\n\n\n\n\n\nsouyuz\n\n\n-\n\n\nEasily build and sign your app using \nsouyuz\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n30\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n28\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n106\n\n\n\nfarol\n\n\n\nvia Felipe Plets\n\n\n\n\n\nEnable your app to use Farol Platform services\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfarol_api\n\n\n-\n\n\nIntegrate your app with the Farol Platform using services like push notifications\n\n\n\n\n\n\nfarol_get_version\n\n\n-\n\n\nEnable your app to use Farol Platform services\n\n\n\n\n\n\nfarol\n\n\n-\n\n\nEnable your app to use Farol Platform services\n\n\n\n\n\n\nfarol_set_version\n\n\n-\n\n\nIntegrate your app with the Farol Platform using services like push notifications\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n22\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n24\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n105\n\n\n\nupload_to_onesky\n\n\n\nvia joshrlesch\n\n\n\n\n\nUpload a strings file to OneSky\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_to_onesky\n\n\n-\n\n\nUpload a strings file to OneSky\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n27\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n105\n\n\n\nbitrise\n\n\n\nvia Robin AUTHIAT\n\n\n\n\n\nFastlane plugin to trigger a bitrise build with some options\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbitrise\n\n\n-\n\n\nTrigger a bitrise build\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n104\n\n\n\npodspec_dependency_versioning\n\n\n\nvia Cole Dunsby\n\n\n\n\n\nEdit the versions of your podspec dependencies\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nchange_podspec_dependency_version\n\n\n-\n\n\nThis action will modify the version of a dependency in your podspec.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n104\n\n\n\ndiscord_notifier\n\n\n\nvia Nikos Theodosis\n\n\n\n\n\nDiscord Notifier\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndiscord_notifier\n\n\n-\n\n\nDiscord Webhook Notifier\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n8\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n104\n\n\n\nsubmit_to_beta_app_review\n\n\n\nvia Dan Loewenherz\n\n\n\n\n\nSubmits an already processed build to Beta App Review.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsubmit_to_beta_app_review\n\n\n-\n\n\nSubmits an already processed build to Beta App Review.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n104\n\n\n\nslack_bot\n\n\n\nvia Manish Rathi\n\n\n\n\n\nA fastlane plugin to post slack message using bot api token. \ud83d\ude80\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npost_to_slack\n\n\n-\n\n\nPost a slack message\n\n\n\n\n\n\nfetch_files_slack\n\n\n-\n\n\nList files of any #channel using Slack bot \nfiles.list\n api.\n\n\n\n\n\n\nupdate_slack_message\n\n\n-\n\n\nUpdate a slack message using time-stamp(ts) value\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n104\n\n\n\nversion\n\n\n\nvia Jason Nam\n\n\n\n\n\nSet version\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nset_version\n\n\n-\n\n\nSet version\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n103\n\n\n\nupdate_team_identifier\n\n\n\nvia Jordan Bondo\n\n\n\n\n\nUpdates the Team Identifier for a given target\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_team_identifier\n\n\n-\n\n\nUpdates the Team Identifier for a given target\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n103\n\n\n\njira_build_number\n\n\n\nvia Tom Elrod\n\n\n\n\n\nInsert build number into related jira issues\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_build_number\n\n\n-\n\n\nAdds build number from CI as comment to associated jira issue.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\nanalyze_ios_ipa\n\n\n\nvia xiongzenghui\n\n\n\n\n\nanalysis iOS app/ipa multiple data. eg: 1) ipa basic info 2) Size occupied by each component = code + resource\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nanalyze_ios_ipa\n\n\n-\n\n\nanalysis iOS app/ipa multiple data. eg: 1) ipa basic info 2) Size occupied by each component = code + resource\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\ndingtalk_robot\n\n\n\nvia InfiniteReverse\n\n\n\n\n\nwebhook for dingtalk robot\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndingtalk_robot\n\n\n-\n\n\nwebhook for dingtalk robot\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\ncsv_translation\n\n\n\nvia Manish Rathi\n\n\n\n\n\nA fastlane plugin to manage translation using a CSV file under git repository. \ud83d\ude80\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_csv_feature_branch\n\n\n-\n\n\nCreate a csv feature branch.\n\n\n\n\n\n\ndelete_csv_translation_request\n\n\n-\n\n\nDelete a translation request based on identifier value.\n\n\n\n\n\n\nfetch_csv_branch\n\n\n-\n\n\nFetch a csv file branch.\n\n\n\n\n\n\ncreate_csv_translation_request\n\n\n-\n\n\nCreate a csv translation request.\n\n\n\n\n\n\nrebase_csv_translation_request\n\n\n-\n\n\nRebase a translation request based on identifier value.\n\n\n\n\n\n\nget_csv_translation_requests\n\n\n-\n\n\nGet CSV translation requests info\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n102\n\n\n\napp_store_build_info\n\n\n\nvia Rishabh Tayal\n\n\n\n\n\nGet build info from App Store Connect\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napp_store_build_info\n\n\n-\n\n\nGet build info from App Store Connect\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n20\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n101\n\n\n\nmocha_run_tests\n\n\n\nvia Adam T Armstrong\n\n\n\n\n\nRun Mocha Tests from within fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmocha_run_tests\n\n\n-\n\n\nRun Mocha Tests from within fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n101\n\n\n\nrollbar\n\n\n\nvia Evgrafov Denis\n\n\n\n\n\nHelps to upload sourcemaps/dsyms/proguard mapping/deploy report to Rollbar\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrollbar_proguard_upload\n\n\n-\n\n\nHelps to upload Proguard mappings to Rollbar\n\n\n\n\n\n\nrollbar_dsym_upload\n\n\n-\n\n\nHelps to upload Dsym to Rollbar\n\n\n\n\n\n\nrollbar_report_deploy\n\n\n-\n\n\nHelps to report deploy to Rollbar\n\n\n\n\n\n\nrollbar_sourcemaps_upload\n\n\n-\n\n\nHelps to upload sourcemaps to Rollbar\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n100\n\n\n\nzealot\n\n\n\nvia icyleaf\n\n\n\n\n\nUpload IPA/APK/dSYM/Proguard files to Zealot which it provides a self-host Over The Air Server for deployment of Android and iOS apps.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nzealot_version_check\n\n\n-\n\n\nCheck app version exists from Zealot\n\n\n\n\n\n\nzealot_sync_devices\n\n\n-\n\n\nCheck app version exists from Zealot\n\n\n\n\n\n\nzealot_debug_file\n\n\n-\n\n\nUpload dSYM/Proguard files to Zealot which it provides a self-host Over The Air Server for deployment of Android and iOS apps.\n\n\n\n\n\n\nzealot\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n100\n\n\n\nwrite_changelog_from_commits\n\n\n\nvia Lewis Bright\n\n\n\n\n\nWrites a changelog by pattern matching on git commits since the last tag. Organises these into sections and creates a changelog with the same name as the current version code\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwrite_changelog_from_commits\n\n\n-\n\n\nWrites a changelog file by pattern matching on git commits since the last tag.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n21\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n100\n\n\n\nandroid_version_manage\n\n\n\nvia futabooo\n\n\n\n\n\nManage Android App Versioning\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_set_version_code\n\n\n-\n\n\nSet the Version Code of your Android project\n\n\n\n\n\n\nandroid_commit_version_bump\n\n\n-\n\n\nThis action is like a commit_version_bump action for Android\n\n\n\n\n\n\nandroid_set_version_name\n\n\n-\n\n\nSet the Version Name of your Android project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n27\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n99\n\n\n\nandroid_versioning_kts\n\n\n\nvia zmunm\n\n\n\n\n\nandroid versioning for gradle kotlin DSL\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_value_from_build\n\n\n-\n\n\n-\n\n\n\n\n\n\nget_version_name\n\n\n-\n\n\nGet the version name of your project\n\n\n\n\n\n\nget_version_code\n\n\n-\n\n\nGet the version code of your project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n28\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n98\n\n\n\nrun_lane\n\n\n\nvia Jonathan Ritchie\n\n\n\n\n\nRun a specified fastlane lane in your project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrun_lane\n\n\n-\n\n\nRun a specified fastlane lane in your project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n21\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n98\n\n\n\nding_talk\n\n\n\nvia gaoxiang\n\n\n\n\n\nAuto send the pgyer app qr code to the ding talk.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nding_talk\n\n\n-\n\n\nSend the packaging information to the ding talk.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\napphoster\n\n\n\nvia JerryFans\n\n\n\n\n\nA simple plugin to upload your ipa file to AppHost Server in fastlane.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napphoster\n\n\n-\n\n\nA simple plugin to upload your ipa file to AppHost Server in fastlane.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\nxcresult_actions\n\n\n\nvia yutailang0119\n\n\n\n\n\nfastlane actions for \n.xcresult\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsummarize_xcresult_report\n\n\n-\n\n\nSummarize about test coverage rate from \n.xcresult\n file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\nmattermost\n\n\n\nvia cpfriend1721994\n\n\n\n\n\nFastlane plugin for push messages to Mattermost\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmattermost\n\n\n-\n\n\nFastlane plugin for push messages to Mattermost\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\ntransifex\n\n\n\nvia junjie\n\n\n\n\n\nbasic transifex wrapper\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntransifex\n\n\n-\n\n\nbasic transifex wrapper\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\ndroidicon\n\n\n\nvia @chrhsmt\n\n\n\n\n\nGenerate required icon sizes and iconset from a master application icon\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndroidicon\n\n\n-\n\n\nGenerate required icon sizes and iconset from a master application icon\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\nipa_install_plist_generate\n\n\n\nvia xiongzenghui\n\n\n\n\n\niOS ipa enterprise install plist generate plugn\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nipa_install_plist_generate\n\n\n-\n\n\niOS ipa enterprise install plist generate plugn\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n97\n\n\n\nrelease\n\n\n\nvia Cole Dunsby\n\n\n\n\n\nAutomates the steps to create a new release for a project.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmake_release\n\n\n-\n\n\nAutomates the steps to create a new release for a framework.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\nsend_e_mail\n\n\n\nvia huangj\n\n\n\n\n\na tool to sendmail\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsend_e_mail\n\n\n-\n\n\na tool to sendmail\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\ngitlab_changelog\n\n\n\nvia Z\u030cilvinas Sebeika\n\n\n\n\n\nGet changelog using GitLab API\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_changelog\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\nkuhverij\n\n\n\nvia Morten B\u00f8gh\n\n\n\n\n\nSimplified Code Coverage\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nkuhverij\n\n\ntesting\n\n\nSimplified Code Coverage\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-3\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n33\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\nmatch_keystore\n\n\n\nvia Christopher NEY\n\n\n\n\n\nEasily sync your Android keystores across your team\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmatch_keystore\n\n\n-\n\n\nEasily sync your Android keystores across your team\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n20\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-4\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n22\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\nbuildnumber\n\n\n\nvia Nick Griffith\n\n\n\n\n\nGenerates unique build numbers for iOS projects.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuildnumber\n\n\n-\n\n\nGenerates unique build numbers for iOS projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n30\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n96\n\n\n\ncreate_bitbucket_pull_request\n\n\n\nvia Issarapong Poesua\n\n\n\n\n\nThis lane creates create bitbucket pull request\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_bitbucket_pull_request\n\n\n-\n\n\nThis lane creates create bitbucket pull request\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n95\n\n\n\nupdate_provisioning_profile\n\n\n\nvia Duy Nguyen\n\n\n\n\n\nThis action will update xcodeproj with values extracted from your provisioning profile.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_provisioning_profile\n\n\n-\n\n\nThis action will update xcodeproj with values extracted from your provisioning profile.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n94\n\n\n\nsummonbin\n\n\n\nvia Jason Nam\n\n\n\n\n\nExecute command with summonbin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsummonbin\n\n\n-\n\n\nExecute command with summonbin\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n94\n\n\n\nphraseapp\n\n\n\nvia Issarapong Poesua\n\n\n\n\n\na phraseapp-cli tool wrapper\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nphraseapp\n\n\n-\n\n\na phraseapp-cli tool wrapper\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n94\n\n\n\nau_auto_close_upload\n\n\n\nvia Emil\n\n\n\n\n\nUpload artifacts to AppUnite's auto-close service\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nau_auto_close_upload\n\n\n-\n\n\nUpload artifacts to AppUnite's auto-close service\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n94\n\n\n\nalioss\n\n\n\nvia woodwu\n\n\n\n\n\nupload ipa/apk to aliyun oos server, and scan QRcode to install app on mobile phone.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nalioss\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n15\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-6\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n23\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n93\n\n\n\nxliff_en_gen\n\n\n\nvia alexander sun\n\n\n\n\n\ngen Localizable.strings file from xliff\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nexport_xliff\n\n\n-\n\n\nexport xliff for an xcode project\n\n\n\n\n\n\nxliff_en_gen\n\n\n-\n\n\nOverwrite project Localizable.strings file from English version xliff\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n21\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n93\n\n\n\nixguard\n\n\n\nvia Evgeniy Kubyshin\n\n\n\n\n\nixguard plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nixguard\n\n\n-\n\n\niXGuard build plugin\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n23\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n93\n\n\n\nreact_native_release\n\n\n\nvia Chris Ball\n\n\n\n\n\nSimplify releases for React Native apps.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncreate_fastlane_session\n\n\n-\n\n\nSimplify 2FA authentication for App Store Connect\n\n\n\n\n\n\nreact_native_release\n\n\n-\n\n\nSimplify releases for React Native apps\n\n\n\n\n\n\nencrypt_fastlane_vars\n\n\n-\n\n\nEncrypt fastlane vars for CI\n\n\n\n\n\n\ndecrypt_google_play_credentials\n\n\n-\n\n\nDecrypts app env vars and sets the values in the root .env file\n\n\n\n\n\n\nread_fastlane_session\n\n\n-\n\n\nSimplify 2FA authentication for App Store Connect\n\n\n\n\n\n\ncreate_changelog\n\n\n-\n\n\nDetermines if a release should happen based on conventional commits.\n\n\n\n\n\n\ngenerate_android_keystore\n\n\n-\n\n\nDecrypts app env vars and sets the values in the root .env file\n\n\n\n\n\n\naccept_android_sdk_licenses\n\n\n-\n\n\nAccepts Android sdk licenses\n\n\n\n\n\n\nadd_fastlane_var\n\n\n-\n\n\nAdds a single ENV var for fastlane to the encrypted repository\n\n\n\n\n\n\nencrypt_google_play_credentials\n\n\n-\n\n\nEncrypts credentials from Google Play and stores in the context repo.\n\n\n\n\n\n\ntag_release\n\n\n-\n\n\nTags a release based on a prefix, version, and build numbers\n\n\n\n\n\n\nencrypt_app_vars\n\n\n-\n\n\nEncrypts app env vars and stores them in the context repo.\n\n\n\n\n\n\ndetermine_release_from_commits\n\n\n-\n\n\nDetermines if a release should happen based on conventional commits.\n\n\n\n\n\n\ndecrypt_android_keystore\n\n\n-\n\n\nDecrypts app env vars and sets the values in the root .env file\n\n\n\n\n\n\ndecrypt_fastlane_vars\n\n\n-\n\n\nDecrypts fastlane ENV vars from the encrypted repo. Optionally sets them in ENV.\n\n\n\n\n\n\nadd_app_var\n\n\n-\n\n\nAdds a single ENV var to the encrypted repository\n\n\n\n\n\n\ndecrypt_app_vars\n\n\n-\n\n\nDecrypts app env vars and sets the values in the root .env file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n21\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n6\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-13\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n93\n\n\n\nredmine_upload\n\n\n\nvia Mattia Salvetti\n\n\n\n\n\nA fastlane plugin to upload file contents to Redmine\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nredmine_file_post\n\n\n-\n\n\nUploads a file in a Redmine Files section of a given Redmine project\n\n\n\n\n\n\nredmine_upload\n\n\n-\n\n\nA fastlane plugin to upload file contents to Redmine\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n92\n\n\n\nupdate_build_settings_key\n\n\n\nvia ungacy\n\n\n\n\n\nUpdated code signing settings from 'Automatic' to a specific profile\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupdate_build_settings_key\n\n\n-\n\n\nUpdates build settings key to a new value\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n24\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n92\n\n\n\nlast_fabric_version_code\n\n\n\nvia Andr\u00e9s Hern\u00e1ndez\n\n\n\n\n\nGet the last Fabric version code for your Android app\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlast_fabric_version_code\n\n\n-\n\n\nGet the last Fabric version code for your Android app\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\ncopy\n\n\n\nvia Jason Nam\n\n\n\n\n\nCopy file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncopy\n\n\n-\n\n\nCopy file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\nbomb_emoji\n\n\n\nvia Josh Holtz\n\n\n\n\n\n\ud83d\udca3\ud83d\udca5 No more emojis\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbomb_emoji\n\n\n-\n\n\nNo more emojis\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\ncoreos\n\n\n\nvia Oliver Letterer\n\n\n\n\n\nDeploy docker services to CoreOS hosts\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncoreos_deploy\n\n\n-\n\n\nDeploy docker services to CoreOS hosts\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n26\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n91\n\n\n\ngit_commit_changelog_to_markdown\n\n\n\nvia Fernando Berrios\n\n\n\n\n\nThis plugin will take the output of the changelog_from_git_commits plugin and convert it into markdown\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_commit_changelog_to_markdown\n\n\n-\n\n\nThis plugin will take the output of the 'changelog_from_git_commits' plugin and convert it into markdown\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n90\n\n\n\ntransifex_tool\n\n\n\nvia maydin\n\n\n\n\n\nTransifex tool that pulls translations using transifex rest api\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrest_pull\n\n\n-\n\n\nTransifex plugin for pull and push translations\n\n\n\n\n\n\ncli_pull\n\n\n-\n\n\nTransifex tool that pulls translations using transifex cli client\n\n\n\n\n\n\ncli_push\n\n\n-\n\n\nTransifex tool that push translations using transifex cli client\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n90\n\n\n\nlastpass\n\n\n\nvia Antoine Lamy\n\n\n\n\n\nEasily sync your Apple ID credentials stored in LastPass with your keychain using CredentialManager\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlastpass\n\n\n-\n\n\nEasily sync your Apple ID credentials stored in LastPass with your keychain using CredentialManager\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n15\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n90\n\n\n\nanalyze_ios_framework\n\n\n\nvia xiongzenghui\n\n\n\n\n\nanalysis ios framework in buildout or pods dir\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nanalyze_ios_framework\n\n\n-\n\n\nanalysis ios framework in buildout or pods dir\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nunsetinfoplistvalue\n\n\n\nvia David Cordero\n\n\n\n\n\nUnsets value to Info.plist of your project as native Ruby data structures\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunset_info_plist_value\n\n\nproject\n\n\nUnsets value to Info.plist of your project as native Ruby data structures\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n12\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nfabric_beta_unregistered_devices\n\n\n\nvia Slava Kornienko\n\n\n\n\n\nSHORT\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfabric_beta_unregistered_devices\n\n\n-\n\n\nGet unregistered devices from Fabric Beta.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nbuddybuild\n\n\n\nvia Jorge Revuelta\n\n\n\n\n\nThis plugin allows the communication with the Buddybuild API.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuddybuild_list_apps\n\n\n-\n\n\nRetrieves all the applications for a given account in Buddybuild.\n\n\n\n\n\n\nbuddybuild_get_latest_build_number\n\n\n-\n\n\nRetrieves the latest build number for a given Application Identifier.\n\n\n\n\n\n\nbuddybuild_show_latest_build\n\n\n-\n\n\nRetrieves the latest build for a given Application Identifier.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n89\n\n\n\nget_last_circleci_build_number\n\n\n\nvia Dawid van der Hoven\n\n\n\n\n\nfetches the last build number from circleci.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_last_circleci_build_number\n\n\n-\n\n\nfetches the last build number from circleci.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\nflint\n\n\n\nvia Jyrno Ader\n\n\n\n\n\nEasily sync your keystores across your team using git\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflint\n\n\n-\n\n\nDESCRIPTION\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\nsource_env_from_file\n\n\n\nvia xiongzenghui\n\n\n\n\n\nset ENV[\"key\"]=value from file like key=value\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource_env_from_file\n\n\n-\n\n\nset ENV['key']=value from file like key=value\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\nsous\n\n\n\nvia Jonathan Nogueira\n\n\n\n\n\nA tool to help create and sync keystores, as well as sign apks and aabs for the play store\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nplate\n\n\n-\n\n\nThis action signs apks using an existing keystore\n\n\n\n\n\n\npass\n\n\n-\n\n\nThis action retrieves existing keystores for the android build system\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\nxbluepill\n\n\n\nvia UladzimirKisialiou\n\n\n\n\n\nIt is a fastlane plugin that allows to use bluepill (linkedin library) as a fastlane command\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxbluepill\n\n\n-\n\n\nFastlane plugin that allows to use bluepill (linkedin library) as a fastlane command\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n5\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\ngit_build_versioning\n\n\n\nvia Mikko Va\u0308lima\u0308ki\n\n\n\n\n\nStore build numbers in git tags for distributed sequential builds\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreserve_git_build_number\n\n\n-\n\n\nUse git for tagging your builds for unique distributed sequential build numbers\n\n\n\n\n\n\nget_git_build_number\n\n\n-\n\n\nUse git for tagging your builds for unique distributed sequential build numbers\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n18\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\nreact_native_util\n\n\n\nvia Jimmy Dee\n\n\n\n\n\nCommunity utilities for React Native projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreact_pod\n\n\n-\n\n\nCommunity utilities for React Native projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\ndebug_file\n\n\n\nvia icyleaf\n\n\n\n\n\nCompress iOS/macApp dSYM or Android Proguard(mapping/R/AndroidManifest) to zip file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlist_dsym\n\n\nmisc\n\n\nFind and generate iOS/MacOS dSYM file(s) to zip file\n\n\n\n\n\n\nproguard\n\n\nmisc\n\n\nFind and generate Android proguard file(s) to zip file\n\n\n\n\n\n\ndsym\n\n\nmisc\n\n\nFind and generate iOS/MacOS dSYM file(s) to zip file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n88\n\n\n\nmatch_import\n\n\n\nvia Serhii Batsevych\n\n\n\n\n\nMatch repository custom import\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmatch_export_apns\n\n\n-\n\n\nMatch repository apns certs export\n\n\n\n\n\n\nmatch_export\n\n\n-\n\n\nMatch repository custom export\n\n\n\n\n\n\nmatch_import\n\n\n-\n\n\nMatch repository custom import\n\n\n\n\n\n\nmatch_import_apns\n\n\n-\n\n\nMatch repository apns certs import\n\n\n\n\n\n\nmatch_remove_invalid_apns\n\n\n-\n\n\nMatch repository apns certs remove invalid\n\n\n\n\n\n\nmatch_remove\n\n\n-\n\n\nMatch repository custom export\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n87\n\n\n\napperian\n\n\n\nvia Tomi Blank\n\n\n\n\n\nAllows to upload your IPA file to Apperian\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\napperian\n\n\n-\n\n\nAllows to upload your app file to Apperian\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n25\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n87\n\n\n\ncheck_good_version\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nChecks the version of the installed Good framework\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n25\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n86\n\n\n\nline_notify\n\n\n\nvia AKKHARAWAT CHAYAPIWAT\n\n\n\n\n\nTo be able to send message to Line Notify\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nline_notify\n\n\n-\n\n\nYou can use this action to send message via Line Notify\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n19\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n86\n\n\n\ndeploy_file_provider\n\n\n\nvia Kamil Krzyk, Przemys\u0142aw Wo\u015bko\n\n\n\n\n\nPrepares metadata files with structure ready for AppStore, PlayStore deploy\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n66\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n86\n\n\n\nincrement_version_code_android\n\n\n\nvia SimoneCorsini\n\n\n\n\n\nIncrement the version code of your android project, supporting different product flavors.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nincrement_version_code_android\n\n\n-\n\n\nIncrement the version code of your android project, supporting different flavors.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n86\n\n\n\nandroidmanifest_editor\n\n\n\nvia \u4efb\u798f\u65b0\n\n\n\n\n\nedit meta-data in AndroidManifest.xml\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodify_meta_data\n\n\n-\n\n\nedit meta-data in AndroidManifest.xml\n\n\n\n\n\n\nmodify_intent_scheme\n\n\n-\n\n\nedit scheme data of intent-filter in AndroidManifest.xml\n\n\n\n\n\n\nandroidmanifest_editor\n\n\n-\n\n\nedit meta-data in AndroidManifest.xml\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n22\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n86\n\n\n\ndingtalk\n\n\n\nvia Kim Huang\n\n\n\n\n\na fastlane plugin for dingtalk robot\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndingtalk\n\n\n-\n\n\na fastlane plugin for dingtalk.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\nandroid_change_package_name\n\n\n\nvia yeppao\n\n\n\n\n\nChange the package name in the AndroidManifest.xml file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_change_package_name\n\n\n-\n\n\nChange the package identifier in the AndroidManifest.xml file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n20\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\njira_issue_link\n\n\n\nvia Aleksey Novikov\n\n\n\n\n\nPlugin to add remote link to jira issue\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_issue_link\n\n\n-\n\n\nPlugin to add remote link to jira issue\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\ngoogle_chat_message\n\n\n\nvia Douglas Garcia\n\n\n\n\n\nSend simple text messages to Google Chat\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoogle_chat_message\n\n\n-\n\n\nSend simple text messages to Google Chat\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\ngit_authors\n\n\n\nvia Viktor Rutberg\n\n\n\n\n\nList authors of a Git repository\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_authors\n\n\n-\n\n\nList all authors of a Git repository\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n85\n\n\n\naws_sns_topic\n\n\n\nvia Levi Bostian\n\n\n\n\n\nFastlane plugin to public message to SNS topic.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naws_sns_topic\n\n\n-\n\n\nPublic a message to a AWS SNS topic.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n84\n\n\n\nwexlane\n\n\n\nvia Chris River\n\n\n\n\n\nCommon tools for CI\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_get_version\n\n\n-\n\n\nCommon tools for CI\n\n\n\n\n\n\nios_get_version\n\n\n-\n\n\nCommon tools for CI\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n84\n\n\n\npostmark\n\n\n\nvia Levi Bostian\n\n\n\n\n\nFastlane plugin to public message to SNS topic.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npostmark\n\n\n-\n\n\nSend emails via Postmark in fastlane!\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n5\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n83\n\n\n\nunity3d\n\n\n\nvia fuzhongqing\n\n\n\n\n\nfastlane for unity3d engine\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nunity3d\n\n\nbuilding\n\n\nfastlane plugin for unity3d engine\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\nxcode_tools_select\n\n\n\nvia Vincent HO-SUNE\n\n\n\n\n\nSets the DEVELOPER_DIR environment, used by fastlane to run Xcode command line tools, to a specific Xcode version found on the current system.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxcode_tools_select\n\n\nbuilding\n\n\nSet the [version] of the default Xcode Command Line Tools path to use.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\nsvn_commit\n\n\n\nvia cleexiang\n\n\n\n\n\nsvn plugin with fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsvn_commit\n\n\n-\n\n\nCommit to svn repos with fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\nhello_test\n\n\n\nvia Gianfranco Manganiello\n\n\n\n\n\ntest\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nhello_test\n\n\n-\n\n\ntest\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\nunreleased_changelog\n\n\n\nvia Manish Rathi\n\n\n\n\n\nA fastlane plugin to manage unreleased changelog using a YAML file. \ud83d\ude80\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_unreleased_changelog\n\n\n-\n\n\nGet the unreleased changelog\n\n\n\n\n\n\nadd_unreleased_changelog\n\n\n-\n\n\nAdd a new entry in unreleased changelog\n\n\n\n\n\n\ndelete_unreleased_changelog\n\n\n-\n\n\nDelete changelog entry from unreleased changelog\n\n\n\n\n\n\nstamp_unreleased_changelog\n\n\n-\n\n\nStamp unreleased changelog\n\n\n\n\n\n\nensure_unreleased_changelog\n\n\n-\n\n\n-\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n82\n\n\n\nmaintenance\n\n\n\nvia Jimmy Dee\n\n\n\n\n\nMaintenance actions for plugin repos.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrake\n\n\n-\n\n\nGeneral-purpose rake action to invoke tasks from a Rakefile or elsewhere.\n\n\n\n\n\n\nupdate_rubocop\n\n\n-\n\n\nAutomatically updates RuboCop to the latest version.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n81\n\n\n\ngit_status_clean\n\n\n\nvia zhangqi\n\n\n\n\n\nclean git status\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_status_clean\n\n\n-\n\n\nclean git status\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n81\n\n\n\nuser_default_get\n\n\n\nvia zhangqi\n\n\n\n\n\nget value like ios userDefault\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuser_default_get\n\n\n-\n\n\nget value like ios userDefault\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n81\n\n\n\npoeditor\n\n\n\nvia Kostia Myts\n\n\n\n\n\nUpload strings to POEditor\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_strings_to_poeditor\n\n\n-\n\n\nUpload strings to POEditor\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n81\n\n\n\nuser_default_set\n\n\n\nvia zhangqi\n\n\n\n\n\nfastlane save user default like ios userDefault\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nuser_default_set\n\n\n-\n\n\nfastlane save user default like ios userDefault\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n21\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n80\n\n\n\nandroid_update_package_identifier\n\n\n\nvia Jonathan Nogueira\n\n\n\n\n\nChanges the applicationId inside of your build.gradle file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_update_package_identifier\n\n\n-\n\n\nChanges the applicationId inside of your build.gradle file. Does not change the AndroidManifest\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n80\n\n\n\ndanger_result\n\n\n\nvia marumemomo\n\n\n\n\n\nGet danger data plugin.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndanger_result\n\n\n-\n\n\nGet danger data plugin.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n80\n\n\n\nbuggly\n\n\n\nvia zhuyunlong\n\n\n\n\n\n\u4e0a\u4f20Bugly\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbuggly\n\n\n-\n\n\nUpload the dSYM file to Buggly crash analyze system.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n79\n\n\n\ngenerate_xliff\n\n\n\nvia Kostia Myts\n\n\n\n\n\nGenerates XLIFF file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngenerate_xliff\n\n\n-\n\n\nGenerates XLIFF file\n\n\n\n\n\n\nremove_xliff_artifacts\n\n\n-\n\n\nGenerates XLIFF file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n79\n\n\n\nxamarin\n\n\n\nvia Thomas Charriere\n\n\n\n\n\nBuild Xamarin Android + iOS projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmsbuild\n\n\n-\n\n\nBuild Solutions with msbuild\n\n\n\n\n\n\nnuget_restore\n\n\n-\n\n\nNuget\n\n\n\n\n\n\nxamarin_android\n\n\n-\n\n\nBuild Xamarin Android + iOS projects\n\n\n\n\n\n\nxamarin_ios\n\n\n-\n\n\nBuild Xamarin Android + iOS projects\n\n\n\n\n\n\nnuget_install\n\n\n-\n\n\nNuget\n\n\n\n\n\n\nclean\n\n\n-\n\n\nClean artifacts\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n15\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n79\n\n\n\nandroid_change_app_name\n\n\n\nvia MaximusMcCann\n\n\n\n\n\nChanges the manifest's label attribute (appName).  Stores the original name for revertinng.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n59\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n79\n\n\n\nenumerated_translations\n\n\n\nvia Mads B\u00f8geskov\n\n\n\n\n\nConverts a strings file to an enum, to make it more safe to access translations.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nenumerated_translations\n\n\n-\n\n\nConverts a strings file to an enum, to make it more safe to access translations.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n78\n\n\n\nschedule\n\n\n\nvia marumemomo\n\n\n\n\n\nRun lane from current time\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_lane\n\n\n-\n\n\nRun lane from current time\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n78\n\n\n\ndownload_hocky_build\n\n\n\nvia Anton Morozov\n\n\n\n\n\nDownload newest build from HockeyApp (iOS & Android)\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_hocky_build\n\n\n-\n\n\nDownload newest build from HockeyApp (iOS & Android)\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n77\n\n\n\nemerge\n\n\n\nvia Emerge Tools, Inc\n\n\n\n\n\nFastlane plugin for Emerge\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nemerge\n\n\n-\n\n\nFastlane plugin for Emerge\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n77\n\n\n\nxamversion\n\n\n\nvia Jake Barnby\n\n\n\n\n\nRead and manipulate Android and iOS app versions.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxamversion\n\n\n-\n\n\nRead and manipulate Android and iOS app versions.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n77\n\n\n\nlock_keychain\n\n\n\nvia Alex Antonyuk\n\n\n\n\n\nPlugin for locking unlocked keychain\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlock_keychain\n\n\n-\n\n\nPlugin for locking unlocked keychain\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n20\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n77\n\n\n\ngoodify_info_plist\n\n\n\nvia Lyndsey Ferguson\n\n\n\n\n\nThis plugin will update the plist so that the built application can be deployed and managed within BlackBerry's Good Dynamics Control Center for Enterprise Mobility Management.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n45\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n77\n\n\n\npoesie\n\n\n\nvia Patrik Potoc\u030cek\n\n\n\n\n\nExports translations from POEditor using poesie tool.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npoesie\n\n\n-\n\n\nExports translations from POEditor using poesie tool.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n4\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n76\n\n\n\ndiscord\n\n\n\nvia Matheus Gambati\n\n\n\n\n\nDiscord integration with Fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndiscord\n\n\n-\n\n\nDiscord integration with Fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n76\n\n\n\nflutter_build\n\n\n\nvia viniciusmo\n\n\n\n\n\nBuild your flutter project directly from your lane.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nflutter_build\n\n\n-\n\n\nBuild our project directly from your lane.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n76\n\n\n\nappmetrica\n\n\n\nvia Yandex, LLC\n\n\n\n\n\nUpload dSYM symbolication files to AppMetrica\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_symbols_to_appmetrica\n\n\n-\n\n\nUpload dSYM symbolication files to AppMetrica\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n27\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n35\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n76\n\n\n\nbitrise_bcsymbolmaps\n\n\n\nvia Oleksandr Skrypnyk\n\n\n\n\n\nDownload BCSymbolMaps from Bitrise\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbitrise_download_bcsymbolmaps\n\n\n-\n\n\nDownloads BCSymbolMaps from Bitrise before uploading them to a crash reporting tool.\n\n\n\n\n\n\nbitrise_clean_bcsymbolmaps\n\n\n-\n\n\nCleans up downloaded artifacts.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n76\n\n\n\naws_device_farm_upload\n\n\n\nvia Takuma Homma\n\n\n\n\n\nUploads specified file to AWS Device Farm project\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\naws_device_farm_upload\n\n\n-\n\n\nUploads specified file to AWS Device Farm project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n75\n\n\n\nxambuild\n\n\n\nvia Jake Barnby\n\n\n\n\n\nFastlane plugin to make Xamarin builds easy\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxambuild\n\n\n-\n\n\nEasily build and sign your Xamarin iOS or Android app using \nxambuild\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n75\n\n\n\nget_application_id\n\n\n\nvia Helder Pinhal\n\n\n\n\n\nGet the applicationId of an Android project.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n43\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n75\n\n\n\nmanaged_google_play\n\n\n\nvia Jan Piotrowski\n\n\n\n\n\nCreate Managed Google Play Apps\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_managed_play_store_publishing_rights\n\n\n-\n\n\nObtain publishing rights for custom apps on Managed Google Play Store\n\n\n\n\n\n\nmanaged_google_play\n\n\n-\n\n\nCreate Managed Google Play Apps\n\n\n\n\n\n\ncreate_app_on_managed_play_store\n\n\n-\n\n\nCreate Managed Google Play Apps\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-5\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n74\n\n\n\npromo_code\n\n\n\nvia marumemomo\n\n\n\n\n\npromo_code\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npromo_code\n\n\n-\n\n\npromo_code\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n74\n\n\n\nline_message\n\n\n\nvia Wasith Theerapattrathamrong\n\n\n\n\n\nUse to send message to Line chat\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nline_message\n\n\nnotifications\n\n\nUse to send message to Line chat\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n10\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n74\n\n\n\ndependency_manager_outdated\n\n\n\nvia matsuda\n\n\n\n\n\nFastlane plugin to check project's outdated dependencies\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncocoapods_outdated\n\n\n-\n\n\nCheck outdated CocoaPods dependencies\n\n\n\n\n\n\ndependency_manager_outdated\n\n\n-\n\n\nFastlane plugin to check project's outdated dependencies\n\n\n\n\n\n\ncarthage_outdated\n\n\n-\n\n\nCheck outdated Carthage dependencies\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n73\n\n\n\nresetsims\n\n\n\nvia Lui\u0301s Esteves\n\n\n\n\n\nMakes an reset on xcode simulators\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n53\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n73\n\n\n\ngitlab_get_max_version_branch\n\n\n\nvia xiongzenghui\n\n\n\n\n\nget a max version branch from a gitlab project, like: master_5.11.9\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_get_max_version_branch\n\n\n-\n\n\nget a max version branch from a gitlab project, like: master_5.11.9\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n6\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n73\n\n\n\npublish_dropbox\n\n\n\nvia Tommyvanvliet\n\n\n\n\n\nThis plugin  publishes artifacts over to Dropbox via a generated api token from Dropbox Developer API.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npublish_dropbox\n\n\n-\n\n\nThis plugin  publishes artifacts over to Dropbox via a generated api token from Dropbox Developer API.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n73\n\n\n\ndownload_object_from_s3\n\n\n\nvia aomathwift\n\n\n\n\n\nDownload objects from AWS S3\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_object_from_s3\n\n\n-\n\n\nDownload objects from AWS S3\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n15\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n72\n\n\n\nupload_dsym\n\n\n\nvia xiongzenghui\n\n\n\n\n\nupload dsym to your specify server\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_dsym\n\n\n-\n\n\nupload dsym to your specify server\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n14\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n71\n\n\n\nding_talk_msg_push\n\n\n\nvia asynclog\n\n\n\n\n\ndingTalk robot msg push tool\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nding_talk_msg_push\n\n\n-\n\n\ndingTalk robot msg push tool\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n71\n\n\n\ngit_clone\n\n\n\nvia xiongzenghui\n\n\n\n\n\na wrapper for git clone command\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_clone\n\n\nsource_control\n\n\nthis is a wrapper for git clone command\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n71\n\n\n\ngit_pull_branch\n\n\n\nvia Bhuvanesh BS\n\n\n\n\n\npull code from different branch\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_pull_branch\n\n\n-\n\n\npull code from different branch\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n70\n\n\n\nbitwarden\n\n\n\nvia Ilija Boshkov\n\n\n\n\n\nBitwarden CLI warpper plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbitwarden_login\n\n\n-\n\n\nYou can use this action to login to BitWarden and unlock the vault.\n\n\n\n\n\n\nbitwarden_unlock_vault\n\n\n-\n\n\nYou can use this action to download an item's attachment from BitWarden.\n\n\n\n\n\n\nbitwarden_get_object\n\n\n-\n\n\nYou can use this action to download an item's attachment from BitWarden.\n\n\n\n\n\n\nbitwarden_download_attachment\n\n\n-\n\n\nYou can use this action to download an item's attachment from BitWarden.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n15\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n69\n\n\n\nrelease_version\n\n\n\nvia Leon Keijzer\n\n\n\n\n\nThis plugin makes it possible to release an already approved version in AppStore Connect\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nreject_version\n\n\n-\n\n\nThis action makes it possible to reject a binary in AppStore Connect\n\n\n\n\n\n\nrelease_version\n\n\n-\n\n\nThis plugin makes it possible to release an already approved version in AppStore Connect\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n69\n\n\n\ngitlab_branch_diff\n\n\n\nvia xiongzenghui\n\n\n\n\n\ngitlab compare two branch to get diffs\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_branch_diff\n\n\n-\n\n\ngitlab compare two branch to get diffs\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\nsecrets\n\n\n\nvia Cyril Cermak, Jo\u0308rg Nestele\n\n\n\n\n\nSecurely store secrets in source code.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndecrypt_secrets\n\n\n-\n\n\nSecurely store secrets in source code\n\n\n\n\n\n\nencrypt_secrets\n\n\n-\n\n\nSecurely store secrets in source code\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\nmake\n\n\n\nvia xiongzenghui\n\n\n\n\n\nLinux GNU Makefile make wrapper\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmake\n\n\nbuilding\n\n\nLinux GNU Makefile make wrapper\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\nacknowledgements\n\n\n\nvia Simon Rice, Christophe Knage\n\n\n\n\n\nUse Fastlane to give credit where it's rightfully due\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nacknowledgements\n\n\n-\n\n\nUse Fastlane to give credit where it's rightfully due.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n23\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\nresize_screenshots\n\n\n\nvia Levi Bostian\n\n\n\n\n\nResize screenshots taken from your simulator to use for Frameit.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nresize_screenshots\n\n\n-\n\n\nResize screenshots taken from your simulator to use for Frameit.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n17\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-2\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\ngit_add_tag\n\n\n\nvia xiongzenghui\n\n\n\n\n\ngit add tag wrapper\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_add_tag\n\n\nsource_control\n\n\ngit add tag wrapper\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n68\n\n\n\ndropbox_upload\n\n\n\nvia jason\n\n\n\n\n\nupload files to dropbox\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndropbox_upload\n\n\n-\n\n\nupload files to dropbox\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n11\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\njira_set_feature_build\n\n\n\nvia Tommy Sadiq Hinrichsen\n\n\n\n\n\nTags passed in Jira issue with a feature build url from parameter :url\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\ngsheet_metadata\n\n\n\nvia Kevin Morais\n\n\n\n\n\nGenerate metadata from Google Spreadsheet\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngsheet_metadata\n\n\n-\n\n\nGenerate metadata from Google Spreadsheet\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\nandroid_channels\n\n\n\nvia icyleaf\n\n\n\n\n\nPackage unsign apk with channels\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nandroid_channels\n\n\nbuilding\n\n\nPackage apk file with channels\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\ndeploy_aws_s3_cloudfront\n\n\n\nvia Hector\n\n\n\n\n\nDeploy local directory to AWS S3 bucket and invalidate CloudFront\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n67\n\n\n\nbugtags\n\n\n\nvia wliu6\n\n\n\n\n\nUpload symbols to Bugtags\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbugtags\n\n\n-\n\n\nUpload symbols to Bugtags\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n13\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n67\n\n\n\nspeculid\n\n\n\nvia Leo Dion\n\n\n\n\n\nUse speculid to easily manage graphics in Xcode projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nspeculid\n\n\n-\n\n\nUse speculid to Easily Manage Graphics in Xcode Projects\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n66\n\n\n\nsunny_project\n\n\n\nvia ericmartineau\n\n\n\n\n\nSunny flutter projects\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrename_assets\n\n\n-\n\n\nRenames assets, generates an assets.dart file to reference them.\n\n\n\n\n\n\npubspec_doctor\n\n\n-\n\n\nModify pubspec for local or git development\n\n\n\n\n\n\nsunny_release\n\n\n-\n\n\n-\n\n\n\n\n\n\nincrease_version\n\n\n-\n\n\nIncrement version number in pubspec.yaml file\n\n\n\n\n\n\nsunny_build_runner\n\n\n-\n\n\nCleans and runs flutter build_runner\n\n\n\n\n\n\nsunny_build_web\n\n\n-\n\n\nBuilds a web project\n\n\n\n\n\n\nlocal_packages\n\n\n-\n\n\nChecks out local dart packages\n\n\n\n\n\n\nfinalize_version\n\n\n-\n\n\n-\n\n\n\n\n\n\nrelease_notes\n\n\n-\n\n\nGet or retrieve release notes from git\n\n\n\n\n\n\ngenerate_icons\n\n\n-\n\n\nGenerates a flutter icon set as a font\n\n\n\n\n\n\ndart_package_status\n\n\n-\n\n\n-\n\n\n\n\n\n\ncurr_semver\n\n\n-\n\n\nGets the current version from the project's pubspec.yaml file\n\n\n\n\n\n\npub_publish\n\n\n-\n\n\nExecutes pub publish command\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n66\n\n\n\nlogme\n\n\n\nvia Lui\u0301s Esteves\n\n\n\n\n\nProvides a simple way to get logs from two delta commits\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n46\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n65\n\n\n\ngoyuyun\n\n\n\nvia vincentwu08\n\n\n\n\n\n\u4e00\u952e\u53d1\u5e03\u81f3\u4e70\u597d\u4e91\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoyuyun\n\n\n-\n\n\n\u4e00\u952e\u53d1\u5e03\u81f3\u4e70\u597d\u4e91\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n7\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n65\n\n\n\nmailjet\n\n\n\nvia thibaut noah\n\n\n\n\n\nplugin to send mail notifications for build release\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmailjet\n\n\n-\n\n\nSend a custom message to an email group with mailjet\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n65\n\n\n\napp_previews\n\n\n\nvia Fausto\n\n\n\n\n\nUpload app previews to the App Store Connect\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nupload_app_previews\n\n\n-\n\n\nUpload app previews to the App Store Connect\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n65\n\n\n\ns3_cert\n\n\n\nvia Josh Lesch\n\n\n\n\n\nStore and install encrypted Certs from s3\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ns3_upload_certs\n\n\n-\n\n\nUpload encrypted certs to s3\n\n\n\n\n\n\ns3_cert\n\n\n-\n\n\nPull Certs from s3 and install them into keychain.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n65\n\n\n\ncheckbuild\n\n\n\nvia Johannes Steudle\n\n\n\n\n\nThis plugin will check any binary library for unwanted symbols and architectures\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncheckbuild\n\n\n-\n\n\nThis plugin will check any binary library for unwanted symbols and architectures.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n65\n\n\n\nrm_derived_data\n\n\n\nvia xiongzenghui\n\n\n\n\n\nde\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nrm_derived_data\n\n\nbuilding\n\n\nafter build finish remove xx.xcworkspace/xx.xcodeproj specify DerivedDatagst/*\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n64\n\n\n\nget_derived_data_path\n\n\n\nvia Rajiv Shah\n\n\n\n\n\nRetrieves the path of a workspace in DerivedData\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_derived_data_path\n\n\n-\n\n\nRetrieves the path of a workspace in DerivedData\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n12\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n64\n\n\n\nappsigner\n\n\n\nvia Valeriy Makarshin\n\n\n\n\n\nAppSigner\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappsigner\n\n\n-\n\n\nAppSigner\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n64\n\n\n\nci_apps\n\n\n\nvia JiaqiangSong\n\n\n\n\n\nConfig multiple apps of CI\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_extensions\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nci_apps\n\n\n-\n\n\nConfig multiple apps of CI\n\n\n\n\n\n\nget_ci_apps\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nget_ci_app_value\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nget_ci_app\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nget_emtitlements_plist_file_path\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nget_target_type\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nget_info_plist_file_path\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n64\n\n\n\ngitlab_merge_request_add_note\n\n\n\nvia xiongzenghui\n\n\n\n\n\nadd merge request note for gitlab server api\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_merge_request_add_note\n\n\n-\n\n\nadd merge request note for gitlab server api\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n63\n\n\n\ngitlab_merge_request_participants\n\n\n\nvia xiongzenghui\n\n\n\n\n\nGet a list of merge request participants\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_merge_request_participants\n\n\n-\n\n\nGet a list of merge request participants\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n63\n\n\n\ncuttly_api\n\n\n\nvia Yalan\n\n\n\n\n\nfastlane plugin for cuttly.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncuttly_api\n\n\n-\n\n\nfastlane plugin for cuttly.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n63\n\n\n\nappcenter_get_recent_release_version\n\n\n\nvia Kitti Pariyaakkarakul\n\n\n\n\n\nGet recent release version from appcenter\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nappcenter_get_recent_release_version\n\n\n-\n\n\nGet recent release version from appcenter\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n63\n\n\n\ngit_remove_tag\n\n\n\nvia xiongzenghui\n\n\n\n\n\nremove git origin and remote repo tag\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_remove_tag\n\n\nsource_control\n\n\nremove git origin and remote repo tag\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n8\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n63\n\n\n\nbowl\n\n\n\nvia Benjamin Wulff\n\n\n\n\n\nHandles uploads to BOWL backend\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbowl\n\n\n-\n\n\nHandles uploads to BOWL backend\n\n\n\n\n\n\nget_gradle_property\n\n\n-\n\n\n-\n\n\n\n\n\n\nset_gradle_property\n\n\n-\n\n\nSet the value of your project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n63\n\n\n\nreport\n\n\n\nvia Bruno Migue\u0302ns\n\n\n\n\n\nAfter an action, like scan for instance, you're able to generate a report file. This fastlane plugin gives you a way to upload and share your report using Slack.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n31\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n62\n\n\n\nbugly\n\n\n\nvia chaosky\n\n\n\n\n\nUpload dSYM to bugly.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nbugly\n\n\n-\n\n\nUpload dSYM to bugly.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n62\n\n\n\nload_erb_config\n\n\n\nvia Joaomon7eiro\n\n\n\n\n\nFastlane plugin to read erb configuration file\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nload_erb_config\n\n\n-\n\n\nFastlane plugin to load configuration object from yml file\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n4\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n62\n\n\n\nupdate_app_associated_domains\n\n\n\nvia Nicolas TRUTET\n\n\n\n\n\n[iOS] Replace associated domains array for the key \n in the entitlement file.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n30\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\nimport_from_url\n\n\n\nvia Doruk Kangal\n\n\n\n\n\nImport another Fastfile from given url to use its lanes\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nimport_from_url\n\n\n-\n\n\nImport another Fastfile from given url to use its lanes\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\ngitlab_increate_line_notes\n\n\n\nvia xiongzenghui\n\n\n\n\n\nfilter gitlab merge request changes files & swiftlint json, last add line code with gitlab discussion\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitlab_increate_line_notes\n\n\n-\n\n\nfilter gitlab merge request changes files & swiftlint json, last add line code with gitlab discussion\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\nfetch_metadata_from_google_sheets\n\n\n\nvia kurarararara\n\n\n\n\n\nGet App Store metadata from Google Sheets.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfetch_metadata_from_google_sheets\n\n\n-\n\n\nGet App Store metadata from Google Sheets.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\nmoss\n\n\n\nvia Shaggon du\n\n\n\n\n\nMoss is a tool that allows developers on Apple platforms to use any frameworks as a shared cache for frameworks built with Carthage.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmoss\n\n\n-\n\n\nmoss is a tool that allows developers on Apple platforms to use any frameworks as a shared cache for frameworks built with Carthage.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n11\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\nwork_wechat\n\n\n\nvia DevZhang\n\n\n\n\n\nwork wecaht webhook\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nwork_wechat\n\n\n-\n\n\nwork wecaht webhook\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n9\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n61\n\n\n\navd_emulator\n\n\n\nvia Guillaume Elloy\n\n\n\n\n\nThis plugin is listing available android avd emulators, allowing you to start the selected one.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstart_avd_emulator\n\n\n-\n\n\nThis plugin is listing available android avd emulators, allowing you to start the selected one.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n9\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n60\n\n\n\nu3d\n\n\n\nvia Jerome Lacoste\n\n\n\n\n\nFastgame's u3d (a Unity3d CLI) integration\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n28\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n59\n\n\n\nfivethree_ionic\n\n\n\nvia Marc Stammerjohann\n\n\n\n\n\nFastlane plugin for Ionic v4 Projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n39\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n59\n\n\n\ncircle_ci\n\n\n\nvia Manish Rathi\n\n\n\n\n\nA fastlane plugin for Circle CI. \ud83d\ude80\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndownload_circle_ci_artifact\n\n\n-\n\n\nDownload the CircleCI artifact file.\n\n\n\n\n\n\ntrigger_circle_ci_job\n\n\n-\n\n\nTriggers a new CircleCI Job\n\n\n\n\n\n\nget_circle_ci_build_status\n\n\n-\n\n\nCircleCI build status\n\n\n\n\n\n\nget_circle_ci_artifacts\n\n\n-\n\n\nList the CircleCI artifacts.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n59\n\n\n\ngitter\n\n\n\nvia Andrew Havens\n\n\n\n\n\nA Fastlane plugin for sending a message to a Gitter room.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngitter\n\n\n-\n\n\nSend a message to a Gitter room.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n6\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n58\n\n\n\nrename_android_package\n\n\n\nvia Josh Holtz\n\n\n\n\n\nRenames Android package\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n38\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n58\n\n\n\nredpill\n\n\n\nvia omniprojects\n\n\n\n\n\nFastlane plugin to use bluepill in fastlane\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nredpill\n\n\n-\n\n\nPlugin to use bluepill in fastlane\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n3\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n10\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n19\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n-1\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n18\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n58\n\n\n\nazuredevops_envvars\n\n\n\nvia Star Leasing Company\n\n\n\n\n\nA Fastlane plugin that provides passthrough access to AzureDevOps environment variables\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nazuredevops_envvars\n\n\n-\n\n\nA Fastlane plugin that provides passthrough access to AzureDevOps environment variables\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n57\n\n\n\njira_link\n\n\n\nvia David Brooks\n\n\n\n\n\nThis plugin allows you to link two tickets together in JIRA\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_link\n\n\nmisc\n\n\nThis plugin allows you to link two tickets together in JIRA\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n57\n\n\n\ndeploy_module_bintray\n\n\n\nvia Bruno Oliveira\n\n\n\n\n\nGradle action to deploy a Module from an Android project\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndeploy_module_bintray\n\n\n-\n\n\nGradle actions to deploy a module from an Android project\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n6\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n18\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n57\n\n\n\npgyer_jvtd\n\n\n\nvia \u9648\u78ca\u7684MacBook Pro\n\n\n\n\n\n\u84b2\u516c\u82f1\u805a\u901a\u8fbe\u63d2\u4ef6\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n37\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n55\n\n\n\ntestbm\n\n\n\nvia Bemobile\n\n\n\n\n\nA Test plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntestbm\n\n\n-\n\n\nA Test plugin\n\n\n\n\n\n\nsalutation\n\n\n-\n\n\nReturns hello world\n\n\n\n\n\n\nbmslack\n\n\n-\n\n\nSends a message to a Slack chat specified in the SLACK_URL environment variable\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n55\n\n\n\nmicrosft_teams_message_card\n\n\n\nvia Dorian Cheignon\n\n\n\n\n\nSend a message card to your Microsoft teams channel\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmicrosft_teams_message_card\n\n\nnotifications\n\n\nSend a message card to your Microsoft teams channel\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n55\n\n\n\ncodemagic\n\n\n\nvia Mikhail Matsera\n\n\n\n\n\nFastlane plugin to trigger a Codemagic build with some options\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncodemagic\n\n\n-\n\n\nFastlane plugin to trigger a Codemagic build with some options\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n54\n\n\n\nfabulove\n\n\n\nvia carry\n\n\n\n\n\n\"fabulove\" distribution system fastlane plugin\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfabulove\n\n\n-\n\n\n'fabulove' distribution system fastlane plugin\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n2\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n53\n\n\n\ngoogle_chat_v2\n\n\n\nvia \u201cmao-karrostech\u201d\n\n\n\n\n\ngoogle chat v2\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngoogle_chat_v2\n\n\n-\n\n\nSend message to google chat v2\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n53\n\n\n\ngit_import\n\n\n\nvia Dmitry Frishbuter\n\n\n\n\n\nImport all required fastlane dependencies from the git repository and keep your Fastfile simple!\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ngit_import\n\n\n-\n\n\nImport all required fastlane dependencies from the git repository and keep your Fastfile simple!\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n1\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n53\n\n\n\njira_ticket\n\n\n\nvia Dorian Cheignon\n\n\n\n\n\nget ticket in jira board\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\njira_ticket\n\n\n-\n\n\nget ticket in jira board\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n53\n\n\n\nappcenter_get_version\n\n\n\nvia Markus Kramm\n\n\n\n\n\nget the latest build version from the app center\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n33\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n52\n\n\n\nteams_message_card\n\n\n\nvia Dorian Cheignon\n\n\n\n\n\nSend a message card to your Microsoft teams channel\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nteams_message_card\n\n\nnotifications\n\n\nSend a message card to your Microsoft teams channel\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n1\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n50\n\n\n\nopen_finder\n\n\n\nvia xiongzenghui\n\n\n\n\n\nthis is tool for mac os x to open finder\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n48\n\n\n\ndingtalk_msg\n\n\n\nvia fuzhongqing\n\n\n\n\n\ndingtalk robot\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ndingtalk_msg\n\n\n-\n\n\ndingtalk robot\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n47\n\n\n\nkillsimulator\n\n\n\nvia Lui\u0301s Esteves\n\n\n\n\n\nKill all the open simulatores\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n27\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n45\n\n\n\nfiv_increment_build_no\n\n\n\nvia Fivethree\n\n\n\n\n\nfastlane plugin for ionic 4\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfivethree_ionic\n\n\n-\n\n\nFastlane plugin for Ionic v4 Projects\n\n\n\n\n\n\nfiv_update_version_and_build_no\n\n\n-\n\n\nFastlane plugin for Ionic v4 Projects\n\n\n\n\n\n\nfiv_update_version\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nfiv_increment_build_no\n\n\n-\n\n\nfastlane plugin for ionic 4\n\n\n\n\n\n\nfiv_build_ionic_android\n\n\n-\n\n\nA short description with <= 80 characters of what this action does\n\n\n\n\n\n\nfiv_add_transparent_statusbar\n\n\n-\n\n\nYou can use this action to do cool things...\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n6\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n14\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n45\n\n\n\nemoji_fetcher\n\n\n\nvia Felix Krause\n\n\n\n\n\nFetch the emoji font file and copy it to a local directory\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n13\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n44\n\n\n\nupdate_device_name\n\n\n\nvia huyanping\n\n\n\n\n\nupdate device name\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n43\n\n\n\nitargetchecker\n\n\n\nvia Catalin Prata\n\n\n\n\n\nChecks the xcode proj file for targets and points out which files from the project are not present in a certain target.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nitargetchecker\n\n\n-\n\n\nChecks the xcodeproj file for targets and points out which files from the project are not present in a certain target.\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n9\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n2\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n5\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n50\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n16\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n8\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n3\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n41\n\n\n\nfetch_itc_versions\n\n\n\nvia Bennett Rogers\n\n\n\n\n\nReturns a listing of all app versions and their latest builds from iTunes Connect.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n40\n\n\n\nau_danger_gitlab\n\n\n\nvia Emil\n\n\n\n\n\nAllows to use Danger on GitLab\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n20\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n39\n\n\n\njandi_webhook\n\n\n\nvia respecu\n\n\n\n\n\nwebhook for jandi\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n38\n\n\n\npgyer-password\n\n\n\nvia Kila2\n\n\n\n\n\ndistribute app to pgyer beta testing service\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n38\n\n\n\ntransifex_api\n\n\n\nvia alexander sun\n\n\n\n\n\nbasic transifex api wrapper\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n38\n\n\n\nimagesgoldenrun\n\n\n\nvia Lui\u0301s Esteves\n\n\n\n\n\nthis allows comparing images from a golden run with the actual results\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n18\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n37\n\n\n\nprofile_expiration_info\n\n\n\nvia Steven Chung\n\n\n\n\n\nReturns if the provisioning profile has expired and the DateTime it expires\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n37\n\n\n\nversion_from_last_tag\n\n\n\nvia Jeff Stein\n\n\n\n\n\nPerform a regex on last (latest) git tag and perform a regex to extract a version number such as Release 1.2.3\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n17\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n37\n\n\n\ntestin\n\n\n\nvia rudy.li\n\n\n\n\n\ntestin\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n36\n\n\n\nrescan_flaky_tests\n\n\n\nvia Ichiko Moro\n\n\n\n\n\nRe-run \nscan\n action for each failed test cases.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n36\n\n\n\nxcode8_srgb_workaround\n\n\n\nvia Siarhei Fiedartsou\n\n\n\n\n\nConverts PNGs and JPEGs in your project to sRGB format to avoid crashes when building with Xcode 8 for iOS 8 and earlier deployment target\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n36\n\n\n\ngen_dev_workspace\n\n\n\nvia Andrew Breckenridge\n\n\n\n\n\nConfigures an xcworkspace with specified xcodeprojs\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n36\n\n\n\npixie\n\n\n\nvia Piotrek Dubiel\n\n\n\n\n\nShow your build status on PIXIE!\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n16\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n36\n\n\n\nmatch_android_keystore\n\n\n\nvia izzis92\n\n\n\n\n\nGet android keystores from github\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n35\n\n\n\nappcenter_releases\n\n\n\nvia Qutaibah Esa\n\n\n\n\n\nGet app releases information from AppCenter\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n35\n\n\n\nparse_json\n\n\n\nvia Felix Krause\n\n\n\n\n\nParse a JSON file\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n35\n\n\n\ninstall_certificates\n\n\n\nvia Dylan Gyesbreghs\n\n\n\n\n\nInstall all the certificates located in you're project.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n35\n\n\n\nipa_scale\n\n\n\nvia Danilo Caetano\n\n\n\n\n\n\"Checks the size of your built .ipa and warns you if you you are near the given threshold.\"\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n34\n\n\n\ncarthage_cache_res\n\n\n\nvia Thi Doan\n\n\n\n\n\nA Fastlane plugin that allows to cache Carthage/Build folder in Amazon S3.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n34\n\n\n\nparse_configurations\n\n\n\nvia Melki\n\n\n\n\n\nIt is used to parse json configration\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n34\n\n\n\ntest_demo\n\n\n\nvia StephenCurry30\n\n\n\n\n\nA test demo of fastlane plugin\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n34\n\n\n\nbluepillarx\n\n\n\nvia jterhorst\n\n\n\n\n\nFastlane Plugin to Run XCUITests in Parallel using Bluepill.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n12\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub\n\n\n\n\n\n\n\n\n32\n\n\n\nbluepillar\n\n\n\nvia Shashikant86\n\n\n\n\n\nFastlane Plugin to Run XCUITests in Parallel using Bluepill.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n32\n\n\n\ncarthage_cache_ftps\n\n\n\nvia Wolfgang Lutz\n\n\n\n\n\nAllows to publish or install the carthage builds via ftps to avoid recompilation\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n12\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n30\n\n\n\nscreenshot_notifier\n\n\n\nvia Moyuru Aizawa\n\n\n\n\n\nPost screenshots to a pull request\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n10\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n29\n\n\n\nplayship\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nInteract with Google Play Api\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n29\n\n\n\nensure_swift_version\n\n\n\nvia Shashikant86\n\n\n\n\n\nThis plugin ensure version of Swift language used for project\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n29\n\n\n\nmanage_android_versions\n\n\n\nvia Bruno Correia\n\n\n\n\n\nAn easy way to manage your Android App versions.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n29\n\n\n\nsxc_aliyun_oss\n\n\n\nvia JimmyDaddy\n\n\n\n\n\nsxc aliyun oss uploader\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n29\n\n\n\nintentconfirmation\n\n\n\nvia Kamil Krzyk\n\n\n\n\n\nHalts the lane invocation, asks user to confirm if he wants to continue, may require password or key.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n29\n\n\n\nbox\n\n\n\nvia Wesley Sui\n\n\n\n\n\nlibrary for the Box Content API\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n9\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n27\n\n\n\ngit_commit_lzx\n\n\n\nvia zhenxingliu\n\n\n\n\n\ngit commit all add change to git\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n7\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n26\n\n\n\ncovfefe\n\n\n\nvia Jakob Jensen\n\n\n\n\n\nA templating engine for generating common file structures.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n26\n\n\n\ndevicelab_bot\n\n\n\nvia Almouro\n\n\n\n\n\nAutomatically install your app on your devicelab with the devicelab bot\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n26\n\n\n\ninstall_provisioning_profile\n\n\n\nvia Alexey Martynov\n\n\n\n\n\nThis plugin installs provisioning profile to Xcode Provisioning Profiles directory\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n26\n\n\n\njenkins_job_config\n\n\n\nvia Jerome Lacoste\n\n\n\n\n\nGenerate the config for a Jenkins job\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n26\n\n\n\nfiglet\n\n\n\nvia Jeff Stein\n\n\n\n\n\nWrapper around figlet which makes large ascii text words\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n6\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n24\n\n\n\nupdate_app_name\n\n\n\nvia huyanping\n\n\n\n\n\nupdate app name\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n24\n\n\n\nadd_fix_version\n\n\n\nvia Dmitry Krasulia\n\n\n\n\n\nCreate and makr tickets with fix version\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n24\n\n\n\ngitlab_increate_swiftlint\n\n\n\nvia xiongzenghui\n\n\n\n\n\nIncremental Code Check using swiftlint for swift language files on gitlab platform !\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n4\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\nasciii\n\n\n\nvia Danielle Tomlinson\n\n\n\n\n\nAdd ascii text to your fastlane output\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\ndevresponse\n\n\n\nvia Helmut Januschka\n\n\n\n\n\nEnables Spaceship to deal with developer response\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\nram_disk\n\n\n\nvia icyleaf\n\n\n\n\n\nUse a temporary ram disk to do anything else\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\nbump_android_version\n\n\n\nvia Sea\u0301n Labastille\n\n\n\n\n\nBump Android Manifest Version\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\nmobile_common\n\n\n\nvia Alexander Semenov\n\n\n\n\n\nCollection of common CI actions for Android, iOS and MacOSX projects - like unit tests, app publishing, version increment, screenshots, etc.\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n23\n\n\n\nmynewplu\n\n\n\nvia lingshijun\n\n\n\n\n\nnew plugin\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\nxamarin_build_switch\n\n\n\nvia punksta\n\n\n\n\n\nBuild xamarin android\\ios projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\nincloud_xamarin_build\n\n\n\nvia punksta, torben.carstens@incloud.de\n\n\n\n\n\nBuild xamarin android\\ios projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\ncurrent_datetime\n\n\n\nvia Melki\n\n\n\n\n\nTo get current date and time as string\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n22\n\n\n\nswitchmedia_xamarin_build\n\n\n\nvia punksta\n\n\n\n\n\nBuild xamarin android\\ios projects\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n2\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\nmy\n\n\n\nvia lujun10446\n\n\n\n\n\nHello fastlane plugin demo\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\nbinary\n\n\n\nvia huanglei\n\n\n\n\n\n\u7528\u4e8e\u6253iOS\u4e8c\u8fdb\u5236\u5305\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n21\n\n\n\nxcodebuildonlytesting\n\n\n\nvia Lu\u00eds Esteves\n\n\n\n\n\nCreates a array of tests from a junit to feed the xcodebuild only-testing\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n1\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n20\n\n\n\nteamify\n\n\n\nvia Ron June Valdoz\n\n\n\n\n\nMS Teams message card fastlane plugin\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n20\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n0\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n-15\n\n\n\nretry_failed_tests\n\n\n\nvia Gloria Chow\n\n\n\n\n\nRetries failed iOS tests\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n0\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n0\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n0\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n30\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n5\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen website\n\n  \n(no GitHub link provided in gemspec)\n\n\n\n\n\n\n\n\n-16\n\n\n\nclang_tools\n\n\n\nvia squirrel-explorer\n\n\n\n\n\nA series of clang-based tools for CI/CD, including clang analyzer.\n\n\n\n\n\n\nProvided actions\n\n\n\n\n\n\n\n\nName\n\n\nCategory\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nclang_analyzer\n\n\n-\n\n\nAnalyze source codes with clang analyzer\n\n\n\n\n\n\n\n\n\n\n\n\nScore details\n\n\n\n\n\n\n\n\nMetric\n\n\nPoints\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncontributors\n\n\n0\n\n\nThe more contributors a project has, the more likely it is it stays alive\n\n\n\n\n\n\nsubscribers\n\n\n3\n\n\nMore subscribers = more popular project\n\n\n\n\n\n\nstars\n\n\n0\n\n\nMore stars = more popular project\n\n\n\n\n\n\nforks\n\n\n0\n\n\nMore forks = more people seem to use/modify this project\n\n\n\n\n\n\nhas_mit_license\n\n\n-50\n\n\nfastlane is MIT licensed, it's good to have plugins use MIT too\n\n\n\n\n\n\nreadme_score\n\n\n25\n\n\nHow well is the README of the document written\n\n\n\n\n\n\nage\n\n\n3\n\n\nProject that have been around for longer tend to be more stable\n\n\n\n\n\n\nmajor_release\n\n\n0\n\n\nPost 1.0 releases are great\n\n\n\n\n\n\ngithub_issues\n\n\n0\n\n\nLots of open issues are not a good sign usually, unless the project is really popular\n\n\n\n\n\n\ndownloads\n\n\n3\n\n\nMore downloads = more users have been using the plugin for a while\n\n\n\n\n\n\ntests\n\n\n0\n\n\nThe more tests a plugin has, the better\n\n\n\n\n\n\n\n\n\n\n\n\n  \nOpen on GitHub",
            "title": "Available Plugins"
        },
        {
            "location": "/plugins/available-plugins/#available-plugins",
            "text": "16031",
            "title": "Available Plugins"
        },
        {
            "location": "/plugins/using-plugins/",
            "text": "fastlane Plugins\n\n\nThe instructions below require \nfastlane\n 1.93.0 or higher\n\n\nfastlane\n is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide \nfastlane\n plugins to other \nfastlane\n users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the \nfastlane\n plugin is always up to date.\n\n\nLocal actions\n\n\n\n(function () {\n    var anchorMap = {\n        \"local-actions\": \"/create-action/\"\n    }\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();\n\n\n\n\nThis content was moved and now lives \nhere\n.\n\n\nFind a plugin\n\n\nHead over to \nAvailable Plugins\n for a list of plugins you can use.\n\n\nList all available plugins using\n\n\nfastlane search_plugins\n\n\n\n\nTo search for something specific\n\n\nfastlane search_plugins [query]\n\n\n\n\nAdd a plugin to your project\n\n\nfastlane add_plugin [name]\n\n\n\n\nfastlane\n will assist you on setting up your project to start using plugins.\n\n\nThis will:\n\n\n\n\nAdd the plugin to \nfastlane/Pluginfile\n\n\nMake sure your \nfastlane/Pluginfile\n is properly referenced from your \n./Gemfile\n\n\nRun \nfastlane install_plugins\n to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)\n\n\nYou'll have 3 new files, that should all be checked into version control: \nGemfile\n, \nGemfile.lock\n and \nfastlane/Pluginfile\n\n\n\n\nPlugin Source\n\n\nYour \nfastlane/Pluginfile\n contains the list of all \nfastlane\n plugins your project uses. The \nPluginfile\n is a \nGemfile\n that gets imported from your main \nGemfile\n.\nYou specify all dependencies, including the required version numbers:\n\n\n# Fetched from RubyGems.org\ngem \"fastlane-plugin-xcversion\"\n\n# Fetched from GitHub\ngem \"fastlane-plugin-xcversion\", git: \"https://github.com/fastlane/fastlane-plugin-xcversion\"\n\n# Fetched from a local directory\ngem \"fastlane-plugin-xcversion\", path: \"../fastlane-plugin-xcversion\"\n\n# Specify a version requirements\ngem \"fastlane-plugin-xcversion\", \"1.1.0\"\ngem \"fastlane-plugin-xcversion\", \">= 1.0\"\n\n\n\n\nMore information about a Gemfile\n\n\nRun with plugins\n\n\nRun \nfastlane\n using \nbundle exec fastlane [lane]\n to make sure your plugins are properly loaded.\n\n\nThis is required when you use plugins from a local path or a git remote. If you have multiple versions of the same plugin loaded, you may not be using the one you specified in your \nPluginfile\n or \nGemfile\n.\n\n\nInstall plugins on another machine\n\n\nTo make sure all plugins are installed on the local machine, run\n\n\nfastlane install_plugins\n\n\n\n\nUpdate all plugins\n\n\nTo make sure all plugins are updated to the latest version, run\n\n\nfastlane update_plugins\n\n\n\n\nRemove a plugin\n\n\nOpen your \nfastlane/Pluginfile\n and remove the line that looks like this\n\n\ngem \"fastlane-plugin-[plugin_name]\"",
            "title": "Use Plugins"
        },
        {
            "location": "/plugins/using-plugins/#fastlane-plugins",
            "text": "The instructions below require  fastlane  1.93.0 or higher  fastlane  is an open platform and we enable every developer to extend it to fit their needs. That's why we built a plugin system that allows you and your company to provide  fastlane  plugins to other  fastlane  users. You have the full power and responsibility of maintaining your plugin and keeping it up to date. This is useful if you maintain your own library or web service, and want to make sure the  fastlane  plugin is always up to date.",
            "title": "fastlane Plugins"
        },
        {
            "location": "/plugins/using-plugins/#local-actions",
            "text": "(function () {\n    var anchorMap = {\n        \"local-actions\": \"/create-action/\"\n    }\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();  This content was moved and now lives  here .",
            "title": "Local actions"
        },
        {
            "location": "/plugins/using-plugins/#find-a-plugin",
            "text": "Head over to  Available Plugins  for a list of plugins you can use.  List all available plugins using  fastlane search_plugins  To search for something specific  fastlane search_plugins [query]",
            "title": "Find a plugin"
        },
        {
            "location": "/plugins/using-plugins/#add-a-plugin-to-your-project",
            "text": "fastlane add_plugin [name]  fastlane  will assist you on setting up your project to start using plugins.  This will:   Add the plugin to  fastlane/Pluginfile  Make sure your  fastlane/Pluginfile  is properly referenced from your  ./Gemfile  Run  fastlane install_plugins  to make sure all required dependencies are installed on your local machine (this step might ask for your admin password to install Ruby gems)  You'll have 3 new files, that should all be checked into version control:  Gemfile ,  Gemfile.lock  and  fastlane/Pluginfile",
            "title": "Add a plugin to your project"
        },
        {
            "location": "/plugins/using-plugins/#plugin-source",
            "text": "Your  fastlane/Pluginfile  contains the list of all  fastlane  plugins your project uses. The  Pluginfile  is a  Gemfile  that gets imported from your main  Gemfile .\nYou specify all dependencies, including the required version numbers:  # Fetched from RubyGems.org\ngem \"fastlane-plugin-xcversion\"\n\n# Fetched from GitHub\ngem \"fastlane-plugin-xcversion\", git: \"https://github.com/fastlane/fastlane-plugin-xcversion\"\n\n# Fetched from a local directory\ngem \"fastlane-plugin-xcversion\", path: \"../fastlane-plugin-xcversion\"\n\n# Specify a version requirements\ngem \"fastlane-plugin-xcversion\", \"1.1.0\"\ngem \"fastlane-plugin-xcversion\", \">= 1.0\"  More information about a Gemfile",
            "title": "Plugin Source"
        },
        {
            "location": "/plugins/using-plugins/#run-with-plugins",
            "text": "Run  fastlane  using  bundle exec fastlane [lane]  to make sure your plugins are properly loaded.  This is required when you use plugins from a local path or a git remote. If you have multiple versions of the same plugin loaded, you may not be using the one you specified in your  Pluginfile  or  Gemfile .",
            "title": "Run with plugins"
        },
        {
            "location": "/plugins/using-plugins/#install-plugins-on-another-machine",
            "text": "To make sure all plugins are installed on the local machine, run  fastlane install_plugins",
            "title": "Install plugins on another machine"
        },
        {
            "location": "/plugins/using-plugins/#update-all-plugins",
            "text": "To make sure all plugins are updated to the latest version, run  fastlane update_plugins",
            "title": "Update all plugins"
        },
        {
            "location": "/plugins/using-plugins/#remove-a-plugin",
            "text": "Open your  fastlane/Pluginfile  and remove the line that looks like this  gem \"fastlane-plugin-[plugin_name]\"",
            "title": "Remove a plugin"
        },
        {
            "location": "/plugins/create-plugin/",
            "text": "Create your own fastlane plugin\n\n\ncd ~/new/folder/\n\nfastlane new_plugin [plugin_name]\n\n\n\n\n\n\nfastlane\n creates the directory structure that's needed to be a valid Ruby gem\n\n\nEdit the \nlib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb\n and implement your action\n\n\nEasily test the plugin locally by running \nfastlane add_plugin\n in your project's directory and specifying the local path when asked for it\n\n\n\n\nNew plugin for existing gem\n\n\nIf you already have an existing gem you want to provide a \nfastlane\n plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.\n\n\nThe example project \nxcake\n contains a folder named \nfastlane-plugin-xcake\n.\n\n\nAll you have to do if you have an existing gem:\n\n\n\n\nNavigate to your gem\n\n\nfastlane new_plugin [plugin_name]\n\n\nInside the newly created folder, edit the \nfastlane-plugin-[plugin_name].gemspec\n and add your gem as a dependency. It is recommended to also specify a version number requirement\n\n\n\n\nPublishing your plugin\n\n\nRubyGems\n\n\nThe recommended way to publish your plugin is to publish it on \nRubyGems.org\n. Follow the steps below to publish your plugin.\n\n\n\n\nCreate an account at \nRubyGems.org\n\n\nPublish your plugin to a \nGitHub\n repo\n\n\nUpdate the \nfastlane-plugin-[plugin_name].gemspec\n file so that the \nspec.homepage\n points to your github repo.\n\n\nPublish the first release of your plugin:\n\n\n\n\nbundle install\nrake install\nrake release\n\n\n\n\nNow all your users can run \nfastlane add_plugin [plugin_name]\n to install and use your plugin.\n\n\nGitHub\n\n\nIf for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the \nPluginfile\n\n\ngem \"fastlane-plugin-[plugin_name]\", git: \"https://github.com/[user]/[plugin_name]\"\n\n\n\n\nAdvanced\n\n\nMultiple actions in one plugin\n\n\nLet's assume you work on a \nfastlane\n plugin for project management software. You could call it \nfastlane-plugin-pm\n and it may contain any number of actions and helpers, just add them to your \nactions\n folder. Make sure to mention the available actions in your plugin's \nREADME.md\n.",
            "title": "Create Your Own Plugin"
        },
        {
            "location": "/plugins/create-plugin/#create-your-own-fastlane-plugin",
            "text": "cd ~/new/folder/\n\nfastlane new_plugin [plugin_name]   fastlane  creates the directory structure that's needed to be a valid Ruby gem  Edit the  lib/fastlane/plugin/[plugin_name]/actions/[plugin_name].rb  and implement your action  Easily test the plugin locally by running  fastlane add_plugin  in your project's directory and specifying the local path when asked for it",
            "title": "Create your own fastlane plugin"
        },
        {
            "location": "/plugins/create-plugin/#new-plugin-for-existing-gem",
            "text": "If you already have an existing gem you want to provide a  fastlane  plugin for, you'll still have to create a new Ruby gem. The reason for that is the way plugins are imported.  The example project  xcake  contains a folder named  fastlane-plugin-xcake .  All you have to do if you have an existing gem:   Navigate to your gem  fastlane new_plugin [plugin_name]  Inside the newly created folder, edit the  fastlane-plugin-[plugin_name].gemspec  and add your gem as a dependency. It is recommended to also specify a version number requirement",
            "title": "New plugin for existing gem"
        },
        {
            "location": "/plugins/create-plugin/#publishing-your-plugin",
            "text": "",
            "title": "Publishing your plugin"
        },
        {
            "location": "/plugins/create-plugin/#rubygems",
            "text": "The recommended way to publish your plugin is to publish it on  RubyGems.org . Follow the steps below to publish your plugin.   Create an account at  RubyGems.org  Publish your plugin to a  GitHub  repo  Update the  fastlane-plugin-[plugin_name].gemspec  file so that the  spec.homepage  points to your github repo.  Publish the first release of your plugin:   bundle install\nrake install\nrake release  Now all your users can run  fastlane add_plugin [plugin_name]  to install and use your plugin.",
            "title": "RubyGems"
        },
        {
            "location": "/plugins/create-plugin/#github",
            "text": "If for some reason you don't want to use RubyGems, you can also make your plugin available on GitHub. Your users then need to add the following to the  Pluginfile  gem \"fastlane-plugin-[plugin_name]\", git: \"https://github.com/[user]/[plugin_name]\"",
            "title": "GitHub"
        },
        {
            "location": "/plugins/create-plugin/#advanced",
            "text": "",
            "title": "Advanced"
        },
        {
            "location": "/plugins/create-plugin/#multiple-actions-in-one-plugin",
            "text": "Let's assume you work on a  fastlane  plugin for project management software. You could call it  fastlane-plugin-pm  and it may contain any number of actions and helpers, just add them to your  actions  folder. Make sure to mention the available actions in your plugin's  README.md .",
            "title": "Multiple actions in one plugin"
        },
        {
            "location": "/plugins/plugins-troubleshooting/",
            "text": "fastlane plugins troubleshooting\n\n\nIf you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:\n\n\nMake sure fastlane is up to date\n\n\nRun \nfastlane -v\n and \nbundle exec fastlane -v\n and make sure it's at least version 1.93.0.\n\n\nUpdate your plugins\n\n\nRun \nfastlane update_plugins\n to make sure to have all the latest plugins and their dependencies installed.\n\n\nUse \nbundle exec\n\n\nRun \nfastlane\n using \nbundle exec fastlane [lane]\n to make sure your plugins are properly loaded.\n\n\nThis is required when you use plugins from a local path or a git remote.\n\n\nUse the \n--verbose\n mode\n\n\nRunning \nfastlane [lane] --verbose\n will show a lot more information that might be useful to resolve the issue.\n\n\nMake sure the action name is correct\n\n\nA plugin can contain any number of actions. Make sure to read the docs for the plugin itself!\n\n\nAdditionally check out the source code of the plugin:\n\n\nlib/fastlane/plugin/[plugin_name]/actions/[action_name].rb\n\n\n\n\nOpen the \n[action_name].rb\n file and make sure the name of the class on line 3 looks like this:\n\n\nclass [ActionName]Action < Action\n\n\n\n\nNote how the name of the class should be capitalised and have \nAction\n appended in the name. Additionally this class must be a subclass of \nAction\n.\n\n\nGemfile and Pluginfile\n\n\nYour \nGemfile\n should look something like this:\n\n\ngem \"fastlane\"\n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval_gemfile(plugins_path) if File.exist?(plugins_path)\n\n\n\n\nYour \nPluginfile\n should look something like this\n\n\n# Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'\n\n\n\n\nBuilding your own plugin\n\n\nIf you have issues with running your local plugins during plugin development, make sure to run\n\n\nbundle install --with development\n\n\n\n\nto install all required development dependencies\n\n\nMore help\n\n\nIf it's still not working for you, please \nsubmit a new GitHub issue\n with your \nGemfile\n, \nGemfile.lock\n, \nPluginfile\n, \nFastfile\n and terminal output when running \nfastlane\n using the \n--verbose\n flag.",
            "title": "Plugins Troubleshooting"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#fastlane-plugins-troubleshooting",
            "text": "If you're having trouble calling a plugin action, here is a simple guide on how to resolve the issue:",
            "title": "fastlane plugins troubleshooting"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#make-sure-fastlane-is-up-to-date",
            "text": "Run  fastlane -v  and  bundle exec fastlane -v  and make sure it's at least version 1.93.0.",
            "title": "Make sure fastlane is up to date"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#update-your-plugins",
            "text": "Run  fastlane update_plugins  to make sure to have all the latest plugins and their dependencies installed.",
            "title": "Update your plugins"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#use-bundle-exec",
            "text": "Run  fastlane  using  bundle exec fastlane [lane]  to make sure your plugins are properly loaded.  This is required when you use plugins from a local path or a git remote.",
            "title": "Use bundle exec"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#use-the-verbose-mode",
            "text": "Running  fastlane [lane] --verbose  will show a lot more information that might be useful to resolve the issue.",
            "title": "Use the --verbose mode"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#make-sure-the-action-name-is-correct",
            "text": "A plugin can contain any number of actions. Make sure to read the docs for the plugin itself!  Additionally check out the source code of the plugin:  lib/fastlane/plugin/[plugin_name]/actions/[action_name].rb  Open the  [action_name].rb  file and make sure the name of the class on line 3 looks like this:  class [ActionName]Action < Action  Note how the name of the class should be capitalised and have  Action  appended in the name. Additionally this class must be a subclass of  Action .",
            "title": "Make sure the action name is correct"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#gemfile-and-pluginfile",
            "text": "Your  Gemfile  should look something like this:  gem \"fastlane\"\n\nplugins_path = File.join(File.dirname(__FILE__), 'fastlane', 'Pluginfile')\neval_gemfile(plugins_path) if File.exist?(plugins_path)  Your  Pluginfile  should look something like this  # Autogenerated by fastlane\n\ngem 'fastlane-plugin-ruby'",
            "title": "Gemfile and Pluginfile"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#building-your-own-plugin",
            "text": "If you have issues with running your local plugins during plugin development, make sure to run  bundle install --with development  to install all required development dependencies",
            "title": "Building your own plugin"
        },
        {
            "location": "/plugins/plugins-troubleshooting/#more-help",
            "text": "If it's still not working for you, please  submit a new GitHub issue  with your  Gemfile ,  Gemfile.lock ,  Pluginfile ,  Fastfile  and terminal output when running  fastlane  using the  --verbose  flag.",
            "title": "More help"
        },
        {
            "location": "/best-practices/source-control/",
            "text": "Source Control\n\n\nIt is recommended that you keep \nfastlane\n configuration files in the repository. You may want to add the following lines to the repository's \n.gitignore\n (Git) or \n.hgignore\n (Mercurial) file to exclude generated and temporary files:\n\n\n# fastlane specific\n**/fastlane/report.xml\n\n# deliver temporary files\n**/fastlane/Preview.html\n\n# snapshot generated screenshots\n**/fastlane/screenshots\n\n# scan temporary files\n**/fastlane/test_output\n\n\n\n\nIt is also recommended that you avoid storing screenshots or other delivery artifacts in the repository. Instead, use \nfastlane\n to re-generate whenever needed.",
            "title": "Source Control"
        },
        {
            "location": "/best-practices/source-control/#source-control",
            "text": "It is recommended that you keep  fastlane  configuration files in the repository. You may want to add the following lines to the repository's  .gitignore  (Git) or  .hgignore  (Mercurial) file to exclude generated and temporary files:  # fastlane specific\n**/fastlane/report.xml\n\n# deliver temporary files\n**/fastlane/Preview.html\n\n# snapshot generated screenshots\n**/fastlane/screenshots\n\n# scan temporary files\n**/fastlane/test_output  It is also recommended that you avoid storing screenshots or other delivery artifacts in the repository. Instead, use  fastlane  to re-generate whenever needed.",
            "title": "Source Control"
        },
        {
            "location": "/best-practices/continuous-integration/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nContinuous Integration\n\n\nfastlane\n works very well in Continuous Integration setups. It for example automatically generates a JUnit report for you that allows Continuous Integration systems, like \nJenkins\n, access the results of your deployment.\n\n\n\n\nIntegrations\n\n\nAuthentication with Apple services\n\n\nEnvironment variables to set\n\n\nDeploy Strategy\n\n\n\n\nIntegrations\n\n\nMultiple CI products and services offer integrations with fastlane:\n\n\n\n\nAppcircle\n\n\nAzure DevOps\n (formerly known as: Visual Studio Team Services)\n\n\nBamboo\n\n\nBitrise\n\n\nCircleCI\n\n\nGitLab CI\n\n\nJenkins\n\n\nNeverCode\n\n\nSemaphore\n \n\n\nTravis\n\n\n\n\nAuthentication with Apple services\n\n\nSeveral Fastlane actions communicate with Apple services that need authentication. This can pose several challenges on CI:\n\n\nSeparate Apple ID for CI\n\n\nThe easiest way to get \nfastlane\n running on a CI system is to create a separate Apple ID that\n\n\n\n\ndoesn't have 2-factor authentication enabled\n\n\ndoesn't have the Account Holder role\n\n\n\n\nCreating a separate Apple ID allows you to limit the permission scope (limited access to only the apps and resources it needs), have a long, randomly generated password, and will make it much more convenient for you to set up CI using \nfastlane\n.\n\n\nTwo-step or Two-factor auth\n\n\nfastlane\n fully supports \n2-factor authentication (2FA)\n (and legacy \n2-step verification (2SV)\n) for logging in to your Apple ID and Apple Developer account. \ud83c\udf1f\n\n\nNote: \nApple announced that as of February 27th 2019\n, it is enforcing 2-factor authentication on developer Apple IDs with the \"Account Holder\" role.\n\n\nSecurity code and session\n\n\nWhen your Apple account has 2-factor authentication (or 2-step verification) enabled, you will be asked to verify your identity by entering a security code. If you already have a trusted device configured for your account, then the code will appear on the device. If you don't have any devices configured, but have trusted a phone number, then the code will be sent to your phone.\n\n\nThe resulting session will be stored in \n~/.fastlane/spaceship/[email]/cookie\n. Validity can greatly vary (anything between 1 day and 1 month) and is not within \nfastlane\n's domain and up to Apple.\n\n\nUse of application specific passwords and \nspaceauth\n\n\nWhen you can not enter the security code manually, as on a Continuous Integration system, you have to use other ways to log in:\n\n\nApplication specific passwords\n\n\nIf you want to upload builds to App Store Connect (actions \nupload_to_app_store\n and \ndeliver\n) or TestFlight (actions \nupload_to_testflight\n, \npilot\n or \ntestflight\n) from your CI machine, you need to generate an \napplication specific password\n:\n\n\n\n\nVisit \nappleid.apple.com/account/manage\n\n\nGenerate a new application specific password\n\n\nProvide the application specific password using the environment variable \nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\n\n\n\n\nThis will supply the application specific password to iTMSTransporter, the tool used by those actions to perform the upload.\n\n\nNote: The application specific password will \nnot\n work if your action usage does anything else than uploading the binary, e.g. updating any metadata like setting release notes or distributing to testers, etc.\n\n\nspaceauth\n\n\nAll other actions interacting with Apple's APIs do not accept application specific passwords.\n\n\nAs your CI machine will not be able to prompt you for your two-factor authentication or two-step verification information, you need to generate a login session for Apple ID in advance. You can get on your local machine this by running:\n\n\nfastlane spaceauth -u user@email.com\n\n\n\n\nThe generated value then has to be stored inside the \nFASTLANE_SESSION\n environment variable on your CI system. This session will be reused instead of triggering a new login each time \nfastlane\n communicates with Apple's APIs.\n\n\nPlease note:\n\n\n\n\nAn Apple ID session is only valid for a certain region, meaning if your CI system is in a different region than your local machine, you might run into issues\n\n\nAn Apple ID session is only valid for up to a month, meaning you'll have to generate a new session every month. Usually you'd only know about it when your build starts failing\n\n\n\n\nUnfortunately there is nothing \nfastlane\n can do better in this regard, as these are technical limitations on how App Store Connect sessions are handled.\n\n\nEnvironment variables to set\n\n\nMost setups will need the following environment variables\n\n\n\n\nFASTLANE_USER\n: Your App Store Connect / Apple Developer Portal user, if your \nfastlane\n setup accesses App Store Connect or the Apple Developer Portal (e.g. submit a TestFlight build, create a profile, ...)\n\n\nFASTLANE_PASSWORD\n: Your App Store Connect / Apple Developer Portal password, usually only needed if you also set the \nFASTLANE_USER\n variable\n\n\nMATCH_PASSWORD\n: You need to provide the password of your \nmatch\n encryption if you use \nmatch\n\n\nFASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD\n: You need to provide an \napplication specific password\n if you have 2-factor enabled and use \npilot\n or \ndeliver\n to upload a binary to App Store Connect\n\n\nFASTLANE_SESSION\n: You need to provide a \npregenerated session via \nfastlane spaceauth\n if you have 2-factor authentication enabled and want to use any actions that communicates with App Store Connect.\n\n\nLANG\n and \nLC_ALL\n: These set up the locale your shell and all the commands you execute run at. \nfastlane\n needs these to be set to an UTF-8 locale to work correctly, for example \nen_US.UTF-8\n. Many CI systems come with a locale that is unset or set to ASCII by default, so make sure to double-check whether yours is set correctly.\n\n\n\n\nDeploy Strategy\n\n\nYou should \nnot\n deploy a new App Store update after every commit, since you still have to wait 1-2 days for the review. Instead it is recommended that you use Git Tags, or custom triggers to deploy a new update.\n\n\nYou can set up your own \nRelease\n job, which is only triggered manually.\n\n\nMoved\n\n\n\n// Closure-wrapped for security.\n(function () {\n    var anchorMap = {\n        \"jenkins-integration\": \"/best-practices/continuous-integration/jenkins/\",\n        \"circleci-integration\": \"/best-practices/continuous-integration/circle-ci/\",\n        \"travis-integration\": \"/best-practices/continuous-integration/travis/\",\n        \"bamboo-integration\": \"/best-practices/continuous-integration/bamboo/\",\n        \"gitlab-ci-integration\": \"/best-practices/continuous-integration/gitlab/\",\n        \"visual-studio-team-services\": \"/best-practices/continuous-integration/azure-devops/\",\n        \"nevercode-integration\": \"/best-practices/continuous-integration/nevercode/\",\n    }\n    /*\n    * Best practice for extracting hashes:\n    * https://stackoverflow.com/a/10076097/151365\n    */\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        /*\n        * Best practice for javascript redirects:\n        * https://stackoverflow.com/a/506004/151365\n        */\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();\n\n\n\n\nThe following tool- and service-specific content was moved:\n\n\nJenkins Integration\n\n\nThis content was moved and now lives \nhere\n.\n\n\nCircleCI Integration\n\n\nThis content was moved and now lives \nhere\n.\n\n\nTravis Integration\n\n\nThis content was moved and now lives \nhere\n.\n\n\nBamboo Integration\n\n\nThis content was moved and now lives \nhere\n.\n\n\nGitLab CI Integration\n\n\nThis content was moved and now lives \nhere\n.\n\n\nVisual Studio Team Services\n\n\nThis content was moved and now lives \nhere\n.\n\n\nNevercode Integration\n\n\nThis content was moved and now lives \nhere\n.",
            "title": "Continuous Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#continuous-integration",
            "text": "fastlane  works very well in Continuous Integration setups. It for example automatically generates a JUnit report for you that allows Continuous Integration systems, like  Jenkins , access the results of your deployment.   Integrations  Authentication with Apple services  Environment variables to set  Deploy Strategy",
            "title": "Continuous Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#integrations",
            "text": "Multiple CI products and services offer integrations with fastlane:   Appcircle  Azure DevOps  (formerly known as: Visual Studio Team Services)  Bamboo  Bitrise  CircleCI  GitLab CI  Jenkins  NeverCode  Semaphore    Travis",
            "title": "Integrations"
        },
        {
            "location": "/best-practices/continuous-integration/#authentication-with-apple-services",
            "text": "Several Fastlane actions communicate with Apple services that need authentication. This can pose several challenges on CI:",
            "title": "Authentication with Apple services"
        },
        {
            "location": "/best-practices/continuous-integration/#separate-apple-id-for-ci",
            "text": "The easiest way to get  fastlane  running on a CI system is to create a separate Apple ID that   doesn't have 2-factor authentication enabled  doesn't have the Account Holder role   Creating a separate Apple ID allows you to limit the permission scope (limited access to only the apps and resources it needs), have a long, randomly generated password, and will make it much more convenient for you to set up CI using  fastlane .",
            "title": "Separate Apple ID for CI"
        },
        {
            "location": "/best-practices/continuous-integration/#two-step-or-two-factor-auth",
            "text": "fastlane  fully supports  2-factor authentication (2FA)  (and legacy  2-step verification (2SV) ) for logging in to your Apple ID and Apple Developer account. \ud83c\udf1f  Note:  Apple announced that as of February 27th 2019 , it is enforcing 2-factor authentication on developer Apple IDs with the \"Account Holder\" role.",
            "title": "Two-step or Two-factor auth"
        },
        {
            "location": "/best-practices/continuous-integration/#security-code-and-session",
            "text": "When your Apple account has 2-factor authentication (or 2-step verification) enabled, you will be asked to verify your identity by entering a security code. If you already have a trusted device configured for your account, then the code will appear on the device. If you don't have any devices configured, but have trusted a phone number, then the code will be sent to your phone.  The resulting session will be stored in  ~/.fastlane/spaceship/[email]/cookie . Validity can greatly vary (anything between 1 day and 1 month) and is not within  fastlane 's domain and up to Apple.",
            "title": "Security code and session"
        },
        {
            "location": "/best-practices/continuous-integration/#use-of-application-specific-passwords-and-spaceauth",
            "text": "When you can not enter the security code manually, as on a Continuous Integration system, you have to use other ways to log in:",
            "title": "Use of application specific passwords and spaceauth"
        },
        {
            "location": "/best-practices/continuous-integration/#application-specific-passwords",
            "text": "If you want to upload builds to App Store Connect (actions  upload_to_app_store  and  deliver ) or TestFlight (actions  upload_to_testflight ,  pilot  or  testflight ) from your CI machine, you need to generate an  application specific password :   Visit  appleid.apple.com/account/manage  Generate a new application specific password  Provide the application specific password using the environment variable  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD   This will supply the application specific password to iTMSTransporter, the tool used by those actions to perform the upload.  Note: The application specific password will  not  work if your action usage does anything else than uploading the binary, e.g. updating any metadata like setting release notes or distributing to testers, etc.",
            "title": "Application specific passwords"
        },
        {
            "location": "/best-practices/continuous-integration/#spaceauth",
            "text": "All other actions interacting with Apple's APIs do not accept application specific passwords.  As your CI machine will not be able to prompt you for your two-factor authentication or two-step verification information, you need to generate a login session for Apple ID in advance. You can get on your local machine this by running:  fastlane spaceauth -u user@email.com  The generated value then has to be stored inside the  FASTLANE_SESSION  environment variable on your CI system. This session will be reused instead of triggering a new login each time  fastlane  communicates with Apple's APIs.  Please note:   An Apple ID session is only valid for a certain region, meaning if your CI system is in a different region than your local machine, you might run into issues  An Apple ID session is only valid for up to a month, meaning you'll have to generate a new session every month. Usually you'd only know about it when your build starts failing   Unfortunately there is nothing  fastlane  can do better in this regard, as these are technical limitations on how App Store Connect sessions are handled.",
            "title": "spaceauth"
        },
        {
            "location": "/best-practices/continuous-integration/#environment-variables-to-set",
            "text": "Most setups will need the following environment variables   FASTLANE_USER : Your App Store Connect / Apple Developer Portal user, if your  fastlane  setup accesses App Store Connect or the Apple Developer Portal (e.g. submit a TestFlight build, create a profile, ...)  FASTLANE_PASSWORD : Your App Store Connect / Apple Developer Portal password, usually only needed if you also set the  FASTLANE_USER  variable  MATCH_PASSWORD : You need to provide the password of your  match  encryption if you use  match  FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD : You need to provide an  application specific password  if you have 2-factor enabled and use  pilot  or  deliver  to upload a binary to App Store Connect  FASTLANE_SESSION : You need to provide a  pregenerated session via  fastlane spaceauth  if you have 2-factor authentication enabled and want to use any actions that communicates with App Store Connect.  LANG  and  LC_ALL : These set up the locale your shell and all the commands you execute run at.  fastlane  needs these to be set to an UTF-8 locale to work correctly, for example  en_US.UTF-8 . Many CI systems come with a locale that is unset or set to ASCII by default, so make sure to double-check whether yours is set correctly.",
            "title": "Environment variables to set"
        },
        {
            "location": "/best-practices/continuous-integration/#deploy-strategy",
            "text": "You should  not  deploy a new App Store update after every commit, since you still have to wait 1-2 days for the review. Instead it is recommended that you use Git Tags, or custom triggers to deploy a new update.  You can set up your own  Release  job, which is only triggered manually.",
            "title": "Deploy Strategy"
        },
        {
            "location": "/best-practices/continuous-integration/#moved",
            "text": "// Closure-wrapped for security.\n(function () {\n    var anchorMap = {\n        \"jenkins-integration\": \"/best-practices/continuous-integration/jenkins/\",\n        \"circleci-integration\": \"/best-practices/continuous-integration/circle-ci/\",\n        \"travis-integration\": \"/best-practices/continuous-integration/travis/\",\n        \"bamboo-integration\": \"/best-practices/continuous-integration/bamboo/\",\n        \"gitlab-ci-integration\": \"/best-practices/continuous-integration/gitlab/\",\n        \"visual-studio-team-services\": \"/best-practices/continuous-integration/azure-devops/\",\n        \"nevercode-integration\": \"/best-practices/continuous-integration/nevercode/\",\n    }\n    /*\n    * Best practice for extracting hashes:\n    * https://stackoverflow.com/a/10076097/151365\n    */\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        /*\n        * Best practice for javascript redirects:\n        * https://stackoverflow.com/a/506004/151365\n        */\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();  The following tool- and service-specific content was moved:",
            "title": "Moved"
        },
        {
            "location": "/best-practices/continuous-integration/#jenkins-integration",
            "text": "This content was moved and now lives  here .",
            "title": "Jenkins Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#circleci-integration",
            "text": "This content was moved and now lives  here .",
            "title": "CircleCI Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#travis-integration",
            "text": "This content was moved and now lives  here .",
            "title": "Travis Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#bamboo-integration",
            "text": "This content was moved and now lives  here .",
            "title": "Bamboo Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#gitlab-ci-integration",
            "text": "This content was moved and now lives  here .",
            "title": "GitLab CI Integration"
        },
        {
            "location": "/best-practices/continuous-integration/#visual-studio-team-services",
            "text": "This content was moved and now lives  here .",
            "title": "Visual Studio Team Services"
        },
        {
            "location": "/best-practices/continuous-integration/#nevercode-integration",
            "text": "This content was moved and now lives  here .",
            "title": "Nevercode Integration"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/",
            "text": "Appcircle Integration\n\n\nAppcircle\n is a mobile CI/CD platform that provides a fully automated environment to build and deploy apps, which also supports \nfastlane\n for build automation.\n\n\nWith Appcircle, you can automate your build and signing processes with the flexible workflow structure and you can also use \nfastlane\n as a workflow step within the build workflows. To use \nfastlane\n, Appcircle expects the presence of a fastfile in your repository.\n\n\nCreating a Build Profile to Connect Your Repository with a Fastfile\n\n\nIn Appcircle, a \nbuild profile\n contains the build workflows and the configuration of an app per target platform. (i.e. separate for iOS and Android).\n\n\n\n\nTo create your first build profile, go to the \"\nBuild Module\n\". (The first item on the left menu) and click on the orange \"\nAdd New\n\" button on the top right of the screen.\n\n\nIn the next screen, enter a name for your build profile and select the target operating system (iOS or Android) and the target platform (Obj-C/Swift, Java/Kotlin, React Native and Flutter projects are supported). If you have two different targets in your project for iOS and Android, you need to create two separate profiles. This allows you to manage separate build workflows for different operating systems.\n\n\nOnce created, click on the build profile to connect your repository that contains a fastfile. You can connect private and public repositories on GitHub, Bitbucket and other compatible git providers. You can authorize Appcircle to connect to your cloud repository provider account. This will allow you to use auto-build your project with hooks.\n\n\nThe build configuration has different flows for iOS and Android and the projects are configured on a branch basis. You can have different configurations for different branches and you can build any of your commits (assuming that they are compatible with the current configuration).\n\n\nYou can use \nfastlane\n with the signing configuration defined in the lane or you can configure your build to use \nAppcircle centralized code signing\n as an alternative to \nfastlane\n match.\n\n\n\n\nAdding \nfastlane\n to the Appcircle Build Workflow as a Step\n\n\n\n\nA \nworkflow\n in Appcircle is a ladder of steps taken to build your applications. Each step has a different purpose and the workflow can be customized by modifying step parameters and inputs, running custom scripts or re-ordering steps.\n\n\nTo utilize \nfastlane\n in your builds, open the \nworkflow editor\n and add the \"\nfastlane\n\" step after the \"\nGit Clone\n\" step. If you want to run a specific \nfastlane\n command, you can add a \"\nCustom Script\n\" step anywhere after the \nfastlane\n step.\n\n\nOnce added, click on the \nfastlane\n step to configure it. Fastlane is easy to use with Appcircle just with two options.\n\n\nThe \"\nFastlane Directory\n\" option is used to specify the fastfile path . If you keep your fastfile in its default location, it is automatically used without the need to change this field.\n\n\nWith the \"\nFastlane Lane\n\" option, you can specify which lane to use.\n\n\nOnce everything is set up, press \nSave\n to save your step configuration. Then you can configure and run your build just like any other app.\n\n\n\n\nAppcircle also supports building and signing the app independently with the \"Build\" and \"Sign\" steps in the workflow. These steps can be used in parallel with \nfastlane\n.\n\n\nRunning the Build Workflow\n\n\nTo run the build workflow that includes the \nfastlane\n step, you can start a \nmanual build or trigger an automatic build\n.\nThe full output of the \nfastlane\n execution can be viewed in the build log in real-time or after the build.\n\n\nDeploying the Build Output\n\n\nYou can use \nfastlane\n to deploy the built apps to the supported third-party services or you can use the \nAppcircle Distribute module\n to share the app with the testers or send it to the public app stores.\n\n\nFurther Documentation\n\n\nFor more information, screenshots, and support, please refer to the \nAppcircle documentation\n.",
            "title": "Appcircle"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/#appcircle-integration",
            "text": "Appcircle  is a mobile CI/CD platform that provides a fully automated environment to build and deploy apps, which also supports  fastlane  for build automation.  With Appcircle, you can automate your build and signing processes with the flexible workflow structure and you can also use  fastlane  as a workflow step within the build workflows. To use  fastlane , Appcircle expects the presence of a fastfile in your repository.",
            "title": "Appcircle Integration"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/#creating-a-build-profile-to-connect-your-repository-with-a-fastfile",
            "text": "In Appcircle, a  build profile  contains the build workflows and the configuration of an app per target platform. (i.e. separate for iOS and Android).   To create your first build profile, go to the \" Build Module \". (The first item on the left menu) and click on the orange \" Add New \" button on the top right of the screen.  In the next screen, enter a name for your build profile and select the target operating system (iOS or Android) and the target platform (Obj-C/Swift, Java/Kotlin, React Native and Flutter projects are supported). If you have two different targets in your project for iOS and Android, you need to create two separate profiles. This allows you to manage separate build workflows for different operating systems.  Once created, click on the build profile to connect your repository that contains a fastfile. You can connect private and public repositories on GitHub, Bitbucket and other compatible git providers. You can authorize Appcircle to connect to your cloud repository provider account. This will allow you to use auto-build your project with hooks.  The build configuration has different flows for iOS and Android and the projects are configured on a branch basis. You can have different configurations for different branches and you can build any of your commits (assuming that they are compatible with the current configuration).  You can use  fastlane  with the signing configuration defined in the lane or you can configure your build to use  Appcircle centralized code signing  as an alternative to  fastlane  match.",
            "title": "Creating a Build Profile to Connect Your Repository with a Fastfile"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/#adding-fastlane-to-the-appcircle-build-workflow-as-a-step",
            "text": "A  workflow  in Appcircle is a ladder of steps taken to build your applications. Each step has a different purpose and the workflow can be customized by modifying step parameters and inputs, running custom scripts or re-ordering steps.  To utilize  fastlane  in your builds, open the  workflow editor  and add the \" fastlane \" step after the \" Git Clone \" step. If you want to run a specific  fastlane  command, you can add a \" Custom Script \" step anywhere after the  fastlane  step.  Once added, click on the  fastlane  step to configure it. Fastlane is easy to use with Appcircle just with two options.  The \" Fastlane Directory \" option is used to specify the fastfile path . If you keep your fastfile in its default location, it is automatically used without the need to change this field.  With the \" Fastlane Lane \" option, you can specify which lane to use.  Once everything is set up, press  Save  to save your step configuration. Then you can configure and run your build just like any other app.   Appcircle also supports building and signing the app independently with the \"Build\" and \"Sign\" steps in the workflow. These steps can be used in parallel with  fastlane .",
            "title": "Adding fastlane to the Appcircle Build Workflow as a Step"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/#running-the-build-workflow",
            "text": "To run the build workflow that includes the  fastlane  step, you can start a  manual build or trigger an automatic build .\nThe full output of the  fastlane  execution can be viewed in the build log in real-time or after the build.",
            "title": "Running the Build Workflow"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/#deploying-the-build-output",
            "text": "You can use  fastlane  to deploy the built apps to the supported third-party services or you can use the  Appcircle Distribute module  to share the app with the testers or send it to the public app stores.",
            "title": "Deploying the Build Output"
        },
        {
            "location": "/best-practices/continuous-integration/appcircle/#further-documentation",
            "text": "For more information, screenshots, and support, please refer to the  Appcircle documentation .",
            "title": "Further Documentation"
        },
        {
            "location": "/best-practices/continuous-integration/azure-devops/",
            "text": "Azure DevOps (formerly known as: Visual Studio Team Services)\n\n\nMicrosoft Visual Studio Team Services (VSTS) and Team Foundation Server (TFS) use \nfastlane\n in their \nApple App Store\n extension.\n\n\nGetting Started\n\n\nOnce you have created or retrieved credentials for your App Store account, then perform the following steps to automate releasing updates from a VSTS build or release definition:\n\n\n\n\nInstall the App Store extension from the VSTS Marketplace\n\n\nGo to your VSTS or TFS project, click on the \nBuild\n tab, and create a new build definition (the \"+\" icon) that is hooked up to your project's appropriate source repo\n\n\nClick \nAdd build step...\n and select the necessary tasks to generate your release assets (e.g. Gulp, Cordova Build)\n\n\nClick \nAdd build step...\n and select \nApp Store Release\n from the \nDeploy\n category\n\n\nConfigure the \nApp Store Release\n task with the desired authentication method, the generated IPA file path, and the desired release track.\n\n\n\n\nNow when you build, your app will automatically be published to \nApp Store Connect\n!\n\n\nConfiguring \nfastlane\n versions\n\n\nThe extension can be configured to install the latest version of \nfastlane\n or a specific version of \nfastlane\n:\n\n\n\n\nIn the Build for your project, click on the \nApple App Store\n task (supported in both \nApple App Store Release\n and \nApple App Store Promote\n), go to the \nAdvanced\n section of the Task, click \nInstall fastlane\n\n\nOptionally, select \nSpecific Version\n from \nfastlane version\n, and enter a specific version of \nfastlane\n\n\n\n\nMore Information\n\n\nFor more documentation, see the \nApple App Store\n in the Visual Studio Team Server marketplace.",
            "title": "Azure DevOps"
        },
        {
            "location": "/best-practices/continuous-integration/azure-devops/#azure-devops-formerly-known-as-visual-studio-team-services",
            "text": "Microsoft Visual Studio Team Services (VSTS) and Team Foundation Server (TFS) use  fastlane  in their  Apple App Store  extension.",
            "title": "Azure DevOps (formerly known as: Visual Studio Team Services)"
        },
        {
            "location": "/best-practices/continuous-integration/azure-devops/#getting-started",
            "text": "Once you have created or retrieved credentials for your App Store account, then perform the following steps to automate releasing updates from a VSTS build or release definition:   Install the App Store extension from the VSTS Marketplace  Go to your VSTS or TFS project, click on the  Build  tab, and create a new build definition (the \"+\" icon) that is hooked up to your project's appropriate source repo  Click  Add build step...  and select the necessary tasks to generate your release assets (e.g. Gulp, Cordova Build)  Click  Add build step...  and select  App Store Release  from the  Deploy  category  Configure the  App Store Release  task with the desired authentication method, the generated IPA file path, and the desired release track.   Now when you build, your app will automatically be published to  App Store Connect !",
            "title": "Getting Started"
        },
        {
            "location": "/best-practices/continuous-integration/azure-devops/#configuring-fastlane-versions",
            "text": "The extension can be configured to install the latest version of  fastlane  or a specific version of  fastlane :   In the Build for your project, click on the  Apple App Store  task (supported in both  Apple App Store Release  and  Apple App Store Promote ), go to the  Advanced  section of the Task, click  Install fastlane  Optionally, select  Specific Version  from  fastlane version , and enter a specific version of  fastlane",
            "title": "Configuring fastlane versions"
        },
        {
            "location": "/best-practices/continuous-integration/azure-devops/#more-information",
            "text": "For more documentation, see the  Apple App Store  in the Visual Studio Team Server marketplace.",
            "title": "More Information"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/",
            "text": "Bamboo Integration\n\n\nRepository setup\n\n\nIn bamboo under \nLinked Repositories\n (where you configure your git repo) under \nAdvanced Settings\n is an option called \nExclude changesets\n\n\nThis dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.\n\n\nFor example, if your \nFastfile\n is configured to make a commit message in the style of\n\n\nBuild Version bump by fastlane to Version [0.3] Build [8]\n\n\n\n\nThen you could use the following regex to ignore these commits\n\n\n^.*Build Version bump by fastlane.*$\n\n\n\n\nSetting repository remote\n\n\nBy default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the  \ngit remote\n information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:\n\n\n# In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name \"<COMMITTER USERNAME>\"')\nsh('git config user.email <COMITTER EMAIL>')\n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)\n\n\n\n\nSpeeding up build times with carthage\n\n\nCarthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run \ncarthage\n EVERY time you check in a small line of code.\n\n\nOne way to make build times faster is to break your work up into two separate build plans (\nthis can get even more funky if you start having multiple branches\n)\n\n\nThe general idea is to make a build plan: \nProject - Artifacts\n that builds the \nCarthage\n directory and stores it as a shared artifact.  Then you create a second build plan \nProject - Fastlane\n that pulls down the \nCarthage\n directory and runs \nfastlane\n.\n\n\nArtifact Plan\n\n\nUse a simple setup to create this build plan. First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the \nCartfile\n changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.\n\n\nStages / Jobs / Tasks\n\n\nThis plan consists of 1 Job, 1 Stage and 2 Tasks\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nScript\n (\ncarthage update\n)\n\n\n\n\nArtifact definitions\n\n\nCreate a shared artifact with the following info:\n\n\n\n\nName:\n CarthageFolder\n\n\nLocation:\n (leave blank)\n\n\nCopy Pattern:\n Carthage/Build/**\n\n\n\n\nOptional\n: You may want to automatically make the \nfastlane plan\n trigger whenever this plan is built\n\n\nfastlane\n plan\n\n\nWhen configuring \nfastlane\n to run in this setup you need to make sure that you are not calling either:\n\n\nreset_git_repo(force: true)\n\n\n\n\nor\n\n\nensure_git_status_clean\n\n\n\n\nas these calls will either fail the build or delete the \nCarthage\n directory.  Additionally you want to remove any \ncarthage\n tasks from inside your \nFastfile\n as \ncarthage\n is now happening externally to the build.\n\n\nBuild plan setup\n\n\nWhat this build plan does is it checks out the source code, then it downloads the entire \nCarthage/Build/\n directory into your local project - which is exactly what would be created from \ncarthage bootstrap\n and then it runs \nfastlane\n\n\n\n\nTask 1: \nSource Code Checkout\n\n\nTask 2: \nArtifact Download\n\n\nTask 3: \nfastlane",
            "title": "Bamboo"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#bamboo-integration",
            "text": "",
            "title": "Bamboo Integration"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#repository-setup",
            "text": "In bamboo under  Linked Repositories  (where you configure your git repo) under  Advanced Settings  is an option called  Exclude changesets  This dialog will allow you to enter a regular expression that if a commit matches, a build will not be triggered.  For example, if your  Fastfile  is configured to make a commit message in the style of  Build Version bump by fastlane to Version [0.3] Build [8]  Then you could use the following regex to ignore these commits  ^.*Build Version bump by fastlane.*$",
            "title": "Repository setup"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#setting-repository-remote",
            "text": "By default bamboo will do an anonymous shallow clone of the repo.  This will not preserve the   git remote  information nor the list of tags.  If you are using bamboo to create commits you may want to use a code block similar to the following:  # In prep for eventually committing a version/build bump - set the git params\nsh('git config user.name \"<COMMITTER USERNAME>\"')\nsh('git config user.email <COMITTER EMAIL>')\n\n# Bamboo does an anonymous checkout so in order to update the build versions must set the git repo URL\ngit_remote_cmd = 'git remote set-url origin ' + ENV['bamboo_repository_git_repositoryUrl']\nsh(git_remote_cmd)",
            "title": "Setting repository remote"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#speeding-up-build-times-with-carthage",
            "text": "Carthage is a wonderful dependency manager but once you are start using a large number of frameworks, things can start to slow down, especially if your CI server has to run  carthage  EVERY time you check in a small line of code.  One way to make build times faster is to break your work up into two separate build plans ( this can get even more funky if you start having multiple branches )  The general idea is to make a build plan:  Project - Artifacts  that builds the  Carthage  directory and stores it as a shared artifact.  Then you create a second build plan  Project - Fastlane  that pulls down the  Carthage  directory and runs  fastlane .",
            "title": "Speeding up build times with carthage"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#artifact-plan",
            "text": "Use a simple setup to create this build plan. First off you want to make sure this plan is manually triggered only - because you only need to run it whenever the  Cartfile  changes as opposed to after ever single commit.  It could also be on a nightly build perhaps if you desire.",
            "title": "Artifact Plan"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#stages-jobs-tasks",
            "text": "This plan consists of 1 Job, 1 Stage and 2 Tasks   Task 1:  Source Code Checkout  Task 2:  Script  ( carthage update )",
            "title": "Stages / Jobs / Tasks"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#artifact-definitions",
            "text": "Create a shared artifact with the following info:   Name:  CarthageFolder  Location:  (leave blank)  Copy Pattern:  Carthage/Build/**   Optional : You may want to automatically make the  fastlane plan  trigger whenever this plan is built",
            "title": "Artifact definitions"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#fastlane-plan",
            "text": "When configuring  fastlane  to run in this setup you need to make sure that you are not calling either:  reset_git_repo(force: true)  or  ensure_git_status_clean  as these calls will either fail the build or delete the  Carthage  directory.  Additionally you want to remove any  carthage  tasks from inside your  Fastfile  as  carthage  is now happening externally to the build.",
            "title": "fastlane plan"
        },
        {
            "location": "/best-practices/continuous-integration/bamboo/#build-plan-setup",
            "text": "What this build plan does is it checks out the source code, then it downloads the entire  Carthage/Build/  directory into your local project - which is exactly what would be created from  carthage bootstrap  and then it runs  fastlane   Task 1:  Source Code Checkout  Task 2:  Artifact Download  Task 3:  fastlane",
            "title": "Build plan setup"
        },
        {
            "location": "/best-practices/continuous-integration/bitrise/",
            "text": "Integrating Fastlane into Bitrise\n\n\nBitrise\n is a \nhosted CI/CD solution \n where you can run your \nfastlane\n lane with the same commands you would use locally. Bitrise\u2019s automated Steps provide extra functionality to your lane and speed up your builds.\n\n\nHere is how you can benefit from integrating \nfastlane\n into Bitrise.\n\n\n\n\nBitrise has an automated \nStep\n, called \nFastlane Match\n for the popular \nfastlane match tool\n, which takes care of code signing your project by cloning your private certificate/profile repository and registering the certificates and profiles in the keychain.\n\n\nOn Bitrise you can run separate lanes for separate branches automatically. For example, you can run a lane for every code push onto the\u00a0master\u00a0branch to update screenshots and metadata on the App Store and to release the distribution version. You can run a separate lane for the\u00a0develop\u00a0branch to run your automated tests and deploy your test releases for your QA team. You can simply clone the \nWorkflow\n multiple times, specify the lane to run for the given Workflow in a Workflow Specific Environment Variable, and use the\u00a0\nTriggers\n\u00a0feature\u00a0to define which Workflow should be selected for this branch, tag or pull request.\n\n\n\n\nBefore you start:\n\n\n\n\nNote that two-factor authentication (2FA) is mandatory for all Apple Developer Portal accounts. If, during your build, Bitrise needs to access your Apple Developer Portal account, it will have to go through 2FA. This applies even if you use\u00a0\nfastlane\n. To make this work,\u00a0\nconnect your Apple Developer Account to Bitrise\n. This allows Bitrise to reuse your authentication sessions for 30 days, so you do not have to manually go through 2FA on every single occasion.\n\n\nIf a \nGemfile\n\u00a0exists in your\u00a0\nwork_dir\n\u00a0directory, \nfastlane\n will be used by calling\u00a0\nbundle install\n\u00a0then\u00a0\nbundle exec\n. \n\n\nFastfile\n is your configuration file that can be run with \nfastlane\n. Make sure you have it inside your \n./fastlane directory\n.\n\n\n\n\nSetting up Fastlane on Bitrise\n\n\nRunning \nfastlane\n on Bitrise is as simple as adding one \nStep\n to your Workflow and setting some options. Let\u2019s see how!\n\n\n\n\nAdd the \nFastlane\n Step to your Workflow by clicking the \n+\n sign. Make sure it is inserted right after the \nGit Clone\n Step. Since \nfastlane\n is pre-installed on all Bitrise\u2019s virtual machines, the \nFastlane\n Step ensures that you can always use the required \nfastlane\n version.\n\n\nTo code sign your project, you have a couple of options to choose from. Add one of \nBitrise\u2019s code signing Steps\n to your Workflow such as\n\n\nCertificate and profile installer\n.\n\n\niOS Auto Provision\n.\n\n\nFastlane Match.\n  \n\n\n\n\n\n\nAlternatively, use \nfastlane match\n inside your fastlane lane instead of a code signing Step. Make sure you either use the \nFastlane Match\n Step or set up \nfastlane match\n in your lane but don\u2019t try to do both.\n\n\nClick the \nFastlane\n Step to fill out the required fields.\n\n\nAdd your lane in the \nfastlane lane\n input. \n\n\nUse \nWorking directory\n field if the \nfastlane\n directory is not in your repository's root. The working directory should be the parent directory of your \nFastfile\n's directory. For example, if the \nFastfile\n path is\u00a0\n./here/is/my/fastlane/Fastfile\n, then the \nFastfile\n's directory is\u00a0\n./here/is/my/fastlane\n, so the Working Directory should be\u00a0\n./here/is/my\n.\n\n\nThe \nShould update fastlane gem before run?\n option will be skipped if you have a\u00a0Gemfile\u00a0in the\u00a0\nwork_dir\n\u00a0directory. If you don't have a Gemfile and this option is enabled, then the Step tries to use and run the latest \nfastlane\n version.\n\n\nSet the \nEnable verbose logging?\n to \nyes\n if you wish to get more detailed logs on your failed builds.\n\n\nIf the \nEnable collecting files to be included in build cache\n is set to yes, the Step adds the following cache items (if they exist):\n\n\n\n\n\n\nPods -> \nPodfile.lock\n\n\nCarthage -> \nCartfile.resolved\n\n\nAndroid dependencies\n\n\n\n\nThat\u2019s it! \nStart running your build \nso that Bitrise can run your lane.",
            "title": "Bitrise"
        },
        {
            "location": "/best-practices/continuous-integration/bitrise/#integrating-fastlane-into-bitrise",
            "text": "Bitrise  is a  hosted CI/CD solution   where you can run your  fastlane  lane with the same commands you would use locally. Bitrise\u2019s automated Steps provide extra functionality to your lane and speed up your builds.  Here is how you can benefit from integrating  fastlane  into Bitrise.   Bitrise has an automated  Step , called  Fastlane Match  for the popular  fastlane match tool , which takes care of code signing your project by cloning your private certificate/profile repository and registering the certificates and profiles in the keychain.  On Bitrise you can run separate lanes for separate branches automatically. For example, you can run a lane for every code push onto the\u00a0master\u00a0branch to update screenshots and metadata on the App Store and to release the distribution version. You can run a separate lane for the\u00a0develop\u00a0branch to run your automated tests and deploy your test releases for your QA team. You can simply clone the  Workflow  multiple times, specify the lane to run for the given Workflow in a Workflow Specific Environment Variable, and use the\u00a0 Triggers \u00a0feature\u00a0to define which Workflow should be selected for this branch, tag or pull request.   Before you start:   Note that two-factor authentication (2FA) is mandatory for all Apple Developer Portal accounts. If, during your build, Bitrise needs to access your Apple Developer Portal account, it will have to go through 2FA. This applies even if you use\u00a0 fastlane . To make this work,\u00a0 connect your Apple Developer Account to Bitrise . This allows Bitrise to reuse your authentication sessions for 30 days, so you do not have to manually go through 2FA on every single occasion.  If a  Gemfile \u00a0exists in your\u00a0 work_dir \u00a0directory,  fastlane  will be used by calling\u00a0 bundle install \u00a0then\u00a0 bundle exec .   Fastfile  is your configuration file that can be run with  fastlane . Make sure you have it inside your  ./fastlane directory .",
            "title": "Integrating Fastlane into Bitrise"
        },
        {
            "location": "/best-practices/continuous-integration/bitrise/#setting-up-fastlane-on-bitrise",
            "text": "Running  fastlane  on Bitrise is as simple as adding one  Step  to your Workflow and setting some options. Let\u2019s see how!   Add the  Fastlane  Step to your Workflow by clicking the  +  sign. Make sure it is inserted right after the  Git Clone  Step. Since  fastlane  is pre-installed on all Bitrise\u2019s virtual machines, the  Fastlane  Step ensures that you can always use the required  fastlane  version.  To code sign your project, you have a couple of options to choose from. Add one of  Bitrise\u2019s code signing Steps  to your Workflow such as  Certificate and profile installer .  iOS Auto Provision .  Fastlane Match.       Alternatively, use  fastlane match  inside your fastlane lane instead of a code signing Step. Make sure you either use the  Fastlane Match  Step or set up  fastlane match  in your lane but don\u2019t try to do both.  Click the  Fastlane  Step to fill out the required fields.  Add your lane in the  fastlane lane  input.   Use  Working directory  field if the  fastlane  directory is not in your repository's root. The working directory should be the parent directory of your  Fastfile 's directory. For example, if the  Fastfile  path is\u00a0 ./here/is/my/fastlane/Fastfile , then the  Fastfile 's directory is\u00a0 ./here/is/my/fastlane , so the Working Directory should be\u00a0 ./here/is/my .  The  Should update fastlane gem before run?  option will be skipped if you have a\u00a0Gemfile\u00a0in the\u00a0 work_dir \u00a0directory. If you don't have a Gemfile and this option is enabled, then the Step tries to use and run the latest  fastlane  version.  Set the  Enable verbose logging?  to  yes  if you wish to get more detailed logs on your failed builds.  If the  Enable collecting files to be included in build cache  is set to yes, the Step adds the following cache items (if they exist):    Pods ->  Podfile.lock  Carthage ->  Cartfile.resolved  Android dependencies   That\u2019s it!  Start running your build  so that Bitrise can run your lane.",
            "title": "Setting up Fastlane on Bitrise"
        },
        {
            "location": "/best-practices/continuous-integration/circle-ci/",
            "text": "CircleCI Integration\n\n\nTo run fastlane on CircleCI, first create a \nGemfile\n in the root of your project with the following content:\n\n\n# Gemfile\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\nand run\n\n\ngem install bundler && bundle update\n\n\n\n\nThis will create a \nGemfile.lock\n that defines all Ruby dependencies.  Make sure\nto commit both files to version control.\n\n\nNext, add the following to your \nFastfile\n:\n\n\n# fastlane/Fastfile\n\n...\nplatform :ios do\n  before_all do\n    setup_circle_ci\n  end\n  ...\nend\n\n\n\n\nThe \nsetup_circle_ci\n \nfastlane\n action will perform the following actions:\n\n\n\n\nCreate a new temporary keychain for use with\n  \nmatch\n (see the \nCircleCI code signing\n  doc\n for more details).\n\n\nSwitch \nmatch\n to readonly mode to make sure CI does not create new\n  code signing certificates or provisioning profiles.\n\n\nSet up log and test result paths to be easily collectible.\n\n\n\n\nNext, create a \n.circleci\n directory in your project and add a\n\n.circleci/config.yml\n with the following content:\n\n\n# .circleci/config.yml\n\nversion: 2\njobs:\n  build:\n    macos:\n      xcode: \"11.3\"\n    working_directory: /Users/distiller/project\n    environment:\n      FL_OUTPUT_DIR: output\n      FASTLANE_LANE: test\n    shell: /bin/bash --login -o pipefail\n    steps:\n      - checkout\n      - restore_cache:\n          key: 1-gems-{{ checksum \"Gemfile.lock\" }}\n      - run: bundle check || bundle install --path vendor/bundle\n      - save_cache:\n          key: 1-gems-{{ checksum \"Gemfile.lock\" }}\n          paths:\n            - vendor/bundle\n      - run:\n          name: fastlane\n          command: bundle exec fastlane $FASTLANE_LANE\n      - store_artifacts:\n          path: output\n      - store_test_results:\n          path: output/scan\n\n\n\n\nThis will do the following:\n\n\n\n\nCreate and use a Ruby gems cache.\n\n\nRun the test lane on all pushes.\n\n\nCollect Junit test results and store log output in the Artifacts tab.\n\n\n\n\nCheck out \nthe CircleCI iOS doc\n for more detailed examples of using fastlane on CircleCI.",
            "title": "CircleCI"
        },
        {
            "location": "/best-practices/continuous-integration/circle-ci/#circleci-integration",
            "text": "To run fastlane on CircleCI, first create a  Gemfile  in the root of your project with the following content:  # Gemfile\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"  and run  gem install bundler && bundle update  This will create a  Gemfile.lock  that defines all Ruby dependencies.  Make sure\nto commit both files to version control.  Next, add the following to your  Fastfile :  # fastlane/Fastfile\n\n...\nplatform :ios do\n  before_all do\n    setup_circle_ci\n  end\n  ...\nend  The  setup_circle_ci   fastlane  action will perform the following actions:   Create a new temporary keychain for use with\n   match  (see the  CircleCI code signing\n  doc  for more details).  Switch  match  to readonly mode to make sure CI does not create new\n  code signing certificates or provisioning profiles.  Set up log and test result paths to be easily collectible.   Next, create a  .circleci  directory in your project and add a .circleci/config.yml  with the following content:  # .circleci/config.yml\n\nversion: 2\njobs:\n  build:\n    macos:\n      xcode: \"11.3\"\n    working_directory: /Users/distiller/project\n    environment:\n      FL_OUTPUT_DIR: output\n      FASTLANE_LANE: test\n    shell: /bin/bash --login -o pipefail\n    steps:\n      - checkout\n      - restore_cache:\n          key: 1-gems-{{ checksum \"Gemfile.lock\" }}\n      - run: bundle check || bundle install --path vendor/bundle\n      - save_cache:\n          key: 1-gems-{{ checksum \"Gemfile.lock\" }}\n          paths:\n            - vendor/bundle\n      - run:\n          name: fastlane\n          command: bundle exec fastlane $FASTLANE_LANE\n      - store_artifacts:\n          path: output\n      - store_test_results:\n          path: output/scan  This will do the following:   Create and use a Ruby gems cache.  Run the test lane on all pushes.  Collect Junit test results and store log output in the Artifacts tab.   Check out  the CircleCI iOS doc  for more detailed examples of using fastlane on CircleCI.",
            "title": "CircleCI Integration"
        },
        {
            "location": "/best-practices/continuous-integration/gitlab/",
            "text": "GitLab CI Integration\n\n\nUse \nGitLab Runner\n running on a macOS machine\nto build using fastlane.\n\n\nRepository setup\n\n\nFirst create a \nGemfile\n in the root of your project with the following content:\n\n\nsource \"https://rubygems.org\"\n\ngem \"fastlane\"\n\n\n\n\nAdd a \n.gitlab-ci.yml\n file to trigger \nfastlane\n.\n\n\nstages:\n  - unit_tests\n  - test_flight\n\nvariables:\n  LC_ALL: \"en_US.UTF-8\"\n  LANG: \"en_US.UTF-8\"\n\nbefore_script:\n  - gem install bundler\n  - bundle install\n\nunit_tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios\n\ntest_flight_build:\n  dependencies: []\n  stage: test_flight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags:\n    - ios\n  only:\n     - /^release-.*$/\n     - master\n\n\n\n\nSee \nthe \n.gitlab-ci.yml\n documentation\n\nfor more information on how this file works.\n\n\nSetting up the lanes\n\n\nYou should have a lane - in this example called \nbeta\n - which should do the usual, \nmatch\n, \ngym\n, \npilot\n, to distribute an updated Test Flight version, and one lane \ntests\n which calls \nscan\n to run UI Tests.\n\n\nAuto-incremented build number.\n\n\nTo get an auto-incremented build number you can use something like the following lane:\n\n\nlane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_JOB_ID'])\nend\n\n\n\n\nThen the GitLab CI job ID (which iterates on each build) will be used.",
            "title": "GitLab CI"
        },
        {
            "location": "/best-practices/continuous-integration/gitlab/#gitlab-ci-integration",
            "text": "Use  GitLab Runner  running on a macOS machine\nto build using fastlane.",
            "title": "GitLab CI Integration"
        },
        {
            "location": "/best-practices/continuous-integration/gitlab/#repository-setup",
            "text": "First create a  Gemfile  in the root of your project with the following content:  source \"https://rubygems.org\"\n\ngem \"fastlane\"  Add a  .gitlab-ci.yml  file to trigger  fastlane .  stages:\n  - unit_tests\n  - test_flight\n\nvariables:\n  LC_ALL: \"en_US.UTF-8\"\n  LANG: \"en_US.UTF-8\"\n\nbefore_script:\n  - gem install bundler\n  - bundle install\n\nunit_tests:\n  dependencies: []\n  stage: unit_tests\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane tests\n  tags:\n    - ios\n\ntest_flight_build:\n  dependencies: []\n  stage: test_flight\n  artifacts:\n    paths:\n      - fastlane/screenshots\n      - fastlane/logs\n  script:\n    - fastlane beta\n  tags:\n    - ios\n  only:\n     - /^release-.*$/\n     - master  See  the  .gitlab-ci.yml  documentation \nfor more information on how this file works.",
            "title": "Repository setup"
        },
        {
            "location": "/best-practices/continuous-integration/gitlab/#setting-up-the-lanes",
            "text": "You should have a lane - in this example called  beta  - which should do the usual,  match ,  gym ,  pilot , to distribute an updated Test Flight version, and one lane  tests  which calls  scan  to run UI Tests.",
            "title": "Setting up the lanes"
        },
        {
            "location": "/best-practices/continuous-integration/gitlab/#auto-incremented-build-number",
            "text": "To get an auto-incremented build number you can use something like the following lane:  lane :increment_build_number do\n  increment_build_number(build_number: ENV['CI_JOB_ID'])\nend  Then the GitLab CI job ID (which iterates on each build) will be used.",
            "title": "Auto-incremented build number."
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/",
            "text": "Jenkins Integration\n\n\nInstallation\n\n\nThe recommended way to install \nJenkins\n is through \nhomebrew\n:\n\n\nbrew update && brew install jenkins\n\n\n\n\nFrom now on start \nJenkins\n by running:\n\n\njenkins\n\n\n\n\nTo store the password in the Keychain of your remote machine, it is recommended that you run \nmatch\n or \ndeliver\n using ssh or remote desktop at least once.\n\n\nRuby Environment\n\n\nWe recommend using \nrbenv\n for installing Ruby, though \nrvm\n and the version of Ruby that comes bundled on macOS are fine too.\n\n\nIf using a Gemfile in your project, add an \"Execute shell\" step as your first build step and call \nbundle update\n.\n\n\nPlugins\n\n\nYou'll find the following Jenkins plugins to be useful:\n\n\n(note: We do not recommend installing the Xcode plugin)\n\n\n\n\nHTML Publisher Plugin\n:\n Can be used to show the generated screenshots right inside Jenkins.\n\n\nAnsiColor Plugin\n:\n Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable \nColor ANSI Console Output\n in the \nBuild Environment\n or your project.\n\n\nRebuild Plugin\n:\n This plugin will save you a lot of time.\n\n\nKeychains and Provisioning Profiles Plugin\n:\n Manages keychains across Jenkins installations.\n\n\n\n\nBuild Step\n\n\nAdd an \"Execute shell\" build step using your appropriate \nfastlane\n command per the example below:\n\n\nfastlane appstore\n\n\n\n\nReplace \nappstore\n with the lane you want to use.\n\n\n(note: if using a Gemfile, prefix that command with \nbundle exec\n)\n\n\nsetup_jenkins\n\n\nYou can use \nsetup_jenkins\n action which integrates well with the \nKeychains and Provisioning Profiles Plugin\n. Selected keychain will be automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the \n./output\n folder in the job workspace. In additions \nsetup_jenkins\n will create separate derived data folder for each job (in the \n./derivedData\n).\n\n\nUnder the hood \nsetup_jenkins\n configures other actions like: \ngym\n, \nscan\n, \nxcodebuild\n, \nbackup_xcarchive\n and \nclear_derived_data\n.\n\n\ncommit_version_bump || git_commit\n\n\nYou can use \ncommit_version_bump\n or \ngit_commit\n action to commit changes to your repository in your fastlane setup. When you are using webhooks to trigger your build on a push this will cause an infinite loop of triggering builds.\n\n\nGitlab\n\n\nWhen you are using Gitlab you will need the \nGitLab Plugin\n. Inside the job you want to configure you go to \nBuild Triggers > Build when a change is pushed to GitLab > Enable [ci-skip]\n.\nWhen you include \n[ci-skip]\n in your build this commit won't trigger the build in jenkins at all.\n\n\nExample\n  \n\n\nbuild_number = increment_build_number\ncommit_version_bump(message:\"[ci-skip] Version Bump to #{build_number}\")\ngit_commit(path:\"./CHANGELOG.md\", message:\"[ci-skip] Updated CHANGELOG for Build #{build_number}\")\npush_to_git_remote\n\n\n\n\nTest Results and Screenshots\n\n\nTo show the \ndeployment result\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish JUnit test result report\n\n\nTest report XMLs\n: \nfastlane/report.xml\n\n\n\n\nTo show the \ngenerated screenshots\n right in \nJenkins\n\n\n\n\nAdd post-build action\n\n\nPublish HTML reports\n\n\nHTML directory to archive\n: \nfastlane/screenshots\n\n\nIndex page\n: \nscreenshots.html\n\n\n\n\nSave and run. The result should look like this:",
            "title": "Jenkins"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#jenkins-integration",
            "text": "",
            "title": "Jenkins Integration"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#installation",
            "text": "The recommended way to install  Jenkins  is through  homebrew :  brew update && brew install jenkins  From now on start  Jenkins  by running:  jenkins  To store the password in the Keychain of your remote machine, it is recommended that you run  match  or  deliver  using ssh or remote desktop at least once.",
            "title": "Installation"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#ruby-environment",
            "text": "We recommend using  rbenv  for installing Ruby, though  rvm  and the version of Ruby that comes bundled on macOS are fine too.  If using a Gemfile in your project, add an \"Execute shell\" step as your first build step and call  bundle update .",
            "title": "Ruby Environment"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#plugins",
            "text": "You'll find the following Jenkins plugins to be useful:  (note: We do not recommend installing the Xcode plugin)   HTML Publisher Plugin :  Can be used to show the generated screenshots right inside Jenkins.  AnsiColor Plugin :  Used to show the coloured output of the fastlane tools. Don\u2019t forget to enable  Color ANSI Console Output  in the  Build Environment  or your project.  Rebuild Plugin :  This plugin will save you a lot of time.  Keychains and Provisioning Profiles Plugin :  Manages keychains across Jenkins installations.",
            "title": "Plugins"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#build-step",
            "text": "Add an \"Execute shell\" build step using your appropriate  fastlane  command per the example below:  fastlane appstore  Replace  appstore  with the lane you want to use.  (note: if using a Gemfile, prefix that command with  bundle exec )",
            "title": "Build Step"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#setup_jenkins",
            "text": "You can use  setup_jenkins  action which integrates well with the  Keychains and Provisioning Profiles Plugin . Selected keychain will be automatically unlocked and the selected code signing identity will be used. Also all build results, like IPA files, archives, dSYMs and result bundles will be stored in the  ./output  folder in the job workspace. In additions  setup_jenkins  will create separate derived data folder for each job (in the  ./derivedData ).  Under the hood  setup_jenkins  configures other actions like:  gym ,  scan ,  xcodebuild ,  backup_xcarchive  and  clear_derived_data .",
            "title": "setup_jenkins"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#commit_version_bump-git_commit",
            "text": "You can use  commit_version_bump  or  git_commit  action to commit changes to your repository in your fastlane setup. When you are using webhooks to trigger your build on a push this will cause an infinite loop of triggering builds.",
            "title": "commit_version_bump || git_commit"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#gitlab",
            "text": "When you are using Gitlab you will need the  GitLab Plugin . Inside the job you want to configure you go to  Build Triggers > Build when a change is pushed to GitLab > Enable [ci-skip] .\nWhen you include  [ci-skip]  in your build this commit won't trigger the build in jenkins at all.  Example     build_number = increment_build_number\ncommit_version_bump(message:\"[ci-skip] Version Bump to #{build_number}\")\ngit_commit(path:\"./CHANGELOG.md\", message:\"[ci-skip] Updated CHANGELOG for Build #{build_number}\")\npush_to_git_remote",
            "title": "Gitlab"
        },
        {
            "location": "/best-practices/continuous-integration/jenkins/#test-results-and-screenshots",
            "text": "To show the  deployment result  right in  Jenkins   Add post-build action  Publish JUnit test result report  Test report XMLs :  fastlane/report.xml   To show the  generated screenshots  right in  Jenkins   Add post-build action  Publish HTML reports  HTML directory to archive :  fastlane/screenshots  Index page :  screenshots.html   Save and run. The result should look like this:",
            "title": "Test Results and Screenshots"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/",
            "text": "Nevercode Integration\n\n\nWith \nNevercode\n you can set up automated builds for your Android and iOS application using \nfastlane\n. You only need a \nFastfile\n in your repository to get started.\n\n\nSpecify app repository\n\n\n\n\nClick \nAdd a new app\n on Nevercode dashboard.\n\n\nChoose whether to add your application via supported providers using OAuth or add it manually using the other available \nauthentication methods\n.\n\n\n\n\nDefine the lane to be built\n\n\nAfter specifying app repository, Nevercode takes a first look at it by listing the \nbranches\n in this repository. The next step for you is to select the branch you want Nevercode to scan for projects.\n\n\n\n\nSelect a \nbranch\n from the dropdown that Nevercode should scan. \nNote\n that you can change the branch later if needed.\n\n\nClick \nScan branch\n.\nNevercode scans the repository from the specified branch. This includes cloning the repository, looking up the available \nFastfiles\n and listing the pre-configured \nlanes\n. All this can be monitored real-time from your browser via the live log window.\n\n\nOnce scanning the branch has finished, choose the \nlane\n which will be executed as the main build step by Nevercode.\n\n\nFinalize the setup by checking the appropriate \nbuild options\n and click \nSave and start build\n.\n\n\n\n\nExternal dependencies\n\n\nNevercode does not automatically install CocoaPods, Carthage or any other external dependencies for \nfastlane\n projects. Please use the \nfastlane\n's built-in \nactions\n, such as \ncocoapods\n and \ncarthage\n, to gain control of that.\n\n\nCode signing\n\n\nTo perform code signing on your iOS app, you can either follow the best practices laid out in \nfastlane\n docs\n, or you could also make use of \nNevercode's standard code signing methods\n.\n\n\nWhen invoking \nmatch\n from the \nFastfile\n, keep in mind that you need to \ngrant access to the credentials repository\n and expose the \nmatch\n passphrase\n during the build. Both can be securely achieved thanks to the well designed environment variable support of \nfastlane\n and Nevercode's support for several SSH keys for authentication.\n\n\nIn your app settings on Nevercode, navigate to the \nEnvironment\n tab to manage environment variables and files:\n\n\n\n\nmatch\n passphrase can be defined as a \nMATCH_PASSWORD\n environment file \u2014 this will be automatically detected by \nfastlane\n and used to decrypt the credentials repository.\n\n\nYou can upload the SSH key for cloning the credentials repository as an environment file, i.e. \nMATCH_SSH_KEY\n. All environment files whose variable name has the suffix \n_SSH_KEY\n will be automatically added to the SSH agent and will be ready for use during the whole build process.\n\n\n\n\nRun tests\n\n\niOS\n\n\nTesting in Nevercode with \nfastlane\n for iOS is 100% automatic. By default, \nscan\n is used to invoke the test run, but you can easily swap it out for any other \nlane\n that you have configured for your test runs. Test results are automatically collected and you don't need to do anything to convert the results from one format to another or place them in a special location on the build machine.\n\n\nWarning\n\n\nIn case you wish to run tests as part of the main build step, we suggest that you use \nTrainer\n to generate reliable JUnit results from the test run and put the results in a directory where we can discover them:\n\n\ntrainer(output_directory: ENV[\"NEVERCODE_XUNIT_RESULTS_DIR\"])\n\n\n\n\nAndroid\n\n\nNevercode detects your \nfastlane\n tests for Android\n automatically. However, tests are disabled by default and have to be enabled manually.\n\n\n\n\nIn your app settings on Nevercode, navigate to the \nTest\n tab.\n\n\nClick on \nfastlane\n Gradle\n to expand it.\n\n\nSelect \nEnabled\n and type the \nlane name\n for tests as specified in your \nFastfile\n.\n\n\nIf you would like to run the tests on Android emulator, make sure to select \nRequire Android emulator\n.\n\n\nClick \nSave\n to finish the setup. Your \nfastlane\n tests will be enabled and run each time you build your app.\n\n\n\n\nPublish your build artifacts\n\n\nYou can use either \nfastlane\n to take care of artifact distribution or choose from a number of \nNevercode's own integrations\n.\n\n\nManage build versions\n\n\nTo make your build version management easy, Nevercode exports the \nNEVERCODE_BUILD_NUMBER\n environment variable that you can use in your build script. For instance, you could make use of it within \nincrement_version_number\n action to define a new version for each build.\n\n\nMore Information\n\n\nCheck out \nNevercode documentation\n for more.",
            "title": "NeverCode"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#nevercode-integration",
            "text": "With  Nevercode  you can set up automated builds for your Android and iOS application using  fastlane . You only need a  Fastfile  in your repository to get started.",
            "title": "Nevercode Integration"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#specify-app-repository",
            "text": "Click  Add a new app  on Nevercode dashboard.  Choose whether to add your application via supported providers using OAuth or add it manually using the other available  authentication methods .",
            "title": "Specify app repository"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#define-the-lane-to-be-built",
            "text": "After specifying app repository, Nevercode takes a first look at it by listing the  branches  in this repository. The next step for you is to select the branch you want Nevercode to scan for projects.   Select a  branch  from the dropdown that Nevercode should scan.  Note  that you can change the branch later if needed.  Click  Scan branch .\nNevercode scans the repository from the specified branch. This includes cloning the repository, looking up the available  Fastfiles  and listing the pre-configured  lanes . All this can be monitored real-time from your browser via the live log window.  Once scanning the branch has finished, choose the  lane  which will be executed as the main build step by Nevercode.  Finalize the setup by checking the appropriate  build options  and click  Save and start build .",
            "title": "Define the lane to be built"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#external-dependencies",
            "text": "Nevercode does not automatically install CocoaPods, Carthage or any other external dependencies for  fastlane  projects. Please use the  fastlane 's built-in  actions , such as  cocoapods  and  carthage , to gain control of that.",
            "title": "External dependencies"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#code-signing",
            "text": "To perform code signing on your iOS app, you can either follow the best practices laid out in  fastlane  docs , or you could also make use of  Nevercode's standard code signing methods .  When invoking  match  from the  Fastfile , keep in mind that you need to  grant access to the credentials repository  and expose the  match  passphrase  during the build. Both can be securely achieved thanks to the well designed environment variable support of  fastlane  and Nevercode's support for several SSH keys for authentication.  In your app settings on Nevercode, navigate to the  Environment  tab to manage environment variables and files:   match  passphrase can be defined as a  MATCH_PASSWORD  environment file \u2014 this will be automatically detected by  fastlane  and used to decrypt the credentials repository.  You can upload the SSH key for cloning the credentials repository as an environment file, i.e.  MATCH_SSH_KEY . All environment files whose variable name has the suffix  _SSH_KEY  will be automatically added to the SSH agent and will be ready for use during the whole build process.",
            "title": "Code signing"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#run-tests",
            "text": "",
            "title": "Run tests"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#ios",
            "text": "Testing in Nevercode with  fastlane  for iOS is 100% automatic. By default,  scan  is used to invoke the test run, but you can easily swap it out for any other  lane  that you have configured for your test runs. Test results are automatically collected and you don't need to do anything to convert the results from one format to another or place them in a special location on the build machine.",
            "title": "iOS"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#warning",
            "text": "In case you wish to run tests as part of the main build step, we suggest that you use  Trainer  to generate reliable JUnit results from the test run and put the results in a directory where we can discover them:  trainer(output_directory: ENV[\"NEVERCODE_XUNIT_RESULTS_DIR\"])",
            "title": "Warning"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#android",
            "text": "Nevercode detects your  fastlane  tests for Android  automatically. However, tests are disabled by default and have to be enabled manually.   In your app settings on Nevercode, navigate to the  Test  tab.  Click on  fastlane  Gradle  to expand it.  Select  Enabled  and type the  lane name  for tests as specified in your  Fastfile .  If you would like to run the tests on Android emulator, make sure to select  Require Android emulator .  Click  Save  to finish the setup. Your  fastlane  tests will be enabled and run each time you build your app.",
            "title": "Android"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#publish-your-build-artifacts",
            "text": "You can use either  fastlane  to take care of artifact distribution or choose from a number of  Nevercode's own integrations .",
            "title": "Publish your build artifacts"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#manage-build-versions",
            "text": "To make your build version management easy, Nevercode exports the  NEVERCODE_BUILD_NUMBER  environment variable that you can use in your build script. For instance, you could make use of it within  increment_version_number  action to define a new version for each build.",
            "title": "Manage build versions"
        },
        {
            "location": "/best-practices/continuous-integration/nevercode/#more-information",
            "text": "Check out  Nevercode documentation  for more.",
            "title": "More Information"
        },
        {
            "location": "/best-practices/continuous-integration/semaphore/",
            "text": "Semaphore CI Integration\n\n\nSemaphore\n provides simple, fast continuous integration and delivery for your iOS apps. All \nmacOS machine images\n have \nfastlane\n pre-installed and getting up and running is quick and simple.\n\n\nAdd the Semaphore fastlane plugin\n\n\nThe \nSemaphore fastlane plugin\n creates a temporary keychain, sets \nmatch\n to read-only mode and (optionally) redirects log output from \nscan\n and \ngym\n.\n\n\nInstall the plugin from your app's project directory:\n\n\nfastlane add_plugin semaphore\n\n\n\n\nThen, from your \nFastfile\n:\n\n\nbefore_all do\n  setup_semaphore\nend\n\n\n\n\nConfigure a pipeline on Semaphore\n\n\nConfigure continuous integration pipelines on Semaphore with a \n.semaphore/semaphore.yml\n file in your app's source repository. Then, add the repository to your \nSemaphore dashboard\n and your continuous integration will start.\n\n\nFor full details of how pipelines work on Semaphore see the \ndocumentation\n, or the \nexample project\n.\n\n\nExample Pipeline\n\n\n# Use the latest stable version of Semaphore 2.0 YML syntax:\nversion: v1.0\n\n# Name your pipeline. If you choose to connect multiple pipelines with\n# promotions, the pipeline name will help you differentiate between\n# them. For example, you might have a build phase and a delivery phase.\n# For more information on promotions, see:\n# https://docs.semaphoreci.com/article/67-deploying-with-promotions\nname: Tallest Towers\n\n# The agent defines the environment in which your CI runs. It is a combination\n# of a machine type and an operating system image. For a project built with\n# Xcode you must use one of the Apple machine types, coupled with a macOS image\n# running either Xcode 10 or Xcode 11.\n# See https://docs.semaphoreci.com/article/20-machine-types\n# https://docs.semaphoreci.com/article/161-macos-mojave-xcode-10-image and\n# https://docs.semaphoreci.com/article/162-macos-mojave-xcode-11-image\nagent:\n  machine:\n    type: a1-standard-4\n    os_image: macos-mojave-xcode11\n\n# Blocks are the heart of a pipeline and are executed sequentially. Each block\n# has a task that defines one or more parallel jobs. Jobs define commands that\n# should be executed by the pipeline.\n# See https://docs.semaphoreci.com/article/62-concepts\nblocks:\n  - name: Run tests\n    task:\n      # Set environment variables that your project requires.\n      # See https://docs.semaphoreci.com/article/66-environment-variables-and-secrets\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          # Download source code from GitHub.\n          - checkout\n\n          # Restore dependencies from cache. This command will not fail in\n          # case of a cache miss. In case of a cache hit, bundle  install will\n          # complete in about a second.\n          # See https://docs.semaphoreci.com/article/68-caching-dependencies\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Test\n          commands:\n            # Select an Xcode version.\n            # See https://docs.semaphoreci.com/article/161-macos-mojave-xcode-10-image and\n            # https://docs.semaphoreci.com/article/162-macos-mojave-xcode-11-image\n            - bundle exec xcversion select 11.2.1\n\n            # Run tests of iOS and Mac app on a simulator or connected device.\n            # See https://docs.fastlane.tools/actions/scan/\n            - bundle exec fastlane test\n\n  - name: Build app\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Build\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane build\n  - name: Take screenshots\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Screenshots\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane screenshots\n            - artifact push project screenshots",
            "title": "Semaphore"
        },
        {
            "location": "/best-practices/continuous-integration/semaphore/#semaphore-ci-integration",
            "text": "Semaphore  provides simple, fast continuous integration and delivery for your iOS apps. All  macOS machine images  have  fastlane  pre-installed and getting up and running is quick and simple.",
            "title": "Semaphore CI Integration"
        },
        {
            "location": "/best-practices/continuous-integration/semaphore/#add-the-semaphore-fastlane-plugin",
            "text": "The  Semaphore fastlane plugin  creates a temporary keychain, sets  match  to read-only mode and (optionally) redirects log output from  scan  and  gym .  Install the plugin from your app's project directory:  fastlane add_plugin semaphore  Then, from your  Fastfile :  before_all do\n  setup_semaphore\nend",
            "title": "Add the Semaphore fastlane plugin"
        },
        {
            "location": "/best-practices/continuous-integration/semaphore/#configure-a-pipeline-on-semaphore",
            "text": "Configure continuous integration pipelines on Semaphore with a  .semaphore/semaphore.yml  file in your app's source repository. Then, add the repository to your  Semaphore dashboard  and your continuous integration will start.  For full details of how pipelines work on Semaphore see the  documentation , or the  example project .",
            "title": "Configure a pipeline on Semaphore"
        },
        {
            "location": "/best-practices/continuous-integration/semaphore/#example-pipeline",
            "text": "# Use the latest stable version of Semaphore 2.0 YML syntax:\nversion: v1.0\n\n# Name your pipeline. If you choose to connect multiple pipelines with\n# promotions, the pipeline name will help you differentiate between\n# them. For example, you might have a build phase and a delivery phase.\n# For more information on promotions, see:\n# https://docs.semaphoreci.com/article/67-deploying-with-promotions\nname: Tallest Towers\n\n# The agent defines the environment in which your CI runs. It is a combination\n# of a machine type and an operating system image. For a project built with\n# Xcode you must use one of the Apple machine types, coupled with a macOS image\n# running either Xcode 10 or Xcode 11.\n# See https://docs.semaphoreci.com/article/20-machine-types\n# https://docs.semaphoreci.com/article/161-macos-mojave-xcode-10-image and\n# https://docs.semaphoreci.com/article/162-macos-mojave-xcode-11-image\nagent:\n  machine:\n    type: a1-standard-4\n    os_image: macos-mojave-xcode11\n\n# Blocks are the heart of a pipeline and are executed sequentially. Each block\n# has a task that defines one or more parallel jobs. Jobs define commands that\n# should be executed by the pipeline.\n# See https://docs.semaphoreci.com/article/62-concepts\nblocks:\n  - name: Run tests\n    task:\n      # Set environment variables that your project requires.\n      # See https://docs.semaphoreci.com/article/66-environment-variables-and-secrets\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          # Download source code from GitHub.\n          - checkout\n\n          # Restore dependencies from cache. This command will not fail in\n          # case of a cache miss. In case of a cache hit, bundle  install will\n          # complete in about a second.\n          # See https://docs.semaphoreci.com/article/68-caching-dependencies\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Test\n          commands:\n            # Select an Xcode version.\n            # See https://docs.semaphoreci.com/article/161-macos-mojave-xcode-10-image and\n            # https://docs.semaphoreci.com/article/162-macos-mojave-xcode-11-image\n            - bundle exec xcversion select 11.2.1\n\n            # Run tests of iOS and Mac app on a simulator or connected device.\n            # See https://docs.fastlane.tools/actions/scan/\n            - bundle exec fastlane test\n\n  - name: Build app\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Build\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane build\n  - name: Take screenshots\n    task:\n      env_vars:\n        - name: LANG\n          value: en_US.UTF-8\n      prologue:\n        commands:\n          - checkout\n          - cache restore\n          - bundle install --path vendor/bundle\n          - cache store\n      jobs:\n        - name: Screenshots\n          commands:\n            - bundle exec xcversion select 11.2.1\n            - bundle exec fastlane screenshots\n            - artifact push project screenshots",
            "title": "Example Pipeline"
        },
        {
            "location": "/best-practices/continuous-integration/travis/",
            "text": "Travis Integration\n\n\nUpdate your \n.travis.yml\n to look like this:\n\n\nlanguage: objective-c\nosx_image: xcode8.3\ninstall:\n  - bundle install\nscript:\n  - fastlane beta\n\n\n\n\nThe above config files assume you have a \nGemfile\n set up, if you don't have one yet, make sure to follow our \nGemfile guide\n and run \nbundle update\n to make sure you're using the most recent \nfastlane\n release.\n\n\nReplace \nbeta\n with the lane you want to run for your setup. If you want to build, sign and distribute builds from Travis, you'll need to add one more action to your \nFastfile\n, as by default, the Travis keychain is locked.\n\n\nAt the top of your \nFastfile\n, add\n\n\nsetup_travis\n\n\n\n\nwhich will setup the keychain to work well with \nmatch\n and \ngym\n. This action will also enable the \nreadonly\n mode for \nmatch\n, so your CI doesn't create new certificates or provisioning profiles.",
            "title": "Travis"
        },
        {
            "location": "/best-practices/continuous-integration/travis/#travis-integration",
            "text": "Update your  .travis.yml  to look like this:  language: objective-c\nosx_image: xcode8.3\ninstall:\n  - bundle install\nscript:\n  - fastlane beta  The above config files assume you have a  Gemfile  set up, if you don't have one yet, make sure to follow our  Gemfile guide  and run  bundle update  to make sure you're using the most recent  fastlane  release.  Replace  beta  with the lane you want to run for your setup. If you want to build, sign and distribute builds from Travis, you'll need to add one more action to your  Fastfile , as by default, the Travis keychain is locked.  At the top of your  Fastfile , add  setup_travis  which will setup the keychain to work well with  match  and  gym . This action will also enable the  readonly  mode for  match , so your CI doesn't create new certificates or provisioning profiles.",
            "title": "Travis Integration"
        },
        {
            "location": "/best-practices/keys/",
            "text": "fastlane keys\n\n\nThis guide will show you the best ways to store and use your keys and sensitive secrets for services like Crashlytics, Slack, etc.\n\n\nIn your Fastfile\n\n\nlane :beta do\n  crashlytics(api_token: \"123abc\", build_secret: \"secret_key\")\nend\n\n\n\n\nor if you want to only define the keys once and use it multiple times\n\n\nENV[\"CRASHLYTICS_API_TOKEN\"] = \"123abc\"\nENV[\"CRASHLYTICS_BUILD_SECRET\"] = \"secret_key\"\n\nlane :beta do\n  crashlytics\nend\n\n\n\n\nThis is the most straight forward and easiest solution, but might cause a few issues:\n\n\n\n\nIf you ever decide to open source your application you'll have to make sure to remove the keys from your git history\n\n\nIf your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\nBash Profile\n\n\nTo not store your keys in \ngit\n, you can pass all parameters of all actions using environment variables.\n\n\nYou can edit your \n~/.bash_profile\n to include something like\n\n\nexport SLACK_URL=\"https://hooks.slack.com/services/T03NA19Q5/...\"\nexport CRASHLYTICS_API_TOKEN=\"123abc\"\n\n\n\n\nIf you use a different shell (e.g. \nzshell\n) you'll need to edit \n~/.zshrc\n instead.\n\n\nAfter editing the \n.bash_profile\n you need to either re-open your terminal session or run \nsource ~/.bash_profile\n.\n\n\nDisadvantages\n\n\n\n\nEvery terminal tool you run gets access to your environment variables. \n\n\nYou have to edit your bash profile on every computer you want to run \nfastlane\n from\n\n\nThe bash profile isn't automatically loaded by some CI-systems like Jenkins\n\n\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.\n\n\ndotenv\n\n\ndotenv\n is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.\n\n\nYou can store a default configuration in \n.env.default\n which will be loaded by \nfastlane\n automatically.\n\n\nSLACK_URL=\"https://hooks.slack.com/services/T03NA19Q5/...\"\nCRASHLYTICS_API_TOKEN=\"123abc\"\n\n\n\n\nYou might want different configurations depending on your environment.\n\n\nfastlane beta --env development\n\n\n\n\nand store the configuration in \n.env.development\n with all keys for the development environment.\n\n\nInstall \n[sudo] gem install dotenv\n or add \ndotenv\n to your \nGemfile\n. More information about the \nrecommended way to install gems\n.\n\n\nTo get the name of the available environment variables, run \nfastlane action [action_name]\n.",
            "title": "Keys"
        },
        {
            "location": "/best-practices/keys/#fastlane-keys",
            "text": "This guide will show you the best ways to store and use your keys and sensitive secrets for services like Crashlytics, Slack, etc.",
            "title": "fastlane keys"
        },
        {
            "location": "/best-practices/keys/#in-your-fastfile",
            "text": "lane :beta do\n  crashlytics(api_token: \"123abc\", build_secret: \"secret_key\")\nend  or if you want to only define the keys once and use it multiple times  ENV[\"CRASHLYTICS_API_TOKEN\"] = \"123abc\"\nENV[\"CRASHLYTICS_BUILD_SECRET\"] = \"secret_key\"\n\nlane :beta do\n  crashlytics\nend  This is the most straight forward and easiest solution, but might cause a few issues:   If you ever decide to open source your application you'll have to make sure to remove the keys from your git history  If your keys got invalidated for whatever reason and you decide to rollback your code base to an earlier stage the keys will also be rolled back   To get the name of the available environment variables, run  fastlane action [action_name] .",
            "title": "In your Fastfile"
        },
        {
            "location": "/best-practices/keys/#bash-profile",
            "text": "To not store your keys in  git , you can pass all parameters of all actions using environment variables.  You can edit your  ~/.bash_profile  to include something like  export SLACK_URL=\"https://hooks.slack.com/services/T03NA19Q5/...\"\nexport CRASHLYTICS_API_TOKEN=\"123abc\"  If you use a different shell (e.g.  zshell ) you'll need to edit  ~/.zshrc  instead.  After editing the  .bash_profile  you need to either re-open your terminal session or run  source ~/.bash_profile .  Disadvantages   Every terminal tool you run gets access to your environment variables.   You have to edit your bash profile on every computer you want to run  fastlane  from  The bash profile isn't automatically loaded by some CI-systems like Jenkins   To get the name of the available environment variables, run  fastlane action [action_name] .",
            "title": "Bash Profile"
        },
        {
            "location": "/best-practices/keys/#dotenv",
            "text": "dotenv  is a system to store your environment in a file that is project specific. Basically you have a hidden file in your project containing all the environment variables for your project.  You can store a default configuration in  .env.default  which will be loaded by  fastlane  automatically.  SLACK_URL=\"https://hooks.slack.com/services/T03NA19Q5/...\"\nCRASHLYTICS_API_TOKEN=\"123abc\"  You might want different configurations depending on your environment.  fastlane beta --env development  and store the configuration in  .env.development  with all keys for the development environment.  Install  [sudo] gem install dotenv  or add  dotenv  to your  Gemfile . More information about the  recommended way to install gems .  To get the name of the available environment variables, run  fastlane action [action_name] .",
            "title": "dotenv"
        },
        {
            "location": "/advanced/fastlane/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nfastlane\n\n\nConfiguring fastlane\n\n\nSkip update check when launching \nfastlane\n\n\nYou can set the environment variable \nFASTLANE_SKIP_UPDATE_CHECK\n to skip the update check.\n\n\nHide changelog information at the end of running \nfastlane\n\n\nYou can set the environment variable \nFASTLANE_HIDE_CHANGELOG\n to hide the detailed changelog information when new \nfastlane\n versions are available.\n\n\nOutput environment variables\n\n\n\n\nTo hide timestamps in each row, set the \nFASTLANE_HIDE_TIMESTAMP\n environment variable to true (overruled by \n--verbose\n).\n\n\nTo output the timezone in the timestamp, set the \nFASTLANE_SHOW_TIMEZONE\n environment variable to true.\n\n\nTo disable output formatting, set the \nFASTLANE_DISABLE_OUTPUT_FORMAT\n environment variable to true.\n\n\n\n\nHow fastlane works\n\n\nPriorities of parameters and options\n\n\nThe order in which \nfastlane\n tools take their values from\n\n\n\n\nCLI parameter (e.g. \ngym --scheme Example\n) or Fastfile (e.g. \ngym(scheme: 'Example')\n)\n\n\nEnvironment variable (e.g. \nGYM_SCHEME\n)\n\n\nTool specific config file (e.g. \nGymfile\n containing \nscheme 'Example'\n)\n\n\nDefault value (which might be taken from the \nAppfile\n, e.g. \napp_identifier\n from the \nAppfile\n)\n\n\nIf this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)\n\n\n\n\nDirectory behavior\n\n\nfastlane\n was designed in a way that you can run \nfastlane\n from both the root directory of the project, and from the \n./fastlane\n sub-folder.\n\n\nTake this example \nFastfile\n on the path \nfastlane/Fastfile\n\n\nsh \"pwd\" # => \"[root]/fastlane\"\nputs Dir.pwd # => \"[root]/fastlane\"\n\nlane :something do\n  sh \"pwd\" # => \"[root]/fastlane\"\n  puts Dir.pwd # => \"[root]/fastlane\"\n\n  my_action\nend\n\n\n\n\nThe implementation of \nmy_action\n looks like this:\n\n\ndef run(params)\n  puts Dir.pwd # => \"[root]\"\nend\n\n\n\n\nNotice how every action and every plugin's code runs in the root of the project, while all user code from the \nFastfile\n runs inside the \n./fastlane\n directory. This is important to consider when migrating existing code from your \nFastfile\n into your own action or plugin. To change the directory manually you can use standard Ruby blocks:\n\n\nDir.chdir(\"..\") do\n  # code here runs in the parent directory\nend\n\n\n\n\nThis behavior isn't great, and has been like this since the very early days of \nfastlane\n. As much as we'd like to change it, there is no good way to do so, without breaking thousands of production setups, so we decided to keep it as is for now.\n\n\nPassing parameters to \nfastlane\n command line tools\n\n\nfastlane\n contains several command line tools, e.g. \nfastlane deliver\n or \nfastlane snapshot\n. To pass parameters to these tools, append the option names and values as you would for a normal shell command:\n\n\nfastlane [tool] --[option]=[value]\n\nfastlane deliver --skip_screenshots=true\nfastlane snapshot --screenshots_path=xxxxx --schema=xxxx",
            "title": "fastlane"
        },
        {
            "location": "/advanced/fastlane/#fastlane",
            "text": "",
            "title": "fastlane"
        },
        {
            "location": "/advanced/fastlane/#configuring-fastlane",
            "text": "",
            "title": "Configuring fastlane"
        },
        {
            "location": "/advanced/fastlane/#skip-update-check-when-launching-fastlane",
            "text": "You can set the environment variable  FASTLANE_SKIP_UPDATE_CHECK  to skip the update check.",
            "title": "Skip update check when launching fastlane"
        },
        {
            "location": "/advanced/fastlane/#hide-changelog-information-at-the-end-of-running-fastlane",
            "text": "You can set the environment variable  FASTLANE_HIDE_CHANGELOG  to hide the detailed changelog information when new  fastlane  versions are available.",
            "title": "Hide changelog information at the end of running fastlane"
        },
        {
            "location": "/advanced/fastlane/#output-environment-variables",
            "text": "To hide timestamps in each row, set the  FASTLANE_HIDE_TIMESTAMP  environment variable to true (overruled by  --verbose ).  To output the timezone in the timestamp, set the  FASTLANE_SHOW_TIMEZONE  environment variable to true.  To disable output formatting, set the  FASTLANE_DISABLE_OUTPUT_FORMAT  environment variable to true.",
            "title": "Output environment variables"
        },
        {
            "location": "/advanced/fastlane/#how-fastlane-works",
            "text": "",
            "title": "How fastlane works"
        },
        {
            "location": "/advanced/fastlane/#priorities-of-parameters-and-options",
            "text": "The order in which  fastlane  tools take their values from   CLI parameter (e.g.  gym --scheme Example ) or Fastfile (e.g.  gym(scheme: 'Example') )  Environment variable (e.g.  GYM_SCHEME )  Tool specific config file (e.g.  Gymfile  containing  scheme 'Example' )  Default value (which might be taken from the  Appfile , e.g.  app_identifier  from the  Appfile )  If this value is required, you'll be asked for it (e.g. you have multiple schemes, you'll be asked for it)",
            "title": "Priorities of parameters and options"
        },
        {
            "location": "/advanced/fastlane/#directory-behavior",
            "text": "fastlane  was designed in a way that you can run  fastlane  from both the root directory of the project, and from the  ./fastlane  sub-folder.  Take this example  Fastfile  on the path  fastlane/Fastfile  sh \"pwd\" # => \"[root]/fastlane\"\nputs Dir.pwd # => \"[root]/fastlane\"\n\nlane :something do\n  sh \"pwd\" # => \"[root]/fastlane\"\n  puts Dir.pwd # => \"[root]/fastlane\"\n\n  my_action\nend  The implementation of  my_action  looks like this:  def run(params)\n  puts Dir.pwd # => \"[root]\"\nend  Notice how every action and every plugin's code runs in the root of the project, while all user code from the  Fastfile  runs inside the  ./fastlane  directory. This is important to consider when migrating existing code from your  Fastfile  into your own action or plugin. To change the directory manually you can use standard Ruby blocks:  Dir.chdir(\"..\") do\n  # code here runs in the parent directory\nend  This behavior isn't great, and has been like this since the very early days of  fastlane . As much as we'd like to change it, there is no good way to do so, without breaking thousands of production setups, so we decided to keep it as is for now.",
            "title": "Directory behavior"
        },
        {
            "location": "/advanced/fastlane/#passing-parameters-to-fastlane-command-line-tools",
            "text": "fastlane  contains several command line tools, e.g.  fastlane deliver  or  fastlane snapshot . To pass parameters to these tools, append the option names and values as you would for a normal shell command:  fastlane [tool] --[option]=[value]\n\nfastlane deliver --skip_screenshots=true\nfastlane snapshot --screenshots_path=xxxxx --schema=xxxx",
            "title": "Passing parameters to fastlane command line tools"
        },
        {
            "location": "/advanced/Fastfile/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nFastfile\n\n\nThe \nFastfile\n stores the automation configuration that can be run with \nfastlane\n.\n\n\nThe \nFastfile\n has to be inside your \n./fastlane\n directory.\n\n\nImporting another Fastfile\n\n\nWithin your \nFastfile\n you can import another \nFastfile\n using 2 methods:\n\n\nimport\n\n\nImport a \nFastfile\n from a local path\n\n\nimport \"../GeneralFastfile\"\n\noverride_lane :from_general do\n  # ...\nend\n\n\n\n\nimport_from_git\n\n\nImport from another git repository, which you can use to have one git repo with a default \nFastfile\n for all your project\n\n\nimport_from_git(url: 'https://github.com/fastlane/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend\n\n\n\n\nThis will also automatically import all the local actions from this repo.\n\n\nNote\n\n\nYou should import the other \nFastfile\n on the top above your lane declarations. When defining a new lane \nfastlane\n will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the \noverride_lane\n keyword.\n\n\nLoad own actions from external folder\n\n\nAdd this to the top of your \nFastfile\n.\n\n\nactions_path '../custom_actions_folder/'\n\n\n\n\nUsing fastlane_require\n\n\nIf you're using a third party gem in your \nFastfile\n, it is recommended to use \nfastlane_require\n instead of \nrequire\n. \nfastlane_require\n will:\n\n\n\n\nVerify the gem is installed\n\n\nShow installation instructions if not installed\n\n\nRequire the gem (like \nrequire\n does)\n\n\n\n\nExample\n\n\nfastlane_require 'hike'\n\nlane :release do\n  # Do stuff with hike\nend",
            "title": "Fastfile"
        },
        {
            "location": "/advanced/Fastfile/#fastfile",
            "text": "The  Fastfile  stores the automation configuration that can be run with  fastlane .  The  Fastfile  has to be inside your  ./fastlane  directory.",
            "title": "Fastfile"
        },
        {
            "location": "/advanced/Fastfile/#importing-another-fastfile",
            "text": "Within your  Fastfile  you can import another  Fastfile  using 2 methods:",
            "title": "Importing another Fastfile"
        },
        {
            "location": "/advanced/Fastfile/#import",
            "text": "Import a  Fastfile  from a local path  import \"../GeneralFastfile\"\n\noverride_lane :from_general do\n  # ...\nend",
            "title": "import"
        },
        {
            "location": "/advanced/Fastfile/#import_from_git",
            "text": "Import from another git repository, which you can use to have one git repo with a default  Fastfile  for all your project  import_from_git(url: 'https://github.com/fastlane/fastlane')\n# or\nimport_from_git(url: 'git@github.com:MyAwesomeRepo/MyAwesomeFastlaneStandardSetup.git',\n               path: 'fastlane/Fastfile')\n\nlane :new_main_lane do\n  # ...\nend  This will also automatically import all the local actions from this repo.",
            "title": "import_from_git"
        },
        {
            "location": "/advanced/Fastfile/#note",
            "text": "You should import the other  Fastfile  on the top above your lane declarations. When defining a new lane  fastlane  will make sure to not run into any name conflicts. If you want to overwrite an existing lane (from the imported one), use the  override_lane  keyword.",
            "title": "Note"
        },
        {
            "location": "/advanced/Fastfile/#load-own-actions-from-external-folder",
            "text": "Add this to the top of your  Fastfile .  actions_path '../custom_actions_folder/'",
            "title": "Load own actions from external folder"
        },
        {
            "location": "/advanced/Fastfile/#using-fastlane_require",
            "text": "If you're using a third party gem in your  Fastfile , it is recommended to use  fastlane_require  instead of  require .  fastlane_require  will:   Verify the gem is installed  Show installation instructions if not installed  Require the gem (like  require  does)",
            "title": "Using fastlane_require"
        },
        {
            "location": "/advanced/Fastfile/#example",
            "text": "fastlane_require 'hike'\n\nlane :release do\n  # Do stuff with hike\nend",
            "title": "Example"
        },
        {
            "location": "/advanced/Appfile/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nAppfile\n\n\nThe \nAppfile\n stores useful information that are used across all \nfastlane\n tools like your \nApple ID\n or the application \nBundle Identifier\n, to deploy your lanes faster and tailored on your project needs.\n\n\nThe \nAppfile\n has to be inside your \n./fastlane\n directory.\n\n\nBy default an \nAppfile\n looks like:\n\n\napp_identifier \"net.sunapps.1\" # The bundle identifier of your app\napple_id \"felix@krausefx.com\"  # Your Apple email address\n\n# You can uncomment the lines below and add your own\n# team selection in case you're in multiple teams\n# team_name \"Felix Krause\"\n# team_id \"Q2CBPJ58CA\"\n\n# To select a team for App Store Connect use\n# itc_team_name \"Company Name\"\n# itc_team_id \"18742801\"\n\n\n\n\nIf you have different credentials for App Store Connect and the Apple Developer Portal use the following code:\n\n\napp_identifier \"tools.fastlane.app\"       # The bundle identifier of your app\n\napple_dev_portal_id \"portal@company.com\"  # Apple Developer Account\nitunes_connect_id \"tunes@company.com\"     # App Store Connect Account\n\nteam_id \"Q2CBPJ58CA\" # Developer Portal Team ID\nitc_team_id \"18742801\" # App Store Connect Team ID\n\n\n\n\nIf your project has different bundle identifiers per environment (i.e. beta, app store), you can define that by using \nfor_platform\n and/or \nfor_lane\n block declaration.\n\n\napp_identifier \"net.sunapps.1\"\napple_id \"felix@krausefx.com\"\nteam_id \"Q2CBPJ58CC\"\n\nfor_platform :ios do\n  team_id '123' # for all iOS related things\n  for_lane :test do\n    app_identifier 'com.app.test'\n  end\nend\n\n\n\n\nYou only have to use \nfor_platform\n if you're using \nplatform [platform_name] do\n in your \nFastfile\n.\n\n\nfastlane\n will always use the lane specific value if given, otherwise fall back to the value on the top of the file. Therefore, while driving the \n:test\n lane, this configuration is loaded:\n\n\napp_identifier \"com.app.test\"\napple_id \"felix@krausefx.com\"\nteam_id \"123\"\n\n\n\n\nAccessing from fastlane\n\n\nIf you want to access those values from within your \nFastfile\n use\n\n\nidentifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)\nteam_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)",
            "title": "Appfile"
        },
        {
            "location": "/advanced/Appfile/#appfile",
            "text": "The  Appfile  stores useful information that are used across all  fastlane  tools like your  Apple ID  or the application  Bundle Identifier , to deploy your lanes faster and tailored on your project needs.  The  Appfile  has to be inside your  ./fastlane  directory.  By default an  Appfile  looks like:  app_identifier \"net.sunapps.1\" # The bundle identifier of your app\napple_id \"felix@krausefx.com\"  # Your Apple email address\n\n# You can uncomment the lines below and add your own\n# team selection in case you're in multiple teams\n# team_name \"Felix Krause\"\n# team_id \"Q2CBPJ58CA\"\n\n# To select a team for App Store Connect use\n# itc_team_name \"Company Name\"\n# itc_team_id \"18742801\"  If you have different credentials for App Store Connect and the Apple Developer Portal use the following code:  app_identifier \"tools.fastlane.app\"       # The bundle identifier of your app\n\napple_dev_portal_id \"portal@company.com\"  # Apple Developer Account\nitunes_connect_id \"tunes@company.com\"     # App Store Connect Account\n\nteam_id \"Q2CBPJ58CA\" # Developer Portal Team ID\nitc_team_id \"18742801\" # App Store Connect Team ID  If your project has different bundle identifiers per environment (i.e. beta, app store), you can define that by using  for_platform  and/or  for_lane  block declaration.  app_identifier \"net.sunapps.1\"\napple_id \"felix@krausefx.com\"\nteam_id \"Q2CBPJ58CC\"\n\nfor_platform :ios do\n  team_id '123' # for all iOS related things\n  for_lane :test do\n    app_identifier 'com.app.test'\n  end\nend  You only have to use  for_platform  if you're using  platform [platform_name] do  in your  Fastfile .  fastlane  will always use the lane specific value if given, otherwise fall back to the value on the top of the file. Therefore, while driving the  :test  lane, this configuration is loaded:  app_identifier \"com.app.test\"\napple_id \"felix@krausefx.com\"\nteam_id \"123\"",
            "title": "Appfile"
        },
        {
            "location": "/advanced/Appfile/#accessing-from-fastlane",
            "text": "If you want to access those values from within your  Fastfile  use  identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)\nteam_id = CredentialsManager::AppfileConfig.try_fetch_value(:team_id)",
            "title": "Accessing from fastlane"
        },
        {
            "location": "/advanced/lanes/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nLanes\n\n\nPassing Parameters\n\n\nTo pass parameters from the command line to your lane, use the following syntax:\n\n\nfastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24\n\n\n\n\nTo access those values, change your lane declaration to also include \n|options|\n\n\nbefore_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts \"Hi :)\"\n  end\nend\n\n\n\n\nSwitching lanes\n\n\nTo switch lanes while executing a lane, use the following code:\n\n\nlane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ? \"Release\" : \"Staging\")\n  build_ios_app(scheme: scheme)\nend\n\n\n\n\nfastlane\n takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the \nplatform\n definition.\n\n\nPassing parameters is optional.\n\n\nReturning values\n\n\nAdditionally, you can retrieve the return value. In Ruby, the last line of the \nlane\n definition is the return value. Here is an example:\n\n\nlane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # => 5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend\n\n\n\n\nStop executing a lane early\n\n\nThe \nnext\n keyword can be used to stop executing a \nlane\n before it reaches the end.\n\n\nlane :build do |options|\n  if cached_build_available?\n    UI.important 'Skipping build because a cached build is available!'\n    next # skip doing the rest of this lane\n  end\n  match\n  gym\nend\n\nprivate_lane :cached_build_available? do |options|\n  # ...\n  true\nend\n\n\n\n\nWhen \nnext\n is used during a \nlane\n switch, control returns to the previous \nlane\n that was executing.\n\n\nlane :first_lane do |options|\n  puts \"If you run: `fastlane first_lane`\"\n  puts \"You'll see this!\"\n  second_lane\n  puts \"As well as this!\"\nend\n\nprivate_lane :second_lane do |options|\n  next\n  puts \"This won't be shown\"\nend\n\n\n\n\nWhen you stop executing a lane early with \nnext\n, any \nafter_each\n and \nafter_all\n blocks you have will still trigger as usual :+1:\n\n\nbefore_each\n and \nafter_each\n blocks\n\n\nbefore_each\n blocks are called before any lane is called. This would include being called before each lane you've switched to.\n\n\nbefore_each do |lane, options|\n  # ...\nend\n\n\n\n\nafter_each\n blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like \nafter_all\n, \nafter_each\n is not called if an error occurs. The \nerror\n block should be used in this case.\n\n\nafter_each do |lane, options|\n  # ...\nend\n\n\n\n\ne.g. With this scenario, \nbefore_each\n and \nafter_each\n would be called 4 times: before the \ndeploy\n lane, before the switch to \narchive\n, \nsign\n, and \nupload\n, and after each of these lanes as well.\n\n\nlane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  # ...\nend\n\nlane :sign do\n  # ...\nend\n\nlane :upload do\n  # ...\nend\n\n\n\n\nLane Properties\n\n\nIt can be useful to dynamically access properties of the current lane. These are available in \nlane_context\n:\n\n\nlane_context[SharedValues::PLATFORM_NAME]        # Platform name, e.g. `:ios`, `:android` or empty (for root level lanes)\nlane_context[SharedValues::LANE_NAME] \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  # The name of the current lane preceded by the platform name (stays the same when switching lanes)\nlane_context[SharedValues::DEFAULT_PLATFORM]     # Default platform\n\n\n\n\nand environment variables:\n\n\nENV[\"FASTLANE_PLATFORM_NAME\"]\nENV[\"FASTLANE_LANE_NAME\"]\n\n\n\n\nLane Context\n\n\nThe different actions can \ncommunicate\n with each other using a shared hash. You can access this in your lanes with the following code:\n\n\nlane_context[SharedValues::VARIABLE_NAME_HERE]\n\n\n\n\nHere are some examples:\n\n\nlane_context[SharedValues::BUILD_NUMBER]                # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]              # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH]   # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]            # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]             # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]            # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]           # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                   # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]        # Generated by `hockey`\nlane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]      # Generated by `gradle`\nlane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] # Generated by `gradle`\nlane_context[SharedValues::GRADLE_FLAVOR]               # Generated by `gradle`\nlane_context[SharedValues::GRADLE_BUILD_TYPE]           # Generated by `gradle`\n\n\n\n\nTo get information about available lane variables, run \nfastlane action [action_name]\n.\n\n\nPrivate lanes\n\n\nSometimes you might have a lane that is used from different lanes, for example:\n\n\nlane :production do\n  # ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  # ...\nend\n\nlane :beta do\n  # ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  # ...\nend\n\nlane :build do |options|\n  # ...\n  ipa\n  # ...\nend\n\n\n\n\nIt probably doesn't make sense to execute the \nbuild\n lane directly using \nfastlane build\n. You can hide this lane using\n\n\nprivate_lane :build do |options|\n  # ...\nend\n\n\n\n\nThis will hide the lane from:\n\n\n\n\nfastlane lanes\n\n\nfastlane list\n\n\nfastlane docs\n\n\n\n\nAnd also, you can't call the private lane using \nfastlane build\n.\n\n\nThe resulting private lane can only be called from another lane using the lane switching technology.\n\n\nControl configuration by lane and by platform\n\n\nIn general, configuration files take only the first value given for a particular configuration item. That means that for an \nAppfile\n like the following:\n\n\napp_identifier \"com.used.id\"\napp_identifier \"com.ignored.id\"\n\n\n\n\nthe \napp_identfier\n will be \n\"com.used.id\"\n and the second value will be ignored. The \nfor_lane\n and \nfor_platform\n configuration blocks provide a limited exception to this rule.\n\n\nAll configuration files (Appfile, Matchfile, Screengrabfile, etc.) can use \nfor_lane\n and \nfor_platform\n blocks to control (and override) configuration values for those circumstances.\n\n\nfor_lane\n blocks will be called when the name of lane invoked on the command line matches the one specified by the block. So, given a \nScreengrabfile\n like:\n\n\nlocales ['en-US', 'fr-FR', 'ja-JP']\n\nfor_lane :screenshots_english_only do\n  locales ['en-US']\nend\n\nfor_lane :screenshots_french_only do\n  locales ['fr-FR']\nend\n\n\n\n\nlocales\n will have the values \n['en-US', 'fr-FR', 'ja-JP']\n by default, but will only have one value when running the \nfastlane screenshots_english_only\n or \nfastlane screenshots_french_only\n.\n\n\nfor_platform\n gives you similar control based on the platform for which you have invoked \nfastlane\n. So, for an \nAppfile\n configured like:\n\n\napp_identifier \"com.default.id\"\n\nfor_lane :enterprise do\n  app_identifier \"com.forlane.enterprise\"\nend\n\nfor_platform :mac do\n  app_identifier \"com.forplatform.mac\"\n\n  for_lane :release do\n    app_identifier \"com.forplatform.mac.forlane.release\"\n  end\nend\n\n\n\n\nyou can expect the \napp_identifier\n to equal \n\"com.forplatform.mac.forlane.release\"\n when invoking \nfastlane mac release\n.",
            "title": "Lanes"
        },
        {
            "location": "/advanced/lanes/#lanes",
            "text": "",
            "title": "Lanes"
        },
        {
            "location": "/advanced/lanes/#passing-parameters",
            "text": "To pass parameters from the command line to your lane, use the following syntax:  fastlane [lane] key:value key2:value2\n\nfastlane deploy submit:false build_number:24  To access those values, change your lane declaration to also include  |options|  before_all do |lane, options|\n  # ...\nend\n\nbefore_each do |lane, options|\n  # ...\nend\n\nlane :deploy do |options|\n  # ...\n  if options[:submit]\n    # Only when submit is true\n  end\n  # ...\n  increment_build_number(build_number: options[:build_number])\n  # ...\nend\n\nafter_all do |lane, options|\n  # ...\nend\n\nafter_each do |lane, options|\n  # ...\nend\n\nerror do |lane, exception, options|\n  if options[:debug]\n    puts \"Hi :)\"\n  end\nend",
            "title": "Passing Parameters"
        },
        {
            "location": "/advanced/lanes/#switching-lanes",
            "text": "To switch lanes while executing a lane, use the following code:  lane :deploy do |options|\n  # ...\n  build(release: true) # that's the important bit\n  hockey\n  # ...\nend\n\nlane :staging do |options|\n  # ...\n  build # it also works when you don't pass parameters\n  hockey\n  # ...\nend\n\nlane :build do |options|\n  scheme = (options[:release] ? \"Release\" : \"Staging\")\n  build_ios_app(scheme: scheme)\nend  fastlane  takes care of all the magic for you. You can call lanes of the same platform or a general lane outside of the  platform  definition.  Passing parameters is optional.",
            "title": "Switching lanes"
        },
        {
            "location": "/advanced/lanes/#returning-values",
            "text": "Additionally, you can retrieve the return value. In Ruby, the last line of the  lane  definition is the return value. Here is an example:  lane :deploy do |options|\n  value = calculate(value: 3)\n  puts value # => 5\nend\n\nlane :calculate do |options|\n  # ...\n  2 + options[:value] # the last line will always be the return value\nend",
            "title": "Returning values"
        },
        {
            "location": "/advanced/lanes/#stop-executing-a-lane-early",
            "text": "The  next  keyword can be used to stop executing a  lane  before it reaches the end.  lane :build do |options|\n  if cached_build_available?\n    UI.important 'Skipping build because a cached build is available!'\n    next # skip doing the rest of this lane\n  end\n  match\n  gym\nend\n\nprivate_lane :cached_build_available? do |options|\n  # ...\n  true\nend  When  next  is used during a  lane  switch, control returns to the previous  lane  that was executing.  lane :first_lane do |options|\n  puts \"If you run: `fastlane first_lane`\"\n  puts \"You'll see this!\"\n  second_lane\n  puts \"As well as this!\"\nend\n\nprivate_lane :second_lane do |options|\n  next\n  puts \"This won't be shown\"\nend  When you stop executing a lane early with  next , any  after_each  and  after_all  blocks you have will still trigger as usual :+1:",
            "title": "Stop executing a lane early"
        },
        {
            "location": "/advanced/lanes/#before_each-and-after_each-blocks",
            "text": "before_each  blocks are called before any lane is called. This would include being called before each lane you've switched to.  before_each do |lane, options|\n  # ...\nend  after_each  blocks are called after any lane is called. This would include being called after each lane you've switched to.\nJust like  after_all ,  after_each  is not called if an error occurs. The  error  block should be used in this case.  after_each do |lane, options|\n  # ...\nend  e.g. With this scenario,  before_each  and  after_each  would be called 4 times: before the  deploy  lane, before the switch to  archive ,  sign , and  upload , and after each of these lanes as well.  lane :deploy do\n  archive\n  sign\n  upload\nend\n\nlane :archive do\n  # ...\nend\n\nlane :sign do\n  # ...\nend\n\nlane :upload do\n  # ...\nend",
            "title": "before_each and after_each blocks"
        },
        {
            "location": "/advanced/lanes/#lane-properties",
            "text": "It can be useful to dynamically access properties of the current lane. These are available in  lane_context :  lane_context[SharedValues::PLATFORM_NAME]        # Platform name, e.g. `:ios`, `:android` or empty (for root level lanes)\nlane_context[SharedValues::LANE_NAME] \u00a0 \u00a0 \u00a0 \u00a0 \u00a0  # The name of the current lane preceded by the platform name (stays the same when switching lanes)\nlane_context[SharedValues::DEFAULT_PLATFORM]     # Default platform  and environment variables:  ENV[\"FASTLANE_PLATFORM_NAME\"]\nENV[\"FASTLANE_LANE_NAME\"]",
            "title": "Lane Properties"
        },
        {
            "location": "/advanced/lanes/#lane-context",
            "text": "The different actions can  communicate  with each other using a shared hash. You can access this in your lanes with the following code:  lane_context[SharedValues::VARIABLE_NAME_HERE]  Here are some examples:  lane_context[SharedValues::BUILD_NUMBER]                # Generated by `increment_build_number`\nlane_context[SharedValues::VERSION_NUMBER]              # Generated by `increment_version_number`\nlane_context[SharedValues::SNAPSHOT_SCREENSHOTS_PATH]   # Generated by _snapshot_\nlane_context[SharedValues::PRODUCE_APPLE_ID]            # The Apple ID of the newly created app\nlane_context[SharedValues::IPA_OUTPUT_PATH]             # Generated by _gym_\nlane_context[SharedValues::DSYM_OUTPUT_PATH]            # Generated by _gym_\nlane_context[SharedValues::SIGH_PROFILE_PATH]           # Generated by _sigh_\nlane_context[SharedValues::SIGH_UDID]                   # The UDID of the generated provisioning profile\nlane_context[SharedValues::HOCKEY_DOWNLOAD_LINK]        # Generated by `hockey`\nlane_context[SharedValues::GRADLE_APK_OUTPUT_PATH]      # Generated by `gradle`\nlane_context[SharedValues::GRADLE_ALL_APK_OUTPUT_PATHS] # Generated by `gradle`\nlane_context[SharedValues::GRADLE_FLAVOR]               # Generated by `gradle`\nlane_context[SharedValues::GRADLE_BUILD_TYPE]           # Generated by `gradle`  To get information about available lane variables, run  fastlane action [action_name] .",
            "title": "Lane Context"
        },
        {
            "location": "/advanced/lanes/#private-lanes",
            "text": "Sometimes you might have a lane that is used from different lanes, for example:  lane :production do\n  # ...\n  build(release: true)\n  appstore # Deploy to the AppStore\n  # ...\nend\n\nlane :beta do\n  # ...\n  build(release: false)\n  crashlytics # Distribute to testers\n  # ...\nend\n\nlane :build do |options|\n  # ...\n  ipa\n  # ...\nend  It probably doesn't make sense to execute the  build  lane directly using  fastlane build . You can hide this lane using  private_lane :build do |options|\n  # ...\nend  This will hide the lane from:   fastlane lanes  fastlane list  fastlane docs   And also, you can't call the private lane using  fastlane build .  The resulting private lane can only be called from another lane using the lane switching technology.",
            "title": "Private lanes"
        },
        {
            "location": "/advanced/lanes/#control-configuration-by-lane-and-by-platform",
            "text": "In general, configuration files take only the first value given for a particular configuration item. That means that for an  Appfile  like the following:  app_identifier \"com.used.id\"\napp_identifier \"com.ignored.id\"  the  app_identfier  will be  \"com.used.id\"  and the second value will be ignored. The  for_lane  and  for_platform  configuration blocks provide a limited exception to this rule.  All configuration files (Appfile, Matchfile, Screengrabfile, etc.) can use  for_lane  and  for_platform  blocks to control (and override) configuration values for those circumstances.  for_lane  blocks will be called when the name of lane invoked on the command line matches the one specified by the block. So, given a  Screengrabfile  like:  locales ['en-US', 'fr-FR', 'ja-JP']\n\nfor_lane :screenshots_english_only do\n  locales ['en-US']\nend\n\nfor_lane :screenshots_french_only do\n  locales ['fr-FR']\nend  locales  will have the values  ['en-US', 'fr-FR', 'ja-JP']  by default, but will only have one value when running the  fastlane screenshots_english_only  or  fastlane screenshots_french_only .  for_platform  gives you similar control based on the platform for which you have invoked  fastlane . So, for an  Appfile  configured like:  app_identifier \"com.default.id\"\n\nfor_lane :enterprise do\n  app_identifier \"com.forlane.enterprise\"\nend\n\nfor_platform :mac do\n  app_identifier \"com.forplatform.mac\"\n\n  for_lane :release do\n    app_identifier \"com.forplatform.mac.forlane.release\"\n  end\nend  you can expect the  app_identifier  to equal  \"com.forplatform.mac.forlane.release\"  when invoking  fastlane mac release .",
            "title": "Control configuration by lane and by platform"
        },
        {
            "location": "/advanced/actions/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nActions\n\n\nNaming actions\n\n\nYou can specify a \n\"step name\"\n for all actions (starting with \nfastlane 2.120.0\n) to disambiguate the use of some action several times, in different context.\nTo do so, add the \n:step_name\n property to your arguments.\n\n\nFor instance with the \nfastlane-plugin-yarn\n and the native sh:\n\n\nyarn(step_name: 'install_dependencies')\nyarn(commmand: 'build', step_name: 'building_project')\nyarn(commmand: 'test', step_name: 'testing_project')\nyarn(commmand: 'publish-coverage', step_name: 'publishing_project')\n\n\n\n\nThese name will appear as the step description instead of generic \nyarn\n as you can see in the following output:\n\n\n[08:13:37]: --- Step: install_dependencies ---\n[08:13:37]: ----------------------------------\n[08:13:37]: $ yarn\n[08:13:37]: \u25b8 yarn install v1.12.3\n[08:13:37]: \u25b8 [1/4] Resolving packages...\n[08:13:37]: \u25b8 success Already up-to-date.\n[08:13:37]: \u25b8 Done in 0.04s.\n[08:13:37]: ------------------------------\n[08:13:37]: --- Step: building_project ---\n[08:13:37]: ------------------------------\n[08:13:37]: $ yarn build\n[08:13:37]: \u25b8 yarn run v1.12.3\n[08:13:38]: \u25b8 $ sleep 22 && echo build the project\n[08:14:00]: \u25b8 build the project\n[08:14:00]: \u25b8 Done in 22.09s.\n[08:14:00]: -----------------------------\n[08:14:00]: --- Step: testing_project ---\n[08:14:00]: -----------------------------\n[08:14:00]: $ yarn test\n[08:14:00]: \u25b8 yarn run v1.12.3\n[08:14:00]: \u25b8 $ sleep 30 && echo test all the things\n[08:14:30]: \u25b8 test all the things\n[08:14:30]: \u25b8 Done in 30.09s.\n[08:14:30]: ------------------\n[08:14:30]: --- Step: yarn ---\n[08:14:30]: ------------------\n[08:14:30]: $ yarn publish-coverage\n[08:14:30]: \u25b8 yarn run v1.12.3\n[08:14:31]: \u25b8 $ sleep 12 && echo Covered all the things\n[08:14:43]: \u25b8 Covered all the things\n[08:14:43]: \u25b8 Done in 12.10s.\n\n+------+----------------------------+-------------+\n|                fastlane summary                 |\n+------+----------------------------+-------------+\n| Step | Action                     | Time (in s) |\n+------+----------------------------+-------------+\n| 1    | install_dependencies       | 0           |\n| 2    | building_project           | 22          |\n| 3    | testing_project            | 30          |\n| 4    | yarn                       | 12          |\n+------+----------------------------+-------------+\n\n\n\n\nInteracting with the user\n\n\nInstead of using \nputs\n, \nraise\n and \ngets\n, please use the helper class \nUI\n across all fastlane tools:\n\n\nUI.message \"Neutral message (usually white)\"\nUI.success \"Successfully finished processing (usually green)\"\nUI.error \"Wahaha, what's going on here! (usually red)\"\nUI.important \"Make sure to use Windows (usually yellow)\"\n\nUI.header \"Inputs\" # a big box\n\nname = UI.input(\"What's your name? \")\nif UI.confirm(\"Are you '#{name}'?\")\n  UI.success \"Oh yeah\"\nelse\n  UI.error \"Wups, invalid\"\nend\n\nUI.password(\"Your password please: \") # password inputs are hidden\n\n###### A \"Dropdown\" for the user\nproject = UI.select(\"Select your project: \", [\"Test Project\", \"Test Workspace\"])\n\nUI.success(\"Okay #{name}, you selected '#{project}'\")\n\n###### To run a command use\nFastlaneCore::CommandExecutor.execute(command: \"ls\",\n                                    print_all: true,\n                                        error: proc do |error_output|\n                                          # handle error here\n                                        end)\n\n###### or if you just want to receive a simple value use this only if the command doesn't take long\ndiff = Helper.backticks(\"git diff\")\n\n###### fastlane \"crash\" because of a user error everything that is caused by the user and is not unexpected\nUI.user_error!(\"You don't have a project in the current directory\")\n\n###### an actual crash when something unexpected happened\nUI.crash!(\"Network timeout\")\n\n###### a deprecation message\nUI.deprecated(\"The '--key' parameter is deprecated\")\n\n\n\n\nRun actions directly\n\n\nIf you just want to try an action without adding them to your \nFastfile\n yet, you can use\n\n\nfastlane run notification message:\"My Text\" title:\"The Title\"\n\n\n\n\nTo get the available options for any action run \nfastlane action [action_name]\n. You might not be able to set some kind of parameters using this method.\n\n\nShell values\n\n\nYou can get value from shell commands:\n\n\noutput = sh(\"pod update\")\n\n\n\n\nBuilding Actions\n\n\nUsing FastlaneCore::Configuration\n\n\nMost actions accept one or more parameters to customize their behavior. Actions define their\nparameters in an \navailable_options\n method. This method returns an array of \nFastlaneCore::ConfigItem\n\nobjects to describe supported options. Each option is declared by creating a new\n\nConfigItem\n, e.g.:\n\n\nFastlaneCore::ConfigItem.new(\n  key: :file,\n  env_name: \"MY_NEW_ACTION_FILE\",\n  description: \"A file to operate on\",\n  type: String,\n  optional: false\n)\n\n\n\n\nThis declares a \nfile\n option for use with the action in a Fastfile, e.g.:\n\n\nmy_new_action(file: \"file.txt\")\n\n\n\n\nIf the optional \nenv_name\n is present, an environment variable with the specified\nname may also be used in place of an option in the Fastfile:\n\n\nMY_NEW_ACTION_FILE=file.txt fastlane run my_new_action\n\n\n\n\nThe \ntype\n argument to the \nFastlaneCore::ConfigItem\n initializer specifies the\nname of a Ruby class representing a standard\ndata type. Supplied arguments will be coerced to the specified type. Some standard types\nsupport default conversions.\n\n\nBoolean parameters\n\n\nRuby does not have a single class to represent a Boolean type. When specifying\nBoolean parameters, use \nis_string: false\n, without specifying a \ntype\n, e.g.:\n\n\nFastlaneCore::ConfigItem.new(\n  key: :commit,\n  env_name: \"MY_NEW_ACTION_COMMIT\",\n  description: \"Commit the results if true\",\n  optional: true,\n  default_value: false,\n  is_string: false\n)\n\n\n\n\nWhen passing a string value, e.g. from an environment variable, certain set\nstring values are recognized:\n\n\nMY_NEW_ACTION_COMMIT=true\nMY_NEW_ACTION_COMMIT=false\nMY_NEW_ACTION_COMMIT=yes\nMY_NEW_ACTION_COMMIT=no\n\n\n\n\nThese values may also be passed in all caps, e.g. \nMY_NEW_ACTION_COMMIT=YES\n.\n\n\nArray parameters\n\n\nIf a parameter is declared with \ntype: Array\n and a \nString\n argument is passed,\nan array will be produced by splitting the string using the comma character\nas a delimiter:\n\n\nFastlaneCore::ConfigItem.new(\n  key: :files,\n  env_name: \"MY_NEW_ACTION_FILES\",\n  description: \"One or more files to operate on\",\n  type: Array,\n  optional: false\n)\n\n\n\n\nmy_new_action(files: \"file1.txt,file2.txt\")\n\n\n\n\nThis is received by the action as \n[\"file1.txt\", \"file2.txt\"]\n.\n\n\nThis also means a parameter that accepts an array may take a single string as an\nargument:\n\n\nmy_new_action(files: \"file.txt\")\n\n\n\n\nThis is received by the action as \n[\"file.txt\"]\n.\n\n\nComma-separated lists are particularly useful when using environment variables:\n\n\nexport MY_NEW_ACTION_FILES=file1.txt,file2.txt\n\n\n\n\nPolymorphic parameters\n\n\nTo allow for different types to be passed to a parameter (beyond what is\nprovided above), specify \nis_string: false\n without a \ntype\n field. Use\nan optional \nverify_block\n argument (see below) or verify the argument within\nyour action. If the block does not raise, the option is considered verified.\nThe \nUI.user_error!\n method is a convenient way to handle verification failure.\n\n\nFastlaneCore::ConfigItem.new(\n  key: :polymorphic_option,\n  is_string: false,\n  verify_block: ->(value) { verify_option(value) }\n)\n\ndef verify_option(value)\n  case value\n  when String\n    @polymorphic_option = value\n  when Array\n    @polymorphic_option = value.join(\" \")\n  when Hash\n    @polymorphic_option = value.to_s\n  else\n    UI.user_error! \"Invalid option: #{value.inspect}\"\n  end\nend\n\n\n\n\nCallback parameters\n\n\nIf your action needs to provide a callback, specify \nProc\n for the \ntype\n field.\n\n\nFastlaneCore::ConfigItem.new(\n  key: :callback,\n  description: \"Optional callback argument\",\n  optional: true,\n  type: Proc\n)\n\n\n\n\nTo invoke the callback in your action, use the \nProc#call\n method and pass\nany arguments:\n\n\nparams[:callback].call(result) if params[:callback]\n\n\n\n\nTo notify the user of success or failure, it's usually best just to return a\nvalue such as \ntrue\n or \nfalse\n from your action. Use a callback for contextual\nerror handling. For example, the built-in \nsh\n action passes the entire command\noutput to an optional \nerror_callback\n:\n\n\ncallback = lambda do |result|\n  handle_missing_file if result =~ /file not found/i\n  handle_auth_failure if result =~ /login failed/i\nend\n\nsh \"some_cmd\", error_callback: callback\n\n\n\n\nNote on Procs\n\n\nWhen passing a block as a parameter to an action or ConfigItem, use\na Proc object. There are three ways to create an instance of Proc in Ruby.\n\n\nUsing the \nlambda\n operator:\n\n\nverify_block = lambda do |value|\n  ...\nend\n\n\n\n\nUsing \nProc.new\n:\n\n\nverify_block = Proc.new do |value|\n  ...\nend\n\n\n\n\nUsing the \nProc\n literal notation:\n\n\nverify_block = ->(value) { ... }\n\n\n\n\nNote that you cannot pass a block literal as a \nProc\n.\n\n\nVerify blocks\n\n\nUse a \nverify_block\n argument with your \nConfigItem\n to provide special\nargument verification:\n\n\nverify_block = lambda do |value|\n  # Has to be a String to get this far\n  uri = URI(value)\n  UI.error \"Invalid scheme #{uri.scheme}\" unless uri.scheme == \"http\" || uri.scheme == \"https\"\nend\n\nFastlaneCore::ConfigItem.new(\n  key: :url,\n  type: String,\n  verify_block: verify_block\n)\n\n\n\n\nThe \nverify_block\n requires a \nProc\n argument (see above).\n\n\nConflicting options\n\n\nIf your action includes multiple conflicting options, use \nconflicting_options\n\nin the \nConfigItem\n for each. Make sure conflicting options are optional.\n\n\nFastlaneCore::ConfigItem.new(\n  key: :text,\n  type: String,\n  optional: true,\n  conflicting_options: [:text_file]\n),\nFastlaneCore::ConfigItem.new(\n  key: :text_file,\n  type: String,\n  optional: true,\n  conflicting_options: [:text]\n)\n\n\n\n\nYou can also pass a \nconflict_block\n (a \nProc\n, see above) if you want to\nimplement special handling of conflicting options:\n\n\nconflict_block = Proc.new do |other|\n  UI.user_error! \"Unexpected conflict with option #{other}\" unless [:text, :text_file].include?(other)\n  UI.message \"Ignoring :text_file in favor of :text\"\nend\n\nFastlaneCore::ConfigItem.new(\n  key: :text,\n  type: String,\n  optional: true,\n  conflicting_options: [:text_file],\n  conflict_block: conflict_block\n),\nFastlaneCore::ConfigItem.new(\n  key: :text_file,\n  type: String,\n  optional: true,\n  conflicting_options: [:text],\n  conflict_block: conflict_block\n)\n\n\n\n\nOptional parameters\n\n\nParameters with \noptional: true\n will be \nnil\n unless a \ndefault_value\n field\nis present. Make sure the \ndefault_value\n is reasonable unless it's acceptable\nfor the key to be absent.\n\n\nFastlaneCore::ConfigItem.new(\n  key: :build_configuration,\n  description: \"Which build configuration to use\",\n  type: String,\n  optional: true,\n  default_value: \"Release\"\n),\nFastlaneCore::ConfigItem.new(\n  key: :offset,\n  description: \"Offset to start from\",\n  type: Integer,\n  optional: true,\n  default_value: 0\n),\nFastlaneCore::ConfigItem.new(\n  key: :workspace,\n  description: \"Optional workspace path\",\n  type: String,\n  optional: true\n  # Not every project has a workspace, so nil is a good default value here.\n)\n\n\n\n\nWithin the action \nparams[:build_configuration]\n will never be nil. Specifying\nthe \ndefault_value\n is preferable to something in code like:\n\n\nconfig = params[:build_configuration] || \"Release\"\n\n\n\n\nDefault values are included in the documentation for action parameters.\n\n\nConfiguration files\n\n\nMany built-in actions such as \ndeliver\n, \ngym\n and \nscan\n support configuration files\n(\nDeliverfile\n, \nGymfile\n, \nScanfile\n). This is useful for actions with many options.\nTo add support for a configuration file to a custom action, call \nload_configuration_file\n\nearly, usually as the first line of \nrun\n:\n\n\ndef self.run(params)\n  params.load_configuration_file(\"MyNewActionfile\")\n  # ...\n\n\n\n\nThis will load any parameters specified in \nMyNewActionfile\n. This method looks for\nthe specified file in \n./fastlane\n, \n./.fastlane\n and \n.\n, in that order. The\nfile is evaluated by the Ruby interpreter.\nYou may specify they \nkey\n from any \nFastlaneCore::ConfigItem\n as a method call in the\nconfiguration file:\n\n\ncommand \"ls -la\"\nfiles %w{file1.txt file2.txt}\n\n\n\n\nResolution order\n\n\nParameters are resolved from different sources in the following order:\n\n\n\n\nA parameter directly passed to an action using the \nkey\n, usually from the \nFastfile\n.\n\n\nAn environment variable, if the \nenv_name\n is set.\n\n\nA configuration file used in \nload_configuration_file\n.\n\n\nThe \ndefault_value\n of the \nConfigItem\n. If not explicitly set, this will be \nnil\n.\n\n\n\n\nUser input and output\n\n\nThe \nFastlaneCore::UI\n utility may be used to display output to the user and also\nrequest input from an action.\n\nUI\n includes a number of methods to customize the output for different purposes:\n\n\nUI.message \"Hello from my_new_action.\"\nUI.important \"Warning: This is a new action.\"\nUI.error \"Something unexpected happened in my_new_action. Attempting to continue.\"\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nerror\n\n\nDisplays an error message in red\n\n\n\n\n\n\nimportant\n\n\nDisplays a warning or other important message in yellow\n\n\n\n\n\n\nsuccess\n\n\nDisplays a success message in green\n\n\n\n\n\n\nmessage\n\n\nDisplays a message in the default output color\n\n\n\n\n\n\ndeprecated\n\n\nDisplays a deprecation message in bold blue\n\n\n\n\n\n\ncommand\n\n\nDisplays a command being executed in cyan\n\n\n\n\n\n\ncommand_output\n\n\nDisplays command output in magenta\n\n\n\n\n\n\nverbose\n\n\nDisplays verbose output in the default output color\n\n\n\n\n\n\nheader\n\n\nDisplays a message in a box for emphasis\n\n\n\n\n\n\n\n\nMethods ending in an exclamation point (\n!\n) terminate execution of the current\nlane and report an error:\n\n\nUI.user_error! \"Could not open file #{file_path}\"\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncrash!\n\n\nReport a catastrophic error\n\n\n\n\n\n\nuser_error!\n\n\nRescue an exception in your action and report a nice message to the user\n\n\n\n\n\n\nshell_error!\n\n\nReport failure of a shell command\n\n\n\n\n\n\nbuild_failure!\n\n\nReport a build failure\n\n\n\n\n\n\ntest_failure!\n\n\nReport a test failure\n\n\n\n\n\n\nabort_with_message!\n\n\nReport a failure condition that prevents continuing\n\n\n\n\n\n\n\n\nNote that these methods raise exceptions that are rescued in the runner context for\nthe lane. This terminates further lane execution, so it is not necessary to return.\n\n\n# No need for \"and return\" here\nUI.user_error!(\"Could not open file #{file_path}\") and return if file.nil?\n\n\n\n\nThe following methods may be used to prompt the user for input.\n\n\nif UI.interactive?\n  name = UI.input \"Please enter your name: \"\n  is_correct = UI.confirm \"Is this correct? \"\n  choice = UI.select \"Please choose from the following list:\", %w{alpha beta gamma}\n  password = UI.password \"Please enter your password: \"\nend\n\n\n\n\n\n\n\n\n\n\nmethod\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ninteractive?\n\n\nIndicates whether interactive input is possible\n\n\n\n\n\n\ninput\n\n\nPrompt the user for string input\n\n\n\n\n\n\nconfirm\n\n\nAsk the user a binary question\n\n\n\n\n\n\nselect\n\n\nPrompt the user to select from a list of options\n\n\n\n\n\n\npassword\n\n\nPrompt the user for a password (masks output)\n\n\n\n\n\n\n\n\nInvoking shell commands\n\n\nIf your action needs to run a shell command, there are several methods. You can\neasily determine the exit status of the command and capture all terminal output\nfrom the command.\n\n\nUsing Kernel#system\n\n\nUse the Ruby \nsystem\n method call to invoke a command string. This does not\nredirect stdin, stdout or stderr, so output formatting will be unaffected. It executes\nthe command in a subshell.\n\n\nsystem \"cat fastlane/Fastfile\"\n\n\n\n\nUpon command completion, the method returns true or false to indicate completion\nstatus. The \n$?\n global variable will also indicate the exit status of the\ncommand.\n\n\nsystem \"cat fastlane/Fastfile\"\nUI.user_error! \"Could not execute command\" unless $?.exitstatus == 0\n\n\n\n\nIf the command to be executed is not found, system will return \nnil\n, and\n\n$?.exitstatus\n will be nonzero.\n\n\nUsing backticks\n\n\nTo capture the output of a command, enclose the command in backticks:\n\n\npod_cmd = `which pod`\nUI.important \"'pod' command not found\" if pod_cmd.empty?\n\n\n\n\nBecause you are capturing stdout, the command output will not appear at\nthe terminal unless you log it using \nUI\n. Formatting may be lost when\ncapturing command output. The entire output to stdout will be captured after the\ncommand returns. Output to stderr is not captured or redirected. The \n$?\n\nglobal variable will indicate the completion status of the command.\n\n\nIf the command to be executed is not found, \nErrno::ENOENT\n is raised.\n\n\nUsing the sh method\n\n\nYou can also use the built-in \nsh\n method:\n\n\nsh \"pwd\"\n\n\n\n\nThis is called the same way in an action as in a Fastfile. This provides consistent\nlogging of command output. All output to stdout and stderr is logged via \nUI\n.\n\n\nThe \nsh\n method can accept a block, which will receive the \nProcess::Status\n\nreturned by the command, the complete output of the command, and an equivalent\nshell command upon completion of the command.\n\n\nsh \"ls\", \"-la\" do |status, result, command|\n  unless status.success?\n    UI.error \"Command #{command} (pid #{status.pid}) failed with status #{status.exitstatus}\"\n  end\n  UI.message \"Output is #{result.inspect}\"\nend\n\n\n\n\nTo be notified only when an error occurs, use the \nerror_callback\n parameter\n(a Proc):\n\n\nsuccess = true\nsh(\"pwd\", error_callback: ->(result) { success = false })\nUI.user_error \"Command failed\" unless success\n\n\n\n\nThe \nresult\n argument to the \nerror_callback\n is the entire string output\nof the command.\n\n\nIf the command to be executed is not found, \nErrno::ENOENT\n is raised without\ncalling the block or \nerror_callback\n.\n\n\nIf an \nerror_callback\n or block is not provided, and the command executes and\nreturns an error, an exception is raised, and lane execution is terminated\nunless the exception is rescued. The exit status of the command will be available in \n$?\n. It is also available\nas the first argument to a block.\n\n\nThe return value of the method is the output of the command, unless a block is\ngiven. Then the output is available within the block, and the return value of\n\nsh\n is the return value of the block. This enables usage like:\n\n\nif sh command { |s| s.success? }\n  UI.success \"Command succeeded\"\nelse\n  UI.error \"Command failed\"\nend\n\n\n\n\nAnywhere other than an action or a Fastfile (e.g. in helper code), you can\ninvoke this method as \nActions.sh\n.\n\n\nEscaping in shell commands\n\n\nUse \nshellwords\n to escape arguments to shell commands.\n\n\n`git commit -aqm #{Shellwords.escape commit_message}`\n\n\n\n\nsystem \"cat #{path.shellescape}\"\n\n\n\n\nWhen using \nsystem\n or \nsh\n, pass a list of arguments instead of shell-escaping\nindividual arguments.\n\n\nsh \"git\", \"commit\", \"-aqm\", commit_message\nsystem \"cat\", path\n\n\n\n\nCalling other actions\n\n\nSome built-in utility actions, such as \nsh\n, may be used in custom actions (e.g., in\nplugins). It's not generally a good idea to call a complex action from another action.\nIn particular:\n\n\n\n\nIf you're calling one plugin action from another plugin action, you should\n  probably refactor your plugin helper to be more easily called from all actions\n  in the plugin.\n\n\nAvoid wrapping complex built-in actions like \ndeliver\n and \ngym\n.\n\n\nThere can be issues with one plugin depending on another plugin.\n\n\nCertain simple built-in utility actions may be used with \nother_action\n in your\n  action, such as: \nother_action.git_add\n, \nother_action.git_commit\n.\n\n\nThink twice before calling an action from another action. There is often a better\n  solution.",
            "title": "Actions"
        },
        {
            "location": "/advanced/actions/#actions",
            "text": "",
            "title": "Actions"
        },
        {
            "location": "/advanced/actions/#naming-actions",
            "text": "You can specify a  \"step name\"  for all actions (starting with  fastlane 2.120.0 ) to disambiguate the use of some action several times, in different context.\nTo do so, add the  :step_name  property to your arguments.  For instance with the  fastlane-plugin-yarn  and the native sh:  yarn(step_name: 'install_dependencies')\nyarn(commmand: 'build', step_name: 'building_project')\nyarn(commmand: 'test', step_name: 'testing_project')\nyarn(commmand: 'publish-coverage', step_name: 'publishing_project')  These name will appear as the step description instead of generic  yarn  as you can see in the following output:  [08:13:37]: --- Step: install_dependencies ---\n[08:13:37]: ----------------------------------\n[08:13:37]: $ yarn\n[08:13:37]: \u25b8 yarn install v1.12.3\n[08:13:37]: \u25b8 [1/4] Resolving packages...\n[08:13:37]: \u25b8 success Already up-to-date.\n[08:13:37]: \u25b8 Done in 0.04s.\n[08:13:37]: ------------------------------\n[08:13:37]: --- Step: building_project ---\n[08:13:37]: ------------------------------\n[08:13:37]: $ yarn build\n[08:13:37]: \u25b8 yarn run v1.12.3\n[08:13:38]: \u25b8 $ sleep 22 && echo build the project\n[08:14:00]: \u25b8 build the project\n[08:14:00]: \u25b8 Done in 22.09s.\n[08:14:00]: -----------------------------\n[08:14:00]: --- Step: testing_project ---\n[08:14:00]: -----------------------------\n[08:14:00]: $ yarn test\n[08:14:00]: \u25b8 yarn run v1.12.3\n[08:14:00]: \u25b8 $ sleep 30 && echo test all the things\n[08:14:30]: \u25b8 test all the things\n[08:14:30]: \u25b8 Done in 30.09s.\n[08:14:30]: ------------------\n[08:14:30]: --- Step: yarn ---\n[08:14:30]: ------------------\n[08:14:30]: $ yarn publish-coverage\n[08:14:30]: \u25b8 yarn run v1.12.3\n[08:14:31]: \u25b8 $ sleep 12 && echo Covered all the things\n[08:14:43]: \u25b8 Covered all the things\n[08:14:43]: \u25b8 Done in 12.10s.\n\n+------+----------------------------+-------------+\n|                fastlane summary                 |\n+------+----------------------------+-------------+\n| Step | Action                     | Time (in s) |\n+------+----------------------------+-------------+\n| 1    | install_dependencies       | 0           |\n| 2    | building_project           | 22          |\n| 3    | testing_project            | 30          |\n| 4    | yarn                       | 12          |\n+------+----------------------------+-------------+",
            "title": "Naming actions"
        },
        {
            "location": "/advanced/actions/#interacting-with-the-user",
            "text": "Instead of using  puts ,  raise  and  gets , please use the helper class  UI  across all fastlane tools:  UI.message \"Neutral message (usually white)\"\nUI.success \"Successfully finished processing (usually green)\"\nUI.error \"Wahaha, what's going on here! (usually red)\"\nUI.important \"Make sure to use Windows (usually yellow)\"\n\nUI.header \"Inputs\" # a big box\n\nname = UI.input(\"What's your name? \")\nif UI.confirm(\"Are you '#{name}'?\")\n  UI.success \"Oh yeah\"\nelse\n  UI.error \"Wups, invalid\"\nend\n\nUI.password(\"Your password please: \") # password inputs are hidden\n\n###### A \"Dropdown\" for the user\nproject = UI.select(\"Select your project: \", [\"Test Project\", \"Test Workspace\"])\n\nUI.success(\"Okay #{name}, you selected '#{project}'\")\n\n###### To run a command use\nFastlaneCore::CommandExecutor.execute(command: \"ls\",\n                                    print_all: true,\n                                        error: proc do |error_output|\n                                          # handle error here\n                                        end)\n\n###### or if you just want to receive a simple value use this only if the command doesn't take long\ndiff = Helper.backticks(\"git diff\")\n\n###### fastlane \"crash\" because of a user error everything that is caused by the user and is not unexpected\nUI.user_error!(\"You don't have a project in the current directory\")\n\n###### an actual crash when something unexpected happened\nUI.crash!(\"Network timeout\")\n\n###### a deprecation message\nUI.deprecated(\"The '--key' parameter is deprecated\")",
            "title": "Interacting with the user"
        },
        {
            "location": "/advanced/actions/#run-actions-directly",
            "text": "If you just want to try an action without adding them to your  Fastfile  yet, you can use  fastlane run notification message:\"My Text\" title:\"The Title\"  To get the available options for any action run  fastlane action [action_name] . You might not be able to set some kind of parameters using this method.",
            "title": "Run actions directly"
        },
        {
            "location": "/advanced/actions/#shell-values",
            "text": "You can get value from shell commands:  output = sh(\"pod update\")",
            "title": "Shell values"
        },
        {
            "location": "/advanced/actions/#building-actions",
            "text": "",
            "title": "Building Actions"
        },
        {
            "location": "/advanced/actions/#using-fastlanecoreconfiguration",
            "text": "Most actions accept one or more parameters to customize their behavior. Actions define their\nparameters in an  available_options  method. This method returns an array of  FastlaneCore::ConfigItem \nobjects to describe supported options. Each option is declared by creating a new ConfigItem , e.g.:  FastlaneCore::ConfigItem.new(\n  key: :file,\n  env_name: \"MY_NEW_ACTION_FILE\",\n  description: \"A file to operate on\",\n  type: String,\n  optional: false\n)  This declares a  file  option for use with the action in a Fastfile, e.g.:  my_new_action(file: \"file.txt\")  If the optional  env_name  is present, an environment variable with the specified\nname may also be used in place of an option in the Fastfile:  MY_NEW_ACTION_FILE=file.txt fastlane run my_new_action  The  type  argument to the  FastlaneCore::ConfigItem  initializer specifies the\nname of a Ruby class representing a standard\ndata type. Supplied arguments will be coerced to the specified type. Some standard types\nsupport default conversions.",
            "title": "Using FastlaneCore::Configuration"
        },
        {
            "location": "/advanced/actions/#boolean-parameters",
            "text": "Ruby does not have a single class to represent a Boolean type. When specifying\nBoolean parameters, use  is_string: false , without specifying a  type , e.g.:  FastlaneCore::ConfigItem.new(\n  key: :commit,\n  env_name: \"MY_NEW_ACTION_COMMIT\",\n  description: \"Commit the results if true\",\n  optional: true,\n  default_value: false,\n  is_string: false\n)  When passing a string value, e.g. from an environment variable, certain set\nstring values are recognized:  MY_NEW_ACTION_COMMIT=true\nMY_NEW_ACTION_COMMIT=false\nMY_NEW_ACTION_COMMIT=yes\nMY_NEW_ACTION_COMMIT=no  These values may also be passed in all caps, e.g.  MY_NEW_ACTION_COMMIT=YES .",
            "title": "Boolean parameters"
        },
        {
            "location": "/advanced/actions/#array-parameters",
            "text": "If a parameter is declared with  type: Array  and a  String  argument is passed,\nan array will be produced by splitting the string using the comma character\nas a delimiter:  FastlaneCore::ConfigItem.new(\n  key: :files,\n  env_name: \"MY_NEW_ACTION_FILES\",\n  description: \"One or more files to operate on\",\n  type: Array,\n  optional: false\n)  my_new_action(files: \"file1.txt,file2.txt\")  This is received by the action as  [\"file1.txt\", \"file2.txt\"] .  This also means a parameter that accepts an array may take a single string as an\nargument:  my_new_action(files: \"file.txt\")  This is received by the action as  [\"file.txt\"] .  Comma-separated lists are particularly useful when using environment variables:  export MY_NEW_ACTION_FILES=file1.txt,file2.txt",
            "title": "Array parameters"
        },
        {
            "location": "/advanced/actions/#polymorphic-parameters",
            "text": "To allow for different types to be passed to a parameter (beyond what is\nprovided above), specify  is_string: false  without a  type  field. Use\nan optional  verify_block  argument (see below) or verify the argument within\nyour action. If the block does not raise, the option is considered verified.\nThe  UI.user_error!  method is a convenient way to handle verification failure.  FastlaneCore::ConfigItem.new(\n  key: :polymorphic_option,\n  is_string: false,\n  verify_block: ->(value) { verify_option(value) }\n)\n\ndef verify_option(value)\n  case value\n  when String\n    @polymorphic_option = value\n  when Array\n    @polymorphic_option = value.join(\" \")\n  when Hash\n    @polymorphic_option = value.to_s\n  else\n    UI.user_error! \"Invalid option: #{value.inspect}\"\n  end\nend",
            "title": "Polymorphic parameters"
        },
        {
            "location": "/advanced/actions/#callback-parameters",
            "text": "If your action needs to provide a callback, specify  Proc  for the  type  field.  FastlaneCore::ConfigItem.new(\n  key: :callback,\n  description: \"Optional callback argument\",\n  optional: true,\n  type: Proc\n)  To invoke the callback in your action, use the  Proc#call  method and pass\nany arguments:  params[:callback].call(result) if params[:callback]  To notify the user of success or failure, it's usually best just to return a\nvalue such as  true  or  false  from your action. Use a callback for contextual\nerror handling. For example, the built-in  sh  action passes the entire command\noutput to an optional  error_callback :  callback = lambda do |result|\n  handle_missing_file if result =~ /file not found/i\n  handle_auth_failure if result =~ /login failed/i\nend\n\nsh \"some_cmd\", error_callback: callback",
            "title": "Callback parameters"
        },
        {
            "location": "/advanced/actions/#note-on-procs",
            "text": "When passing a block as a parameter to an action or ConfigItem, use\na Proc object. There are three ways to create an instance of Proc in Ruby.  Using the  lambda  operator:  verify_block = lambda do |value|\n  ...\nend  Using  Proc.new :  verify_block = Proc.new do |value|\n  ...\nend  Using the  Proc  literal notation:  verify_block = ->(value) { ... }  Note that you cannot pass a block literal as a  Proc .",
            "title": "Note on Procs"
        },
        {
            "location": "/advanced/actions/#verify-blocks",
            "text": "Use a  verify_block  argument with your  ConfigItem  to provide special\nargument verification:  verify_block = lambda do |value|\n  # Has to be a String to get this far\n  uri = URI(value)\n  UI.error \"Invalid scheme #{uri.scheme}\" unless uri.scheme == \"http\" || uri.scheme == \"https\"\nend\n\nFastlaneCore::ConfigItem.new(\n  key: :url,\n  type: String,\n  verify_block: verify_block\n)  The  verify_block  requires a  Proc  argument (see above).",
            "title": "Verify blocks"
        },
        {
            "location": "/advanced/actions/#conflicting-options",
            "text": "If your action includes multiple conflicting options, use  conflicting_options \nin the  ConfigItem  for each. Make sure conflicting options are optional.  FastlaneCore::ConfigItem.new(\n  key: :text,\n  type: String,\n  optional: true,\n  conflicting_options: [:text_file]\n),\nFastlaneCore::ConfigItem.new(\n  key: :text_file,\n  type: String,\n  optional: true,\n  conflicting_options: [:text]\n)  You can also pass a  conflict_block  (a  Proc , see above) if you want to\nimplement special handling of conflicting options:  conflict_block = Proc.new do |other|\n  UI.user_error! \"Unexpected conflict with option #{other}\" unless [:text, :text_file].include?(other)\n  UI.message \"Ignoring :text_file in favor of :text\"\nend\n\nFastlaneCore::ConfigItem.new(\n  key: :text,\n  type: String,\n  optional: true,\n  conflicting_options: [:text_file],\n  conflict_block: conflict_block\n),\nFastlaneCore::ConfigItem.new(\n  key: :text_file,\n  type: String,\n  optional: true,\n  conflicting_options: [:text],\n  conflict_block: conflict_block\n)",
            "title": "Conflicting options"
        },
        {
            "location": "/advanced/actions/#optional-parameters",
            "text": "Parameters with  optional: true  will be  nil  unless a  default_value  field\nis present. Make sure the  default_value  is reasonable unless it's acceptable\nfor the key to be absent.  FastlaneCore::ConfigItem.new(\n  key: :build_configuration,\n  description: \"Which build configuration to use\",\n  type: String,\n  optional: true,\n  default_value: \"Release\"\n),\nFastlaneCore::ConfigItem.new(\n  key: :offset,\n  description: \"Offset to start from\",\n  type: Integer,\n  optional: true,\n  default_value: 0\n),\nFastlaneCore::ConfigItem.new(\n  key: :workspace,\n  description: \"Optional workspace path\",\n  type: String,\n  optional: true\n  # Not every project has a workspace, so nil is a good default value here.\n)  Within the action  params[:build_configuration]  will never be nil. Specifying\nthe  default_value  is preferable to something in code like:  config = params[:build_configuration] || \"Release\"  Default values are included in the documentation for action parameters.",
            "title": "Optional parameters"
        },
        {
            "location": "/advanced/actions/#configuration-files",
            "text": "Many built-in actions such as  deliver ,  gym  and  scan  support configuration files\n( Deliverfile ,  Gymfile ,  Scanfile ). This is useful for actions with many options.\nTo add support for a configuration file to a custom action, call  load_configuration_file \nearly, usually as the first line of  run :  def self.run(params)\n  params.load_configuration_file(\"MyNewActionfile\")\n  # ...  This will load any parameters specified in  MyNewActionfile . This method looks for\nthe specified file in  ./fastlane ,  ./.fastlane  and  . , in that order. The\nfile is evaluated by the Ruby interpreter.\nYou may specify they  key  from any  FastlaneCore::ConfigItem  as a method call in the\nconfiguration file:  command \"ls -la\"\nfiles %w{file1.txt file2.txt}",
            "title": "Configuration files"
        },
        {
            "location": "/advanced/actions/#resolution-order",
            "text": "Parameters are resolved from different sources in the following order:   A parameter directly passed to an action using the  key , usually from the  Fastfile .  An environment variable, if the  env_name  is set.  A configuration file used in  load_configuration_file .  The  default_value  of the  ConfigItem . If not explicitly set, this will be  nil .",
            "title": "Resolution order"
        },
        {
            "location": "/advanced/actions/#user-input-and-output",
            "text": "The  FastlaneCore::UI  utility may be used to display output to the user and also\nrequest input from an action. UI  includes a number of methods to customize the output for different purposes:  UI.message \"Hello from my_new_action.\"\nUI.important \"Warning: This is a new action.\"\nUI.error \"Something unexpected happened in my_new_action. Attempting to continue.\"     method  description      error  Displays an error message in red    important  Displays a warning or other important message in yellow    success  Displays a success message in green    message  Displays a message in the default output color    deprecated  Displays a deprecation message in bold blue    command  Displays a command being executed in cyan    command_output  Displays command output in magenta    verbose  Displays verbose output in the default output color    header  Displays a message in a box for emphasis     Methods ending in an exclamation point ( ! ) terminate execution of the current\nlane and report an error:  UI.user_error! \"Could not open file #{file_path}\"     method  description      crash!  Report a catastrophic error    user_error!  Rescue an exception in your action and report a nice message to the user    shell_error!  Report failure of a shell command    build_failure!  Report a build failure    test_failure!  Report a test failure    abort_with_message!  Report a failure condition that prevents continuing     Note that these methods raise exceptions that are rescued in the runner context for\nthe lane. This terminates further lane execution, so it is not necessary to return.  # No need for \"and return\" here\nUI.user_error!(\"Could not open file #{file_path}\") and return if file.nil?  The following methods may be used to prompt the user for input.  if UI.interactive?\n  name = UI.input \"Please enter your name: \"\n  is_correct = UI.confirm \"Is this correct? \"\n  choice = UI.select \"Please choose from the following list:\", %w{alpha beta gamma}\n  password = UI.password \"Please enter your password: \"\nend     method  description      interactive?  Indicates whether interactive input is possible    input  Prompt the user for string input    confirm  Ask the user a binary question    select  Prompt the user to select from a list of options    password  Prompt the user for a password (masks output)",
            "title": "User input and output"
        },
        {
            "location": "/advanced/actions/#invoking-shell-commands",
            "text": "If your action needs to run a shell command, there are several methods. You can\neasily determine the exit status of the command and capture all terminal output\nfrom the command.",
            "title": "Invoking shell commands"
        },
        {
            "location": "/advanced/actions/#using-kernelsystem",
            "text": "Use the Ruby  system  method call to invoke a command string. This does not\nredirect stdin, stdout or stderr, so output formatting will be unaffected. It executes\nthe command in a subshell.  system \"cat fastlane/Fastfile\"  Upon command completion, the method returns true or false to indicate completion\nstatus. The  $?  global variable will also indicate the exit status of the\ncommand.  system \"cat fastlane/Fastfile\"\nUI.user_error! \"Could not execute command\" unless $?.exitstatus == 0  If the command to be executed is not found, system will return  nil , and $?.exitstatus  will be nonzero.",
            "title": "Using Kernel#system"
        },
        {
            "location": "/advanced/actions/#using-backticks",
            "text": "To capture the output of a command, enclose the command in backticks:  pod_cmd = `which pod`\nUI.important \"'pod' command not found\" if pod_cmd.empty?  Because you are capturing stdout, the command output will not appear at\nthe terminal unless you log it using  UI . Formatting may be lost when\ncapturing command output. The entire output to stdout will be captured after the\ncommand returns. Output to stderr is not captured or redirected. The  $? \nglobal variable will indicate the completion status of the command.  If the command to be executed is not found,  Errno::ENOENT  is raised.",
            "title": "Using backticks"
        },
        {
            "location": "/advanced/actions/#using-the-sh-method",
            "text": "You can also use the built-in  sh  method:  sh \"pwd\"  This is called the same way in an action as in a Fastfile. This provides consistent\nlogging of command output. All output to stdout and stderr is logged via  UI .  The  sh  method can accept a block, which will receive the  Process::Status \nreturned by the command, the complete output of the command, and an equivalent\nshell command upon completion of the command.  sh \"ls\", \"-la\" do |status, result, command|\n  unless status.success?\n    UI.error \"Command #{command} (pid #{status.pid}) failed with status #{status.exitstatus}\"\n  end\n  UI.message \"Output is #{result.inspect}\"\nend  To be notified only when an error occurs, use the  error_callback  parameter\n(a Proc):  success = true\nsh(\"pwd\", error_callback: ->(result) { success = false })\nUI.user_error \"Command failed\" unless success  The  result  argument to the  error_callback  is the entire string output\nof the command.  If the command to be executed is not found,  Errno::ENOENT  is raised without\ncalling the block or  error_callback .  If an  error_callback  or block is not provided, and the command executes and\nreturns an error, an exception is raised, and lane execution is terminated\nunless the exception is rescued. The exit status of the command will be available in  $? . It is also available\nas the first argument to a block.  The return value of the method is the output of the command, unless a block is\ngiven. Then the output is available within the block, and the return value of sh  is the return value of the block. This enables usage like:  if sh command { |s| s.success? }\n  UI.success \"Command succeeded\"\nelse\n  UI.error \"Command failed\"\nend  Anywhere other than an action or a Fastfile (e.g. in helper code), you can\ninvoke this method as  Actions.sh .",
            "title": "Using the sh method"
        },
        {
            "location": "/advanced/actions/#escaping-in-shell-commands",
            "text": "Use  shellwords  to escape arguments to shell commands.  `git commit -aqm #{Shellwords.escape commit_message}`  system \"cat #{path.shellescape}\"  When using  system  or  sh , pass a list of arguments instead of shell-escaping\nindividual arguments.  sh \"git\", \"commit\", \"-aqm\", commit_message\nsystem \"cat\", path",
            "title": "Escaping in shell commands"
        },
        {
            "location": "/advanced/actions/#calling-other-actions",
            "text": "Some built-in utility actions, such as  sh , may be used in custom actions (e.g., in\nplugins). It's not generally a good idea to call a complex action from another action.\nIn particular:   If you're calling one plugin action from another plugin action, you should\n  probably refactor your plugin helper to be more easily called from all actions\n  in the plugin.  Avoid wrapping complex built-in actions like  deliver  and  gym .  There can be issues with one plugin depending on another plugin.  Certain simple built-in utility actions may be used with  other_action  in your\n  action, such as:  other_action.git_add ,  other_action.git_commit .  Think twice before calling an action from another action. There is often a better\n  solution.",
            "title": "Calling other actions"
        },
        {
            "location": "/advanced/other/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nOther\n\n\nOther advanced topics that didn't fit anywhere else:\n\n\nEnvironment Variables\n\n\nYou can define environment variables in a \n.env\n or \n.env.default\n file in the same directory as your \nFastfile\n. Environment variables are loaded using \ndotenv\n. Here's an example:\n\n\nWORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token\n\n\n\n\nfastlane\n also has a \n--env\n option that allows loading of environment specific \ndotenv\n files. \n.env\n and \n.env.default\n will be loaded before environment specific \ndotenv\n files are loaded. The naming convention for environment specific \ndotenv\n files is \n.env.<environment>\n\n\nFor example, \nfastlane <lane-name> --env development\n will load \n.env\n, \n.env.default\n, and \n.env.development\n\n\nAlternatively, as environment variables are not a fastlane specific thing, you can also use standard methods to set them:\n\n\nDELIVER_USER=\"felix@krausefx.com\" fastlane test\n\n\n\n\nor\n\n\nexport DELIVER_USER=\"felix@krausefx.com\";\nfastlane test\n\n\n\n\nAlthough it kind of defeats the purpose of using them in the first place (not to have their content in any files), you can also set them in your \nFastfile\n:\n\n\nENV[\"DELIVER_USER\"] = \"felix@krausefx.com\"\n\n\n\n\nAdding Credentials\n\n\nYou can add credentials for use by \nfastlane\n to your keychain using the \nCredentialsManager\n command line interface. This is useful for situations like CI environments.\n\n\nAdding a Credential\n\n\nfastlane fastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.\n\n\n\n\nRemoving a Credential\n\n\nfastlane fastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.\n\n\n\n\nManually manage the fastlane match Repo\n\n\nMost users can benefit from \nmatch\n's automatic management of the repo that stores certificates and provisioning profiles. From time to time, it may be necessary to manually change the files in this repo.\n\n\nFor example, \nfastlane\n requires admin access to the Apple Developer account to generate the appropriate files. If you are provided with an updated certificate or profile but do not have admin access, you can manually edit the repo.\n\n\n\n\nWarning:\n Manually editing your \nmatch\n repo can introduce unexpected behavior and is not recommended. Proceed with caution.\n\n\n\n\n\n\nInstructions\n\n\nOverview\n\n\nBecause:\n\n\n\n\nfastlane\n encrypts the repo, and\n\n\nfastlane\n doesn't support manual edits to the repo\n\n\n\n\nit's necessary to manually decrypt, then modify, then encrypt, the repo to make any changes.\n\n\n\n\nThese instructions presuppose you already have \nfastlane\n \nmatch\n configured correctly.\n\n\n\n\n\ud83d\udd13 Decryption Instructions\n\n\nThe easiest way to decrypt the repo is to use the \nfastlane\n \nmatch\n \nStorage\n and \nEncryption\n classes. You can do this from an interactive Ruby console:\n\n\n$ bundle console\nirb(main):001:0>\n\n\n\n\nThen, require \nmatch\n and set the appropriate parameters:\n\n\nirb(main):001:0> require 'match'\nirb(main):002:0> git_url = 'https://github.com/fastlane/example-certificate-repo'\n=> \"https://github.com/fastlane/example-certificate-repo\"\nirb(main):003:0> shallow_clone = false\n=> false\nirb(main):004:0> ENV[\"MATCH_PASSWORD\"] = 'example-password'\n=> \"example-password\"\nirb(main):005:0> branch = 'master'\n=> \"master\"\n\n\n\n\nNow create an instance of \nStorage\n and \nEncryption\n. The \ndownload\n method on \nStorage\n will clone the repo and the \ndecrypt_files\n method on \nEncryption\n will decrypt the repo for you. Assign the return values to \nstorage\n and \nencrypt\n, which we'll need later when we re-encrypt:\n\n\nirb(main):006:0> storage = Match::Storage.for_mode(\"git\", { git_url: git_url, shallow_clone: shallow_clone, git_branch: branch, clone_branch_directly: false})\nirb(main):007:0> storage.download\nirb(main):008:0> encryption = Match::Encryption.for_storage_mode(\"git\", { git_url: git_url, working_directory: storage.working_directory})\nirb(main):009:0> encryption.decrypt_files\n[14:24:42]: \ud83d\udd13  Successfully decrypted certificates repo\nirb(main):010:0> storage.working_directory\n=> \"/var/folders/ql/4rgq9x7j51n_971xb332w9lc0000gn/T/d20181105-65220-1oalh6v\"\n\n\n\n\nThe above example checks out the \nmaster\n (which is the default branch that \nmatch\n uses). A common \nmatch\n pattern is to create a separate branch per each developer team (the name of the branch being the team identifier).\n\n\nThe directory beginning with \n/var/folders\n contains the decrypted git repo. Modify it as needed.\n\n\nIf you are updating a \n.p12\n file, ensure it's exported from the keychain without a password, since \nmatch\n doesn't support importing private keys with a password.\n\n\n\n\nWarning:\n Do \nnot\n commit your changes. Allow \nfastlane\n to do that for you.\n\n\n\n\nOnce your changes are made, we'll need to encrypt the repo and push it.\n\n\n\ud83d\udd12 Encryption Instructions\n\n\nIn the Ruby console, call \nencryption.encrypt_files\n and \nstorage.save_changes!\n. For example:\n\n\nirb(main):010:0> encryption.encrypt_files\nirb(main):011:0> files_to_commit = Dir[File.join(storage.working_directory, \"**\", \"*.{cer,p12,mobileprovision}\")]\nirb(main):012:0> storage.save_changes!(files_to_commit: files_to_commit)\n\n\n\n\nYour changes will be encrypted, committed, and pushed.\n\n\n\n\nNote:\n If your keychain doesn't include the encryption passcode, you may be prompted for it. If so, just enter the same password you used to decrypt it.",
            "title": "Other"
        },
        {
            "location": "/advanced/other/#other",
            "text": "Other advanced topics that didn't fit anywhere else:",
            "title": "Other"
        },
        {
            "location": "/advanced/other/#environment-variables",
            "text": "You can define environment variables in a  .env  or  .env.default  file in the same directory as your  Fastfile . Environment variables are loaded using  dotenv . Here's an example:  WORKSPACE=YourApp.xcworkspace\nHOCKEYAPP_API_TOKEN=your-hockey-api-token  fastlane  also has a  --env  option that allows loading of environment specific  dotenv  files.  .env  and  .env.default  will be loaded before environment specific  dotenv  files are loaded. The naming convention for environment specific  dotenv  files is  .env.<environment>  For example,  fastlane <lane-name> --env development  will load  .env ,  .env.default , and  .env.development  Alternatively, as environment variables are not a fastlane specific thing, you can also use standard methods to set them:  DELIVER_USER=\"felix@krausefx.com\" fastlane test  or  export DELIVER_USER=\"felix@krausefx.com\";\nfastlane test  Although it kind of defeats the purpose of using them in the first place (not to have their content in any files), you can also set them in your  Fastfile :  ENV[\"DELIVER_USER\"] = \"felix@krausefx.com\"",
            "title": "Environment Variables"
        },
        {
            "location": "/advanced/other/#adding-credentials",
            "text": "You can add credentials for use by  fastlane  to your keychain using the  CredentialsManager  command line interface. This is useful for situations like CI environments.  Adding a Credential  fastlane fastlane-credentials add --username felix@krausefx.com\nPassword: *********\nCredential felix@krausefx.com:********* added to keychain.  Removing a Credential  fastlane fastlane-credentials remove --username felix@krausefx.com\npassword has been deleted.",
            "title": "Adding Credentials"
        },
        {
            "location": "/advanced/other/#manually-manage-the-fastlane-match-repo",
            "text": "Most users can benefit from  match 's automatic management of the repo that stores certificates and provisioning profiles. From time to time, it may be necessary to manually change the files in this repo.  For example,  fastlane  requires admin access to the Apple Developer account to generate the appropriate files. If you are provided with an updated certificate or profile but do not have admin access, you can manually edit the repo.   Warning:  Manually editing your  match  repo can introduce unexpected behavior and is not recommended. Proceed with caution.    Instructions",
            "title": "Manually manage the fastlane match Repo"
        },
        {
            "location": "/advanced/other/#overview",
            "text": "Because:   fastlane  encrypts the repo, and  fastlane  doesn't support manual edits to the repo   it's necessary to manually decrypt, then modify, then encrypt, the repo to make any changes.   These instructions presuppose you already have  fastlane   match  configured correctly.",
            "title": "Overview"
        },
        {
            "location": "/advanced/other/#decryption-instructions",
            "text": "The easiest way to decrypt the repo is to use the  fastlane   match   Storage  and  Encryption  classes. You can do this from an interactive Ruby console:  $ bundle console\nirb(main):001:0>  Then, require  match  and set the appropriate parameters:  irb(main):001:0> require 'match'\nirb(main):002:0> git_url = 'https://github.com/fastlane/example-certificate-repo'\n=> \"https://github.com/fastlane/example-certificate-repo\"\nirb(main):003:0> shallow_clone = false\n=> false\nirb(main):004:0> ENV[\"MATCH_PASSWORD\"] = 'example-password'\n=> \"example-password\"\nirb(main):005:0> branch = 'master'\n=> \"master\"  Now create an instance of  Storage  and  Encryption . The  download  method on  Storage  will clone the repo and the  decrypt_files  method on  Encryption  will decrypt the repo for you. Assign the return values to  storage  and  encrypt , which we'll need later when we re-encrypt:  irb(main):006:0> storage = Match::Storage.for_mode(\"git\", { git_url: git_url, shallow_clone: shallow_clone, git_branch: branch, clone_branch_directly: false})\nirb(main):007:0> storage.download\nirb(main):008:0> encryption = Match::Encryption.for_storage_mode(\"git\", { git_url: git_url, working_directory: storage.working_directory})\nirb(main):009:0> encryption.decrypt_files\n[14:24:42]: \ud83d\udd13  Successfully decrypted certificates repo\nirb(main):010:0> storage.working_directory\n=> \"/var/folders/ql/4rgq9x7j51n_971xb332w9lc0000gn/T/d20181105-65220-1oalh6v\"  The above example checks out the  master  (which is the default branch that  match  uses). A common  match  pattern is to create a separate branch per each developer team (the name of the branch being the team identifier).  The directory beginning with  /var/folders  contains the decrypted git repo. Modify it as needed.  If you are updating a  .p12  file, ensure it's exported from the keychain without a password, since  match  doesn't support importing private keys with a password.   Warning:  Do  not  commit your changes. Allow  fastlane  to do that for you.   Once your changes are made, we'll need to encrypt the repo and push it.",
            "title": "\ud83d\udd13 Decryption Instructions"
        },
        {
            "location": "/advanced/other/#encryption-instructions",
            "text": "In the Ruby console, call  encryption.encrypt_files  and  storage.save_changes! . For example:  irb(main):010:0> encryption.encrypt_files\nirb(main):011:0> files_to_commit = Dir[File.join(storage.working_directory, \"**\", \"*.{cer,p12,mobileprovision}\")]\nirb(main):012:0> storage.save_changes!(files_to_commit: files_to_commit)  Your changes will be encrypted, committed, and pushed.   Note:  If your keychain doesn't include the encryption passcode, you may be prompted for it. If so, just enter the same password you used to decrypt it.",
            "title": "\ud83d\udd12 Encryption Instructions"
        },
        {
            "location": "/advanced/",
            "text": ".fastlane-setup {\n    border-left: .4rem solid #00b0ff;\n    border-bottom: .1rem solid rgba(0,176,255,.1);\n    background-color: rgba(0,176,255,.1);\n    padding: 15px;\n    margin-bottom: 20px;\n    font-weight: 200;\n  }\n  .fastlane-setup-wrapper {\n    background-color: rgba(0,176,255,.05);\n  }\n  .fastlane-setup-wrapper[open] {\n    padding-bottom: 1px;\n  }\n  .fastlane-setup-header {\n    font-size: 20px;\n    font-weight: 500;\n  }\n  .fastlane-setup-more-details {\n    font-size: 18px;\n    font-weight: 350;\n  }\n\n\n\n\n\n  \nNew to fastlane? Click here to open the installation & setup instructions first\n\n\n1) Install the latest Xcode command line tools\n\n\n\nxcode-select --install\n\n\n\n\n2) Install \nfastlane\n\n\n\n# Using RubyGems\nsudo gem install fastlane -NV\n\n# Alternatively using Homebrew\nbrew install fastlane\n\n\n\n\n3) Navigate to your project and run\n\n\n\nfastlane init\n\n\n\n\nMore Details\n\n\n\n\n\nAdvanced fastlane\n\n\nThis file is not used any more and its content was moved to subpages. Please follow the links to the content's new location.\n\n\n\n// Closure-wrapped for security.\n(function () {\n    var anchorMap = {\n        // templates\n        \"A\": \"/advanced/actions/\",\n        \"B\": \"/advanced/Appfile/\",\n        \"C\": \"/advanced/Fastfile/\",\n        \"D\": \"/advanced/lanes/\",\n        \"E\": \"/advanced/other/\",\n        \"F\": \"/advanced/fastlane/\",\n        // actual anchors\n        \"passing-parameters\": \"/advanced/lanes/\",\n        \"switching-lanes\": \"/advanced/lanes/\",\n        \"output-environment-variables\": \"/advanced/fastlane/\",\n        \"interacting-with-the-user\": \"/advanced/actions/\",\n        \"run-actions-directly\": \"/advanced/actions/\",\n        \"shell-values\": \"/advanced/actions/\",\n        \"priorities-of-parameters-and-options\": \"/advanced/fastlane/\",\n        \"importing-another-fastfile\": \"/advanced/Fastfile/\",\n        \"using-fastlane_require\": \"/advanced/Fastfile/\",\n        \"environment-variables\": \"/advanced/other/\",\n        \"lane-properties\": \"/advanced/lanes/\",\n        \"lane-context\": \"/advanced/lanes/\",\n        \"private-lanes\": \"/advanced/lanes/\",\n        \"load-own-actions-from-external-folder\": \"/advanced/Fastfile/\",\n        \"skip-update-check-when-launching-fastlane\": \"/advanced/fastlane/\",\n        \"hide-changelog-information-at-the-end-of-running-fastlane\": \"/advanced/fastlane/\",\n        \"adding-credentials\": \"/advanced/other/\",\n        \"control-configuration-by-lane-and-by-platform\": \"/advanced/lanes/\",\n        \"manually-manage-the-fastlane-match-repo\": \"/advanced/other/\",\n        \"directory-behavior\": \"/advanced/fastlane/\",\n        \"appfile\": \"/advanced/Appfile/\",\n        \"building-actions\": \"/advanced/actions/\",\n    }\n    /*\n    * Best practice for extracting hashes:\n    * https://stackoverflow.com/a/10076097/151365\n    */\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        /*\n        * Best practice for javascript redirects: \n        * https://stackoverflow.com/a/506004/151365\n        */\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();\n\n\n\n\nPassing Parameters\n\n\nThis content was moved and now lives \nhere\n.\n\n\nSwitching lanes\n\n\nThis content was moved and now lives \nhere\n.\n\n\nOutput environment variables\n\n\nThis content was moved and now lives \nhere\n.\n\n\nInteracting with the user\n\n\nThis content was moved and now lives \nhere\n.\n\n\nRun actions directly\n\n\nThis content was moved and now lives \nhere\n.\n\n\nShell values\n\n\nThis content was moved and now lives \nhere\n.\n\n\nPriorities of parameters and options\n\n\nThis content was moved and now lives \nhere\n.\n\n\nImporting another Fastfile\n\n\nThis content was moved and now lives \nhere\n.\n\n\nUsing fastlane_require\n\n\nThis content was moved and now lives \nhere\n.\n\n\nEnvironment Variables\n\n\nThis content was moved and now lives \nhere\n.\n\n\nLane Properties\n\n\nThis content was moved and now lives \nhere\n.\n\n\nLane Context\n\n\nThis content was moved and now lives \nhere\n.\n\n\nPrivate Lanes\n\n\nThis content was moved and now lives \nhere\n.\n\n\nLoad own actions from external folder\n\n\nThis content was moved and now lives \nhere\n.\n\n\nSkip update check when launching \nfastlane\n\n\nThis content was moved and now lives \nhere\n.\n\n\nHide changelog information at the end of running \nfastlane\n\n\nThis content was moved and now lives \nhere\n.\n\n\nAdding Credentials\n\n\nThis content was moved and now lives \nhere\n.\n\n\nControl configuration by lane and by platform\n\n\nThis content was moved and now lives \nhere\n.\n\n\nManually Manage the fastlane match Repo\n\n\nThis content was moved and now lives \nhere\n.\n\n\nDirectory behavior\n\n\nThis content was moved and now lives \nhere\n.\n\n\nAppfile\n\n\nThis content was moved and now lives \nhere\n.\n\n\nBuilding Actions\n\n\nThis content was moved and now lives \nhere\n.",
            "title": "Advanced"
        },
        {
            "location": "/advanced/#advanced-fastlane",
            "text": "This file is not used any more and its content was moved to subpages. Please follow the links to the content's new location.  \n// Closure-wrapped for security.\n(function () {\n    var anchorMap = {\n        // templates\n        \"A\": \"/advanced/actions/\",\n        \"B\": \"/advanced/Appfile/\",\n        \"C\": \"/advanced/Fastfile/\",\n        \"D\": \"/advanced/lanes/\",\n        \"E\": \"/advanced/other/\",\n        \"F\": \"/advanced/fastlane/\",\n        // actual anchors\n        \"passing-parameters\": \"/advanced/lanes/\",\n        \"switching-lanes\": \"/advanced/lanes/\",\n        \"output-environment-variables\": \"/advanced/fastlane/\",\n        \"interacting-with-the-user\": \"/advanced/actions/\",\n        \"run-actions-directly\": \"/advanced/actions/\",\n        \"shell-values\": \"/advanced/actions/\",\n        \"priorities-of-parameters-and-options\": \"/advanced/fastlane/\",\n        \"importing-another-fastfile\": \"/advanced/Fastfile/\",\n        \"using-fastlane_require\": \"/advanced/Fastfile/\",\n        \"environment-variables\": \"/advanced/other/\",\n        \"lane-properties\": \"/advanced/lanes/\",\n        \"lane-context\": \"/advanced/lanes/\",\n        \"private-lanes\": \"/advanced/lanes/\",\n        \"load-own-actions-from-external-folder\": \"/advanced/Fastfile/\",\n        \"skip-update-check-when-launching-fastlane\": \"/advanced/fastlane/\",\n        \"hide-changelog-information-at-the-end-of-running-fastlane\": \"/advanced/fastlane/\",\n        \"adding-credentials\": \"/advanced/other/\",\n        \"control-configuration-by-lane-and-by-platform\": \"/advanced/lanes/\",\n        \"manually-manage-the-fastlane-match-repo\": \"/advanced/other/\",\n        \"directory-behavior\": \"/advanced/fastlane/\",\n        \"appfile\": \"/advanced/Appfile/\",\n        \"building-actions\": \"/advanced/actions/\",\n    }\n    /*\n    * Best practice for extracting hashes:\n    * https://stackoverflow.com/a/10076097/151365\n    */\n    var hash = window.location.hash.substring(1);\n    if (hash) {\n        /*\n        * Best practice for javascript redirects: \n        * https://stackoverflow.com/a/506004/151365\n        */\n        if (anchorMap[hash]) {\n            link = anchorMap[hash] + '#' + hash;\n            window.location.replace(link);\n        }\n    }\n})();",
            "title": "Advanced fastlane"
        },
        {
            "location": "/advanced/#passing-parameters",
            "text": "This content was moved and now lives  here .",
            "title": "Passing Parameters"
        },
        {
            "location": "/advanced/#switching-lanes",
            "text": "This content was moved and now lives  here .",
            "title": "Switching lanes"
        },
        {
            "location": "/advanced/#output-environment-variables",
            "text": "This content was moved and now lives  here .",
            "title": "Output environment variables"
        },
        {
            "location": "/advanced/#interacting-with-the-user",
            "text": "This content was moved and now lives  here .",
            "title": "Interacting with the user"
        },
        {
            "location": "/advanced/#run-actions-directly",
            "text": "This content was moved and now lives  here .",
            "title": "Run actions directly"
        },
        {
            "location": "/advanced/#shell-values",
            "text": "This content was moved and now lives  here .",
            "title": "Shell values"
        },
        {
            "location": "/advanced/#priorities-of-parameters-and-options",
            "text": "This content was moved and now lives  here .",
            "title": "Priorities of parameters and options"
        },
        {
            "location": "/advanced/#importing-another-fastfile",
            "text": "This content was moved and now lives  here .",
            "title": "Importing another Fastfile"
        },
        {
            "location": "/advanced/#using-fastlane_require",
            "text": "This content was moved and now lives  here .",
            "title": "Using fastlane_require"
        },
        {
            "location": "/advanced/#environment-variables",
            "text": "This content was moved and now lives  here .",
            "title": "Environment Variables"
        },
        {
            "location": "/advanced/#lane-properties",
            "text": "This content was moved and now lives  here .",
            "title": "Lane Properties"
        },
        {
            "location": "/advanced/#lane-context",
            "text": "This content was moved and now lives  here .",
            "title": "Lane Context"
        },
        {
            "location": "/advanced/#private-lanes",
            "text": "This content was moved and now lives  here .",
            "title": "Private Lanes"
        },
        {
            "location": "/advanced/#load-own-actions-from-external-folder",
            "text": "This content was moved and now lives  here .",
            "title": "Load own actions from external folder"
        },
        {
            "location": "/advanced/#skip-update-check-when-launching-fastlane",
            "text": "This content was moved and now lives  here .",
            "title": "Skip update check when launching fastlane"
        },
        {
            "location": "/advanced/#hide-changelog-information-at-the-end-of-running-fastlane",
            "text": "This content was moved and now lives  here .",
            "title": "Hide changelog information at the end of running fastlane"
        },
        {
            "location": "/advanced/#adding-credentials",
            "text": "This content was moved and now lives  here .",
            "title": "Adding Credentials"
        },
        {
            "location": "/advanced/#control-configuration-by-lane-and-by-platform",
            "text": "This content was moved and now lives  here .",
            "title": "Control configuration by lane and by platform"
        },
        {
            "location": "/advanced/#manually-manage-the-fastlane-match-repo",
            "text": "This content was moved and now lives  here .",
            "title": "Manually Manage the fastlane match Repo"
        },
        {
            "location": "/advanced/#directory-behavior",
            "text": "This content was moved and now lives  here .",
            "title": "Directory behavior"
        },
        {
            "location": "/advanced/#appfile",
            "text": "This content was moved and now lives  here .",
            "title": "Appfile"
        },
        {
            "location": "/advanced/#building-actions",
            "text": "This content was moved and now lives  here .",
            "title": "Building Actions"
        }
    ]
}